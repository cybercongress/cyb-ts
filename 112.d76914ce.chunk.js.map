{"version":3,"file":"112.d76914ce.chunk.js","mappings":"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","sources":["webpack://cyb/./node_modules/@ipld/car/node_modules/varint/decode.js","webpack://cyb/./node_modules/@ipld/car/node_modules/varint/encode.js","webpack://cyb/./node_modules/@ipld/car/node_modules/varint/index.js","webpack://cyb/./node_modules/@ipld/car/node_modules/varint/length.js","webpack://cyb/./node_modules/ipaddr.js/lib/ipaddr.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/varint/decode.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/varint/encode.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/varint/index.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/varint/length.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/denque/index.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/minimal.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/index-minimal.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/reader.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/reader_buffer.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/roots.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/rpc.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/rpc/service.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/util/longbits.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/util/minimal.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/writer.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/protobufjs/src/writer_buffer.js","webpack://cyb/./node_modules/ipfs-core/node_modules/varint/decode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/varint/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/varint/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/varint/length.js","webpack://cyb/./node_modules/ipfs-repo-migrations/node_modules/varint/decode.js","webpack://cyb/./node_modules/ipfs-repo-migrations/node_modules/varint/encode.js","webpack://cyb/./node_modules/ipfs-repo-migrations/node_modules/varint/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/node_modules/varint/length.js","webpack://cyb/./node_modules/ipfs-utils/node_modules/browser-readablestream-to-it/index.js","webpack://cyb/./node_modules/ipfs-utils/node_modules/it-all/index.js","webpack://cyb/./node_modules/ipfs-utils/src/env.js","webpack://cyb/./node_modules/ipfs-utils/src/fetch.browser.js","webpack://cyb/./node_modules/ipfs-utils/src/files/url-source.js","webpack://cyb/./node_modules/ipfs-utils/src/http.js","webpack://cyb/./node_modules/ipfs-utils/src/http/error.js","webpack://cyb/./node_modules/ipfs-utils/src/http/fetch.browser.js","webpack://cyb/./node_modules/is-domain-name/index.js","webpack://cyb/./node_modules/is-electron/index.js","webpack://cyb/./node_modules/is-ipfs/node_modules/varint/decode.js","webpack://cyb/./node_modules/is-ipfs/node_modules/varint/encode.js","webpack://cyb/./node_modules/is-ipfs/node_modules/varint/index.js","webpack://cyb/./node_modules/is-ipfs/node_modules/varint/length.js","webpack://cyb/./node_modules/iso-constants/index.browser.js","webpack://cyb/./node_modules/iso-random-stream/src/random.browser.js","webpack://cyb/./node_modules/iso-url/index.js","webpack://cyb/./node_modules/iso-url/src/relative.js","webpack://cyb/./node_modules/iso-url/src/url-browser.js","webpack://cyb/./node_modules/iterable-ndjson/browser.js","webpack://cyb/./node_modules/iterable-ndjson/parse.browser.js","webpack://cyb/./node_modules/iterable-ndjson/stringify.js","webpack://cyb/./node_modules/just-debounce-it/index.mjs","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.cjs","webpack://cyb/./node_modules/@ipld/dag-cbor/src/index.js","webpack://cyb/./node_modules/@ipld/dag-json/src/index.js","webpack://cyb/./node_modules/@ipld/dag-pb/src/pb-decode.js","webpack://cyb/./node_modules/@ipld/dag-pb/src/pb-encode.js","webpack://cyb/./node_modules/@ipld/dag-pb/src/util.js","webpack://cyb/./node_modules/@ipld/dag-pb/src/index.js","webpack://cyb/./node_modules/ip-regex/index.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/it-foreach/dist/src/index.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/vendor/base-x.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/bytes.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/bases/base.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/bases/base32.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/bases/base58.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/vendor/varint.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/varint.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/hashes/digest.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/cid.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/hashes/hasher.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/hashes/sha2-browser.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/multiformats/src/bases/base64.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/@libp2p/logger/dist/src/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/message/entry.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/utils/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/utils/varint-encoder.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/message/message.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/message/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/wantlist/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/decision-engine/ledger.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/utils/sorted-map.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/decision-engine/req-queue.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/decision-engine/task-merger.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/decision-engine/index.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/it-map/dist/src/index.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/it-take/dist/src/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/network.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/notifications.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/stats/stat.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/stats/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/want-manager/msg-queue.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/want-manager/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/bitswap.js","webpack://cyb/./node_modules/ipfs-bitswap/node_modules/any-signal/dist/src/index.js","webpack://cyb/./node_modules/ipfs-bitswap/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-utils/node_modules/ipfs-unixfs/src/unixfs.js","webpack://cyb/./node_modules/ipfs-core-utils/node_modules/ipfs-unixfs/src/index.js","webpack://cyb/./node_modules/ipfs-core-utils/node_modules/it-all/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-utils/node_modules/it-peekable/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-utils/src/agent.browser.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-content.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-input-single.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/utils.js","webpack://cyb/./node_modules/ipfs-core-utils/src/multibases.js","webpack://cyb/./node_modules/ipfs-core-utils/src/multicodecs.js","webpack://cyb/./node_modules/ipfs-core-utils/src/multihashes.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-content.browser.js","webpack://cyb/./node_modules/ipfs-core-utils/src/mode-to-string.js","webpack://cyb/./node_modules/ipfs-core-utils/src/multipart-request.browser.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-input-multiple.browser.js","webpack://cyb/./node_modules/ipfs-core-utils/src/pins/normalise-input.js","webpack://cyb/./node_modules/ipfs-core-utils/src/to-url-string.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-unixfs/src/unixfs.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-unixfs/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/errors.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/ip.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/convert.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/codec.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/index.js","webpack://cyb/./node_modules/is-ipfs/node_modules/@multiformats/mafmt/dist/src/index.js","webpack://cyb/./node_modules/is-ipfs/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-utils/src/errors.js","webpack://cyb/./node_modules/ipfs-core-utils/src/with-timeout-option.js","webpack://cyb/./node_modules/ipfs-core-utils/src/to-cid-and-path.js","webpack://cyb/./node_modules/ipfs-core/src/utils.js","webpack://cyb/./node_modules/ipfs-core/src/utils/service.js","webpack://cyb/./node_modules/ipfs-core-config/src/dns.browser.js","webpack://cyb/./node_modules/ipfs-core-config/src/utils/tlru.js","webpack://cyb/./node_modules/ipfs-core/src/components/dns.js","webpack://cyb/./node_modules/ipfs-core/src/components/resolve.js","webpack://cyb/./node_modules/ipfs-repo/src/pin-types.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/ls.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/add-all.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/add.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/rm-all.js","webpack://cyb/./node_modules/ipfs-core/src/components/pin/rm.js","webpack://cyb/./node_modules/ipfs-core/node_modules/datastore-core/src/errors.js","webpack://cyb/./node_modules/ipns/dist/src/errors.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/utils.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/codec.js","webpack://cyb/./node_modules/ipns/dist/src/pb/ipns.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/codecs/enum.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/codecs/message.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/encode.js","webpack://cyb/./node_modules/ipns/node_modules/protons-runtime/dist/src/decode.js","webpack://cyb/./node_modules/ipns/dist/src/utils.js","webpack://cyb/./node_modules/ipns/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/publisher.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/republisher.js","webpack://cyb/./node_modules/ipns/dist/src/validator.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/resolver.js","webpack://cyb/./node_modules/ipfs-core/src/utils/tlru.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-all/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/datastore-core/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/datastore-core/src/base.js","webpack://cyb/./node_modules/ipfs-core/node_modules/datastore-core/src/tiered.js","webpack://cyb/./node_modules/ipns/dist/src/selector.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/routing/pubsub-datastore.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/routing/offline-datastore.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/routing/dht-datastore.js","webpack://cyb/./node_modules/ipfs-core/src/components/ipns.js","webpack://cyb/./node_modules/ipfs-core/src/ipns/routing/config.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/utils.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/publish.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/resolve.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/pubsub/utils.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/pubsub/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/pubsub/cancel.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/pubsub/state.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/pubsub/subs.js","webpack://cyb/./node_modules/ipfs-core/src/components/name/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/refs/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/refs/local.js","webpack://cyb/./node_modules/ipfs-core/src/components/bitswap/stat.js","webpack://cyb/./node_modules/ipfs-core/src/components/bitswap/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/bitswap/wantlist.js","webpack://cyb/./node_modules/ipfs-core/src/components/bitswap/wantlist-for-peer.js","webpack://cyb/./node_modules/ipfs-core/src/components/bitswap/unwant.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/ip.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/convert.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@multiformats/mafmt/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/utils.js","webpack://cyb/./node_modules/ipfs-core-config/src/config.browser.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/add.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/list.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/rm.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/clear.js","webpack://cyb/./node_modules/ipfs-core/src/components/bootstrap/reset.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-pipe/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/utils.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/get.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/put.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/rm.js","webpack://cyb/./node_modules/ipfs-core/src/components/block/stat.js","webpack://cyb/./node_modules/it-batch/dist/src/index.js","webpack://cyb/./node_modules/it-parallel-batch/dist/src/index.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/options.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/node_modules/ipfs-unixfs/src/unixfs.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/node_modules/ipfs-unixfs/src/index.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/utils/persist.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/dir.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/file/flat.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/node_modules/it-all/dist/src/index.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/file/balanced.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/file/trickle.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/file/index.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/chunker/rabin.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/validate-chunks.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dag-builder/index.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dir.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dir-flat.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/dir-sharded.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/flat-to-shard.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/utils/to-path-components.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/tree-builder.js","webpack://cyb/./node_modules/ipfs-unixfs-importer/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/add-all/utils.js","webpack://cyb/./node_modules/ipfs-core/src/components/add-all/index.js","webpack://cyb/./node_modules/ipfs-core-utils/src/files/normalise-input-multiple.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/node_modules/ipfs-unixfs/src/unixfs.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/node_modules/ipfs-unixfs/src/index.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/utils/find-cid-in-shard.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/utils/extract-data-from-block.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/utils/validate-offset-and-length.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/node_modules/it-pipe/dist/src/index.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/file.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/directory.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/index.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/raw.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/identity.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/resolvers/index.js","webpack://cyb/./node_modules/ipfs-unixfs-exporter/src/index.js","webpack://cyb/./node_modules/it-tar/dist/src/extract-headers.js","webpack://cyb/./node_modules/it-to-buffer/dist/src/index.js","webpack://cyb/./node_modules/it-tar/dist/src/pack-headers.js","webpack://cyb/./node_modules/it-tar/dist/src/pack.js","webpack://cyb/./node_modules/ipfs-core/src/components/root.js","webpack://cyb/./node_modules/ipfs-core/src/components/add.js","webpack://cyb/./node_modules/ipfs-core/src/components/cat.js","webpack://cyb/./node_modules/ipfs-core/src/components/get.js","webpack://cyb/./node_modules/ipfs-core/src/components/ls.js","webpack://cyb/./node_modules/ipfs-core/src/version.js","webpack://cyb/./node_modules/ipfs-core/src/components/id.js","webpack://cyb/./node_modules/just-safe-set/index.mjs","webpack://cyb/./node_modules/ipfs-core/src/components/config/profiles.js","webpack://cyb/./node_modules/ipfs-core/src/components/config/index.js","webpack://cyb/./node_modules/@ipld/car/src/encoder.js","webpack://cyb/./node_modules/@ipld/car/src/iterator-channel.js","webpack://cyb/./node_modules/@ipld/car/src/header-validator.js","webpack://cyb/./node_modules/@ipld/car/src/decoder-common.js","webpack://cyb/./node_modules/@ipld/car/src/decoder.js","webpack://cyb/./node_modules/@ipld/car/src/writer-browser.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/export.js","webpack://cyb/./node_modules/@ipld/car/src/iterator.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/import.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-peekable/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/get.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/resolve.js","webpack://cyb/./node_modules/ipfs-core/src/components/dag/put.js","webpack://cyb/./node_modules/ipfs-core-config/src/preload.browser.js","webpack://cyb/./node_modules/ipfs-core/src/preload.js","webpack://cyb/./node_modules/ipfs-core/src/mfs-preload.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/create-lock.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/to-path-components.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/stat.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/to-trail.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/persist.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/hamt-constants.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/dir-sharded.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/hamt-utils.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/add-link.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/update-tree.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/mkdir.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/create-node.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/cp.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/remove-link.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/rm.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/chmod.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/flush.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/mv.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/touch.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/read.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/write.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/ls.js","webpack://cyb/./node_modules/ipfs-core/src/components/files/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/gen.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/list.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/rm.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/rename.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/export.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/import.js","webpack://cyb/./node_modules/ipfs-core/src/components/key/info.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/get.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/links.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/put.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/patch/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/patch/add-link.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/patch/append-data.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/patch/rm-link.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/patch/set-data.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/data.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/new.js","webpack://cyb/./node_modules/ipfs-core/src/components/object/stat.js","webpack://cyb/./node_modules/ipfs-core/src/components/repo/gc.js","webpack://cyb/./node_modules/ipfs-core/src/components/repo/stat.js","webpack://cyb/./node_modules/ipfs-repo/src/constants.js","webpack://cyb/./node_modules/ipfs-core/src/components/repo/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/repo/version.js","webpack://cyb/./node_modules/ipfs-core/src/components/stats/bw.js","webpack://cyb/./node_modules/ipfs-core/src/components/stats/index.js","webpack://cyb/./node_modules/just-safe-get/index.mjs","webpack://cyb/./node_modules/it-length/dist/src/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-8/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-9/utils.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin-set.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-9/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/node_modules/datastore-core/src/errors.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/utils.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-10/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/proto-book.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/address-book.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/envelope.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer-record.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/migration-12/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/migrations/index.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/errors.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/repo/init.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/repo/version.js","webpack://cyb/./node_modules/ipfs-repo-migrations/src/index.js","webpack://cyb/./node_modules/ipfs-repo/src/errors.js","webpack://cyb/./node_modules/ipfs-repo/src/utils/level.js","webpack://cyb/./node_modules/ipfs-repo/src/version.js","webpack://cyb/./node_modules/ipfs-repo/src/config.js","webpack://cyb/./node_modules/ipfs-repo/src/spec.js","webpack://cyb/./node_modules/ipfs-repo/src/api-addr.js","webpack://cyb/./node_modules/ipfs-repo/src/idstore.js","webpack://cyb/./node_modules/ipfs-repo/src/locks/memory.js","webpack://cyb/./node_modules/ipfs-repo/src/default-options.js","webpack://cyb/./node_modules/ipfs-repo/src/default-datastore.js","webpack://cyb/./node_modules/ipfs-repo/src/utils/blockstore.js","webpack://cyb/./node_modules/ipfs-repo/src/utils/walk-dag.js","webpack://cyb/./node_modules/ipfs-repo/node_modules/quick-lru/index.js","webpack://cyb/./node_modules/ipfs-repo/src/pin-manager.js","webpack://cyb/./node_modules/ipfs-repo/src/pinned-blockstore.js","webpack://cyb/./node_modules/ipfs-repo/node_modules/it-pipe/dist/src/index.js","webpack://cyb/./node_modules/ipfs-repo/src/gc.js","webpack://cyb/./node_modules/ipfs-repo/node_modules/datastore-core/src/errors.js","webpack://cyb/./node_modules/ipfs-repo/src/index.js","webpack://cyb/./node_modules/ipfs-core-config/src/repo.browser.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/it-pipe/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/uint8-varint/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/it-length-prefixed/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/it-length-prefixed/dist/src/alloc.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/it-length-prefixed/dist/src/decode.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core-config/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js","webpack://cyb/./node_modules/ipfs-core-config/src/libp2p-pubsub-routers.browser.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/core.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/configure.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/mode-to-string.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/parse-mtime.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/to-url-search-params.js","webpack://cyb/./node_modules/ipfs-http-client/src/bitswap/wantlist.js","webpack://cyb/./node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js","webpack://cyb/./node_modules/ipfs-http-client/src/bitswap/stat.js","webpack://cyb/./node_modules/ipfs-http-client/src/bitswap/unwant.js","webpack://cyb/./node_modules/ipfs-http-client/src/bitswap/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/block/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/abort-signal.js","webpack://cyb/./node_modules/ipfs-http-client/src/block/put.js","webpack://cyb/./node_modules/ipfs-http-client/src/block/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/block/stat.js","webpack://cyb/./node_modules/ipfs-http-client/src/block/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/add.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/clear.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/list.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/reset.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/bootstrap/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/profiles/apply.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/object-to-camel.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/profiles/list.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/profiles/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/get-all.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/replace.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/set.js","webpack://cyb/./node_modules/ipfs-http-client/src/config/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/export.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/resolve.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/import.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/put.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/resolve.js","webpack://cyb/./node_modules/ipfs-http-client/src/dag/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/response-types.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/map-event.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/find-peer.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/find-provs.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/provide.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/put.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/query.js","webpack://cyb/./node_modules/ipfs-http-client/src/dht/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/diag/cmds.js","webpack://cyb/./node_modules/ipfs-http-client/src/diag/net.js","webpack://cyb/./node_modules/ipfs-http-client/src/diag/sys.js","webpack://cyb/./node_modules/ipfs-http-client/src/diag/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/chmod.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/cp.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/flush.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/object-to-camel-with-metadata.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/mkdir.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/mv.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/read.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/stat.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/touch.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/write.js","webpack://cyb/./node_modules/ipfs-http-client/src/files/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/export.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/gen.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/import.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/info.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/list.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/rename.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/key/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/log/level.js","webpack://cyb/./node_modules/ipfs-http-client/src/log/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/log/tail.js","webpack://cyb/./node_modules/ipfs-http-client/src/log/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/publish.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/resolve.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/pubsub/cancel.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/pubsub/state.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/pubsub/subs.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/pubsub/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/name/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/data.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/links.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/new.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/put.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/stat.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/patch/add-link.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/patch/append-data.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/patch/rm-link.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/patch/set-data.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/patch/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/object/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/add-all.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/add.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/rm-all.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/utils.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/add.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/rm-all.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/service/utils.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/service/add.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/service/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/service/rm.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/service/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/remote/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/pin/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/lib/http-rpc-wire-format.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/peers.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/publish.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/subscribe.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/unsubscribe.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js","webpack://cyb/./node_modules/ipfs-http-client/src/pubsub/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/refs/local.js","webpack://cyb/./node_modules/ipfs-http-client/src/refs/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/repo/gc.js","webpack://cyb/./node_modules/ipfs-http-client/src/repo/stat.js","webpack://cyb/./node_modules/ipfs-http-client/src/repo/version.js","webpack://cyb/./node_modules/ipfs-http-client/src/repo/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/stats/bw.js","webpack://cyb/./node_modules/ipfs-http-client/src/stats/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/addrs.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/connect.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/disconnect.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/local-addrs.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/peers.js","webpack://cyb/./node_modules/ipfs-http-client/src/swarm/index.js","webpack://cyb/./node_modules/ipfs-http-client/src/add-all.js","webpack://cyb/./node_modules/ipfs-http-client/src/add.js","webpack://cyb/./node_modules/ipfs-http-client/src/cat.js","webpack://cyb/./node_modules/ipfs-http-client/src/commands.js","webpack://cyb/./node_modules/ipfs-http-client/src/dns.js","webpack://cyb/./node_modules/ipfs-http-client/src/get-endpoint-config.js","webpack://cyb/./node_modules/ipfs-http-client/src/get.js","webpack://cyb/./node_modules/ipfs-http-client/src/id.js","webpack://cyb/./node_modules/ipfs-http-client/src/is-online.js","webpack://cyb/./node_modules/ipfs-http-client/src/ls.js","webpack://cyb/./node_modules/ipfs-http-client/src/mount.js","webpack://cyb/./node_modules/ipfs-http-client/src/ping.js","webpack://cyb/./node_modules/ipfs-http-client/src/resolve.js","webpack://cyb/./node_modules/ipfs-http-client/src/start.js","webpack://cyb/./node_modules/ipfs-http-client/src/stop.js","webpack://cyb/./node_modules/ipfs-http-client/src/version.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/errors.js","webpack://cyb/./node_modules/ipfs-core/node_modules/datastore-core/src/memory.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/content-routing/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/peer-routing.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/content-routing/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/address-manager/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/visibility-change-emitter.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/latency-monitor.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-collections/dist/src/util.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-collections/dist/src/map.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-collections/dist/src/set.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-collections/dist/src/list.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/get-peer.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/auto-dialler.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/decode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/pb/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/codecs/enum.js","webpack://cyb/./node_modules/ipfs-core/node_modules/protons-runtime/dist/src/codecs/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/multicodec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/circuit/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/uint8-varint/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-length-prefixed/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-length-prefixed/dist/src/alloc.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-length-prefixed/dist/src/decode.js","webpack://cyb/./node_modules/it-handshake/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/circuit/stream-handler.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/circuit/stop.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/circuit/hop.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/transport.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/listener.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/auto-relay.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/circuit/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/keychain/util.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/keychain/cms.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/keychain/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/transport-manager.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/multistream-select/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/multistream-select/dist/src/multistream.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/multistream-select/dist/src/select.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/multistream-select/dist/src/handle.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/registrar.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/upgrader.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/identify/pb/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/version.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/identify/consts.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/identify/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/fetch/pb/proto.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/fetch/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/fetch/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/ping/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/ping/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/nat-manager.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@achingbrain/nat-port-mapper/dist/src/browser.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/peer-record-updater.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/dht/dht-peer-routing.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/errors.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/address-book.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/key-book.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/metadata-book.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/proto-book.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/node_modules/protons-runtime/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/node_modules/protons-runtime/dist/src/decode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/node_modules/protons-runtime/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/node_modules/protons-runtime/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/pb/peer.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/node_modules/protons-runtime/dist/src/codecs/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/store.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/pb/tags.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/peer-store/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/dht/dht-content-routing.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/components.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/config.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/dht/dummy-dht.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/pubsub/dummy-pubsub.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/dialer/dial-request.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/connection-manager/dialer/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/libp2p.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/decode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/message/dht.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/codecs/enum.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/node_modules/protons-runtime/dist/src/codecs/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/message/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/query/events.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/network.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/providers.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/query/query-path.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/query/manager.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/rpc/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/topology-listener.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/query-self.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/kad-dht.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/dual-kad-dht.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/kad-dht/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/multiaddr/dist/src/ip.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/multiaddr/dist/src/convert.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/multiaddr/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/multiaddr/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/node_modules/@multiformats/mafmt/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/bootstrap/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/web-socket.browser.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/source.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/ready.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/sink.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/duplex.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/ws-url.js","webpack://cyb/./node_modules/ipfs-core/node_modules/it-ws/dist/src/client.js","webpack://cyb/./node_modules/ipfs-core/node_modules/p-timeout/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/dist/src/socket-to-conn.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/multiaddr/dist/src/ip.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/multiaddr/dist/src/convert.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/multiaddr/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/multiaddr/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/node_modules/@multiformats/mafmt/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/dist/src/listener.browser.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@libp2p/websockets/dist/src/filters.js","webpack://cyb/./node_modules/it-pb-stream/node_modules/uint8-varint/dist/src/index.js","webpack://cyb/./node_modules/it-pb-stream/node_modules/it-length-prefixed/dist/src/encode.js","webpack://cyb/./node_modules/it-pb-stream/node_modules/it-length-prefixed/dist/src/alloc.js","webpack://cyb/./node_modules/it-pb-stream/node_modules/it-length-prefixed/dist/src/decode.js","webpack://cyb/./node_modules/it-pb-stream/dist/src/index.js","webpack://cyb/./node_modules/it-pair/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/stablelib.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/node_modules/protons-runtime/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/node_modules/protons-runtime/dist/src/decode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/node_modules/protons-runtime/dist/src/encode.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/node_modules/protons-runtime/dist/src/codec.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/node_modules/protons-runtime/dist/src/codecs/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/utils.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/logger.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/noise.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js","webpack://cyb/./node_modules/it-pair/dist/src/duplex.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js","webpack://cyb/./node_modules/ipfs-core/node_modules/@chainsafe/libp2p-noise/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/libp2p.js","webpack://cyb/./node_modules/ipfs-core-config/src/libp2p.browser.js","webpack://cyb/./node_modules/ipfs-http-client/src/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/libp2p/dist/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/storage.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/utils/varint-encoder.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/wantlist/entry.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/message/message.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/wantlist/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/message/entry.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/utils/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/message/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/constants.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/want-manager/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/network.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/decision-engine/ledger.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/utils/sorted-map.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/decision-engine/req-queue.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/decision-engine/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/notifications.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/stats/stat.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/stats/index.js","webpack://cyb/./node_modules/ipfs-core/node_modules/blockstore-core/src/base.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/bitswap.js","webpack://cyb/./node_modules/ipfs-core/node_modules/blockstore-core/src/errors.js","webpack://cyb/./node_modules/ipfs-core/src/block-storage.js","webpack://cyb/./node_modules/ipfs-core/src/components/network.js","webpack://cyb/./node_modules/ipfs-core/node_modules/ipfs-bitswap/src/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/addrs.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/connect.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/disconnect.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/local-addrs.js","webpack://cyb/./node_modules/ipfs-core/src/components/swarm/peers.js","webpack://cyb/./node_modules/ipfs-core/src/components/ping.js","webpack://cyb/./node_modules/ipfs-core/src/components/dht.js","webpack://cyb/./node_modules/ipfs-core/src/components/pubsub.js","webpack://cyb/./node_modules/ipfs-core/src/components/index.js","webpack://cyb/./node_modules/ipfs-core/src/components/is-online.js","webpack://cyb/./node_modules/ipfs-core/src/components/start.js","webpack://cyb/./node_modules/ipfs-core/src/components/stop.js","webpack://cyb/./node_modules/ipfs-core/src/components/version.js","webpack://cyb/./node_modules/ipfs-core/src/index.js","webpack://cyb/./node_modules/is-loopback-addr/dist/src/index.js","webpack://cyb/./node_modules/is-network-error/index.js","webpack://cyb/./node_modules/it-batched-bytes/dist/src/index.js","webpack://cyb/./node_modules/it-drain/dist/src/index.js","webpack://cyb/./node_modules/it-filter/dist/src/index.js","webpack://cyb/./node_modules/it-first/dist/src/index.js","webpack://cyb/./node_modules/it-last/dist/src/index.js","webpack://cyb/./node_modules/it-byte-stream/node_modules/it-pushable/dist/src/fifo.js","webpack://cyb/./node_modules/it-byte-stream/node_modules/it-pushable/dist/src/index.js","webpack://cyb/./node_modules/it-byte-stream/dist/src/index.js","webpack://cyb/./node_modules/it-length-prefixed-stream/dist/src/index.js","webpack://cyb/./node_modules/it-length-prefixed/dist/src/utils.js","webpack://cyb/./node_modules/it-length-prefixed/dist/src/encode.js","webpack://cyb/./node_modules/it-length-prefixed/dist/src/decode.js","webpack://cyb/./node_modules/it-map/dist/src/index.js","webpack://cyb/./node_modules/it-merge/dist/src/index.js","webpack://cyb/./node_modules/it-parallel/dist/src/index.js","webpack://cyb/./node_modules/it-peekable/dist/src/index.js","webpack://cyb/./node_modules/it-pipe/node_modules/it-pushable/dist/src/fifo.js","webpack://cyb/./node_modules/it-pipe/node_modules/it-pushable/dist/src/index.js","webpack://cyb/./node_modules/it-pipe/node_modules/it-merge/dist/src/index.js","webpack://cyb/./node_modules/it-pipe/dist/src/index.js","webpack://cyb/./node_modules/it-protobuf-stream/dist/src/index.js","webpack://cyb/./node_modules/it-pushable/dist/src/fifo.js","webpack://cyb/./node_modules/it-pushable/dist/src/index.js","webpack://cyb/./node_modules/it-reader/dist/src/index.js","webpack://cyb/./node_modules/it-sort/dist/src/index.js","webpack://cyb/./node_modules/it-sort/node_modules/it-all/dist/src/index.js","webpack://cyb/./node_modules/it-take/dist/src/index.js","webpack://cyb/./node_modules/it-ws/dist/src/ready.js","webpack://cyb/./node_modules/it-ws/dist/src/sink.js","webpack://cyb/./node_modules/it-ws/dist/src/source.js","webpack://cyb/./node_modules/it-ws/dist/src/duplex.js","webpack://cyb/./node_modules/it-ws/dist/src/web-socket.browser.js","webpack://cyb/./node_modules/it-ws/dist/src/ws-url.js","webpack://cyb/./node_modules/it-ws/dist/src/client.js"],"sourcesContent":["module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","(function (root) {\n    'use strict';\n    // A list of regular expressions that match arbitrary IPv4 addresses,\n    // for which a number of weird notations exist.\n    // Note that an address like 0010.0xa5.1.1 is considered legal.\n    const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n    const ipv4Regexes = {\n        fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        longValue: new RegExp(`^${ipv4Part}$`, 'i')\n    };\n\n    // Regular Expression for checking Octal numbers\n    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n\n    const zoneIndex = '%[0-9a-z]{1,}';\n\n    // IPv6-matching regular expressions.\n    // For IPv6, the task is simpler: it is enough to match the colon-delimited\n    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n    // the end.\n    const ipv6Part = '(?:[0-9a-f]+::?)+';\n    const ipv6Regexes = {\n        zoneIndex: new RegExp(zoneIndex, 'i'),\n        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n    };\n\n    // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n    function expandIPv6 (string, parts) {\n        // More than one '::' means invalid adddress\n        if (string.indexOf('::') !== string.lastIndexOf('::')) {\n            return null;\n        }\n\n        let colonCount = 0;\n        let lastColon = -1;\n        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n        let replacement, replacementCount;\n\n        // Remove zone index and save it for later\n        if (zoneId) {\n            zoneId = zoneId.substring(1);\n            string = string.replace(/%.+$/, '');\n        }\n\n        // How many parts do we already have?\n        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n            colonCount++;\n        }\n\n        // 0::0 is two parts more than ::\n        if (string.substr(0, 2) === '::') {\n            colonCount--;\n        }\n\n        if (string.substr(-2, 2) === '::') {\n            colonCount--;\n        }\n\n        // The following loop would hang if colonCount > parts\n        if (colonCount > parts) {\n            return null;\n        }\n\n        // replacement = ':' + '0:' * (parts - colonCount)\n        replacementCount = parts - colonCount;\n        replacement = ':';\n        while (replacementCount--) {\n            replacement += '0:';\n        }\n\n        // Insert the missing zeroes\n        string = string.replace('::', replacement);\n\n        // Trim any garbage which may be hanging around if :: was at the edge in\n        // the source strin\n        if (string[0] === ':') {\n            string = string.slice(1);\n        }\n\n        if (string[string.length - 1] === ':') {\n            string = string.slice(0, -1);\n        }\n\n        parts = (function () {\n            const ref = string.split(':');\n            const results = [];\n\n            for (let i = 0; i < ref.length; i++) {\n                results.push(parseInt(ref[i], 16));\n            }\n\n            return results;\n        })();\n\n        return {\n            parts: parts,\n            zoneId: zoneId\n        };\n    }\n\n    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n    function matchCIDR (first, second, partSize, cidrBits) {\n        if (first.length !== second.length) {\n            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n        }\n\n        let part = 0;\n        let shift;\n\n        while (cidrBits > 0) {\n            shift = partSize - cidrBits;\n            if (shift < 0) {\n                shift = 0;\n            }\n\n            if (first[part] >> shift !== second[part] >> shift) {\n                return false;\n            }\n\n            cidrBits -= partSize;\n            part += 1;\n        }\n\n        return true;\n    }\n\n    function parseIntAuto (string) {\n        // Hexadedimal base 16 (0x#)\n        if (hexRegex.test(string)) {\n            return parseInt(string, 16);\n        }\n        // While octal representation is discouraged by ECMAScript 3\n        // and forbidden by ECMAScript 5, we silently allow it to\n        // work only if the rest of the string has numbers less than 8.\n        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n        if (octalRegex.test(string)) {\n            return parseInt(string, 8);\n        }\n            throw new Error(`ipaddr: cannot parse ${string} as octal`);\n        }\n        // Always include the base 10 radix!\n        return parseInt(string, 10);\n    }\n\n    function padPart (part, length) {\n        while (part.length < length) {\n            part = `0${part}`;\n        }\n\n        return part;\n    }\n\n    const ipaddr = {};\n\n    // An IPv4 address (RFC791).\n    ipaddr.IPv4 = (function () {\n        // Constructs a new IPv4 address from an array of four octets\n        // in network order (MSB first)\n        // Verifies the input.\n        function IPv4 (octets) {\n            if (octets.length !== 4) {\n                throw new Error('ipaddr: ipv4 octet count should be 4');\n            }\n\n            let i, octet;\n\n            for (i = 0; i < octets.length; i++) {\n                octet = octets[i];\n                if (!((0 <= octet && octet <= 255))) {\n                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n                }\n            }\n\n            this.octets = octets;\n        }\n\n        // Special IPv4 address ranges.\n        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n        IPv4.prototype.SpecialRanges = {\n            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n            // RFC3171\n            multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n            // RFC3927\n            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n            // RFC5735\n            loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n            // RFC6598\n            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n            // RFC1918\n            'private': [\n                [new IPv4([10, 0, 0, 0]), 8],\n                [new IPv4([172, 16, 0, 0]), 12],\n                [new IPv4([192, 168, 0, 0]), 16]\n            ],\n            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n            reserved: [\n                [new IPv4([192, 0, 0, 0]), 24],\n                [new IPv4([192, 0, 2, 0]), 24],\n                [new IPv4([192, 88, 99, 0]), 24],\n                [new IPv4([198, 51, 100, 0]), 24],\n                [new IPv4([203, 0, 113, 0]), 24],\n                [new IPv4([240, 0, 0, 0]), 4]\n            ]\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv4.prototype.kind = function () {\n            return 'ipv4';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv4.prototype.match = function (other, cidrRange) {\n            let ref;\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv4') {\n                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n            }\n\n            return matchCIDR(this.octets, other.octets, 8, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv4 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv4.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 8,\n                128: 7,\n                192: 6,\n                224: 5,\n                240: 4,\n                248: 3,\n                252: 2,\n                254: 1,\n                255: 0\n            };\n            let i, octet, zeros;\n\n            for (i = 3; i >= 0; i -= 1) {\n                octet = this.octets[i];\n                if (octet in zerotable) {\n                    zeros = zerotable[octet];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 8) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 32 - cidr;\n        };\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv4.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv4.prototype.toByteArray = function () {\n            return this.octets.slice(0);\n        };\n\n        // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n        IPv4.prototype.toIPv4MappedAddress = function () {\n            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n        };\n\n        // Symmetrical method strictly for aligning with the IPv6 methods.\n        IPv4.prototype.toNormalizedString = function () {\n            return this.toString();\n        };\n\n        // Returns the address in convenient, decimal-dotted format.\n        IPv4.prototype.toString = function () {\n            return this.octets.join('.');\n        };\n\n        return IPv4;\n    })();\n\n    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 4) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Checks if a given string is formatted like IPv4 address.\n    ipaddr.IPv4.isIPv4 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks if a given string is a valid IPv4 address.\n    ipaddr.IPv4.isValid = function (string) {\n        try {\n            new this(this.parser(string));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a full four-part IPv4 Address.\n    ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 4) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Tries to parse and validate a string with IPv4 address.\n    // Throws an error if it fails.\n    ipaddr.IPv4.parse = function (string) {\n        const parts = this.parser(string);\n\n        if (parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n        }\n\n        return new this(parts);\n    };\n\n    // Parses the string as an IPv4 Address with CIDR Notation.\n    ipaddr.IPv4.parseCIDR = function (string) {\n        let match;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            const maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 32) {\n                const parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n    };\n\n    // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n    // value representing last three octets; this corresponds to a class C\n    // address) are omitted due to classless nature of modern Internet.\n    ipaddr.IPv4.parser = function (string) {\n        let match, part, value;\n\n        // parseInt recognizes all that octal & hexadecimal weirdness for us\n        if ((match = string.match(ipv4Regexes.fourOctet))) {\n            return (function () {\n                const ref = match.slice(1, 6);\n                const results = [];\n\n                for (let i = 0; i < ref.length; i++) {\n                    part = ref[i];\n                    results.push(parseIntAuto(part));\n                }\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.longValue))) {\n            value = parseIntAuto(match[1]);\n            if (value > 0xffffffff || value < 0) {\n                throw new Error('ipaddr: address outside defined range');\n            }\n\n            return ((function () {\n                const results = [];\n                let shift;\n\n                for (shift = 0; shift <= 24; shift += 8) {\n                    results.push((value >> shift) & 0xff);\n                }\n\n                return results;\n            })()).reverse();\n        } else if ((match = string.match(ipv4Regexes.twoOctet))) {\n            return (function () {\n                const ref = match.slice(1, 4);\n                const results = [];\n\n                value = parseIntAuto(ref[1]);\n                if (value > 0xffffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push((value >> 16) & 0xff);\n                results.push((value >>  8) & 0xff);\n                results.push( value        & 0xff);\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.threeOctet))) {\n            return (function () {\n                const ref = match.slice(1, 5);\n                const results = [];\n\n                value = parseIntAuto(ref[2]);\n                if (value > 0xffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push(parseIntAuto(ref[1]));\n                results.push((value >> 8) & 0xff);\n                results.push( value       & 0xff);\n\n                return results;\n            })();\n        } else {\n            return null;\n        }\n    };\n\n    // A utility function to return subnet mask in IPv4 format given the prefix length\n    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 32) {\n            throw new Error('ipaddr: invalid IPv4 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 4) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // An IPv6 address (RFC2460)\n    ipaddr.IPv6 = (function () {\n        // Constructs an IPv6 address from an array of eight 16 - bit parts\n        // or sixteen 8 - bit parts in network order(MSB first).\n        // Throws an error if the input is invalid.\n        function IPv6 (parts, zoneId) {\n            let i, part;\n\n            if (parts.length === 16) {\n                this.parts = [];\n                for (i = 0; i <= 14; i += 2) {\n                    this.parts.push((parts[i] << 8) | parts[i + 1]);\n                }\n            } else if (parts.length === 8) {\n                this.parts = parts;\n            } else {\n                throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n            }\n\n            for (i = 0; i < this.parts.length; i++) {\n                part = this.parts[i];\n                if (!((0 <= part && part <= 0xffff))) {\n                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n                }\n            }\n\n            if (zoneId) {\n                this.zoneId = zoneId;\n            }\n        }\n\n        // Special IPv6 ranges\n        IPv6.prototype.SpecialRanges = {\n            // RFC4291, here and after\n            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n            // RFC6145\n            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n            // RFC6052\n            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n            // RFC3056\n            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n            // RFC6052, RFC6146\n            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n            // RFC4291\n            reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n        };\n\n        // Checks if this address is an IPv4-mapped IPv6 address.\n        IPv6.prototype.isIPv4MappedAddress = function () {\n            return this.range() === 'ipv4Mapped';\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv6.prototype.kind = function () {\n            return 'ipv6';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv6.prototype.match = function (other, cidrRange) {\n            let ref;\n\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv6') {\n                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n            }\n\n            return matchCIDR(this.parts, other.parts, 16, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv6 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv6.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 16,\n                32768: 15,\n                49152: 14,\n                57344: 13,\n                61440: 12,\n                63488: 11,\n                64512: 10,\n                65024: 9,\n                65280: 8,\n                65408: 7,\n                65472: 6,\n                65504: 5,\n                65520: 4,\n                65528: 3,\n                65532: 2,\n                65534: 1,\n                65535: 0\n            };\n            let part, zeros;\n\n            for (let i = 7; i >= 0; i -= 1) {\n                part = this.parts[i];\n                if (part in zerotable) {\n                    zeros = zerotable[part];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 16) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 128 - cidr;\n        };\n\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv6.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv6.prototype.toByteArray = function () {\n            let part;\n            const bytes = [];\n            const ref = this.parts;\n            for (let i = 0; i < ref.length; i++) {\n                part = ref[i];\n                bytes.push(part >> 8);\n                bytes.push(part & 0xff);\n            }\n\n            return bytes;\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:0db8:0008:0066:0000:0000:0000:0001\n        IPv6.prototype.toFixedLengthString = function () {\n            const addr = ((function () {\n                const results = [];\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(padPart(this.parts[i].toString(16), 4));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n        // Throws an error otherwise.\n        IPv6.prototype.toIPv4Address = function () {\n            if (!this.isIPv4MappedAddress()) {\n                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n            }\n\n            const ref = this.parts.slice(-2);\n            const high = ref[0];\n            const low = ref[1];\n\n            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:db8:8:66:0:0:0:1\n        //\n        // Deprecated: use toFixedLengthString() instead.\n        IPv6.prototype.toNormalizedString = function () {\n            const addr = ((function () {\n                const results = [];\n\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(this.parts[i].toString(16));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n        IPv6.prototype.toRFC5952String = function () {\n            const regex = /((^|:)(0(:|$)){2,})/g;\n            const string = this.toNormalizedString();\n            let bestMatchIndex = 0;\n            let bestMatchLength = -1;\n            let match;\n\n            while ((match = regex.exec(string))) {\n                if (match[0].length > bestMatchLength) {\n                    bestMatchIndex = match.index;\n                    bestMatchLength = match[0].length;\n                }\n            }\n\n            if (bestMatchLength < 0) {\n                return string;\n            }\n\n            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        //\n        // Deprecated: use toRFC5952String() instead.\n        IPv6.prototype.toString = function () {\n            // Replace the first sequence of 1 or more '0' parts with '::'\n            return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n        };\n\n        return IPv6;\n\n    })();\n\n    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 16) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Checks if a given string is formatted like IPv6 address.\n    ipaddr.IPv6.isIPv6 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks to see if string is a valid IPv6 Address\n    ipaddr.IPv6.isValid = function (string) {\n\n        // Since IPv6.isValid is always called first, this shortcut\n        // provides a substantial performance gain.\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            const addr = this.parser(string);\n            new this(addr.parts, addr.zoneId);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 16) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Tries to parse and validate a string with IPv6 address.\n    // Throws an error if it fails.\n    ipaddr.IPv6.parse = function (string) {\n        const addr = this.parser(string);\n\n        if (addr.parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n        }\n\n        return new this(addr.parts, addr.zoneId);\n    };\n\n    ipaddr.IPv6.parseCIDR = function (string) {\n        let maskLength, match, parsed;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 128) {\n                parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n    };\n\n    // Parse an IPv6 address.\n    ipaddr.IPv6.parser = function (string) {\n        let addr, i, match, octet, octets, zoneId;\n\n        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {\n            return this.parser(`::ffff:${match[1]}`);\n        }\n        if (ipv6Regexes.native.test(string)) {\n            return expandIPv6(string, 8);\n        }\n        if ((match = string.match(ipv6Regexes.transitional))) {\n            zoneId = match[6] || '';\n            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n            if (addr.parts) {\n                octets = [\n                    parseInt(match[2]),\n                    parseInt(match[3]),\n                    parseInt(match[4]),\n                    parseInt(match[5])\n                ];\n                for (i = 0; i < octets.length; i++) {\n                    octet = octets[i];\n                    if (!((0 <= octet && octet <= 255))) {\n                        return null;\n                    }\n                }\n\n                addr.parts.push(octets[0] << 8 | octets[1]);\n                addr.parts.push(octets[2] << 8 | octets[3]);\n                return {\n                    parts: addr.parts,\n                    zoneId: addr.zoneId\n                };\n            }\n        }\n\n        return null;\n    };\n\n    // A utility function to return subnet mask in IPv6 format given the prefix length\n    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 128) {\n            throw new Error('ipaddr: invalid IPv6 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 16) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n    ipaddr.fromByteArray = function (bytes) {\n        const length = bytes.length;\n\n        if (length === 4) {\n            return new ipaddr.IPv4(bytes);\n        } else if (length === 16) {\n            return new ipaddr.IPv6(bytes);\n        } else {\n            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n        }\n    };\n\n    // Checks if the address is valid IP address\n    ipaddr.isValid = function (string) {\n        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n    };\n\n\n    // Attempts to parse an IP Address, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parse = function (string) {\n        if (ipaddr.IPv6.isValid(string)) {\n            return ipaddr.IPv6.parse(string);\n        } else if (ipaddr.IPv4.isValid(string)) {\n            return ipaddr.IPv4.parse(string);\n        } else {\n            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n        }\n    };\n\n    // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parseCIDR = function (string) {\n        try {\n            return ipaddr.IPv6.parseCIDR(string);\n        } catch (e) {\n            try {\n                return ipaddr.IPv4.parseCIDR(string);\n            } catch (e2) {\n                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n            }\n        }\n    };\n\n    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n    ipaddr.process = function (string) {\n        const addr = this.parse(string);\n\n        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n            return addr.toIPv4Address();\n        } else {\n            return addr;\n        }\n    };\n\n    // An utility function to ease named range matching. See examples below.\n    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n    // on matching IPv4 addresses to IPv6 ranges or vice versa.\n    ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n        let i, rangeName, rangeSubnets, subnet;\n\n        if (defaultName === undefined || defaultName === null) {\n            defaultName = 'unicast';\n        }\n\n        for (rangeName in rangeList) {\n            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n                rangeSubnets = rangeList[rangeName];\n                // ECMA5 Array.isArray isn't available everywhere\n                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n                    rangeSubnets = [rangeSubnets];\n                }\n\n                for (i = 0; i < rangeSubnets.length; i++) {\n                    subnet = rangeSubnets[i];\n                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n                        return rangeName;\n                    }\n                }\n            }\n        }\n\n        return defaultName;\n    };\n\n    // Export for both the CommonJS and browser-like environment\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = ipaddr;\n\n    } else {\n        root.ipaddr = ipaddr;\n    }\n\n}(this));\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n\n  this._head = 0;\n  this._tail = 0;\n  this._capacity = options.capacity;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length <<= 1;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n","'use strict'\n\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nconst all = async (source) => {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nmodule.exports = all\n","'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","'use strict'\n\n// Adapted from RFC 2181 (See section 11)\n//\n// The RFC defines a Domain Name to be at most 255 chars including seperators\n// between labels.\n// Subdomains are labels plus a seperator. A label is a string starting and\n// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.\n//\n// We make some assumptions below that go beyond the RFC. We assume the TLD\n// to be at least 2 chars. The regex also allows domains longer than 255 chars,\n// but allows at most 127 subdomains, as assuming a lower-bound of one char per\n// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.\n/*\n(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)\n  [a-z0-9]\n  (?:\n    [a-z0-9\\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)\n    [a-z0-9]\n  )?\n  \\.                  // Label seperator\n){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars\n(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)\n  [a-z0-9]\n  [a-z0-9\\-]{0,61}\n  [a-z0-9]\n)\n\\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree\n */\nvar domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.){0,126}(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9]))\\.?$/i\n\n/**\n * Test whether a string is a valid domain name, optionally checking for a root dot as well\n * @param  {String}  domainName\n * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false\n * @return {Boolean}\n */\nmodule.exports = function isDomainName (domainName, rootDot) {\n  if (rootDot == null) rootDot = false\n\n  if (domainName.length < 2) return false\n  if (domainName.length > 255) return false\n\n  var lastChar = domainName[domainName.length - 1]\n  if (rootDot) {\n    if (lastChar !== '.') return false\n  } else {\n    if (lastChar === '.') return false\n  }\n\n  return domainNameRegex.test(domainName)\n}\n","// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","\n'use strict';\n\nmodule.exports = {\n    'RTLD_LAZY': 1,\n    'RTLD_NOW': 2,\n    'RTLD_GLOBAL': 256,\n    'RTLD_LOCAL': 0,\n    'RTLD_DEEPBIND': 8,\n    'E2BIG': 7,\n    'EACCES': 13,\n    'EADDRINUSE': 98,\n    'EADDRNOTAVAIL': 99,\n    'EAFNOSUPPORT': 97,\n    'EAGAIN': 11,\n    'EALREADY': 114,\n    'EBADF': 9,\n    'EBADMSG': 74,\n    'EBUSY': 16,\n    'ECANCELED': 125,\n    'ECHILD': 10,\n    'ECONNABORTED': 103,\n    'ECONNREFUSED': 111,\n    'ECONNRESET': 104,\n    'EDEADLK': 35,\n    'EDESTADDRREQ': 89,\n    'EDOM': 33,\n    'EDQUOT': 122,\n    'EEXIST': 17,\n    'EFAULT': 14,\n    'EFBIG': 27,\n    'EHOSTUNREACH': 113,\n    'EIDRM': 43,\n    'EILSEQ': 84,\n    'EINPROGRESS': 115,\n    'EINTR': 4,\n    'EINVAL': 22,\n    'EIO': 5,\n    'EISCONN': 106,\n    'EISDIR': 21,\n    'ELOOP': 40,\n    'EMFILE': 24,\n    'EMLINK': 31,\n    'EMSGSIZE': 90,\n    'EMULTIHOP': 72,\n    'ENAMETOOLONG': 36,\n    'ENETDOWN': 100,\n    'ENETRESET': 102,\n    'ENETUNREACH': 101,\n    'ENFILE': 23,\n    'ENOBUFS': 105,\n    'ENODATA': 61,\n    'ENODEV': 19,\n    'ENOENT': 2,\n    'ENOEXEC': 8,\n    'ENOLCK': 37,\n    'ENOLINK': 67,\n    'ENOMEM': 12,\n    'ENOMSG': 42,\n    'ENOPROTOOPT': 92,\n    'ENOSPC': 28,\n    'ENOSR': 63,\n    'ENOSTR': 60,\n    'ENOSYS': 38,\n    'ENOTCONN': 107,\n    'ENOTDIR': 20,\n    'ENOTEMPTY': 39,\n    'ENOTSOCK': 88,\n    'ENOTSUP': 95,\n    'ENOTTY': 25,\n    'ENXIO': 6,\n    'EOPNOTSUPP': 95,\n    'EOVERFLOW': 75,\n    'EPERM': 1,\n    'EPIPE': 32,\n    'EPROTO': 71,\n    'EPROTONOSUPPORT': 93,\n    'EPROTOTYPE': 91,\n    'ERANGE': 34,\n    'EROFS': 30,\n    'ESPIPE': 29,\n    'ESRCH': 3,\n    'ESTALE': 116,\n    'ETIME': 62,\n    'ETIMEDOUT': 110,\n    'ETXTBSY': 26,\n    'EWOULDBLOCK': 11,\n    'EXDEV': 18,\n    'PRIORITY_LOW': 19,\n    'PRIORITY_BELOW_NORMAL': 10,\n    'PRIORITY_NORMAL': 0,\n    'PRIORITY_ABOVE_NORMAL': -7,\n    'PRIORITY_HIGH': -14,\n    'PRIORITY_HIGHEST': -20,\n    'SIGHUP': 1,\n    'SIGINT': 2,\n    'SIGQUIT': 3,\n    'SIGILL': 4,\n    'SIGTRAP': 5,\n    'SIGABRT': 6,\n    'SIGIOT': 6,\n    'SIGBUS': 7,\n    'SIGFPE': 8,\n    'SIGKILL': 9,\n    'SIGUSR1': 10,\n    'SIGSEGV': 11,\n    'SIGUSR2': 12,\n    'SIGPIPE': 13,\n    'SIGALRM': 14,\n    'SIGTERM': 15,\n    'SIGCHLD': 17,\n    'SIGSTKFLT': 16,\n    'SIGCONT': 18,\n    'SIGSTOP': 19,\n    'SIGTSTP': 20,\n    'SIGTTIN': 21,\n    'SIGTTOU': 22,\n    'SIGURG': 23,\n    'SIGXCPU': 24,\n    'SIGXFSZ': 25,\n    'SIGVTALRM': 26,\n    'SIGPROF': 27,\n    'SIGWINCH': 28,\n    'SIGIO': 29,\n    'SIGPOLL': 29,\n    'SIGPWR': 30,\n    'SIGSYS': 31,\n    'UV_FS_SYMLINK_DIR': 1,\n    'UV_FS_SYMLINK_JUNCTION': 2,\n    'O_RDONLY': 0,\n    'O_WRONLY': 1,\n    'O_RDWR': 2,\n    'UV_DIRENT_UNKNOWN': 0,\n    'UV_DIRENT_FILE': 1,\n    'UV_DIRENT_DIR': 2,\n    'UV_DIRENT_LINK': 3,\n    'UV_DIRENT_FIFO': 4,\n    'UV_DIRENT_SOCKET': 5,\n    'UV_DIRENT_CHAR': 6,\n    'UV_DIRENT_BLOCK': 7,\n    'S_IFMT': 61440,\n    'S_IFREG': 32768,\n    'S_IFDIR': 16384,\n    'S_IFCHR': 8192,\n    'S_IFBLK': 24576,\n    'S_IFIFO': 4096,\n    'S_IFLNK': 40960,\n    'S_IFSOCK': 49152,\n    'O_CREAT': 64,\n    'O_EXCL': 128,\n    'UV_FS_O_FILEMAP': 0,\n    'O_NOCTTY': 256,\n    'O_TRUNC': 512,\n    'O_APPEND': 1024,\n    'O_DIRECTORY': 65536,\n    'O_NOATIME': 262144,\n    'O_NOFOLLOW': 131072,\n    'O_SYNC': 1052672,\n    'O_DSYNC': 4096,\n    'O_DIRECT': 16384,\n    'O_NONBLOCK': 2048,\n    'S_IRWXU': 448,\n    'S_IRUSR': 256,\n    'S_IWUSR': 128,\n    'S_IXUSR': 64,\n    'S_IRWXG': 56,\n    'S_IRGRP': 32,\n    'S_IWGRP': 16,\n    'S_IXGRP': 8,\n    'S_IRWXO': 7,\n    'S_IROTH': 4,\n    'S_IWOTH': 2,\n    'S_IXOTH': 1,\n    'F_OK': 0,\n    'R_OK': 4,\n    'W_OK': 2,\n    'X_OK': 1,\n    'UV_FS_COPYFILE_EXCL': 1,\n    'COPYFILE_EXCL': 1,\n    'UV_FS_COPYFILE_FICLONE': 2,\n    'COPYFILE_FICLONE': 2,\n    'UV_FS_COPYFILE_FICLONE_FORCE': 4,\n    'COPYFILE_FICLONE_FORCE': 4,\n    'OPENSSL_VERSION_NUMBER': 805306496,\n    'SSL_OP_ALL': 2147485776,\n    'SSL_OP_ALLOW_NO_DHE_KEX': 1024,\n    'SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION': 262144,\n    'SSL_OP_CIPHER_SERVER_PREFERENCE': 4194304,\n    'SSL_OP_CISCO_ANYCONNECT': 32768,\n    'SSL_OP_COOKIE_EXCHANGE': 8192,\n    'SSL_OP_CRYPTOPRO_TLSEXT_BUG': 2147483648,\n    'SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS': 2048,\n    'SSL_OP_EPHEMERAL_RSA': 0,\n    'SSL_OP_LEGACY_SERVER_CONNECT': 4,\n    'SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER': 0,\n    'SSL_OP_MICROSOFT_SESS_ID_BUG': 0,\n    'SSL_OP_MSIE_SSLV2_RSA_PADDING': 0,\n    'SSL_OP_NETSCAPE_CA_DN_BUG': 0,\n    'SSL_OP_NETSCAPE_CHALLENGE_BUG': 0,\n    'SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG': 0,\n    'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG': 0,\n    'SSL_OP_NO_COMPRESSION': 131072,\n    'SSL_OP_NO_ENCRYPT_THEN_MAC': 524288,\n    'SSL_OP_NO_QUERY_MTU': 4096,\n    'SSL_OP_NO_RENEGOTIATION': 1073741824,\n    'SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION': 65536,\n    'SSL_OP_NO_SSLv2': 0,\n    'SSL_OP_NO_SSLv3': 33554432,\n    'SSL_OP_NO_TICKET': 16384,\n    'SSL_OP_NO_TLSv1': 67108864,\n    'SSL_OP_NO_TLSv1_1': 268435456,\n    'SSL_OP_NO_TLSv1_2': 134217728,\n    'SSL_OP_NO_TLSv1_3': 536870912,\n    'SSL_OP_PKCS1_CHECK_1': 0,\n    'SSL_OP_PKCS1_CHECK_2': 0,\n    'SSL_OP_PRIORITIZE_CHACHA': 2097152,\n    'SSL_OP_SINGLE_DH_USE': 0,\n    'SSL_OP_SINGLE_ECDH_USE': 0,\n    'SSL_OP_SSLEAY_080_CLIENT_DH_BUG': 0,\n    'SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG': 0,\n    'SSL_OP_TLS_BLOCK_PADDING_BUG': 0,\n    'SSL_OP_TLS_D5_BUG': 0,\n    'SSL_OP_TLS_ROLLBACK_BUG': 8388608,\n    'ENGINE_METHOD_RSA': 1,\n    'ENGINE_METHOD_DSA': 2,\n    'ENGINE_METHOD_DH': 4,\n    'ENGINE_METHOD_RAND': 8,\n    'ENGINE_METHOD_EC': 2048,\n    'ENGINE_METHOD_CIPHERS': 64,\n    'ENGINE_METHOD_DIGESTS': 128,\n    'ENGINE_METHOD_PKEY_METHS': 512,\n    'ENGINE_METHOD_PKEY_ASN1_METHS': 1024,\n    'ENGINE_METHOD_ALL': 65535,\n    'ENGINE_METHOD_NONE': 0,\n    'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n    'DH_CHECK_P_NOT_PRIME': 1,\n    'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n    'DH_NOT_SUITABLE_GENERATOR': 8,\n    'ALPN_ENABLED': 1,\n    'RSA_PKCS1_PADDING': 1,\n    'RSA_NO_PADDING': 3,\n    'RSA_PKCS1_OAEP_PADDING': 4,\n    'RSA_X931_PADDING': 5,\n    'RSA_PKCS1_PSS_PADDING': 6,\n    'RSA_PSS_SALTLEN_DIGEST': -1,\n    'RSA_PSS_SALTLEN_MAX_SIGN': -2,\n    'RSA_PSS_SALTLEN_AUTO': -2,\n    'defaultCoreCipherList': 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',\n    'TLS1_VERSION': 769,\n    'TLS1_1_VERSION': 770,\n    'TLS1_2_VERSION': 771,\n    'TLS1_3_VERSION': 772,\n    'POINT_CONVERSION_COMPRESSED': 2,\n    'POINT_CONVERSION_UNCOMPRESSED': 4,\n    'POINT_CONVERSION_HYBRID': 6,\n    'defaultCipherList': 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA'\n};\n\n","'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536\n\n/**\n * @param {number} size\n */\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size)\n  let generated = 0\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + (size - generated))\n          )\n          generated += size - generated\n        } else {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + MAX_BYTES)\n          )\n          generated += MAX_BYTES\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  return bytes\n}\n\nmodule.exports = randomBytes\n","'use strict'\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url')\nconst relative = require('./src/relative')\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n}\n","'use strict'\n\nconst { URLWithLegacySupport, format } = require('./url')\n\n/**\n * @param {string | undefined} url\n * @param {any} [location]\n * @param {any} [protocolMap]\n * @param {any} [defaultProtocol]\n */\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol\n    ? location.protocol.replace(':', '')\n    : 'http'\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\n  let urlParsed\n\n  try {\n    urlParsed = new URLWithLegacySupport(url)\n  } catch (err) {\n    urlParsed = {}\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  })\n\n  return new URLWithLegacySupport(url, format(base)).toString()\n}\n","'use strict'\n\nconst isReactNative =\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative'\n\nfunction getDefaultBase () {\n  if (isReactNative) {\n    return 'http://localhost'\n  }\n  // in some environments i.e. cloudflare workers location is not available\n  if (!self.location) {\n    return ''\n  }\n\n  return self.location.protocol + '//' + self.location.host\n}\n\nconst URL = self.URL\nconst defaultBase = getDefaultBase()\n\nclass URLWithLegacySupport {\n  constructor (url = '', base = defaultBase) {\n    this.super = new URL(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  get hash () {\n    return this.super.hash\n  }\n\n  get host () {\n    return this.super.host\n  }\n\n  get hostname () {\n    return this.super.hostname\n  }\n\n  get href () {\n    return this.super.href\n  }\n\n  get origin () {\n    return this.super.origin\n  }\n\n  get password () {\n    return this.super.password\n  }\n\n  get pathname () {\n    return this.super.pathname\n  }\n\n  get port () {\n    return this.super.port\n  }\n\n  get protocol () {\n    return this.super.protocol\n  }\n\n  get search () {\n    return this.super.search\n  }\n\n  get searchParams () {\n    return this.super.searchParams\n  }\n\n  get username () {\n    return this.super.username\n  }\n\n  set hash (hash) {\n    this.super.hash = hash\n  }\n\n  set host (host) {\n    this.super.host = host\n  }\n\n  set hostname (hostname) {\n    this.super.hostname = hostname\n  }\n\n  set href (href) {\n    this.super.href = href\n  }\n\n  set password (password) {\n    this.super.password = password\n  }\n\n  set pathname (pathname) {\n    this.super.pathname = pathname\n  }\n\n  set port (port) {\n    this.super.port = port\n  }\n\n  set protocol (protocol) {\n    this.super.protocol = protocol\n  }\n\n  set search (search) {\n    this.super.search = search\n  }\n\n  set username (username) {\n    this.super.username = username\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL (o) {\n    return URL.createObjectURL(o)\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL (o) {\n    URL.revokeObjectURL(o)\n  }\n\n  toJSON () {\n    return this.super.toJSON()\n  }\n\n  toString () {\n    return this.super.toString()\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format (obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj)\n\n    return url.toString()\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass =\n            // @ts-ignore its not supported in node but we normalise\n            obj.username && obj.password\n              // @ts-ignore its not supported in node but we normalise\n              ? `${obj.username}:${obj.password}@`\n              : ''\n    const auth = obj.auth ? obj.auth + '@' : ''\n    const port = obj.port ? ':' + obj.port : ''\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\n    const host = obj.host || ''\n    const hostname = obj.hostname || ''\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\n    const hash = obj.hash || ''\n    const pathname = obj.pathname || ''\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search\n\n    return `${protocol}${userPass || auth}${\n            host || hostname + port\n        }${path}${hash}`\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n}\n","module.exports = require('./parse.browser')\nmodule.exports.parse = require('./parse.browser')\nmodule.exports.stringify = require('./stringify')\n","/* eslint-env browser */\n\nmodule.exports = source => (async function * () {\n  const matcher = /\\r?\\n/\n  const decoder = new TextDecoder('utf8')\n  let buffer = ''\n  for await (let chunk of source) {\n    if (typeof chunk === 'string') {\n      chunk = new TextEncoder().encode(chunk)\n    }\n    buffer += decoder.decode(chunk, { stream: true })\n    const parts = buffer.split(matcher)\n    buffer = parts.pop()\n    for (let i = 0; i < parts.length; i++) yield JSON.parse(parts[i])\n  }\n  buffer += decoder.decode()\n  if (buffer) yield JSON.parse(buffer)\n})()\n","module.exports = source => (async function * () {\n  for await (const obj of source) {\n    yield JSON.stringify(obj) + '\\n'\n  }\n})()\n","var functionDebounce = debounce;\n\nfunction debounce(fn, wait, callFirst) {\n  var timeout = null;\n  var debouncedFn = null;\n\n  var clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n\n      debouncedFn = null;\n      timeout = null;\n    }\n  };\n\n  var flush = function() {\n    var call = debouncedFn;\n    clear();\n\n    if (call) {\n      call();\n    }\n  };\n\n  var debounceWrapper = function() {\n    if (!wait) {\n      return fn.apply(this, arguments);\n    }\n\n    var context = this;\n    var args = arguments;\n    var callNow = callFirst && !timeout;\n    clear();\n\n    debouncedFn = function() {\n      fn.apply(context, args);\n    };\n\n    timeout = setTimeout(function() {\n      timeout = null;\n\n      if (!callNow) {\n        var call = debouncedFn;\n        debouncedFn = null;\n\n        return call();\n      }\n    }, wait);\n\n    if (callNow) {\n      return debouncedFn();\n    }\n  };\n\n  debounceWrapper.cancel = clear;\n  debounceWrapper.flush = flush;\n\n  return debounceWrapper;\n}\n\nexport {functionDebounce as default};\n","// @ts-nocheck\n/*eslint-disable*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n    $root.RPC = (function() {\n\n        /**\n         * Properties of a RPC.\n         * @exports IRPC\n         * @interface IRPC\n         * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n         * @property {Array.<RPC.IMessage>|null} [messages] RPC messages\n         * @property {RPC.IControlMessage|null} [control] RPC control\n         */\n\n        /**\n         * Constructs a new RPC.\n         * @exports RPC\n         * @classdesc Represents a RPC.\n         * @implements IRPC\n         * @constructor\n         * @param {IRPC=} [p] Properties to set\n         */\n        function RPC(p) {\n            this.subscriptions = [];\n            this.messages = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * RPC subscriptions.\n         * @member {Array.<RPC.ISubOpts>} subscriptions\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.subscriptions = $util.emptyArray;\n\n        /**\n         * RPC messages.\n         * @member {Array.<RPC.IMessage>} messages\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.messages = $util.emptyArray;\n\n        /**\n         * RPC control.\n         * @member {RPC.IControlMessage|null|undefined} control\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.control = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * RPC _control.\n         * @member {\"control\"|undefined} _control\n         * @memberof RPC\n         * @instance\n         */\n        Object.defineProperty(RPC.prototype, \"_control\", {\n            get: $util.oneOfGetter($oneOfFields = [\"control\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n         * @function encode\n         * @memberof RPC\n         * @static\n         * @param {IRPC} m RPC message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RPC.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.subscriptions != null && m.subscriptions.length) {\n                for (var i = 0; i < m.subscriptions.length; ++i)\n                    $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.messages != null && m.messages.length) {\n                for (var i = 0; i < m.messages.length; ++i)\n                    $root.RPC.Message.encode(m.messages[i], w.uint32(18).fork()).ldelim();\n            }\n            if (m.control != null && Object.hasOwnProperty.call(m, \"control\"))\n                $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a RPC message from the specified reader or buffer.\n         * @function decode\n         * @memberof RPC\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {RPC} RPC\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RPC.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.subscriptions && m.subscriptions.length))\n                        m.subscriptions = [];\n                    m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    if (!(m.messages && m.messages.length))\n                        m.messages = [];\n                    m.messages.push($root.RPC.Message.decode(r, r.uint32()));\n                    break;\n                case 3:\n                    m.control = $root.RPC.ControlMessage.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof RPC\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {RPC} RPC\n         */\n        RPC.fromObject = function fromObject(d) {\n            if (d instanceof $root.RPC)\n                return d;\n            var m = new $root.RPC();\n            if (d.subscriptions) {\n                if (!Array.isArray(d.subscriptions))\n                    throw TypeError(\".RPC.subscriptions: array expected\");\n                m.subscriptions = [];\n                for (var i = 0; i < d.subscriptions.length; ++i) {\n                    if (typeof d.subscriptions[i] !== \"object\")\n                        throw TypeError(\".RPC.subscriptions: object expected\");\n                    m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n                }\n            }\n            if (d.messages) {\n                if (!Array.isArray(d.messages))\n                    throw TypeError(\".RPC.messages: array expected\");\n                m.messages = [];\n                for (var i = 0; i < d.messages.length; ++i) {\n                    if (typeof d.messages[i] !== \"object\")\n                        throw TypeError(\".RPC.messages: object expected\");\n                    m.messages[i] = $root.RPC.Message.fromObject(d.messages[i]);\n                }\n            }\n            if (d.control != null) {\n                if (typeof d.control !== \"object\")\n                    throw TypeError(\".RPC.control: object expected\");\n                m.control = $root.RPC.ControlMessage.fromObject(d.control);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a RPC message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof RPC\n         * @static\n         * @param {RPC} m RPC\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RPC.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.subscriptions = [];\n                d.messages = [];\n            }\n            if (m.subscriptions && m.subscriptions.length) {\n                d.subscriptions = [];\n                for (var j = 0; j < m.subscriptions.length; ++j) {\n                    d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n                }\n            }\n            if (m.messages && m.messages.length) {\n                d.messages = [];\n                for (var j = 0; j < m.messages.length; ++j) {\n                    d.messages[j] = $root.RPC.Message.toObject(m.messages[j], o);\n                }\n            }\n            if (m.control != null && m.hasOwnProperty(\"control\")) {\n                d.control = $root.RPC.ControlMessage.toObject(m.control, o);\n                if (o.oneofs)\n                    d._control = \"control\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this RPC to JSON.\n         * @function toJSON\n         * @memberof RPC\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RPC.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        RPC.SubOpts = (function() {\n\n            /**\n             * Properties of a SubOpts.\n             * @memberof RPC\n             * @interface ISubOpts\n             * @property {boolean|null} [subscribe] SubOpts subscribe\n             * @property {string|null} [topic] SubOpts topic\n             */\n\n            /**\n             * Constructs a new SubOpts.\n             * @memberof RPC\n             * @classdesc Represents a SubOpts.\n             * @implements ISubOpts\n             * @constructor\n             * @param {RPC.ISubOpts=} [p] Properties to set\n             */\n            function SubOpts(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * SubOpts subscribe.\n             * @member {boolean|null|undefined} subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.subscribe = null;\n\n            /**\n             * SubOpts topic.\n             * @member {string|null|undefined} topic\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.topic = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * SubOpts _subscribe.\n             * @member {\"subscribe\"|undefined} _subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n                get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * SubOpts _topic.\n             * @member {\"topic\"|undefined} _topic\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_topic\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topic\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SubOpts.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\"))\n                    w.uint32(8).bool(m.subscribe);\n                if (m.topic != null && Object.hasOwnProperty.call(m, \"topic\"))\n                    w.uint32(18).string(m.topic);\n                return w;\n            };\n\n            /**\n             * Decodes a SubOpts message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.SubOpts} SubOpts\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SubOpts.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.subscribe = r.bool();\n                        break;\n                    case 2:\n                        m.topic = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.SubOpts} SubOpts\n             */\n            SubOpts.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.SubOpts)\n                    return d;\n                var m = new $root.RPC.SubOpts();\n                if (d.subscribe != null) {\n                    m.subscribe = Boolean(d.subscribe);\n                }\n                if (d.topic != null) {\n                    m.topic = String(d.topic);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.SubOpts} m SubOpts\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SubOpts.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n                    d.subscribe = m.subscribe;\n                    if (o.oneofs)\n                        d._subscribe = \"subscribe\";\n                }\n                if (m.topic != null && m.hasOwnProperty(\"topic\")) {\n                    d.topic = m.topic;\n                    if (o.oneofs)\n                        d._topic = \"topic\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this SubOpts to JSON.\n             * @function toJSON\n             * @memberof RPC.SubOpts\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SubOpts.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SubOpts;\n        })();\n\n        RPC.Message = (function() {\n\n            /**\n             * Properties of a Message.\n             * @memberof RPC\n             * @interface IMessage\n             * @property {Uint8Array|null} [from] Message from\n             * @property {Uint8Array|null} [data] Message data\n             * @property {Uint8Array|null} [seqno] Message seqno\n             * @property {string} topic Message topic\n             * @property {Uint8Array|null} [signature] Message signature\n             * @property {Uint8Array|null} [key] Message key\n             */\n\n            /**\n             * Constructs a new Message.\n             * @memberof RPC\n             * @classdesc Represents a Message.\n             * @implements IMessage\n             * @constructor\n             * @param {RPC.IMessage=} [p] Properties to set\n             */\n            function Message(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Message from.\n             * @member {Uint8Array|null|undefined} from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.from = null;\n\n            /**\n             * Message data.\n             * @member {Uint8Array|null|undefined} data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.data = null;\n\n            /**\n             * Message seqno.\n             * @member {Uint8Array|null|undefined} seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.seqno = null;\n\n            /**\n             * Message topic.\n             * @member {string} topic\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.topic = \"\";\n\n            /**\n             * Message signature.\n             * @member {Uint8Array|null|undefined} signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.signature = null;\n\n            /**\n             * Message key.\n             * @member {Uint8Array|null|undefined} key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.key = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Message _from.\n             * @member {\"from\"|undefined} _from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_from\", {\n                get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _data.\n             * @member {\"data\"|undefined} _data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_data\", {\n                get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _seqno.\n             * @member {\"seqno\"|undefined} _seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_seqno\", {\n                get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _signature.\n             * @member {\"signature\"|undefined} _signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_signature\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _key.\n             * @member {\"key\"|undefined} _key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_key\", {\n                get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.IMessage} m Message message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Message.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.from != null && Object.hasOwnProperty.call(m, \"from\"))\n                    w.uint32(10).bytes(m.from);\n                if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                    w.uint32(18).bytes(m.data);\n                if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\"))\n                    w.uint32(26).bytes(m.seqno);\n                w.uint32(34).string(m.topic);\n                if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n                    w.uint32(42).bytes(m.signature);\n                if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                    w.uint32(50).bytes(m.key);\n                return w;\n            };\n\n            /**\n             * Decodes a Message message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.Message\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.Message} Message\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Message.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.from = r.bytes();\n                        break;\n                    case 2:\n                        m.data = r.bytes();\n                        break;\n                    case 3:\n                        m.seqno = r.bytes();\n                        break;\n                    case 4:\n                        m.topic = r.string();\n                        break;\n                    case 5:\n                        m.signature = r.bytes();\n                        break;\n                    case 6:\n                        m.key = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                if (!m.hasOwnProperty(\"topic\"))\n                    throw $util.ProtocolError(\"missing required 'topic'\", { instance: m });\n                return m;\n            };\n\n            /**\n             * Creates a Message message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.Message\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.Message} Message\n             */\n            Message.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.Message)\n                    return d;\n                var m = new $root.RPC.Message();\n                if (d.from != null) {\n                    if (typeof d.from === \"string\")\n                        $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);\n                    else if (d.from.length)\n                        m.from = d.from;\n                }\n                if (d.data != null) {\n                    if (typeof d.data === \"string\")\n                        $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                    else if (d.data.length)\n                        m.data = d.data;\n                }\n                if (d.seqno != null) {\n                    if (typeof d.seqno === \"string\")\n                        $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);\n                    else if (d.seqno.length)\n                        m.seqno = d.seqno;\n                }\n                if (d.topic != null) {\n                    m.topic = String(d.topic);\n                }\n                if (d.signature != null) {\n                    if (typeof d.signature === \"string\")\n                        $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n                    else if (d.signature.length)\n                        m.signature = d.signature;\n                }\n                if (d.key != null) {\n                    if (typeof d.key === \"string\")\n                        $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);\n                    else if (d.key.length)\n                        m.key = d.key;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Message message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.Message} m Message\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Message.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.topic = \"\";\n                }\n                if (m.from != null && m.hasOwnProperty(\"from\")) {\n                    d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n                    if (o.oneofs)\n                        d._from = \"from\";\n                }\n                if (m.data != null && m.hasOwnProperty(\"data\")) {\n                    d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n                    if (o.oneofs)\n                        d._data = \"data\";\n                }\n                if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n                    d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n                    if (o.oneofs)\n                        d._seqno = \"seqno\";\n                }\n                if (m.topic != null && m.hasOwnProperty(\"topic\")) {\n                    d.topic = m.topic;\n                }\n                if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n                    d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n                    if (o.oneofs)\n                        d._signature = \"signature\";\n                }\n                if (m.key != null && m.hasOwnProperty(\"key\")) {\n                    d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n                    if (o.oneofs)\n                        d._key = \"key\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Message to JSON.\n             * @function toJSON\n             * @memberof RPC.Message\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Message.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Message;\n        })();\n\n        RPC.ControlMessage = (function() {\n\n            /**\n             * Properties of a ControlMessage.\n             * @memberof RPC\n             * @interface IControlMessage\n             * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave\n             * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant\n             * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft\n             * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune\n             */\n\n            /**\n             * Constructs a new ControlMessage.\n             * @memberof RPC\n             * @classdesc Represents a ControlMessage.\n             * @implements IControlMessage\n             * @constructor\n             * @param {RPC.IControlMessage=} [p] Properties to set\n             */\n            function ControlMessage(p) {\n                this.ihave = [];\n                this.iwant = [];\n                this.graft = [];\n                this.prune = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlMessage ihave.\n             * @member {Array.<RPC.IControlIHave>} ihave\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.ihave = $util.emptyArray;\n\n            /**\n             * ControlMessage iwant.\n             * @member {Array.<RPC.IControlIWant>} iwant\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.iwant = $util.emptyArray;\n\n            /**\n             * ControlMessage graft.\n             * @member {Array.<RPC.IControlGraft>} graft\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.graft = $util.emptyArray;\n\n            /**\n             * ControlMessage prune.\n             * @member {Array.<RPC.IControlPrune>} prune\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.prune = $util.emptyArray;\n\n            /**\n             * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlMessage.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.ihave != null && m.ihave.length) {\n                    for (var i = 0; i < m.ihave.length; ++i)\n                        $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();\n                }\n                if (m.iwant != null && m.iwant.length) {\n                    for (var i = 0; i < m.iwant.length; ++i)\n                        $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.graft != null && m.graft.length) {\n                    for (var i = 0; i < m.graft.length; ++i)\n                        $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();\n                }\n                if (m.prune != null && m.prune.length) {\n                    for (var i = 0; i < m.prune.length; ++i)\n                        $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlMessage message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlMessage} ControlMessage\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlMessage.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlMessage();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.ihave && m.ihave.length))\n                            m.ihave = [];\n                        m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));\n                        break;\n                    case 2:\n                        if (!(m.iwant && m.iwant.length))\n                            m.iwant = [];\n                        m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        if (!(m.graft && m.graft.length))\n                            m.graft = [];\n                        m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));\n                        break;\n                    case 4:\n                        if (!(m.prune && m.prune.length))\n                            m.prune = [];\n                        m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlMessage} ControlMessage\n             */\n            ControlMessage.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlMessage)\n                    return d;\n                var m = new $root.RPC.ControlMessage();\n                if (d.ihave) {\n                    if (!Array.isArray(d.ihave))\n                        throw TypeError(\".RPC.ControlMessage.ihave: array expected\");\n                    m.ihave = [];\n                    for (var i = 0; i < d.ihave.length; ++i) {\n                        if (typeof d.ihave[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.ihave: object expected\");\n                        m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);\n                    }\n                }\n                if (d.iwant) {\n                    if (!Array.isArray(d.iwant))\n                        throw TypeError(\".RPC.ControlMessage.iwant: array expected\");\n                    m.iwant = [];\n                    for (var i = 0; i < d.iwant.length; ++i) {\n                        if (typeof d.iwant[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.iwant: object expected\");\n                        m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);\n                    }\n                }\n                if (d.graft) {\n                    if (!Array.isArray(d.graft))\n                        throw TypeError(\".RPC.ControlMessage.graft: array expected\");\n                    m.graft = [];\n                    for (var i = 0; i < d.graft.length; ++i) {\n                        if (typeof d.graft[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.graft: object expected\");\n                        m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);\n                    }\n                }\n                if (d.prune) {\n                    if (!Array.isArray(d.prune))\n                        throw TypeError(\".RPC.ControlMessage.prune: array expected\");\n                    m.prune = [];\n                    for (var i = 0; i < d.prune.length; ++i) {\n                        if (typeof d.prune[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.prune: object expected\");\n                        m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.ControlMessage} m ControlMessage\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlMessage.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.ihave = [];\n                    d.iwant = [];\n                    d.graft = [];\n                    d.prune = [];\n                }\n                if (m.ihave && m.ihave.length) {\n                    d.ihave = [];\n                    for (var j = 0; j < m.ihave.length; ++j) {\n                        d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);\n                    }\n                }\n                if (m.iwant && m.iwant.length) {\n                    d.iwant = [];\n                    for (var j = 0; j < m.iwant.length; ++j) {\n                        d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);\n                    }\n                }\n                if (m.graft && m.graft.length) {\n                    d.graft = [];\n                    for (var j = 0; j < m.graft.length; ++j) {\n                        d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);\n                    }\n                }\n                if (m.prune && m.prune.length) {\n                    d.prune = [];\n                    for (var j = 0; j < m.prune.length; ++j) {\n                        d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlMessage to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlMessage\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlMessage.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlMessage;\n        })();\n\n        RPC.ControlIHave = (function() {\n\n            /**\n             * Properties of a ControlIHave.\n             * @memberof RPC\n             * @interface IControlIHave\n             * @property {string|null} [topicID] ControlIHave topicID\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs\n             */\n\n            /**\n             * Constructs a new ControlIHave.\n             * @memberof RPC\n             * @classdesc Represents a ControlIHave.\n             * @implements IControlIHave\n             * @constructor\n             * @param {RPC.IControlIHave=} [p] Properties to set\n             */\n            function ControlIHave(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlIHave topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.topicID = null;\n\n            /**\n             * ControlIHave messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.messageIDs = $util.emptyArray;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlIHave _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            Object.defineProperty(ControlIHave.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIHave.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(18).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlIHave message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIHave} ControlIHave\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIHave.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIHave();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIHave} ControlIHave\n             */\n            ControlIHave.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIHave)\n                    return d;\n                var m = new $root.RPC.ControlIHave();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIHave.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.ControlIHave} m ControlIHave\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIHave.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlIHave to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIHave\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIHave.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlIHave;\n        })();\n\n        RPC.ControlIWant = (function() {\n\n            /**\n             * Properties of a ControlIWant.\n             * @memberof RPC\n             * @interface IControlIWant\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs\n             */\n\n            /**\n             * Constructs a new ControlIWant.\n             * @memberof RPC\n             * @classdesc Represents a ControlIWant.\n             * @implements IControlIWant\n             * @constructor\n             * @param {RPC.IControlIWant=} [p] Properties to set\n             */\n            function ControlIWant(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlIWant messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIWant\n             * @instance\n             */\n            ControlIWant.prototype.messageIDs = $util.emptyArray;\n\n            /**\n             * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIWant.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(10).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlIWant message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIWant} ControlIWant\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIWant.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIWant();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIWant} ControlIWant\n             */\n            ControlIWant.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIWant)\n                    return d;\n                var m = new $root.RPC.ControlIWant();\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIWant.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.ControlIWant} m ControlIWant\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIWant.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlIWant to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIWant\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIWant.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlIWant;\n        })();\n\n        RPC.ControlGraft = (function() {\n\n            /**\n             * Properties of a ControlGraft.\n             * @memberof RPC\n             * @interface IControlGraft\n             * @property {string|null} [topicID] ControlGraft topicID\n             */\n\n            /**\n             * Constructs a new ControlGraft.\n             * @memberof RPC\n             * @classdesc Represents a ControlGraft.\n             * @implements IControlGraft\n             * @constructor\n             * @param {RPC.IControlGraft=} [p] Properties to set\n             */\n            function ControlGraft(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlGraft topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            ControlGraft.prototype.topicID = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlGraft _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            Object.defineProperty(ControlGraft.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlGraft.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                return w;\n            };\n\n            /**\n             * Decodes a ControlGraft message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlGraft} ControlGraft\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlGraft.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlGraft();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlGraft} ControlGraft\n             */\n            ControlGraft.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlGraft)\n                    return d;\n                var m = new $root.RPC.ControlGraft();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.ControlGraft} m ControlGraft\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlGraft.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlGraft to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlGraft\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlGraft.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlGraft;\n        })();\n\n        RPC.ControlPrune = (function() {\n\n            /**\n             * Properties of a ControlPrune.\n             * @memberof RPC\n             * @interface IControlPrune\n             * @property {string|null} [topicID] ControlPrune topicID\n             * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers\n             * @property {number|null} [backoff] ControlPrune backoff\n             */\n\n            /**\n             * Constructs a new ControlPrune.\n             * @memberof RPC\n             * @classdesc Represents a ControlPrune.\n             * @implements IControlPrune\n             * @constructor\n             * @param {RPC.IControlPrune=} [p] Properties to set\n             */\n            function ControlPrune(p) {\n                this.peers = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlPrune topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.topicID = null;\n\n            /**\n             * ControlPrune peers.\n             * @member {Array.<RPC.IPeerInfo>} peers\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.peers = $util.emptyArray;\n\n            /**\n             * ControlPrune backoff.\n             * @member {number|null|undefined} backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.backoff = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlPrune _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * ControlPrune _backoff.\n             * @member {\"backoff\"|undefined} _backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_backoff\", {\n                get: $util.oneOfGetter($oneOfFields = [\"backoff\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlPrune.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.peers != null && m.peers.length) {\n                    for (var i = 0; i < m.peers.length; ++i)\n                        $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.backoff != null && Object.hasOwnProperty.call(m, \"backoff\"))\n                    w.uint32(24).uint64(m.backoff);\n                return w;\n            };\n\n            /**\n             * Decodes a ControlPrune message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlPrune} ControlPrune\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlPrune.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlPrune();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.peers && m.peers.length))\n                            m.peers = [];\n                        m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        m.backoff = r.uint64();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlPrune} ControlPrune\n             */\n            ControlPrune.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlPrune)\n                    return d;\n                var m = new $root.RPC.ControlPrune();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.peers) {\n                    if (!Array.isArray(d.peers))\n                        throw TypeError(\".RPC.ControlPrune.peers: array expected\");\n                    m.peers = [];\n                    for (var i = 0; i < d.peers.length; ++i) {\n                        if (typeof d.peers[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlPrune.peers: object expected\");\n                        m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);\n                    }\n                }\n                if (d.backoff != null) {\n                    if ($util.Long)\n                        (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;\n                    else if (typeof d.backoff === \"string\")\n                        m.backoff = parseInt(d.backoff, 10);\n                    else if (typeof d.backoff === \"number\")\n                        m.backoff = d.backoff;\n                    else if (typeof d.backoff === \"object\")\n                        m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.ControlPrune} m ControlPrune\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlPrune.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.peers = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.peers && m.peers.length) {\n                    d.peers = [];\n                    for (var j = 0; j < m.peers.length; ++j) {\n                        d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);\n                    }\n                }\n                if (m.backoff != null && m.hasOwnProperty(\"backoff\")) {\n                    if (typeof m.backoff === \"number\")\n                        d.backoff = o.longs === String ? String(m.backoff) : m.backoff;\n                    else\n                        d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;\n                    if (o.oneofs)\n                        d._backoff = \"backoff\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlPrune to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlPrune\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlPrune.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlPrune;\n        })();\n\n        RPC.PeerInfo = (function() {\n\n            /**\n             * Properties of a PeerInfo.\n             * @memberof RPC\n             * @interface IPeerInfo\n             * @property {Uint8Array|null} [peerID] PeerInfo peerID\n             * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord\n             */\n\n            /**\n             * Constructs a new PeerInfo.\n             * @memberof RPC\n             * @classdesc Represents a PeerInfo.\n             * @implements IPeerInfo\n             * @constructor\n             * @param {RPC.IPeerInfo=} [p] Properties to set\n             */\n            function PeerInfo(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * PeerInfo peerID.\n             * @member {Uint8Array|null|undefined} peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.peerID = null;\n\n            /**\n             * PeerInfo signedPeerRecord.\n             * @member {Uint8Array|null|undefined} signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.signedPeerRecord = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * PeerInfo _peerID.\n             * @member {\"peerID\"|undefined} _peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_peerID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"peerID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * PeerInfo _signedPeerRecord.\n             * @member {\"signedPeerRecord\"|undefined} _signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_signedPeerRecord\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signedPeerRecord\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PeerInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.peerID != null && Object.hasOwnProperty.call(m, \"peerID\"))\n                    w.uint32(10).bytes(m.peerID);\n                if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\"))\n                    w.uint32(18).bytes(m.signedPeerRecord);\n                return w;\n            };\n\n            /**\n             * Decodes a PeerInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.PeerInfo} PeerInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PeerInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.PeerInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.peerID = r.bytes();\n                        break;\n                    case 2:\n                        m.signedPeerRecord = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.PeerInfo} PeerInfo\n             */\n            PeerInfo.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.PeerInfo)\n                    return d;\n                var m = new $root.RPC.PeerInfo();\n                if (d.peerID != null) {\n                    if (typeof d.peerID === \"string\")\n                        $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);\n                    else if (d.peerID.length)\n                        m.peerID = d.peerID;\n                }\n                if (d.signedPeerRecord != null) {\n                    if (typeof d.signedPeerRecord === \"string\")\n                        $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);\n                    else if (d.signedPeerRecord.length)\n                        m.signedPeerRecord = d.signedPeerRecord;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.PeerInfo} m PeerInfo\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            PeerInfo.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.peerID != null && m.hasOwnProperty(\"peerID\")) {\n                    d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;\n                    if (o.oneofs)\n                        d._peerID = \"peerID\";\n                }\n                if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n                    d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n                    if (o.oneofs)\n                        d._signedPeerRecord = \"signedPeerRecord\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this PeerInfo to JSON.\n             * @function toJSON\n             * @memberof RPC.PeerInfo\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            PeerInfo.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return PeerInfo;\n        })();\n\n        return RPC;\n    })();\n\n    return $root;\n});\n","import * as cborg from 'cborg'\nimport { CID } from 'multiformats/cid'\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n\n/**\n * cidEncoder will receive all Objects during encode, it needs to filter out\n * anything that's not a CID and return `null` for that so it's encoded as\n * normal.\n *\n * @param {any} obj\n * @returns {cborg.Token[]|null}\n */\nfunction cidEncoder (obj) {\n  if (obj.asCID !== obj && obj['/'] !== obj.bytes) {\n    return null // any other kind of object\n  }\n  const cid = CID.asCID(obj)\n  /* c8 ignore next 4 */\n  // very unlikely case, and it'll probably throw a recursion error in cborg\n  if (!cid) {\n    return null\n  }\n  const bytes = new Uint8Array(cid.bytes.byteLength + 1)\n  bytes.set(cid.bytes, 1) // prefix is 0x00, for historical reasons\n  return [\n    new cborg.Token(cborg.Type.tag, CID_CBOR_TAG),\n    new cborg.Token(cborg.Type.bytes, bytes)\n  ]\n}\n\n// eslint-disable-next-line jsdoc/require-returns-check\n/**\n * Intercept all `undefined` values from an object walk and reject the entire\n * object if we find one.\n *\n * @returns {null}\n */\nfunction undefinedEncoder () {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded')\n}\n\n/**\n * Intercept all `number` values from an object walk and reject the entire\n * object if we find something that doesn't fit the IPLD data model (NaN &\n * Infinity).\n *\n * @param {number} num\n * @returns {null}\n */\nfunction numberEncoder (num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  return null\n}\n\nconst encodeOptions = {\n  float64: true,\n  typeEncoders: {\n    Object: cidEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {CID}\n */\nfunction cidDecoder (bytes) {\n  if (bytes[0] !== 0) {\n    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00')\n  }\n  return CID.decode(bytes.subarray(1)) // ignore leading 0x00\n}\n\nconst decodeOptions = {\n  allowIndefinite: false,\n  coerceUndefinedToNull: true,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true, // this will lead to BigInt for ints outside of\n  // safe-integer range, which may surprise users\n  strict: true,\n  useMaps: false,\n  rejectDuplicateMapKeys: true,\n  /** @type {import('cborg').TagDecoder[]} */\n  tags: []\n}\ndecodeOptions.tags[CID_CBOR_TAG] = cidDecoder\n\nexport const name = 'dag-cbor'\nexport const code = 0x71\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => cborg.encode(node, encodeOptions)\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => cborg.decode(data, decodeOptions)\n","/* eslint max-depth: [\"error\", 7] */\nimport { CID } from 'multiformats'\nimport { base64 } from 'multiformats/bases/base64'\nimport { Token, Type } from 'cborg'\nimport * as cborgJson from 'cborg/json'\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n/**\n * @template T\n * @typedef {import('multiformats').ToString<T>} ToString\n */\n/**\n * @typedef {import('cborg/interface').DecodeTokenizer} DecodeTokenizer\n */\n\n/**\n * cidEncoder will receive all Objects during encode, it needs to filter out\n * anything that's not a CID and return `null` for that so it's encoded as\n * normal. Encoding a CID means replacing it with a `{\"/\":\"<CidString>}`\n * object as per the DAG-JSON spec.\n *\n * @param {any} obj\n * @returns {Token[]|null}\n */\nfunction cidEncoder (obj) {\n  if (obj.asCID !== obj && obj['/'] !== obj.bytes) {\n    return null // any other kind of object\n  }\n  const cid = CID.asCID(obj)\n  /* c8 ignore next 4 */\n  // very unlikely case, and it'll probably throw a recursion error in cborg\n  if (!cid) {\n    return null\n  }\n  const cidString = cid.toString()\n\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1), // key\n    new Token(Type.string, cidString, cidString.length), // value\n    new Token(Type.break, undefined, 1)\n  ]\n}\n\n/**\n * bytesEncoder will receive all Uint8Arrays (and friends) during encode, it\n * needs to replace it with a `{\"/\":{\"bytes\":\"Base64ByteString\"}}` object as\n * per the DAG-JSON spec.\n *\n * @param {Uint8Array} bytes\n * @returns {Token[]|null}\n */\nfunction bytesEncoder (bytes) {\n  const bytesString = base64.encode(bytes).slice(1) // no mbase prefix\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1), // key\n    new Token(Type.map, Infinity, 1), // value\n    new Token(Type.string, 'bytes', 5), // inner key\n    new Token(Type.string, bytesString, bytesString.length), // inner value\n    new Token(Type.break, undefined, 1),\n    new Token(Type.break, undefined, 1)\n  ]\n}\n\n// eslint-disable-next-line jsdoc/require-returns-check\n/**\n * Intercept all `undefined` values from an object walk and reject the entire\n * object if we find one.\n *\n * @returns {null}\n */\nfunction undefinedEncoder () {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded')\n}\n\n/**\n * Intercept all `number` values from an object walk and reject the entire\n * object if we find something that doesn't fit the IPLD data model (NaN &\n * Infinity).\n *\n * @param {number} num\n * @returns {null}\n */\nfunction numberEncoder (num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  return null // process with standard number encoder\n}\n\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder, // TODO: all the typedarrays\n    Buffer: bytesEncoder, // TODO: all the typedarrays\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n}\n\n/**\n * @implements {DecodeTokenizer}\n */\nclass DagJsonTokenizer extends cborgJson.Tokenizer {\n  /**\n   * @param {Uint8Array} data\n   * @param {object} [options]\n   */\n  constructor (data, options) {\n    super(data, options)\n    /** @type {Token[]} */\n    this.tokenBuffer = []\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  done () {\n    return this.tokenBuffer.length === 0 && super.done()\n  }\n\n  /**\n   * @returns {Token}\n   */\n  _next () {\n    if (this.tokenBuffer.length > 0) {\n      // @ts-ignore https://github.com/Microsoft/TypeScript/issues/30406\n      return this.tokenBuffer.pop()\n    }\n    return super.next()\n  }\n\n  /**\n   * Implements rules outlined in https://github.com/ipld/specs/pull/356\n   *\n   * @returns {Token}\n   */\n  next () {\n    const token = this._next()\n\n    if (token.type === Type.map) {\n      const keyToken = this._next()\n      if (keyToken.type === Type.string && keyToken.value === '/') {\n        const valueToken = this._next()\n        if (valueToken.type === Type.string) { // *must* be a CID\n          const breakToken = this._next() // swallow the end-of-map token\n          if (breakToken.type !== Type.break) {\n            throw new Error('Invalid encoded CID form')\n          }\n          this.tokenBuffer.push(valueToken) // CID.parse will pick this up after our tag token\n          return new Token(Type.tag, 42, 0)\n        }\n        if (valueToken.type === Type.map) {\n          const innerKeyToken = this._next()\n          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next()\n            if (innerValueToken.type === Type.string) { // *must* be Bytes\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next() // swallow two end-of-map tokens\n                if (breakToken.type !== Type.break) {\n                  throw new Error('Invalid encoded Bytes form')\n                }\n              }\n              const bytes = base64.decode(`m${innerValueToken.value}`)\n              return new Token(Type.bytes, bytes, innerValueToken.value.length)\n            }\n            this.tokenBuffer.push(innerValueToken) // bail\n          }\n          this.tokenBuffer.push(innerKeyToken) // bail\n        }\n        this.tokenBuffer.push(valueToken) // bail\n      }\n      this.tokenBuffer.push(keyToken) // bail\n    }\n    return token\n  }\n}\n\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true, // this will lead to BigInt for ints outside of\n  // safe-integer range, which may surprise users\n  strict: true,\n  useMaps: false,\n  rejectDuplicateMapKeys: true,\n  /** @type {import('cborg').TagDecoder[]} */\n  tags: []\n}\n\n// we're going to get TAG(42)STRING(\"bafy...\") from the tokenizer so we only need\n// to deal with the STRING(\"bafy...\") at this point\ndecodeOptions.tags[42] = CID.parse\n\nexport const name = 'dag-json'\nexport const code = 0x0129\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => cborgJson.encode(node, encodeOptions)\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => {\n  // the tokenizer is stateful so we need a single instance of it\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) })\n  return cborgJson.decode(data, options)\n}\n\n/**\n * @template T\n * @param {T} node\n * @returns {ToString<T>}\n */\nexport const format = (node) => utf8Decoder.decode(encode(node))\nexport { format as stringify }\nconst utf8Decoder = new TextDecoder()\n\n/**\n * @template T\n * @param {ToString<T>} data\n * @returns {T}\n */\nexport const parse = (data) => decode(utf8Encoder.encode(data))\nconst utf8Encoder = new TextEncoder()\n","const textDecoder = new TextDecoder()\n\n/**\n * @typedef {import('./interface').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\nfunction decodeVarint (bytes, offset) {\n  let v = 0\n\n  for (let shift = 0; ; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow')\n    }\n    /* c8 ignore next 3 */\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data')\n    }\n\n    const b = bytes[offset++]\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * (2 ** shift)\n    if (b < 0x80) {\n      break\n    }\n  }\n  return [v, offset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\nfunction decodeBytes (bytes, offset) {\n  let byteLen\n  ;[byteLen, offset] = decodeVarint(bytes, offset)\n  const postOffset = offset + byteLen\n\n  /* c8 ignore next 3 */\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length')\n  }\n  /* c8 ignore next 3 */\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data')\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\nfunction decodeKey (bytes, index) {\n  let wire\n  ;[wire, index] = decodeVarint(bytes, index)\n  // [wireType, fieldNum, newIndex]\n  return [wire & 0x7, wire >> 3, index]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\nfunction decodeLink (bytes) {\n  /** @type {RawPBLink} */\n  const link = {}\n  const l = bytes.length\n  let index = 0\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`)\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash')\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash')\n      }\n\n      [link.Hash, index] = decodeBytes(bytes, index)\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`)\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name')\n      }\n\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      link.Name = textDecoder.decode(byts)\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section')\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`)\n      }\n\n      [link.Tsize, index] = decodeVarint(bytes, index)\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data')\n  }\n\n  return link\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\nexport function decodeNode (bytes) {\n  const l = bytes.length\n  let index = 0\n  /** @type {RawPBLink[]|void} */\n  let links\n  let linksBeforeData = false\n  /** @type {Uint8Array|void} */\n  let data\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`)\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section')\n      }\n\n      [data, index] = decodeBytes(bytes, index)\n      if (links) {\n        linksBeforeData = true\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) { // interleaved Links/Data/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section')\n      } else if (!links) {\n        links = []\n      }\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      links.push(decodeLink(byts))\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data')\n  }\n\n  /** @type {RawPBNode} */\n  const node = {}\n  if (data) {\n    node.Data = data\n  }\n  node.Links = links || []\n  return node\n}\n","const textEncoder = new TextEncoder()\nconst maxInt32 = 2 ** 32\nconst maxUInt32 = 2 ** 31\n\n/**\n * @typedef {import('./interface').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface').RawPBNode} RawPBNode\n */\n\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\nfunction encodeLink (link, bytes) {\n  let i = bytes.length\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative')\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding')\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1\n    bytes[i] = 0x18\n  }\n\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name)\n    i -= nameBytes.length\n    bytes.set(nameBytes, i)\n    i = encodeVarint(bytes, i, nameBytes.length) - 1\n    bytes[i] = 0x12\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length\n    bytes.set(link.Hash, i)\n    i = encodeVarint(bytes, i, link.Hash.length) - 1\n    bytes[i] = 0xa\n  }\n\n  return bytes.length - i\n}\n\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\nexport function encodeNode (node) {\n  const size = sizeNode(node)\n  const bytes = new Uint8Array(size)\n  let i = size\n\n  if (node.Data) {\n    i -= node.Data.length\n    bytes.set(node.Data, i)\n    i = encodeVarint(bytes, i, node.Data.length) - 1\n    bytes[i] = 0xa\n  }\n\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i))\n      i -= size\n      i = encodeVarint(bytes, i, size) - 1\n      bytes[i] = 0x12\n    }\n  }\n\n  return bytes\n}\n\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\nfunction sizeLink (link) {\n  let n = 0\n\n  if (link.Hash) {\n    const l = link.Hash.length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize)\n  }\n\n  return n\n}\n\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\nfunction sizeNode (node) {\n  let n = 0\n\n  if (node.Data) {\n    const l = node.Data.length\n    n += 1 + l + sov(l)\n  }\n\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link)\n      n += 1 + l + sov(l)\n    }\n  }\n\n  return n\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\nfunction encodeVarint (bytes, offset, v) {\n  offset -= sov(v)\n  const base = offset\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v /= 128\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v >>>= 7\n  }\n\n  bytes[offset] = v\n\n  return base\n}\n\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\nfunction sov (x) {\n  if (x % 2 === 0) {\n    x++\n  }\n  return Math.floor((len64(x) + 6) / 7)\n}\n\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\nfunction len64 (x) {\n  let n = 0\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32)\n    n = 32\n  }\n  if (x >= (1 << 16)) {\n    x >>>= 16\n    n += 16\n  }\n  if (x >= (1 << 8)) {\n    x >>>= 8\n    n += 8\n  }\n  return n + len8tab[x]\n}\n\n// golang math/bits\nconst len8tab = [\n  0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\n]\n","import { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('./interface').PBLink} PBLink\n * @typedef {import('./interface').PBNode} PBNode\n */\n\nconst pbNodeProperties = ['Data', 'Links']\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize']\n\nconst textEncoder = new TextEncoder()\n\n/**\n * @param {PBLink} a\n * @param {PBLink} b\n * @returns {number}\n */\nfunction linkComparator (a, b) {\n  if (a === b) {\n    return 0\n  }\n\n  const abuf = a.Name ? textEncoder.encode(a.Name) : []\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : []\n\n  let x = abuf.length\n  let y = bbuf.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i]\n      y = bbuf[i]\n      break\n    }\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0\n}\n\n/**\n * @param {any} node\n * @param {string[]} properties\n * @returns {boolean}\n */\nfunction hasOnlyProperties (node, properties) {\n  return !Object.keys(node).some((p) => !properties.includes(p))\n}\n\n/**\n * Converts a CID, or a PBLink-like object to a PBLink\n *\n * @param {any} link\n * @returns {PBLink}\n */\nfunction asLink (link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link)\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n    return { Hash }\n  }\n\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  const pbl = {}\n\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash)\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash)\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash)\n        }\n      }\n    } catch (/** @type {any} */ e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`)\n    }\n\n    if (cid) {\n      pbl.Hash = cid\n    }\n  }\n\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name\n  }\n\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize\n  }\n\n  return pbl\n}\n\n/**\n * @param {any} node\n * @returns {PBNode}\n */\nexport function prepare (node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node }\n  }\n\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  /** @type {PBNode} */\n  const pbn = {}\n\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data)\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  }\n\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink)\n      pbn.Links.sort(linkComparator)\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  } else {\n    pbn.Links = []\n  }\n\n  return pbn\n}\n\n/**\n * @param {PBNode} node\n */\nexport function validate (node) {\n  /*\n  type PBLink struct {\n    Hash optional Link\n    Name optional String\n    Tsize optional Int\n  }\n\n  type PBNode struct {\n    Links [PBLink]\n    Data optional Bytes\n  }\n  */\n  // @ts-ignore private property for TS\n  if (!node || typeof node !== 'object' || Array.isArray(node) || node instanceof Uint8Array || (node['/'] && node['/'] === node.bytes)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)')\n  }\n\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be bytes)')\n  }\n\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be a list)')\n  }\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i]\n    // @ts-ignore private property for TS\n    if (!link || typeof link !== 'object' || Array.isArray(link) || link instanceof Uint8Array || (link['/'] && link['/'] === link.bytes)) {\n      throw new TypeError('Invalid DAG-PB form (bad link)')\n    }\n\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link)')\n    }\n\n    if (link.Hash === undefined) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)')\n    }\n\n    // @ts-ignore private property for TS\n    if (link.Hash == null || !link.Hash['/'] || link.Hash['/'] !== link.Hash.bytes) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)')\n    }\n\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)')\n    }\n\n    if (link.Tsize !== undefined) {\n      if (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)')\n      }\n      if (link.Tsize < 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize cannot be negative)')\n      }\n    }\n\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)')\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {PBLink[]} [links=[]]\n * @returns {PBNode}\n */\nexport function createNode (data, links = []) {\n  return prepare({ Data: data, Links: links })\n}\n\n/**\n * @param {string} name\n * @param {number} size\n * @param {CID} cid\n * @returns {PBLink}\n */\nexport function createLink (name, size, cid) {\n  return asLink({ Hash: cid, Name: name, Tsize: size })\n}\n","import { CID } from 'multiformats/cid'\nimport { decodeNode } from './pb-decode.js'\nimport { encodeNode } from './pb-encode.js'\nimport { prepare, validate, createNode, createLink } from './util.js'\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n\n/**\n * @typedef {import('./interface').PBLink} PBLink\n * @typedef {import('./interface').PBNode} PBNode\n */\n\nexport const name = 'dag-pb'\nexport const code = 0x70\n\n/**\n * @param {PBNode} node\n * @returns {ByteView<PBNode>}\n */\nexport function encode (node) {\n  validate(node)\n\n  const pbn = {}\n  if (node.Links) {\n    pbn.Links = node.Links.map((l) => {\n      const link = {}\n      if (l.Hash) {\n        link.Hash = l.Hash.bytes // cid -> bytes\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n  if (node.Data) {\n    pbn.Data = node.Data\n  }\n\n  return encodeNode(pbn)\n}\n\n/**\n * @param {ByteView<PBNode>} bytes\n * @returns {PBNode}\n */\nexport function decode (bytes) {\n  const pbn = decodeNode(bytes)\n\n  const node = {}\n\n  if (pbn.Data) {\n    node.Data = pbn.Data\n  }\n\n  if (pbn.Links) {\n    node.Links = pbn.Links.map((l) => {\n      const link = {}\n      try {\n        link.Hash = CID.decode(l.Hash)\n      } catch (e) {}\n      if (!link.Hash) {\n        throw new Error('Invalid Hash field found in link, expected CID')\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n\n  return node\n}\n\nexport { prepare, validate, createNode, createLink }\n","const word = '[a-fA-F\\\\d:]';\n\nconst boundry = options => options && options.includeBoundaries\n\t? `(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))`\n\t: '';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6segment = '[a-fA-F\\\\d]{1,4}';\n\nconst v6 = `\n(?:\n(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ipRegex = options => options && options.exact\n\t? v46Exact\n\t: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');\n\nipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');\nipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');\n\nexport default ipRegex;\n","import peek from 'it-peekable';\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction forEach(source, fn) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            for await (const thing of source) {\n                await fn(thing);\n                yield thing;\n            }\n        })();\n    }\n    // if fn function returns a promise we have to return an async generator\n    const peekable = peek(source);\n    const { value, done } = peekable.next();\n    if (done === true) {\n        return (function* () { }());\n    }\n    const res = fn(value);\n    if (typeof res?.then === 'function') {\n        return (async function* () {\n            yield value;\n            for await (const val of peekable) {\n                await fn(val);\n                yield val;\n            }\n        })();\n    }\n    const func = fn;\n    return (function* () {\n        yield value;\n        for (const val of peekable) {\n            func(val);\n            yield val;\n        }\n    })();\n}\nexport default forEach;\n//# sourceMappingURL=index.js.map","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { base32 } from './bases/base32.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\nimport * as varint from './varint.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  /**\n   * @returns {API.LinkJSON<this>}\n   */\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import debug from 'debug';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base64 } from 'multiformats/bases/base64';\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v) => {\n    return v == null ? 'undefined' : base58btc.baseEncode(v);\n};\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v) => {\n    return v == null ? 'undefined' : base32.baseEncode(v);\n};\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v) => {\n    return v == null ? 'undefined' : base64.baseEncode(v);\n};\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\nfunction createDisabledLogger(namespace) {\n    const logger = () => { };\n    logger.enabled = false;\n    logger.color = '';\n    logger.diff = 0;\n    logger.log = () => { };\n    logger.namespace = namespace;\n    logger.destroy = () => true;\n    logger.extend = () => logger;\n    return logger;\n}\nexport function logger(name) {\n    // trace logging is a no-op by default\n    let trace = createDisabledLogger(`${name}:trace`);\n    // look at all the debug names and see if trace logging has explicitly been enabled\n    if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n        trace = debug(`${name}:trace`);\n    }\n    return Object.assign(debug(name), {\n        error: debug(`${name}:error`),\n        trace\n    });\n}\nexport function disable() {\n    debug.disable();\n}\nexport function enable(namespaces) {\n    debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n    return debug.enabled(namespaces);\n}\n//# sourceMappingURL=index.js.map","import { base58btc } from 'multiformats/bases/base58';\nexport class WantListEntry {\n    _refCounter;\n    cid;\n    priority;\n    wantType;\n    constructor(cid, priority, wantType) {\n        // Keep track of how many requests we have for this key\n        this._refCounter = 1;\n        this.cid = cid;\n        this.priority = priority ?? 1;\n        this.wantType = wantType;\n    }\n    inc() {\n        this._refCounter += 1;\n    }\n    dec() {\n        this._refCounter = Math.max(0, this._refCounter - 1);\n    }\n    hasRefs() {\n        return this._refCounter > 0;\n    }\n    // So that console.log prints a nice description of this object\n    get [Symbol.toStringTag]() {\n        const cidStr = this.cid.toString(base58btc);\n        return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`;\n    }\n    equals(other) {\n        return (this._refCounter === other._refCounter) &&\n            this.cid.equals(other.cid) &&\n            this.priority === other.priority &&\n            this.wantType === other.wantType;\n    }\n}\n//# sourceMappingURL=entry.js.map","import { base58btc } from 'multiformats/bases/base58';\nimport { WantListEntry } from '../wantlist/entry.js';\nexport class BitswapMessageEntry {\n    entry;\n    cancel;\n    sendDontHave;\n    constructor(cid, priority, wantType, cancel, sendDontHave) {\n        this.entry = new WantListEntry(cid, priority, wantType);\n        this.cancel = Boolean(cancel);\n        this.sendDontHave = Boolean(sendDontHave);\n    }\n    get cid() {\n        return this.entry.cid;\n    }\n    set cid(cid) {\n        this.entry.cid = cid;\n    }\n    get priority() {\n        return this.entry.priority;\n    }\n    set priority(val) {\n        this.entry.priority = val;\n    }\n    get wantType() {\n        return this.entry.wantType;\n    }\n    set wantType(val) {\n        this.entry.wantType = val;\n    }\n    get [Symbol.toStringTag]() {\n        const cidStr = this.cid.toString(base58btc);\n        return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`;\n    }\n    equals(other) {\n        return (this.cancel === other.cancel) &&\n            (this.sendDontHave === other.sendDontHave) &&\n            (this.wantType === other.wantType) &&\n            this.entry.equals(other.entry);\n    }\n}\n//# sourceMappingURL=entry.js.map","import { logger as createLogger } from '@libp2p/logger';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { BitswapMessageEntry } from '../message/entry.js';\n/**\n * Creates a logger for the given subsystem\n */\nexport const logger = (id, subsystem) => {\n    const name = ['bitswap'];\n    if (subsystem != null) {\n        name.push(subsystem);\n    }\n    if (id != null) {\n        name.push(`${id.toString().slice(0, 8)}`);\n    }\n    return createLogger(name.join(':'));\n};\nexport const includesWith = (pred, x, list) => {\n    let idx = 0;\n    const len = list.length;\n    while (idx < len) {\n        if (pred(x, list[idx])) {\n            return true;\n        }\n        idx += 1;\n    }\n    return false;\n};\nexport const uniqWith = (pred, list) => {\n    let idx = 0;\n    const len = list.length;\n    const result = [];\n    let item;\n    while (idx < len) {\n        item = list[idx];\n        if (!includesWith(pred, item, result)) {\n            result[result.length] = item;\n        }\n        idx += 1;\n    }\n    return result;\n};\nexport const groupBy = (pred, list) => {\n    // @ts-expect-error cannot use {} as record with these key types?\n    const output = {};\n    return list.reduce((acc, v) => {\n        const k = pred(v);\n        if (acc[k] != null) {\n            acc[k].push(v);\n        }\n        else {\n            acc[k] = [v];\n        }\n        return acc;\n    }, output);\n};\nexport const pullAllWith = (pred, list, values) => {\n    return list.filter(i => {\n        return !includesWith(pred, i, values);\n    });\n};\nexport const sortBy = (fn, list) => {\n    return Array.prototype.slice.call(list, 0).sort((a, b) => {\n        const aa = fn(a);\n        const bb = fn(b);\n        return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n};\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n */\nexport const isMapEqual = (a, b) => {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const [key, valueA] of a) {\n        const valueB = b.get(key);\n        if (valueB === undefined) {\n            return false;\n        }\n        // TODO: revisit this\n        // Support Blocks\n        if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n            return false;\n        }\n        // Support BitswapMessageEntry\n        if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=index.js.map","import * as varint from 'varint';\nfunction varintEncoder(buf) {\n    let out = new Uint8Array(buf.reduce((acc, curr) => {\n        // @ts-expect-error types are wrong\n        return acc + varint.default.encodingLength(curr); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    }, 0));\n    let offset = 0;\n    for (const num of buf) {\n        out = varint.encode(num, out, offset);\n        // @ts-expect-error types are wrong\n        offset += varint.default.encodingLength(num); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    }\n    return out;\n}\nexport default varintEncoder;\n//# sourceMappingURL=varint-encoder.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Message;\n(function (Message) {\n    let Wantlist;\n    (function (Wantlist) {\n        let WantType;\n        (function (WantType) {\n            WantType[\"Block\"] = \"Block\";\n            WantType[\"Have\"] = \"Have\";\n        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));\n        let __WantTypeValues;\n        (function (__WantTypeValues) {\n            __WantTypeValues[__WantTypeValues[\"Block\"] = 0] = \"Block\";\n            __WantTypeValues[__WantTypeValues[\"Have\"] = 1] = \"Have\";\n        })(__WantTypeValues || (__WantTypeValues = {}));\n        (function (WantType) {\n            WantType.codec = () => {\n                return enumeration(__WantTypeValues);\n            };\n        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));\n        let Entry;\n        (function (Entry) {\n            let _codec;\n            Entry.codec = () => {\n                if (_codec == null) {\n                    _codec = message((obj, w, opts = {}) => {\n                        if (opts.lengthDelimited !== false) {\n                            w.fork();\n                        }\n                        if ((obj.block != null && obj.block.byteLength > 0)) {\n                            w.uint32(10);\n                            w.bytes(obj.block);\n                        }\n                        if ((obj.priority != null && obj.priority !== 0)) {\n                            w.uint32(16);\n                            w.int32(obj.priority);\n                        }\n                        if ((obj.cancel != null && obj.cancel !== false)) {\n                            w.uint32(24);\n                            w.bool(obj.cancel);\n                        }\n                        if (obj.wantType != null && __WantTypeValues[obj.wantType] !== 0) {\n                            w.uint32(32);\n                            Message.Wantlist.WantType.codec().encode(obj.wantType, w);\n                        }\n                        if ((obj.sendDontHave != null && obj.sendDontHave !== false)) {\n                            w.uint32(40);\n                            w.bool(obj.sendDontHave);\n                        }\n                        if (opts.lengthDelimited !== false) {\n                            w.ldelim();\n                        }\n                    }, (reader, length) => {\n                        const obj = {\n                            block: new Uint8Array(0),\n                            priority: 0,\n                            cancel: false,\n                            wantType: WantType.Block,\n                            sendDontHave: false\n                        };\n                        const end = length == null ? reader.len : reader.pos + length;\n                        while (reader.pos < end) {\n                            const tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1:\n                                    obj.block = reader.bytes();\n                                    break;\n                                case 2:\n                                    obj.priority = reader.int32();\n                                    break;\n                                case 3:\n                                    obj.cancel = reader.bool();\n                                    break;\n                                case 4:\n                                    obj.wantType = Message.Wantlist.WantType.codec().decode(reader);\n                                    break;\n                                case 5:\n                                    obj.sendDontHave = reader.bool();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return obj;\n                    });\n                }\n                return _codec;\n            };\n            Entry.encode = (obj) => {\n                return encodeMessage(obj, Entry.codec());\n            };\n            Entry.decode = (buf) => {\n                return decodeMessage(buf, Entry.codec());\n            };\n        })(Entry = Wantlist.Entry || (Wantlist.Entry = {}));\n        let _codec;\n        Wantlist.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.entries != null) {\n                        for (const value of obj.entries) {\n                            w.uint32(10);\n                            Message.Wantlist.Entry.codec().encode(value, w);\n                        }\n                    }\n                    if ((obj.full != null && obj.full !== false)) {\n                        w.uint32(16);\n                        w.bool(obj.full);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        entries: [],\n                        full: false\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.entries.push(Message.Wantlist.Entry.codec().decode(reader, reader.uint32()));\n                                break;\n                            case 2:\n                                obj.full = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Wantlist.encode = (obj) => {\n            return encodeMessage(obj, Wantlist.codec());\n        };\n        Wantlist.decode = (buf) => {\n            return decodeMessage(buf, Wantlist.codec());\n        };\n    })(Wantlist = Message.Wantlist || (Message.Wantlist = {}));\n    let Block;\n    (function (Block) {\n        let _codec;\n        Block.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.prefix != null && obj.prefix.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.prefix);\n                    }\n                    if ((obj.data != null && obj.data.byteLength > 0)) {\n                        w.uint32(18);\n                        w.bytes(obj.data);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        prefix: new Uint8Array(0),\n                        data: new Uint8Array(0)\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.prefix = reader.bytes();\n                                break;\n                            case 2:\n                                obj.data = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Block.encode = (obj) => {\n            return encodeMessage(obj, Block.codec());\n        };\n        Block.decode = (buf) => {\n            return decodeMessage(buf, Block.codec());\n        };\n    })(Block = Message.Block || (Message.Block = {}));\n    let BlockPresenceType;\n    (function (BlockPresenceType) {\n        BlockPresenceType[\"Have\"] = \"Have\";\n        BlockPresenceType[\"DontHave\"] = \"DontHave\";\n    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));\n    let __BlockPresenceTypeValues;\n    (function (__BlockPresenceTypeValues) {\n        __BlockPresenceTypeValues[__BlockPresenceTypeValues[\"Have\"] = 0] = \"Have\";\n        __BlockPresenceTypeValues[__BlockPresenceTypeValues[\"DontHave\"] = 1] = \"DontHave\";\n    })(__BlockPresenceTypeValues || (__BlockPresenceTypeValues = {}));\n    (function (BlockPresenceType) {\n        BlockPresenceType.codec = () => {\n            return enumeration(__BlockPresenceTypeValues);\n        };\n    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));\n    let BlockPresence;\n    (function (BlockPresence) {\n        let _codec;\n        BlockPresence.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.cid != null && obj.cid.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.cid);\n                    }\n                    if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {\n                        w.uint32(16);\n                        Message.BlockPresenceType.codec().encode(obj.type, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        cid: new Uint8Array(0),\n                        type: BlockPresenceType.Have\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.cid = reader.bytes();\n                                break;\n                            case 2:\n                                obj.type = Message.BlockPresenceType.codec().decode(reader);\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        BlockPresence.encode = (obj) => {\n            return encodeMessage(obj, BlockPresence.codec());\n        };\n        BlockPresence.decode = (buf) => {\n            return decodeMessage(buf, BlockPresence.codec());\n        };\n    })(BlockPresence = Message.BlockPresence || (Message.BlockPresence = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.wantlist != null) {\n                    w.uint32(10);\n                    Message.Wantlist.codec().encode(obj.wantlist, w);\n                }\n                if (obj.blocks != null) {\n                    for (const value of obj.blocks) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.payload != null) {\n                    for (const value of obj.payload) {\n                        w.uint32(26);\n                        Message.Block.codec().encode(value, w);\n                    }\n                }\n                if (obj.blockPresences != null) {\n                    for (const value of obj.blockPresences) {\n                        w.uint32(34);\n                        Message.BlockPresence.codec().encode(value, w);\n                    }\n                }\n                if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {\n                    w.uint32(40);\n                    w.int32(obj.pendingBytes);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    blocks: [],\n                    payload: [],\n                    blockPresences: [],\n                    pendingBytes: 0\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.wantlist = Message.Wantlist.codec().decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            obj.blocks.push(reader.bytes());\n                            break;\n                        case 3:\n                            obj.payload.push(Message.Block.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            obj.blockPresences.push(Message.BlockPresence.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 5:\n                            obj.pendingBytes = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return encodeMessage(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return decodeMessage(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=message.js.map","import { CodeError } from '@libp2p/interface/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\n// @ts-expect-error no types\nimport vd from 'varint-decoder';\nimport { isMapEqual } from '../utils/index.js';\nimport ve from '../utils/varint-encoder.js';\nimport { BitswapMessageEntry as Entry } from './entry.js';\nimport { Message } from './message.js';\nexport class BitswapMessage {\n    static Entry = Entry;\n    static WantType = {\n        Block: Message.Wantlist.WantType.Block,\n        Have: Message.Wantlist.WantType.Have\n    };\n    static BlockPresenceType = {\n        Have: Message.BlockPresenceType.Have,\n        DontHave: Message.BlockPresenceType.DontHave\n    };\n    static deserialize = async (raw, hashLoader) => {\n        const decoded = Message.decode(raw);\n        const isFull = decoded.wantlist?.full === true;\n        const msg = new BitswapMessage(isFull);\n        decoded.wantlist?.entries.forEach((entry) => {\n            if (entry.block == null) {\n                return;\n            }\n            // note: entry.block is the CID here\n            const cid = CID.decode(entry.block);\n            msg.addEntry(cid, entry.priority ?? 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave));\n        });\n        decoded.blockPresences.forEach((blockPresence) => {\n            if (blockPresence.cid == null) {\n                return;\n            }\n            const cid = CID.decode(blockPresence.cid);\n            if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {\n                msg.addHave(cid);\n            }\n            else {\n                msg.addDontHave(cid);\n            }\n        });\n        // Bitswap 1.0.0\n        // decoded.blocks are just the byte arrays\n        if (decoded.blocks.length > 0) {\n            await Promise.all(decoded.blocks.map(async (b) => {\n                const hash = await sha256.digest(b);\n                const cid = CID.createV0(hash);\n                msg.addBlock(cid, b);\n            }));\n            return msg;\n        }\n        // Bitswap 1.1.0\n        if (decoded.payload.length > 0) {\n            await Promise.all(decoded.payload.map(async (p) => {\n                if (p.prefix == null || p.data == null) {\n                    return;\n                }\n                const values = vd(p.prefix);\n                const cidVersion = values[0];\n                const multicodec = values[1];\n                const hashAlg = values[2];\n                const hasher = hashAlg === sha256.code ? sha256 : await hashLoader?.getHasher(hashAlg);\n                if (hasher == null) {\n                    throw new CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG');\n                }\n                // const hashLen = values[3] // We haven't need to use this so far\n                const hash = await hasher.digest(p.data);\n                const cid = CID.create(cidVersion, multicodec, hash);\n                msg.addBlock(cid, p.data);\n            }));\n            msg.setPendingBytes(decoded.pendingBytes);\n            return msg;\n        }\n        return msg;\n    };\n    static blockPresenceSize = (cid) => {\n        // It's ok if this is not exactly right: it's used to estimate the size of\n        // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave\n        // plenty of padding under the maximum message size.\n        // (It's more important for this to be fast).\n        return cid.bytes.length + 1;\n    };\n    full;\n    wantlist;\n    blocks;\n    blockPresences;\n    pendingBytes;\n    constructor(full) {\n        this.full = full;\n        this.wantlist = new Map();\n        this.blocks = new Map();\n        this.blockPresences = new Map();\n        this.pendingBytes = 0;\n    }\n    get empty() {\n        return this.blocks.size === 0 &&\n            this.wantlist.size === 0 &&\n            this.blockPresences.size === 0;\n    }\n    addEntry(cid, priority, wantType, cancel, sendDontHave) {\n        if (wantType == null) {\n            wantType = BitswapMessage.WantType.Block;\n        }\n        const cidStr = cid.toString(base58btc);\n        const entry = this.wantlist.get(cidStr);\n        if (entry != null) {\n            // Only change priority if want is of the same type\n            if (entry.wantType === wantType) {\n                entry.priority = priority;\n            }\n            // Only change from \"dont cancel\" to \"do cancel\"\n            if (cancel === true) {\n                entry.cancel = Boolean(cancel);\n            }\n            // Only change from \"dont send\" to \"do send\" DONT_HAVE\n            if (sendDontHave === true) {\n                entry.sendDontHave = Boolean(sendDontHave);\n            }\n            // want-block overrides existing want-have\n            if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {\n                entry.wantType = wantType;\n            }\n        }\n        else {\n            this.wantlist.set(cidStr, new Entry(cid, priority, wantType, cancel, sendDontHave));\n        }\n    }\n    addBlock(cid, block) {\n        const cidStr = cid.toString(base58btc);\n        this.blocks.set(cidStr, block);\n    }\n    addHave(cid) {\n        const cidStr = cid.toString(base58btc);\n        if (!this.blockPresences.has(cidStr)) {\n            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have);\n        }\n    }\n    addDontHave(cid) {\n        const cidStr = cid.toString(base58btc);\n        if (!this.blockPresences.has(cidStr)) {\n            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave);\n        }\n    }\n    cancel(cid) {\n        const cidStr = cid.toString(base58btc);\n        this.wantlist.delete(cidStr);\n        this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false);\n    }\n    setPendingBytes(size) {\n        this.pendingBytes = size;\n    }\n    /**\n     * Serializes to Bitswap Message protobuf of\n     * version 1.0.0\n     */\n    serializeToBitswap100() {\n        return Message.encode({\n            wantlist: {\n                entries: Array.from(this.wantlist.values()).map((entry) => {\n                    return {\n                        block: entry.cid.bytes,\n                        priority: Number(entry.priority),\n                        cancel: Boolean(entry.cancel),\n                        wantType: Message.Wantlist.WantType.Block,\n                        sendDontHave: false\n                    };\n                }),\n                full: Boolean(this.full)\n            },\n            blocks: Array.from(this.blocks.values())\n        });\n    }\n    /**\n     * Serializes to Bitswap Message protobuf of\n     * version 1.1.0\n     */\n    serializeToBitswap110() {\n        const msg = {\n            wantlist: {\n                entries: Array.from(this.wantlist.values()).map((entry) => {\n                    return {\n                        block: entry.cid.bytes,\n                        priority: Number(entry.priority),\n                        wantType: entry.wantType,\n                        cancel: Boolean(entry.cancel),\n                        sendDontHave: Boolean(entry.sendDontHave)\n                    };\n                }),\n                full: Boolean(this.full)\n            },\n            blockPresences: [],\n            payload: [],\n            pendingBytes: this.pendingBytes,\n            blocks: []\n        };\n        for (const [cidStr, data] of this.blocks.entries()) {\n            const cid = CID.parse(cidStr);\n            const version = cid.version;\n            const codec = cid.code;\n            const multihash = cid.multihash.code;\n            const digestLength = cid.multihash.digest.length;\n            const prefix = ve([\n                version, codec, multihash, digestLength\n            ]);\n            msg.payload.push({\n                prefix,\n                data\n            });\n        }\n        for (const [cidStr, bpType] of this.blockPresences) {\n            msg.blockPresences.push({\n                cid: CID.parse(cidStr).bytes,\n                type: bpType\n            });\n        }\n        if (this.pendingBytes > 0) {\n            msg.pendingBytes = this.pendingBytes;\n        }\n        return Message.encode(msg);\n    }\n    equals(other) {\n        if (this.full !== other.full ||\n            this.pendingBytes !== other.pendingBytes ||\n            !isMapEqual(this.wantlist, other.wantlist) ||\n            !isMapEqual(this.blocks, other.blocks) ||\n            // @TODO - Is this a bug ?\n            // @ts-expect-error - isMap equals map values to be objects not numbers\n            !isMapEqual(this.blockPresences, other.blockPresences)) {\n            return false;\n        }\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        const list = Array.from(this.wantlist.keys());\n        const blocks = Array.from(this.blocks.keys());\n        return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`;\n    }\n}\n//# sourceMappingURL=index.js.map","import { trackedMap } from '@libp2p/interface/metrics/tracked-map';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { Message } from '../message/message.js';\nimport { WantListEntry as Entry } from './entry.js';\nconst WantType = {\n    Block: Message.Wantlist.WantType.Block,\n    Have: Message.Wantlist.WantType.Have\n};\nconst sortBy = (fn, list) => {\n    return Array.prototype.slice.call(list, 0).sort((a, b) => {\n        const aa = fn(a);\n        const bb = fn(b);\n        return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n};\nexport class Wantlist {\n    static Entry = Entry;\n    set;\n    _stats;\n    constructor(stats, libp2p) {\n        this.set = (libp2p != null)\n            ? trackedMap({\n                name: 'ipfs_bitswap_wantlist',\n                metrics: libp2p.metrics\n            })\n            : new Map();\n        this._stats = stats;\n    }\n    get length() {\n        return this.set.size;\n    }\n    add(cid, priority, wantType) {\n        const cidStr = cid.toString(base58btc);\n        const entry = this.set.get(cidStr);\n        if (entry != null) {\n            entry.inc();\n            entry.priority = priority;\n            // We can only overwrite want-have with want-block\n            if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n                entry.wantType = wantType;\n            }\n        }\n        else {\n            this.set.set(cidStr, new Entry(cid, priority, wantType));\n            if (this._stats != null) {\n                this._stats.push(undefined, 'wantListSize', 1);\n            }\n        }\n    }\n    remove(cid) {\n        const cidStr = cid.toString(base58btc);\n        const entry = this.set.get(cidStr);\n        if (entry == null) {\n            return;\n        }\n        entry.dec();\n        // only delete when no refs are held\n        if (entry.hasRefs()) {\n            return;\n        }\n        this.set.delete(cidStr);\n        if (this._stats != null) {\n            this._stats.push(undefined, 'wantListSize', -1);\n        }\n    }\n    removeForce(cidStr) {\n        if (this.set.has(cidStr)) {\n            this.set.delete(cidStr);\n        }\n    }\n    forEach(fn) {\n        this.set.forEach(fn);\n    }\n    entries() {\n        return this.set.entries();\n    }\n    sortedEntries() {\n        // TODO: Figure out if this is an actual bug.\n        // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n        return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));\n    }\n    contains(cid) {\n        const cidStr = cid.toString(base58btc);\n        return this.set.has(cidStr);\n    }\n    get(cid) {\n        const cidStr = cid.toString(base58btc);\n        return this.set.get(cidStr);\n    }\n}\n//# sourceMappingURL=index.js.map","import { Wantlist } from '../wantlist/index.js';\nexport class Ledger {\n    partner;\n    wantlist;\n    exchangeCount;\n    accounting;\n    lastExchange;\n    constructor(peerId) {\n        this.partner = peerId;\n        this.wantlist = new Wantlist();\n        this.exchangeCount = 0;\n        this.accounting = {\n            bytesSent: 0,\n            bytesRecv: 0\n        };\n    }\n    sentBytes(n) {\n        this.exchangeCount++;\n        this.lastExchange = (new Date()).getTime();\n        this.accounting.bytesSent += n;\n    }\n    receivedBytes(n) {\n        this.exchangeCount++;\n        this.lastExchange = (new Date()).getTime();\n        this.accounting.bytesRecv += n;\n    }\n    wants(cid, priority, wantType) {\n        this.wantlist.add(cid, priority, wantType);\n    }\n    /**\n     * @param {CID} cid\n     * @returns {void}\n     */\n    cancelWant(cid) {\n        this.wantlist.remove(cid);\n    }\n    wantlistContains(cid) {\n        return this.wantlist.get(cid);\n    }\n    debtRatio() {\n        return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)); // +1 is to prevent division by zero\n    }\n}\n//# sourceMappingURL=ledger.js.map","/**\n * SortedMap is a Map whose iterator order can be defined by the user\n */\nexport class SortedMap extends Map {\n    _cmp;\n    _keys;\n    constructor(entries, cmp) {\n        super();\n        this._cmp = cmp ?? this._defaultSort;\n        this._keys = [];\n        for (const [k, v] of entries ?? []) {\n            this.set(k, v);\n        }\n    }\n    /**\n     * Call update to update the position of the key when it should change.\n     * For example if the compare function sorts by the priority field, and the\n     * priority changes, call update.\n     * Call indexOf() to get the index _before_ the change happens.\n     */\n    update(i) {\n        if (i < 0 || i >= this._keys.length) {\n            return;\n        }\n        const k = this._keys[i];\n        this._keys.splice(i, 1);\n        const newIdx = this._find(k);\n        this._keys.splice(newIdx, 0, k);\n    }\n    set(k, v) {\n        // If the key is already in the map, remove it from the ordering and\n        // re-insert it below\n        if (this.has(k)) {\n            const i = this.indexOf(k);\n            this._keys.splice(i, 1);\n        }\n        // Update / insert the k/v into the map\n        super.set(k, v);\n        // Find the correct position of the newly inserted k/v in the order\n        const i = this._find(k);\n        this._keys.splice(i, 0, k);\n        return this;\n    }\n    clear() {\n        super.clear();\n        this._keys = [];\n    }\n    delete(k) {\n        if (!this.has(k)) {\n            return false;\n        }\n        const i = this.indexOf(k);\n        this._keys.splice(i, 1);\n        return super.delete(k);\n    }\n    indexOf(k) {\n        if (!this.has(k)) {\n            return -1;\n        }\n        const i = this._find(k);\n        if (this._keys[i] === k) {\n            return i;\n        }\n        // There may be more than one key with the same ordering\n        // eg { k1: <priority 5>, k2: <priority 5> }\n        // so scan outwards until the key matches\n        for (let j = 1; j < this._keys.length; j++) {\n            if (this._keys[i + j] === k)\n                return i + j;\n            if (this._keys[i - j] === k)\n                return i - j;\n        }\n        return -1; // should never happen for existing key\n    }\n    _find(k) {\n        let lower = 0;\n        let upper = this._keys.length;\n        while (lower < upper) {\n            const pivot = (lower + upper) >>> 1; // lower + (upper - lower) / 2\n            const cmp = this._kCmp(this._keys[pivot], k);\n            // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n            if (cmp < 0) { // pivot < k\n                lower = pivot + 1;\n            }\n            else if (cmp > 0) { // pivot > k\n                upper = pivot;\n            }\n            else { // pivot == k\n                return pivot;\n            }\n        }\n        return lower;\n    }\n    *keys() {\n        for (const k of this._keys) {\n            yield k;\n        }\n        return undefined;\n    }\n    *values() {\n        for (const k of this._keys) {\n            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is\n            // incompatible with `Value`. Typechecker can't that this contains values\n            // for all the `_keys`. ts(2322)\n            yield this.get(k);\n        }\n        return undefined;\n    }\n    *entries() {\n        for (const k of this._keys) {\n            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is\n            // incompatible with `Value`. Typechecker can't that this contains values\n            // for all the `_keys`. ts(2322)\n            yield [k, this.get(k)];\n        }\n        return undefined;\n    }\n    *[Symbol.iterator]() {\n        yield* this.entries();\n    }\n    // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n    forEach(cb, thisArg = this) {\n        if (cb == null) {\n            return;\n        }\n        for (const k of this._keys) {\n            const val = this.get(k);\n            if (val == null) {\n                throw new Error('Value cannot be undefined');\n            }\n            cb.apply(thisArg, [[k, val]]);\n        }\n    }\n    _defaultSort(a, b) {\n        if (a[0] < b[0])\n            return -1;\n        if (b[0] < a[0])\n            return 1;\n        return 0;\n    }\n    _kCmp(a, b) {\n        return this._cmp(\n        // @ts-expect-error - get may return undefined\n        [a, this.get(a)], [b, this.get(b)]);\n    }\n}\n//# sourceMappingURL=sorted-map.js.map","import { SortedMap } from '../utils/sorted-map.js';\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n */\nconst DefaultTaskMerger = {\n    hasNewInfo() {\n        return false;\n    },\n    merge() { }\n};\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nexport class RequestQueue {\n    _taskMerger;\n    _byPeer;\n    constructor(taskMerger = DefaultTaskMerger) {\n        this._taskMerger = taskMerger;\n        this._byPeer = new SortedMap([], PeerTasks.compare);\n    }\n    /**\n     * Push tasks onto the queue for the given peer\n     */\n    pushTasks(peerId, tasks) {\n        let peerTasks = this._byPeer.get(peerId.toString());\n        if (peerTasks == null) {\n            peerTasks = new PeerTasks(peerId, this._taskMerger);\n        }\n        peerTasks.pushTasks(tasks);\n        this._byPeer.set(peerId.toString(), peerTasks);\n    }\n    /**\n     * Choose the peer with the least active work (or if all have the same active\n     * work, the most pending tasks) and pop off the highest priority tasks until\n     * the total size is at least targetMinBytes.\n     * This puts the popped tasks into the \"active\" state, meaning they are\n     * actively being processed (and cannot be modified).\n     */\n    popTasks(targetMinBytes) {\n        // Get the queue of tasks for the best peer and pop off tasks up to\n        // targetMinBytes\n        const peerTasks = this._head();\n        if (peerTasks === undefined) {\n            return { tasks: [], pendingSize: 0 };\n        }\n        const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes);\n        if (tasks.length === 0) {\n            return { tasks, pendingSize };\n        }\n        const peerId = peerTasks.peerId;\n        if (peerTasks.isIdle()) {\n            // If there are no more tasks for the peer, free up its memory\n            this._byPeer.delete(peerId.toString());\n        }\n        else {\n            // If there are still tasks remaining, update the sort order of peerTasks\n            // (because it depends on the number of pending tasks)\n            this._byPeer.update(0);\n        }\n        return {\n            peerId, tasks, pendingSize\n        };\n    }\n    _head() {\n        // Shortcut\n        if (this._byPeer.size === 0) {\n            return undefined;\n        }\n        // eslint-disable-next-line no-unreachable-loop\n        for (const [, v] of this._byPeer) {\n            return v;\n        }\n        return undefined;\n    }\n    /**\n     * Remove the task with the given topic for the given peer.\n     */\n    remove(topic, peerId) {\n        const peerTasks = this._byPeer.get(peerId.toString());\n        peerTasks?.remove(topic);\n    }\n    /**\n     * Called when the tasks for the given peer complete.\n     */\n    tasksDone(peerId, tasks) {\n        const peerTasks = this._byPeer.get(peerId.toString());\n        if (peerTasks == null) {\n            return;\n        }\n        const i = this._byPeer.indexOf(peerId.toString());\n        for (const task of tasks) {\n            peerTasks.taskDone(task);\n        }\n        // Marking the tasks as done takes them out of the \"active\" state, and the\n        // sort order depends on the size of the active tasks, so we need to update\n        // the order.\n        this._byPeer.update(i);\n    }\n}\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n    peerId;\n    _taskMerger;\n    _activeTotalSize;\n    _pending;\n    _active;\n    constructor(peerId, taskMerger) {\n        this.peerId = peerId;\n        this._taskMerger = taskMerger;\n        this._activeTotalSize = 0;\n        this._pending = new PendingTasks();\n        this._active = new Set();\n    }\n    /**\n     * Push tasks onto the queue\n     */\n    pushTasks(tasks) {\n        for (const t of tasks) {\n            this._pushTask(t);\n        }\n    }\n    _pushTask(task) {\n        // If the new task doesn't add any more information over what we\n        // already have in the active queue, then we can skip the new task\n        if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n            return;\n        }\n        // If there is already a non-active (pending) task with this topic\n        const existingTask = this._pending.get(task.topic);\n        if (existingTask != null) {\n            // If the new task has a higher priority than the old task,\n            if (task.priority > existingTask.priority) {\n                // Update the priority and the task's position in the queue\n                this._pending.updatePriority(task.topic, task.priority);\n            }\n            // Merge the information from the new task into the existing task\n            this._taskMerger.merge(task, existingTask);\n            // A task with the topic exists, so we don't need to add\n            // the new task to the queue\n            return;\n        }\n        // Push the new task onto the queue\n        this._pending.add(task);\n    }\n    /**\n     * Indicates whether the new task adds any more information over tasks that are\n     * already in the active task queue\n     */\n    _taskHasMoreInfoThanActiveTasks(task) {\n        const tasksWithTopic = [];\n        for (const activeTask of this._active) {\n            if (activeTask.topic === task.topic) {\n                tasksWithTopic.push(activeTask);\n            }\n        }\n        // No tasks with that topic, so the new task adds information\n        if (tasksWithTopic.length === 0) {\n            return true;\n        }\n        return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n    }\n    /**\n     * Pop tasks off the queue such that the total size is at least targetMinBytes\n     */\n    popTasks(targetMinBytes) {\n        let size = 0;\n        const tasks = [];\n        // Keep popping tasks until we get up to targetMinBytes (or one item over\n        // targetMinBytes)\n        const pendingTasks = this._pending.tasks();\n        for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n            const task = pendingTasks[i];\n            tasks.push(task);\n            size += task.size;\n            // Move tasks from pending to active\n            this._pending.delete(task.topic);\n            this._activeTotalSize += task.size;\n            this._active.add(task);\n        }\n        return {\n            tasks, pendingSize: this._pending.totalSize\n        };\n    }\n    /**\n     * Called when a task completes.\n     * Note: must be the same reference as returned from popTasks.\n     */\n    taskDone(task) {\n        if (this._active.has(task)) {\n            this._activeTotalSize -= task.size;\n            this._active.delete(task);\n        }\n    }\n    /**\n     * Remove pending tasks with the given topic\n     */\n    remove(topic) {\n        this._pending.delete(topic);\n    }\n    /**\n     * No work to be done, this PeerTasks object can be freed.\n     */\n    isIdle() {\n        return this._pending.length === 0 && this._active.size === 0;\n    }\n    /**\n     * Compare PeerTasks\n     */\n    static compare(a, b) {\n        // Move peers with no pending tasks to the back of the queue\n        if (a[1]._pending.length === 0) {\n            return 1;\n        }\n        if (b[1]._pending.length === 0) {\n            return -1;\n        }\n        // If the amount of active work is the same\n        if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n            // Choose the peer with the most pending work\n            return b[1]._pending.length - a[1]._pending.length;\n        }\n        // Choose the peer with the least amount of active work (\"keep peers busy\")\n        return a[1]._activeTotalSize - b[1]._activeTotalSize;\n    }\n}\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n    _tasks;\n    constructor() {\n        this._tasks = new SortedMap([], this._compare);\n    }\n    get length() {\n        return this._tasks.size;\n    }\n    /**\n     * Sum of the size of all pending tasks\n     **/\n    get totalSize() {\n        return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n    }\n    get(topic) {\n        return this._tasks?.get(topic)?.task;\n    }\n    add(task) {\n        this._tasks.set(task.topic, {\n            created: Date.now(),\n            task\n        });\n    }\n    delete(topic) {\n        this._tasks.delete(topic);\n    }\n    // All pending tasks, in priority order\n    tasks() {\n        return [...this._tasks.values()].map(i => i.task);\n    }\n    /**\n     * Update the priority of the task with the given topic, and update the order\n     **/\n    updatePriority(topic, priority) {\n        const obj = this._tasks.get(topic);\n        if (obj == null) {\n            return;\n        }\n        const i = this._tasks.indexOf(topic);\n        obj.task.priority = priority;\n        this._tasks.update(i);\n    }\n    /**\n     * Sort by priority desc then FIFO\n     */\n    _compare(a, b) {\n        if (a[1].task.priority === b[1].task.priority) {\n            // FIFO\n            return a[1].created - b[1].created;\n        }\n        // Priority high -> low\n        return b[1].task.priority - a[1].task.priority;\n    }\n}\n//# sourceMappingURL=req-queue.js.map","export const DefaultTaskMerger = {\n    /**\n     * Indicates whether the given task has newer information than the active\n     * tasks with the same topic.\n     *\n     * @param {Task} task\n     * @param {Task[]} tasksWithTopic\n     * @returns {boolean}\n     */\n    hasNewInfo(task, tasksWithTopic) {\n        let haveBlock = false;\n        let isWantBlock = false;\n        for (const existing of tasksWithTopic) {\n            if (existing.data.haveBlock) {\n                haveBlock = true;\n            }\n            if (existing.data.isWantBlock) {\n                isWantBlock = true;\n            }\n        }\n        // If there is no active want-block and the new task is a want-block,\n        // the new task is better\n        if (!isWantBlock && task.data.isWantBlock) {\n            return true;\n        }\n        // If we didn't have the block, and the new task indicates that we now\n        // do have the block, then we must also have size information for the\n        // block, so the new task has new information.\n        if (!haveBlock && task.data.haveBlock) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Merge the information from the given task into the existing task (with the\n     * same topic)\n     */\n    merge(newTask, existingTask) {\n        // The merge function ignores the topic and priority as these don't change.\n        //\n        // We may receive new information about a want before the want has been\n        // popped from the queue in the following scenarios:\n        //\n        // - Replace want type:\n        //   1. Client sends want-have CID1\n        //   2. Client sends want-block CID1\n        //   In this case we should replace want-have with want-block, including\n        //   updating the task size to be the block size.\n        //\n        // - Replace DONT_HAVE with want:\n        //   1. Client sends want-have CID1 or want-block CID1\n        //   2. Local node doesn't have block for CID1\n        //   3. Local node receives block for CID1 from peer\n        //   In this case we should replace DONT_HAVE with the want, including\n        //   updating the task size and block size.\n        const taskData = newTask.data;\n        const existingData = existingTask.data;\n        // If we didn't have block size information (because we didn't have the\n        // block) and we receive the block from a peer, update the task with the\n        // new block size\n        if (!existingData.haveBlock && taskData.haveBlock) {\n            existingData.haveBlock = taskData.haveBlock;\n            existingData.blockSize = taskData.blockSize;\n        }\n        // If replacing a want-have with a want-block\n        if (!existingData.isWantBlock && taskData.isWantBlock) {\n            // Change the type from want-have to want-block\n            existingData.isWantBlock = true;\n            // If the want-have was a DONT_HAVE, or the want-block has a size\n            if (!existingData.haveBlock || taskData.haveBlock) {\n                // Update the entry size\n                existingData.haveBlock = taskData.haveBlock;\n                existingTask.size = newTask.size;\n            }\n        }\n        // If the task is a want-block, make sure the entry size is equal\n        // to the block size (because we will send the whole block)\n        if (existingData.isWantBlock && existingData.haveBlock) {\n            existingTask.size = existingData.blockSize;\n        }\n    }\n};\n//# sourceMappingURL=task-merger.js.map","import { trackedMap } from '@libp2p/interface/metrics/tracked-map';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport { Ledger } from './ledger.js';\nimport { RequestQueue } from './req-queue.js';\nimport { DefaultTaskMerger } from './task-merger.js';\nconst WantType = Message.WantType;\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024;\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;\nexport class DecisionEngine {\n    _log;\n    blockstore;\n    network;\n    _stats;\n    _opts;\n    ledgerMap;\n    _running;\n    _requestQueue;\n    constructor(peerId, blockstore, network, stats, libp2p, opts = {}) {\n        this._log = logger(peerId, 'engine');\n        this.blockstore = blockstore;\n        this.network = network;\n        this._stats = stats;\n        this._opts = this._processOpts(opts);\n        // A list of of ledgers by their partner id\n        this.ledgerMap = trackedMap({\n            name: 'ipfs_bitswap_ledger_map',\n            metrics: libp2p.metrics\n        });\n        this._running = false;\n        // Queue of want-have / want-block per peer\n        this._requestQueue = new RequestQueue(DefaultTaskMerger);\n    }\n    _processOpts(opts) {\n        return {\n            maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n            targetMessageSize: TARGET_MESSAGE_SIZE,\n            ...opts\n        };\n    }\n    _scheduleProcessTasks() {\n        setTimeout(() => {\n            this._processTasks().catch(err => {\n                this._log.error('error processing stats', err);\n            });\n        });\n    }\n    /**\n     * Pull tasks off the request queue and send a message to the corresponding\n     * peer\n     */\n    async _processTasks() {\n        if (!this._running) {\n            return;\n        }\n        const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize);\n        if (tasks.length === 0) {\n            return;\n        }\n        // Create a new message\n        const msg = new Message(false);\n        // Amount of data in the request queue still waiting to be popped\n        msg.setPendingBytes(pendingSize);\n        // Split out want-blocks, want-haves and DONT_HAVEs\n        const blockCids = [];\n        const blockTasks = new Map();\n        for (const task of tasks) {\n            const cid = CID.parse(task.topic);\n            if (task.data.haveBlock) {\n                if (task.data.isWantBlock) {\n                    blockCids.push(cid);\n                    blockTasks.set(task.topic, task.data);\n                }\n                else {\n                    // Add HAVES to the message\n                    msg.addHave(cid);\n                }\n            }\n            else {\n                // Add DONT_HAVEs to the message\n                msg.addDontHave(cid);\n            }\n        }\n        const blocks = await this._getBlocks(blockCids);\n        for (const [topic, taskData] of blockTasks) {\n            const cid = CID.parse(topic);\n            const blk = blocks.get(topic);\n            // If the block was found (it has not been removed)\n            if (blk != null) {\n                // Add the block to the message\n                msg.addBlock(cid, blk);\n            }\n            else {\n                // The block was not found. If the client requested DONT_HAVE,\n                // add DONT_HAVE to the message.\n                if (taskData.sendDontHave) {\n                    msg.addDontHave(cid);\n                }\n            }\n        }\n        // If there's nothing in the message, bail out\n        if (msg.empty) {\n            (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);\n            // Trigger the next round of task processing\n            this._scheduleProcessTasks();\n            return;\n        }\n        try {\n            // Send the message\n            (peerId != null) && await this.network.sendMessage(peerId, msg);\n            // Peform sent message accounting\n            for (const [cidStr, block] of blocks.entries()) {\n                (peerId != null) && this.messageSent(peerId, CID.parse(cidStr), block);\n            }\n        }\n        catch (err) {\n            this._log.error(err);\n        }\n        // Free the tasks up from the request queue\n        (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);\n        // Trigger the next round of task processing\n        this._scheduleProcessTasks();\n    }\n    wantlistForPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        return (ledger != null) ? ledger.wantlist.sortedEntries() : new Map();\n    }\n    ledgerForPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        if (ledger == null) {\n            return undefined;\n        }\n        return {\n            peer: ledger.partner,\n            value: ledger.debtRatio(),\n            sent: ledger.accounting.bytesSent,\n            recv: ledger.accounting.bytesRecv,\n            exchanged: ledger.exchangeCount\n        };\n    }\n    peers() {\n        return Array.from(this.ledgerMap.values()).map((l) => l.partner);\n    }\n    /**\n     * Receive blocks either from an incoming message from the network, or from\n     * blocks being added by the client on the localhost (eg IPFS add)\n     */\n    receivedBlocks(blocks) {\n        if (blocks.length === 0) {\n            return;\n        }\n        // For each connected peer, check if it wants the block we received\n        for (const ledger of this.ledgerMap.values()) {\n            for (const { cid, block } of blocks) {\n                // Filter out blocks that we don't want\n                const want = ledger.wantlistContains(cid);\n                if (want == null) {\n                    continue;\n                }\n                // If the block is small enough, just send the block, even if the\n                // client asked for a HAVE\n                const blockSize = block.length;\n                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n                let entrySize = blockSize;\n                if (!isWantBlock) {\n                    entrySize = Message.blockPresenceSize(want.cid);\n                }\n                this._requestQueue.pushTasks(ledger.partner, [{\n                        topic: want.cid.toString(base58btc),\n                        priority: want.priority,\n                        size: entrySize,\n                        data: {\n                            blockSize,\n                            isWantBlock,\n                            haveBlock: true,\n                            sendDontHave: false\n                        }\n                    }]);\n            }\n        }\n        this._scheduleProcessTasks();\n    }\n    /**\n     * Handle incoming messages\n     */\n    async messageReceived(peerId, msg) {\n        const ledger = this._findOrCreate(peerId);\n        if (msg.empty) {\n            return;\n        }\n        // If the message has a full wantlist, clear the current wantlist\n        if (msg.full) {\n            ledger.wantlist = new Wantlist();\n        }\n        // Record the amount of block data received\n        this._updateBlockAccounting(msg.blocks, ledger);\n        if (msg.wantlist.size === 0) {\n            this._scheduleProcessTasks();\n            return;\n        }\n        // Clear cancelled wants and add new wants to the ledger\n        const cancels = [];\n        const wants = [];\n        msg.wantlist.forEach((entry) => {\n            if (entry.cancel) {\n                ledger.cancelWant(entry.cid);\n                cancels.push(entry.cid);\n            }\n            else {\n                ledger.wants(entry.cid, entry.priority, entry.wantType);\n                wants.push(entry);\n            }\n        });\n        this._cancelWants(peerId, cancels);\n        await this._addWants(peerId, wants);\n        this._scheduleProcessTasks();\n    }\n    _cancelWants(peerId, cids) {\n        for (const c of cids) {\n            this._requestQueue.remove(c.toString(base58btc), peerId);\n        }\n    }\n    async _addWants(peerId, wants) {\n        // Get the size of each wanted block\n        const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));\n        const tasks = [];\n        for (const want of wants) {\n            const id = want.cid.toString(base58btc);\n            const blockSize = blockSizes.get(id);\n            // If the block was not found\n            if (blockSize == null) {\n                // Only add the task to the queue if the requester wants a DONT_HAVE\n                if (want.sendDontHave) {\n                    tasks.push({\n                        topic: id,\n                        priority: want.priority,\n                        size: Message.blockPresenceSize(want.cid),\n                        data: {\n                            isWantBlock: want.wantType === WantType.Block,\n                            blockSize: 0,\n                            haveBlock: false,\n                            sendDontHave: want.sendDontHave\n                        }\n                    });\n                }\n            }\n            else {\n                // The block was found, add it to the queue\n                // If the block is small enough, just send the block, even if the\n                // client asked for a HAVE\n                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n                // entrySize is the amount of space the entry takes up in the\n                // message we send to the recipient. If we're sending a block, the\n                // entrySize is the size of the block. Otherwise it's the size of\n                // a block presence entry.\n                let entrySize = blockSize;\n                if (!isWantBlock) {\n                    entrySize = Message.blockPresenceSize(want.cid);\n                }\n                tasks.push({\n                    topic: id,\n                    priority: want.priority,\n                    size: entrySize,\n                    data: {\n                        isWantBlock,\n                        blockSize,\n                        haveBlock: true,\n                        sendDontHave: want.sendDontHave\n                    }\n                });\n            }\n            this._requestQueue.pushTasks(peerId, tasks);\n        }\n    }\n    _sendAsBlock(wantType, blockSize) {\n        return wantType === WantType.Block ||\n            blockSize <= this._opts.maxSizeReplaceHasWithBlock;\n    }\n    async _getBlockSizes(cids) {\n        const blocks = await this._getBlocks(cids);\n        return new Map([...blocks].map(([k, v]) => [k, v.length]));\n    }\n    async _getBlocks(cids) {\n        const res = new Map();\n        await Promise.all(cids.map(async (cid) => {\n            try {\n                const block = await this.blockstore.get(cid);\n                res.set(cid.toString(base58btc), block);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    this._log.error('failed to query blockstore for %s: %s', cid, err);\n                }\n            }\n        }));\n        return res;\n    }\n    _updateBlockAccounting(blocksMap, ledger) {\n        for (const block of blocksMap.values()) {\n            this._log('got block (%s bytes)', block.length);\n            ledger.receivedBytes(block.length);\n        }\n    }\n    /**\n     * Clear up all accounting things after message was sent\n     */\n    messageSent(peerId, cid, block) {\n        const ledger = this._findOrCreate(peerId);\n        ledger.sentBytes(block.length);\n        ledger.wantlist.remove(cid);\n    }\n    numBytesSentTo(peerId) {\n        return this._findOrCreate(peerId).accounting.bytesSent;\n    }\n    numBytesReceivedFrom(peerId) {\n        return this._findOrCreate(peerId).accounting.bytesRecv;\n    }\n    peerDisconnected(peerId) {\n        this.ledgerMap.delete(peerId.toString());\n    }\n    _findOrCreate(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        if (ledger != null) {\n            return ledger;\n        }\n        const l = new Ledger(peerId);\n        this.ledgerMap.set(peerIdStr, l);\n        if (this._stats != null) {\n            this._stats.push(peerIdStr, 'peerCount', 1);\n        }\n        return l;\n    }\n    start() {\n        this._running = true;\n    }\n    stop() {\n        this._running = false;\n    }\n}\n//# sourceMappingURL=index.js.map","import peek from 'it-peekable';\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction map(source, func) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            for await (const val of source) {\n                yield func(val);\n            }\n        })();\n    }\n    // if mapping function returns a promise we have to return an async generator\n    const peekable = peek(source);\n    const { value, done } = peekable.next();\n    if (done === true) {\n        return (function* () { }());\n    }\n    const res = func(value);\n    // @ts-expect-error .then is not present on O\n    if (typeof res.then === 'function') {\n        return (async function* () {\n            yield await res;\n            for await (const val of peekable) {\n                yield func(val);\n            }\n        })();\n    }\n    const fn = func;\n    return (function* () {\n        yield res;\n        for (const val of peekable) {\n            yield fn(val);\n        }\n    })();\n}\nexport default map;\n//# sourceMappingURL=index.js.map","function isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction take(source, limit) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            let items = 0;\n            if (limit < 1) {\n                return;\n            }\n            for await (const entry of source) {\n                yield entry;\n                items++;\n                if (items === limit) {\n                    return;\n                }\n            }\n        })();\n    }\n    return (function* () {\n        let items = 0;\n        if (limit < 1) {\n            return;\n        }\n        for (const entry of source) {\n            yield entry;\n            items++;\n            if (items === limit) {\n                return;\n            }\n        }\n    })();\n}\nexport default take;\n//# sourceMappingURL=index.js.map","const SECOND = 1000;\nexport const maxProvidersPerRequest = 3;\nexport const providerRequestTimeout = 10 * SECOND;\nexport const hasBlockTimeout = 15 * SECOND;\nexport const provideTimeout = 15 * SECOND;\nexport const kMaxPriority = Math.pow(2, 31) - 1;\nexport const maxListeners = 1000;\nexport const wantlistSendDebounceMs = 1;\n//# sourceMappingURL=constants.js.map","import { CodeError } from '@libp2p/interface/errors';\nimport drain from 'it-drain';\nimport * as lp from 'it-length-prefixed';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\nimport take from 'it-take';\nimport { CustomProgressEvent } from 'progress-events';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport * as CONSTANTS from './constants.js';\nimport { BitswapMessage as Message } from './message/index.js';\nimport { logger } from './utils/index.js';\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0';\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0';\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0';\nconst DEFAULT_MAX_INBOUND_STREAMS = 1024;\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 1024;\nconst DEFAULT_INCOMING_STREAM_TIMEOUT = 30000;\nexport class Network {\n    _log;\n    _libp2p;\n    _bitswap;\n    _protocols;\n    _stats;\n    _running;\n    _hashLoader;\n    _maxInboundStreams;\n    _maxOutboundStreams;\n    _incomingStreamTimeout;\n    _registrarIds;\n    constructor(libp2p, bitswap, stats, options = {}) {\n        this._log = logger(libp2p.peerId, 'network');\n        this._libp2p = libp2p;\n        this._bitswap = bitswap;\n        this._protocols = [BITSWAP100];\n        if (options.b100Only !== true) {\n            // Latest bitswap first\n            this._protocols.unshift(BITSWAP110);\n            this._protocols.unshift(BITSWAP120);\n        }\n        this._stats = stats;\n        this._running = false;\n        // bind event listeners\n        this._onPeerConnect = this._onPeerConnect.bind(this);\n        this._onPeerDisconnect = this._onPeerDisconnect.bind(this);\n        this._onConnection = this._onConnection.bind(this);\n        this._hashLoader = options.hashLoader ?? {\n            async getHasher() {\n                throw new Error('Not implemented');\n            }\n        };\n        this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n        this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n        this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT;\n    }\n    async start() {\n        this._running = true;\n        await this._libp2p.handle(this._protocols, this._onConnection, {\n            maxInboundStreams: this._maxInboundStreams,\n            maxOutboundStreams: this._maxOutboundStreams\n        });\n        // register protocol with topology\n        const topology = {\n            onConnect: this._onPeerConnect,\n            onDisconnect: this._onPeerDisconnect\n        };\n        /** @type {string[]} */\n        this._registrarIds = [];\n        for (const protocol of this._protocols) {\n            this._registrarIds.push(await this._libp2p.register(protocol, topology));\n        }\n        // All existing connections are like new ones for us\n        this._libp2p.getConnections().forEach(conn => {\n            this._onPeerConnect(conn.remotePeer);\n        });\n    }\n    async stop() {\n        this._running = false;\n        // Unhandle both, libp2p doesn't care if it's not already handled\n        await this._libp2p.unhandle(this._protocols);\n        // unregister protocol and handlers\n        if (this._registrarIds != null) {\n            for (const id of this._registrarIds) {\n                this._libp2p.unregister(id);\n            }\n            this._registrarIds = [];\n        }\n    }\n    /**\n     * Handles both types of incoming bitswap messages\n     */\n    _onConnection(info) {\n        if (!this._running) {\n            return;\n        }\n        const { stream, connection } = info;\n        const controller = new TimeoutController(this._incomingStreamTimeout);\n        Promise.resolve().then(async () => {\n            this._log('incoming new bitswap %s connection from %p', stream.protocol, connection.remotePeer);\n            const abortListener = () => {\n                stream.abort(new CodeError('Incoming Bitswap stream timed out', 'ERR_TIMEOUT'));\n            };\n            let signal = AbortSignal.timeout(this._incomingStreamTimeout);\n            signal.addEventListener('abort', abortListener);\n            await pipe(stream, (source) => lp.decode(source), async (source) => {\n                for await (const data of source) {\n                    try {\n                        const message = await Message.deserialize(data.subarray(), this._hashLoader);\n                        await this._bitswap._receiveMessage(connection.remotePeer, message);\n                    }\n                    catch (err) {\n                        this._bitswap._receiveError(err);\n                        break;\n                    }\n                    // we have received some data so reset the timeout controller\n                    signal.removeEventListener('abort', abortListener);\n                    signal = AbortSignal.timeout(this._incomingStreamTimeout);\n                    signal.addEventListener('abort', abortListener);\n                }\n            });\n            await stream.close({\n                signal\n            });\n        })\n            .catch(err => {\n            this._log(err);\n            stream.abort(err);\n        })\n            .finally(() => {\n            controller.clear();\n        });\n    }\n    _onPeerConnect(peerId) {\n        this._bitswap._onPeerConnected(peerId);\n    }\n    _onPeerDisconnect(peerId) {\n        this._bitswap._onPeerDisconnected(peerId);\n    }\n    /**\n     * Find providers given a `cid`.\n     */\n    findProviders(cid, options = {}) {\n        options.onProgress?.(new CustomProgressEvent('bitswap:network:find-providers', cid));\n        return this._libp2p.contentRouting.findProviders(cid, options);\n    }\n    /**\n     * Find the providers of a given `cid` and connect to them.\n     */\n    async findAndConnect(cid, options) {\n        await drain(take(map(this.findProviders(cid, options), async (provider) => this.connectTo(provider.id, options)\n            .catch(err => {\n            // Prevent unhandled promise rejection\n            this._log.error(err);\n        })), CONSTANTS.maxProvidersPerRequest))\n            .catch(err => {\n            this._log.error(err);\n        });\n    }\n    /**\n     * Tell the network we can provide content for the passed CID\n     */\n    async provide(cid, options = {}) {\n        options.onProgress?.(new CustomProgressEvent('bitswap:network:provide', cid));\n        await this._libp2p.contentRouting.provide(cid, options);\n    }\n    /**\n     * Connect to the given peer\n     * Send the given msg (instance of Message) to the given peer\n     */\n    async sendMessage(peer, msg, options = {}) {\n        if (!this._running)\n            throw new Error('network isn\\'t running');\n        const stringId = peer.toString();\n        this._log('sendMessage to %s', stringId, msg);\n        options.onProgress?.(new CustomProgressEvent('bitswap:network:send-wantlist', peer));\n        await this._writeMessage(peer, msg, options);\n        this._updateSentStats(peer, msg.blocks);\n    }\n    /**\n     * Connects to another peer\n     */\n    async connectTo(peer, options = {}) {\n        if (!this._running) {\n            throw new Error('network isn\\'t running');\n        }\n        options.onProgress?.(new CustomProgressEvent('bitswap:network:dial', peer));\n        return this._libp2p.dial(peer, options);\n    }\n    _updateSentStats(peer, blocks) {\n        const peerId = peer.toString();\n        if (this._stats != null) {\n            for (const block of blocks.values()) {\n                this._stats.push(peerId, 'dataSent', block.length);\n            }\n            this._stats.push(peerId, 'blocksSent', blocks.size);\n        }\n    }\n    async _writeMessage(peerId, msg, options = {}) {\n        const stream = await this._libp2p.dialProtocol(peerId, [BITSWAP120, BITSWAP110, BITSWAP100]);\n        try {\n            /** @type {Uint8Array} */\n            let serialized;\n            switch (stream.protocol) {\n                case BITSWAP100:\n                    serialized = msg.serializeToBitswap100();\n                    break;\n                case BITSWAP110:\n                case BITSWAP120:\n                    serialized = msg.serializeToBitswap110();\n                    break;\n                default:\n                    throw new Error(`Unknown protocol: ${stream.protocol}`);\n            }\n            await pipe([serialized], (source) => lp.encode(source), stream);\n            await stream.close();\n        }\n        catch (err) {\n            options.onProgress?.(new CustomProgressEvent('bitswap:network:send-wantlist:error', { peer: peerId, error: err }));\n            this._log(err);\n            stream.abort(err);\n        }\n    }\n}\n//# sourceMappingURL=network.js.map","import { EventEmitter } from 'events';\nimport { CustomProgressEvent } from 'progress-events';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as CONSTANTS from './constants.js';\nimport { logger } from './utils/index.js';\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\nexport class Notifications extends EventEmitter {\n    _log;\n    /**\n     * Internal module used to track events about incoming blocks,\n     * wants and unwants.\n     */\n    constructor(peerId) {\n        super();\n        this.setMaxListeners(CONSTANTS.maxListeners);\n        this._log = logger(peerId, 'notif');\n    }\n    /**\n     * Signal the system that we received `block`.\n     */\n    hasBlock(cid, block) {\n        const event = blockEvent(cid);\n        this._log(event);\n        this.emit(event, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     */\n    async wantBlock(cid, options = {}) {\n        if (cid == null) {\n            throw new Error('Not a valid cid');\n        }\n        const blockEvt = blockEvent(cid);\n        const unwantEvt = unwantEvent(cid);\n        this._log(`wantBlock:${cid}`);\n        return new Promise((resolve, reject) => {\n            const onUnwant = () => {\n                this.removeListener(blockEvt, onBlock);\n                options.onProgress?.(new CustomProgressEvent('bitswap:want-block:unwant', cid));\n                reject(new Error(`Block for ${cid} unwanted`));\n            };\n            const onBlock = (data) => {\n                this.removeListener(unwantEvt, onUnwant);\n                options.onProgress?.(new CustomProgressEvent('bitswap:want-block:block', cid));\n                resolve(data);\n            };\n            this.once(unwantEvt, onUnwant);\n            this.once(blockEvt, onBlock);\n            options.signal?.addEventListener('abort', () => {\n                this.removeListener(blockEvt, onBlock);\n                this.removeListener(unwantEvt, onUnwant);\n                reject(new Error(`Want for ${cid} aborted`));\n            });\n        });\n    }\n    /**\n     * Signal that the block is not wanted anymore\n     */\n    unwantBlock(cid) {\n        const event = unwantEvent(cid);\n        this._log(event);\n        this.emit(event);\n    }\n}\n//# sourceMappingURL=notifications.js.map","import { EventEmitter } from 'events';\nimport MovingAverage, {} from '@vascosantos/moving-average';\nexport class Stat extends EventEmitter {\n    _options;\n    _queue;\n    _stats;\n    _frequencyLastTime;\n    _frequencyAccumulators;\n    _movingAverages;\n    _enabled;\n    _timeout;\n    constructor(initialCounters, options) {\n        super();\n        this._options = options;\n        this._queue = [];\n        this._stats = {};\n        this._frequencyLastTime = Date.now();\n        this._frequencyAccumulators = {};\n        this._movingAverages = {};\n        this._update = this._update.bind(this);\n        initialCounters.forEach((key) => {\n            this._stats[key] = BigInt(0);\n            this._movingAverages[key] = {};\n            this._options.movingAverageIntervals.forEach((interval) => {\n                const ma = this._movingAverages[key][interval] = MovingAverage(interval);\n                ma.push(this._frequencyLastTime, 0);\n            });\n        });\n        this._enabled = this._options.enabled;\n    }\n    enable() {\n        this._enabled = true;\n    }\n    disable() {\n        this._enabled = false;\n    }\n    stop() {\n        if (this._timeout != null) {\n            clearTimeout(this._timeout);\n        }\n    }\n    get snapshot() {\n        return Object.assign({}, this._stats);\n    }\n    get movingAverages() {\n        return Object.assign({}, this._movingAverages);\n    }\n    push(counter, inc) {\n        if (this._enabled) {\n            this._queue.push([counter, inc, Date.now()]);\n            this._resetComputeTimeout();\n        }\n    }\n    _resetComputeTimeout() {\n        if (this._timeout != null) {\n            clearTimeout(this._timeout);\n        }\n        this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n    _nextTimeout() {\n        // calculate the need for an update, depending on the queue length\n        const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n        return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n    _update() {\n        this._timeout = undefined;\n        if (this._queue.length > 0) {\n            let last;\n            while (this._queue.length > 0) {\n                const op = last = this._queue.shift();\n                (op != null) && this._applyOp(op);\n            }\n            (last != null) && this._updateFrequency(last[2]); // contains timestamp of last op\n            this.emit('update', this._stats);\n        }\n    }\n    _updateFrequency(latestTime) {\n        const timeDiff = latestTime - this._frequencyLastTime;\n        if (timeDiff > 0) {\n            Object.keys(this._stats).forEach((key) => {\n                this._updateFrequencyFor(key, timeDiff, latestTime);\n            });\n        }\n        this._frequencyLastTime = latestTime;\n    }\n    _updateFrequencyFor(key, timeDiffMS, latestTime) {\n        const count = this._frequencyAccumulators[key] ?? 0;\n        this._frequencyAccumulators[key] = 0;\n        const hz = (count / timeDiffMS) * 1000;\n        let movingAverages = this._movingAverages[key];\n        if (movingAverages == null) {\n            movingAverages = this._movingAverages[key] = {};\n        }\n        this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n            let movingAverage = movingAverages[movingAverageInterval];\n            if (movingAverage == null) {\n                movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n            }\n            movingAverage.push(latestTime, hz);\n        });\n    }\n    _applyOp(op) {\n        const key = op[0];\n        const inc = op[1];\n        if (typeof inc !== 'number') {\n            throw new Error(`invalid increment number: ${inc}`);\n        }\n        if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n            this._stats[key] = BigInt(0);\n        }\n        this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n        if (this._frequencyAccumulators[key] == null) {\n            this._frequencyAccumulators[key] = 0;\n        }\n        this._frequencyAccumulators[key] += inc;\n    }\n}\n//# sourceMappingURL=stat.js.map","import { EventEmitter } from 'events';\nimport { trackedMap } from '@libp2p/interface/metrics/tracked-map';\nimport { Stat } from './stat.js';\nconst defaultOptions = {\n    enabled: false,\n    computeThrottleTimeout: 1000,\n    computeThrottleMaxQueueSize: 1000,\n    movingAverageIntervals: [\n        60 * 1000,\n        5 * 60 * 1000,\n        15 * 60 * 1000 // 15 minutes\n    ]\n};\nexport class Stats extends EventEmitter {\n    _initialCounters;\n    _options;\n    _enabled;\n    _global;\n    _peers;\n    constructor(libp2p, initialCounters = [], _options = defaultOptions) {\n        super();\n        const options = Object.assign({}, defaultOptions, _options);\n        if (typeof options.computeThrottleTimeout !== 'number') {\n            throw new Error('need computeThrottleTimeout');\n        }\n        if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n            throw new Error('need computeThrottleMaxQueueSize');\n        }\n        this._initialCounters = initialCounters;\n        this._options = options;\n        this._enabled = this._options.enabled;\n        this._global = new Stat(initialCounters, options);\n        this._global.on('update', (stats) => this.emit('update', stats));\n        this._peers = trackedMap({\n            name: 'ipfs_bitswap_stats_peers',\n            metrics: libp2p.metrics\n        });\n    }\n    enable() {\n        this._enabled = true;\n        this._options.enabled = true;\n        this._global.enable();\n    }\n    disable() {\n        this._enabled = false;\n        this._options.enabled = false;\n        this._global.disable();\n    }\n    stop() {\n        this._enabled = false;\n        this._global.stop();\n        for (const peerStat of this._peers) {\n            peerStat[1].stop();\n        }\n    }\n    get snapshot() {\n        return this._global.snapshot;\n    }\n    get movingAverages() {\n        return this._global.movingAverages;\n    }\n    forPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        return this._peers.get(peerIdStr);\n    }\n    push(peer, counter, inc) {\n        if (this._enabled) {\n            this._global.push(counter, inc);\n            if (peer != null) {\n                let peerStats = this._peers.get(peer);\n                if (peerStats == null) {\n                    peerStats = new Stat(this._initialCounters, this._options);\n                    this._peers.set(peer, peerStats);\n                }\n                peerStats.push(counter, inc);\n            }\n        }\n    }\n    disconnected(peer) {\n        const peerId = peer.toString();\n        const peerStats = this._peers.get(peerId);\n        if (peerStats != null) {\n            peerStats.stop();\n            this._peers.delete(peerId);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import debounce from 'just-debounce-it';\nimport { wantlistSendDebounceMs } from '../constants.js';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nexport class MsgQueue {\n    peerId;\n    refcnt;\n    network;\n    _entries;\n    _log;\n    constructor(selfPeerId, otherPeerId, network) {\n        this.peerId = otherPeerId;\n        this.network = network;\n        this.refcnt = 1;\n        this._entries = [];\n        this._log = logger(selfPeerId, 'msgqueue');\n        this.sendEntries = debounce(this.sendEntries.bind(this), wantlistSendDebounceMs);\n    }\n    addMessage(msg, options = {}) {\n        if (msg.empty) {\n            return;\n        }\n        void this.send(msg, options);\n    }\n    addEntries(entries, options = {}) {\n        this._entries = this._entries.concat(entries);\n        this.sendEntries(options);\n    }\n    sendEntries(options = {}) {\n        if (this._entries.length === 0) {\n            return;\n        }\n        const msg = new Message(false);\n        this._entries.forEach((entry) => {\n            if (entry.cancel === true) {\n                msg.cancel(entry.cid);\n            }\n            else {\n                msg.addEntry(entry.cid, entry.priority);\n            }\n        });\n        this._entries = [];\n        this.addMessage(msg, options);\n    }\n    async send(msg, options = {}) {\n        try {\n            await this.network.connectTo(this.peerId, options);\n        }\n        catch (err) {\n            this._log.error('cant connect to peer %p: %s', this.peerId, err.message);\n            return;\n        }\n        this._log('sending message to peer %p', this.peerId);\n        // Note: Don't wait for sendMessage() to complete\n        this.network.sendMessage(this.peerId, msg, options).catch((err) => {\n            this._log.error('send error', err);\n        });\n    }\n}\n//# sourceMappingURL=msg-queue.js.map","import { trackedMap } from '@libp2p/interface/metrics/tracked-map';\nimport { base58btc } from 'multiformats/bases/base58';\nimport * as CONSTANTS from '../constants.js';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport { MsgQueue } from './msg-queue.js';\nexport class WantManager {\n    peers;\n    wantlist;\n    network;\n    _peerId;\n    _log;\n    constructor(peerId, network, stats, libp2p) {\n        this.peers = trackedMap({\n            name: 'ipfs_bitswap_want_manager_peers',\n            metrics: libp2p.metrics\n        });\n        this.wantlist = new Wantlist(stats, libp2p);\n        this.network = network;\n        this._peerId = peerId;\n        this._log = logger(peerId, 'want');\n    }\n    _addEntries(cids, cancel, force, options = {}) {\n        const entries = cids.map((cid, i) => {\n            return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n        });\n        entries.forEach((e) => {\n            // add changes to our wantlist\n            if (e.cancel) {\n                if (force === true) {\n                    this.wantlist.removeForce(e.cid.toString(base58btc));\n                }\n                else {\n                    this.wantlist.remove(e.cid);\n                }\n            }\n            else {\n                this._log('adding to wantlist');\n                // TODO: Figure out the wantType\n                // @ts-expect-error - requires wantType\n                this.wantlist.add(e.cid, e.priority);\n            }\n        });\n        // broadcast changes\n        for (const p of this.peers.values()) {\n            p.addEntries(entries, options);\n        }\n    }\n    _startPeerHandler(peerId) {\n        let mq = this.peers.get(peerId.toString());\n        if (mq != null) {\n            mq.refcnt++;\n            return;\n        }\n        mq = new MsgQueue(this._peerId, peerId, this.network);\n        // new peer, give them the full wantlist\n        const fullwantlist = new Message(true);\n        for (const entry of this.wantlist.entries()) {\n            fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n        }\n        mq.addMessage(fullwantlist);\n        this.peers.set(peerId.toString(), mq);\n        return mq;\n    }\n    _stopPeerHandler(peerId) {\n        const mq = this.peers.get(peerId.toString());\n        if (mq == null) {\n            return;\n        }\n        mq.refcnt--;\n        if (mq.refcnt > 0) {\n            return;\n        }\n        this.peers.delete(peerId.toString());\n    }\n    /**\n     * add all the cids to the wantlist\n     */\n    wantBlocks(cids, options = {}) {\n        this._addEntries(cids, false, false, options);\n        options.signal?.addEventListener('abort', () => {\n            this.cancelWants(cids);\n        });\n    }\n    /**\n     * Remove blocks of all the given keys without respecting refcounts\n     */\n    unwantBlocks(cids) {\n        this._log('unwant blocks: %s', cids.length);\n        this._addEntries(cids, true, true);\n    }\n    /**\n     * Cancel wanting all of the given keys\n     */\n    cancelWants(cids) {\n        this._log('cancel wants: %s', cids.length);\n        this._addEntries(cids, true);\n    }\n    /**\n     * Returns a list of all currently connected peers\n     */\n    connectedPeers() {\n        return Array.from(this.peers.keys());\n    }\n    connected(peerId) {\n        this._startPeerHandler(peerId);\n    }\n    disconnected(peerId) {\n        this._stopPeerHandler(peerId);\n    }\n    start() {\n    }\n    stop() {\n        this.peers.forEach((mq) => { this.disconnected(mq.peerId); });\n    }\n}\n//# sourceMappingURL=index.js.map","import { anySignal } from 'any-signal';\nimport forEach from 'it-foreach';\nimport { CID } from 'multiformats/cid';\nimport { DecisionEngine } from './decision-engine/index.js';\nimport { Network } from './network.js';\nimport { Notifications } from './notifications.js';\nimport { Stats } from './stats/index.js';\nimport { logger } from './utils/index.js';\nimport { WantManager } from './want-manager/index.js';\nconst hashLoader = {\n    async getHasher() {\n        throw new Error('Not implemented');\n    }\n};\nconst defaultOptions = {\n    maxInboundStreams: 1024,\n    maxOutboundStreams: 1024,\n    incomingStreamTimeout: 30000,\n    hashLoader,\n    statsEnabled: false,\n    statsComputeThrottleTimeout: 1000,\n    statsComputeThrottleMaxQueueSize: 1000\n};\nconst statsKeys = [\n    'blocksReceived',\n    'dataReceived',\n    'dupBlksReceived',\n    'dupDataReceived',\n    'blocksSent',\n    'dataSent',\n    'providesBufferLength',\n    'wantListLength',\n    'peerCount'\n];\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n */\nexport class DefaultBitswap {\n    _libp2p;\n    _log;\n    stats;\n    network;\n    blockstore;\n    engine;\n    wm;\n    notifications;\n    started;\n    constructor(libp2p, blockstore, options = {}) {\n        this._libp2p = libp2p;\n        this._log = logger(this.peerId);\n        options = Object.assign({}, defaultOptions, options);\n        // stats\n        this.stats = new Stats(libp2p, statsKeys, {\n            enabled: options.statsEnabled,\n            computeThrottleTimeout: options.statsComputeThrottleTimeout,\n            computeThrottleMaxQueueSize: options.statsComputeThrottleMaxQueueSize\n        });\n        // the network delivers messages\n        this.network = new Network(libp2p, this, this.stats, {\n            hashLoader: options.hashLoader,\n            maxInboundStreams: options.maxInboundStreams,\n            maxOutboundStreams: options.maxOutboundStreams,\n            incomingStreamTimeout: options.incomingStreamTimeout\n        });\n        // local database\n        this.blockstore = blockstore;\n        this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this.stats, libp2p);\n        // handle message sending\n        this.wm = new WantManager(this.peerId, this.network, this.stats, libp2p);\n        this.notifications = new Notifications(this.peerId);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    get peerId() {\n        return this._libp2p.peerId;\n    }\n    /**\n     * handle messages received through the network\n     */\n    async _receiveMessage(peerId, incoming) {\n        try {\n            // Note: this allows the engine to respond to any wants in the message.\n            // Processing of the blocks in the message happens below, after the\n            // blocks have been added to the blockstore.\n            await this.engine.messageReceived(peerId, incoming);\n        }\n        catch (err) {\n            // Log instead of throwing an error so as to process as much as\n            // possible of the message. Currently `messageReceived` does not\n            // throw any errors, but this could change in the future.\n            this._log('failed to receive message', incoming);\n        }\n        if (incoming.blocks.size === 0) {\n            return;\n        }\n        /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */\n        const received = [];\n        for (const [cidStr, data] of incoming.blocks.entries()) {\n            const cid = CID.parse(cidStr);\n            received.push({\n                wasWanted: this.wm.wantlist.contains(cid),\n                cid,\n                data\n            });\n        }\n        // quickly send out cancels, reduces chances of duplicate block receives\n        this.wm.cancelWants(received\n            .filter(({ wasWanted }) => wasWanted)\n            .map(({ cid }) => cid));\n        await Promise.all(received.map(async ({ cid, wasWanted, data }) => { await this._handleReceivedBlock(peerId, cid, data, wasWanted); }));\n    }\n    async _handleReceivedBlock(peerId, cid, data, wasWanted) {\n        this._log('received block');\n        const has = await this.blockstore.has(cid);\n        this._updateReceiveCounters(peerId.toString(), cid, data, has);\n        if (!wasWanted) {\n            return;\n        }\n        await this.put(cid, data);\n    }\n    _updateReceiveCounters(peerIdStr, cid, data, exists) {\n        this.stats.push(peerIdStr, 'blocksReceived', 1);\n        this.stats.push(peerIdStr, 'dataReceived', data.length);\n        if (exists) {\n            this.stats.push(peerIdStr, 'dupBlksReceived', 1);\n            this.stats.push(peerIdStr, 'dupDataReceived', data.length);\n        }\n    }\n    /**\n     * handle errors on the receiving channel\n     */\n    _receiveError(err) {\n        this._log.error('ReceiveError', err);\n    }\n    /**\n     * handle new peers\n     */\n    _onPeerConnected(peerId) {\n        this.wm.connected(peerId);\n    }\n    /**\n     * handle peers being disconnected\n     */\n    _onPeerDisconnected(peerId) {\n        this.wm.disconnected(peerId);\n        this.engine.peerDisconnected(peerId);\n        this.stats.disconnected(peerId);\n    }\n    enableStats() {\n        this.stats.enable();\n    }\n    disableStats() {\n        this.stats.disable();\n    }\n    /**\n     * Return the current wantlist for a given `peerId`\n     */\n    wantlistForPeer(peerId, _options) {\n        return this.engine.wantlistForPeer(peerId);\n    }\n    /**\n     * Return ledger information for a given `peerId`\n     */\n    ledgerForPeer(peerId) {\n        return this.engine.ledgerForPeer(peerId);\n    }\n    /**\n     * Fetch a given block by cid. If the block is in the local\n     * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.\n     */\n    async want(cid, options = {}) {\n        const fetchFromNetwork = async (cid, options) => {\n            // add it to the want list - n.b. later we will abort the AbortSignal\n            // so no need to remove the blocks from the wantlist after we have it\n            this.wm.wantBlocks([cid], options);\n            return this.notifications.wantBlock(cid, options);\n        };\n        let promptedNetwork = false;\n        const loadOrFetchFromNetwork = async (cid, options) => {\n            try {\n                // have to await here as we want to handle ERR_NOT_FOUND\n                const block = await this.blockstore.get(cid, options);\n                return block;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n                if (!promptedNetwork) {\n                    promptedNetwork = true;\n                    this.network.findAndConnect(cid, options)\n                        .catch((err) => { this._log.error(err); });\n                }\n                // we don't have the block locally so fetch it from the network\n                return await fetchFromNetwork(cid, options);\n            }\n        };\n        // depending on implementation it's possible for blocks to come in while\n        // we do the async operations to get them from the blockstore leading to\n        // a race condition, so register for incoming block notifications as well\n        // as trying to get it from the datastore\n        const controller = new AbortController();\n        const signal = anySignal([controller.signal, options.signal]);\n        try {\n            const block = await Promise.race([\n                this.notifications.wantBlock(cid, {\n                    ...options,\n                    signal\n                }),\n                loadOrFetchFromNetwork(cid, {\n                    ...options,\n                    signal\n                })\n            ]);\n            return block;\n        }\n        finally {\n            // since we have the block we can now abort any outstanding attempts to\n            // fetch it\n            controller.abort();\n            signal.clear();\n        }\n    }\n    /**\n     * Removes the given CIDs from the wantlist independent of any ref counts.\n     *\n     * This will cause all outstanding promises for a given block to reject.\n     *\n     * If you want to cancel the want for a block without doing that, pass an\n     * AbortSignal in to `.get` or `.getMany` and abort it.\n     */\n    unwant(cids) {\n        const cidsArray = Array.isArray(cids) ? cids : [cids];\n        this.wm.unwantBlocks(cidsArray);\n        cidsArray.forEach((cid) => { this.notifications.unwantBlock(cid); });\n    }\n    /**\n     * Removes the given keys from the want list. This may cause pending promises\n     * for blocks to never resolve.  If you wish these promises to abort instead\n     * call `unwant(cids)` instead.\n     */\n    cancelWants(cids) {\n        this.wm.cancelWants(Array.isArray(cids) ? cids : [cids]);\n    }\n    /**\n     * Put the given block to the underlying blockstore and\n     * send it to nodes that have it in their wantlist.\n     */\n    async put(cid, block, _options) {\n        await this.blockstore.put(cid, block);\n        this.notify(cid, block);\n    }\n    /**\n     * Put the given blocks to the underlying blockstore and\n     * send it to nodes that have it them their wantlist.\n     */\n    async *putMany(source, options) {\n        yield* this.blockstore.putMany(forEach(source, ({ cid, block }) => {\n            this.notify(cid, block);\n        }), options);\n    }\n    /**\n     * Sends notifications about the arrival of a block\n     */\n    notify(cid, block, options = {}) {\n        this.notifications.hasBlock(cid, block);\n        this.engine.receivedBlocks([{ cid, block }]);\n        // Note: Don't wait for provide to finish before returning\n        this.network.provide(cid, options).catch((err) => {\n            this._log.error('Failed to provide: %s', err.message);\n        });\n    }\n    /**\n     * Get the current list of wants\n     */\n    getWantlist() {\n        return this.wm.wantlist.entries();\n    }\n    /**\n     * Get the current list of partners\n     */\n    get peers() {\n        return this.engine.peers();\n    }\n    /**\n     * Start the bitswap node\n     */\n    async start() {\n        this.wm.start();\n        await this.network.start();\n        this.engine.start();\n        this.started = true;\n    }\n    /**\n     * Stop the bitswap node\n     */\n    async stop() {\n        this.stats.stop();\n        this.wm.stop();\n        await this.network.stop();\n        this.engine.stop();\n        this.started = false;\n    }\n}\n//# sourceMappingURL=bitswap.js.map","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal(signals) {\n    const controller = new globalThis.AbortController();\n    function onAbort() {\n        controller.abort();\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    for (const signal of signals) {\n        if (signal?.aborted === true) {\n            onAbort();\n            break;\n        }\n        if (signal?.addEventListener != null) {\n            signal.addEventListener('abort', onAbort);\n        }\n    }\n    function clear() {\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    const signal = controller.signal;\n    signal.clear = clear;\n    return signal;\n}\n//# sourceMappingURL=index.js.map","import { DefaultBitswap } from './bitswap.js';\nexport const createBitswap = (libp2p, blockstore, options = {}) => {\n    return new DefaultBitswap(libp2p, blockstore, options);\n};\n//# sourceMappingURL=index.js.map","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all(source) {\n    const arr = [];\n    for await (const entry of source) {\n        arr.push(entry);\n    }\n    return arr;\n}\n//# sourceMappingURL=index.js.map","export default function peekableIterator(iterable) {\n    // @ts-expect-error\n    const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n        // @ts-expect-error\n        ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n        // @ts-expect-error\n        : [iterable[Symbol.iterator](), Symbol.iterator];\n    const queue = [];\n    // @ts-expect-error\n    return {\n        peek: () => {\n            return iterator.next();\n        },\n        push: (value) => {\n            queue.push(value);\n        },\n        next: () => {\n            if (queue.length > 0) {\n                return {\n                    done: false,\n                    value: queue.shift()\n                };\n            }\n            return iterator.next();\n        },\n        [symbol]() {\n            return this;\n        }\n    };\n}\n//# sourceMappingURL=index.js.map","\nexport default () => {}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n","import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n","import { normaliseContent } from './normalise-content.browser.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}\n */\nexport function normaliseInput (input) {\n  // @ts-expect-error browser normaliseContent returns a Blob not an AsyncIterable<Uint8Array>\n  return normaliseCandidateMultiple(input, normaliseContent, true)\n}\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n\n/**\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string\n * @returns {string}\n */\nexport function toUrlString (url) {\n  try {\n    // @ts-expect-error\n    url = multiaddrToUri(multiaddr(url))\n  } catch (/** @type {any} */ err) { }\n\n  url = url.toString()\n\n  return url\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","\nexport class NotInitializedError extends Error {\n  constructor (message = 'not initialized') {\n    super(message)\n    this.name = 'NotInitializedError'\n    this.code = NotInitializedError.code\n  }\n}\nNotInitializedError.code = 'ERR_NOT_INITIALIZED'\n\nexport class AlreadyInitializingError extends Error {\n  constructor (message = 'cannot initialize an initializing node') {\n    super(message)\n    this.name = 'AlreadyInitializingError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializingError.code = 'ERR_ALREADY_INITIALIZING'\n\nexport class AlreadyInitializedError extends Error {\n  constructor (message = 'cannot re-initialize an initialized node') {\n    super(message)\n    this.name = 'AlreadyInitializedError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializedError.code = 'ERR_ALREADY_INITIALIZED'\n\nexport class NotStartedError extends Error {\n  constructor (message = 'not started') {\n    super(message)\n    this.name = 'NotStartedError'\n    this.code = NotStartedError.code\n  }\n}\nNotStartedError.code = 'ERR_NOT_STARTED'\n\nexport class AlreadyStartingError extends Error {\n  constructor (message = 'cannot start, already startin') {\n    super(message)\n    this.name = 'AlreadyStartingError'\n    this.code = AlreadyStartingError.code\n  }\n}\nAlreadyStartingError.code = 'ERR_ALREADY_STARTING'\n\nexport class AlreadyStartedError extends Error {\n  constructor (message = 'cannot start, already started') {\n    super(message)\n    this.name = 'AlreadyStartedError'\n    this.code = AlreadyStartedError.code\n  }\n}\nAlreadyStartedError.code = 'ERR_ALREADY_STARTED'\n\nexport class NotEnabledError extends Error {\n  constructor (message = 'not enabled') {\n    super(message)\n    this.name = 'NotEnabledError'\n    this.code = NotEnabledError.code\n  }\n}\nNotEnabledError.code = 'ERR_NOT_ENABLED'\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { IpNet } from '@chainsafe/netmask';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTC = and(UDP, base('webrtc'), base('certhash'));\nexport const WebRTC = or(and(_WebRTC, base('p2p')), _WebRTC);\nexport const WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nexport const WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS, WebRTC);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), WebRTCStar, WebRTCDirect, WebRTC, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CID } from 'multiformats/cid';\nimport { URL } from 'iso-url';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nexport const pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 2;\n// CID, libp2p-key or DNSLink\nexport const subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nconst subdomainIdMatch = 1;\nconst subdomainProtocolMatch = 2;\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\nfunction isMultihash(hash) {\n    const formatted = convertToString(hash);\n    if (formatted === false) {\n        return false;\n    }\n    try {\n        Digest.decode(base58btc.decode('z' + formatted));\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isMultiaddr(input) {\n    try {\n        return Boolean(multiaddr(input));\n    }\n    catch {\n        return false;\n    }\n}\nfunction isBase32EncodedMultibase(hash) {\n    try {\n        let cid;\n        if (isString(hash)) {\n            cid = CID.parse(hash);\n        }\n        else {\n            cid = CID.asCID(hash);\n        }\n        if (cid == null) {\n            return false;\n        }\n        base32.decode(cid.toString());\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isCID(hash) {\n    try {\n        if (isString(hash)) {\n            return Boolean(CID.parse(hash));\n        }\n        if (hash instanceof Uint8Array) {\n            return Boolean(CID.decode(hash));\n        }\n        return Boolean(CID.asCID(hash)); // eslint-disable-line no-new\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr(input) {\n    return isMultiaddr(input) && mafmt.P2P.matches(input);\n}\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipfs') {\n        return false;\n    }\n    let hash = match[hashMatch];\n    if (hash != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure hash is case-insensitive\n        // (browsers force-lowercase authority component anyway)\n        hash = hash.toLowerCase();\n    }\n    return isCID(hash);\n}\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipns') {\n        return false;\n    }\n    let ipnsId = match[hashMatch];\n    if (ipnsId != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure ipnsId is case-insensitive\n        // (browsers force-lowercase authority compotent anyway)\n        ipnsId = ipnsId.toLowerCase();\n        // Check if it is cidv1\n        if (isCID(ipnsId))\n            return true;\n        // Check if it looks like FQDN\n        try {\n            if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n                // name without tld, assuming its inlined into a single DNS label\n                // (https://github.com/ipfs/in-web-browsers/issues/169)\n                // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n                ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');\n            }\n            // URL implementation in web browsers forces lowercase of the hostname\n            const { hostname } = new URL(`http://${ipnsId}`); // eslint-disable-line no-new\n            // Check if potential FQDN has an explicit TLD\n            return fqdnWithTld.test(hostname);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {any} input\n */\nfunction isString(input) {\n    return typeof input === 'string';\n}\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString(input) {\n    if (input instanceof Uint8Array) {\n        return uint8ArrayToString(input, 'base58btc');\n    }\n    if (isString(input)) {\n        return input;\n    }\n    return false;\n}\nexport const ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url);\nexport const ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\nexport const ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\nexport const url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);\nexport const path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern);\nexport { isMultihash as multihash };\nexport { isMultiaddr as multiaddr };\nexport { isPeerMultiaddr as peerMultiaddr };\nexport { isCID as cid };\nexport const base32cid = (cid) => (isCID(cid) && isBase32EncodedMultibase(cid));\nexport const ipfsPath = (path) => isIpfs(path, pathPattern);\nexport const ipnsPath = (path) => isIpns(path, pathPattern);\nexport const urlOrPath = (x) => url(x) || path(x);\nexport const cidPath = (path) => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern);\n//# sourceMappingURL=index.js.map","\nexport class TimeoutError extends Error {\n  constructor (message = 'request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n    this.code = TimeoutError.code\n  }\n}\n\nTimeoutError.code = 'ERR_TIMEOUT'\n","/* eslint-disable no-unreachable */\n\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\nimport parseDuration from 'parse-duration'\nimport { TimeoutError } from './errors.js'\n\n/**\n * @template {any[]} Args\n * @template {Promise<any> | AsyncIterable<any>} R - The return type of `fn`\n * @param {(...args:Args) => R} fn\n * @param {number} [optionsArgIndex]\n * @returns {(...args:Args) => R}\n */\nexport function withTimeoutOption (fn, optionsArgIndex) {\n  // eslint-disable-next-line\n  return /** @returns {R} */(/** @type {Args} */...args) => {\n    const options = args[optionsArgIndex == null ? args.length - 1 : optionsArgIndex]\n    if (!options || !options.timeout) return fn(...args)\n\n    const timeout = typeof options.timeout === 'string'\n      ? parseDuration(options.timeout)\n      : options.timeout\n\n    const controller = new TimeoutController(timeout)\n\n    options.signal = anySignal([options.signal, controller.signal])\n\n    const fnRes = fn(...args)\n    // eslint-disable-next-line promise/param-names\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      controller.signal.addEventListener('abort', () => {\n        reject(new TimeoutError())\n      })\n    })\n\n    const start = Date.now()\n\n    const maybeThrowTimeoutError = () => {\n      if (controller.signal.aborted) {\n        throw new TimeoutError()\n      }\n\n      const timeTaken = Date.now() - start\n\n      // if we have starved the event loop by adding microtasks, we could have\n      // timed out already but the TimeoutController will never know because it's\n      // setTimeout will not fire until we stop adding microtasks\n      if (timeTaken > timeout) {\n        controller.abort()\n        throw new TimeoutError()\n      }\n    }\n\n    // @ts-expect-error\n    if (fnRes[Symbol.asyncIterator]) {\n      // @ts-expect-error\n      return (async function * () {\n        // @ts-expect-error\n        const it = fnRes[Symbol.asyncIterator]()\n\n        try {\n          while (true) {\n            const { value, done } = await Promise.race([it.next(), timeoutPromise])\n\n            if (done) {\n              break\n            }\n\n            maybeThrowTimeoutError()\n\n            yield value\n          }\n        } catch (/** @type {any} */ err) {\n          maybeThrowTimeoutError()\n\n          throw err\n        } finally {\n          controller.clear()\n\n          if (it.return) {\n            it.return()\n          }\n        }\n      })()\n    }\n\n    // @ts-expect-error\n    return (async () => {\n      try {\n        const res = await Promise.race([fnRes, timeoutPromise])\n\n        maybeThrowTimeoutError()\n\n        return res\n      } catch (/** @type {any} */ err) {\n        maybeThrowTimeoutError()\n\n        throw err\n      } finally {\n        controller.clear()\n      }\n    })()\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath (string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n","/* eslint-disable no-unreachable */\n\nimport * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport * as dagPB from '@ipld/dag-pb'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\n\nexport const OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\nexport const MFS_ROOT_KEY = new Key('/local/filesroot')\nexport const MFS_MAX_CHUNK_SIZE = 262144\nexport const MFS_MAX_LINKS = 174\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string | CID} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\nexport const normalizePath = (pathStr) => {\n  const cid = CID.asCID(pathStr)\n\n  if (cid) {\n    return `/ipfs/${pathStr}`\n  }\n\n  const str = pathStr.toString()\n\n  try {\n    return `/ipfs/${CID.parse(str)}`\n  } catch {}\n\n  if (isIpfs.path(str)) {\n    return str\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH)\n  }\n}\n\n// TODO: do we need both normalizePath and normalizeCidPath?\n// TODO: don't forget ipfs-core-utils/src/to-cid-and-path\n/**\n * @param {Uint8Array|CID|string} path\n */\nexport const normalizeCidPath = (path) => {\n  if (path instanceof Uint8Array) {\n    return CID.decode(path).toString()\n  }\n\n  path = path.toString()\n\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length)\n  }\n\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1)\n  }\n\n  return path\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID | string | Uint8Array} ipfsPath - A CID or IPFS path\n * @param {{ path?: string, signal?: AbortSignal }} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<{ cid: CID, remainderPath: string}>}\n */\nexport const resolvePath = async function (repo, codecs, ipfsPath, options = {}) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (path) {\n    options.path = path\n  }\n\n  let lastCid = cid\n  let lastRemainderPath = options.path || ''\n\n  if (lastRemainderPath.startsWith('/')) {\n    lastRemainderPath = lastRemainderPath.substring(1)\n  }\n\n  if (options.path) {\n    try {\n      for await (const { value, remainderPath } of resolve(cid, options.path, codecs, repo, {\n        signal: options.signal\n      })) {\n        if (!CID.asCID(value)) {\n          break\n        }\n\n        lastRemainderPath = remainderPath\n        lastCid = value\n      }\n    } catch (/** @type {any} */ err) {\n      // TODO: add error codes to IPLD\n      if (err.message.startsWith('Object has no property')) {\n        err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`\n        err.code = 'ERR_NO_LINK'\n      }\n      throw err\n    }\n  }\n\n  return {\n    cid: lastCid,\n    remainderPath: lastRemainderPath || ''\n  }\n}\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n *\n * @param {UnixFSEntry} file\n */\nexport const mapFile = (file) => {\n  if (file.type !== 'file' && file.type !== 'directory' && file.type !== 'raw') {\n    // file.type === object | identity not supported yet\n    throw new Error(`Unknown node type '${file.type}'`)\n  }\n\n  /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    size: file.size,\n    type: 'file'\n  }\n\n  if (file.type === 'directory') {\n    // @ts-expect-error - TS type can't be changed from File to Directory\n    output.type = 'dir'\n  }\n\n  if (file.type === 'file') {\n    output.size = file.unixfs.fileSize()\n  }\n\n  if (file.type === 'file' || file.type === 'directory') {\n    output.mode = file.unixfs.mode\n\n    if (file.unixfs.mtime !== undefined) {\n      output.mtime = file.unixfs.mtime\n    }\n  }\n\n  return output\n}\n\nexport const withTimeout = withTimeoutOption(\n  /**\n   * @template T\n   * @param {Promise<T>|T} promise\n   * @param {AbortOptions} [_options]\n   * @returns {Promise<T>}\n   */\n  async (promise, _options) => await promise\n)\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} codecs\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {AbortOptions} [options]\n */\nexport const resolve = async function * (cid, path, codecs, repo, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    // special case for dag-pb, use the link name as the path segment\n    if (cid.code === dagPB.code && Array.isArray(value.Links)) {\n      const link = value.Links.find((/** @type {PBLink} */ l) => l.Name === key)\n\n      if (link) {\n        yield {\n          value: link.Hash,\n          remainderPath: parts.join('/')\n        }\n\n        value = await load(link.Hash)\n        lastCid = link.Hash\n\n        continue\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    if (CID.asCID(value)) {\n      lastCid = value\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { NotStartedError, AlreadyStartingError, AlreadyStartedError } from '../errors.js'\nimport { withTimeout } from '../utils.js'\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nexport class Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create ({ start, stop }) {\n    return new Service(start, stop)\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start (service, options) {\n    const { state, activate } = service\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped': {\n        try {\n          const promise = activate(options)\n          service.state = { status: 'starting', ready: promise }\n          // Note: MUST await after state transition above otherwise race\n          // condition may occur.\n          const result = await promise\n          service.state = { status: 'started', value: result }\n          return result\n        // If failed to start, transiton from 'starting' to 'stopped'\n        // state.\n        } catch (/** @type {any} */ error) {\n          service.state = { status: 'stopped' }\n          throw error\n        }\n      }\n      case 'starting': {\n        throw new AlreadyStartingError()\n      }\n      case 'started': {\n        throw new AlreadyStartedError()\n      }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping': {\n        await state.ready\n        return await Service.start(service, options)\n      }\n      default: {\n        return Service.panic(service)\n      }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop (service) {\n    const { state, deactivate } = service\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped': {\n        break\n      }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting': {\n        // We do not want to error stop if start failed.\n        try { await state.ready } catch (/** @type {any} */ _) {}\n        return await Service.stop(service)\n      }\n      // if service is stopping we just await for it to complete.\n      case 'stopping': {\n        return await state.ready\n      }\n      case 'started': {\n        if (deactivate) {\n          await deactivate(state.value)\n        }\n        service.state = { status: 'stopped' }\n        break\n      }\n      default: {\n        Service.panic(state)\n      }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try ({ state }) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use ({ state }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      case 'starting':\n        return await withTimeout(state.ready, options)\n      default:\n        throw new NotStartedError()\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic ({ state }) {\n    const status = JSON.stringify({ status: state.status })\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`)\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor (activate, deactivate) {\n    this.activate = activate\n    this.deactivate = deactivate\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = { status: 'stopped' }\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use (options) {\n    return await Service.use(this, options)\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try () {\n    return Service.try(this)\n  }\n}\n","/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js'\nimport PQueue from 'p-queue'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport async function resolveDnslink (fqdn, opts) { // eslint-disable-line require-await\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async (fqdn, opts = {}) => {\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolve(fqdn, opts)\n}\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","// dns-nodejs gets replaced by dns-browser when bundled\nimport { resolveDnslink } from 'ipfs-core-config/dns'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nexport function createDns () {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return resolveDnslink(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n","import * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolve as res } from '../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/src/multibases').Multibases} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\nexport function createResolve ({ repo, codecs, bases, name }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]}\n   */\n  async function resolve (path, opts = {}) {\n    if (!isIpfs.path(path)) {\n      throw new Error('invalid argument ' + path)\n    }\n\n    if (isIpfs.ipnsPath(path)) {\n      for await (const resolvedPath of name.resolve(path, opts)) {\n        path = resolvedPath\n      }\n    }\n\n    const [, schema, hash, ...rest] = path.split('/') // ['', 'ipfs', 'hash', ...path]\n    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined\n    const bytes = parseBytes(hash)\n\n    // nothing to resolve return the input\n    if (rest.length === 0) {\n      const str = base ? base.encoder.encode(bytes) : hash\n\n      return `/${schema}/${str}`\n    }\n\n    const cid = CID.decode(bytes)\n\n    path = rest.join('/')\n\n    const results = res(cid, path, codecs, repo, opts)\n    let value = cid\n    let remainderPath = path\n\n    for await (const result of results) {\n      if (CID.asCID(result.value)) {\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    }\n\n    return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\nfunction parseBytes (str) {\n  try {\n    return peerIdFromString(str).toBytes()\n  } catch {\n    return CID.parse(str).bytes\n  }\n}\n","\nexport const PinTypes = {\n  /** @type {'direct'} */\n  direct: 'direct',\n  /** @type {'recursive'} */\n  recursive: 'recursive',\n  /** @type {'indirect'} */\n  indirect: 'indirect',\n  /** @type {'all'} */\n  all: 'all'\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLs ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE')\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { reason, pinned, parent, metadata } = await repo.pins.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED')\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\n\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Source} Source\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Pin} PinTarget\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @template T\n * @typedef {Iterable<T>|AsyncIterable<T>} AwaitIterable\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAddAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    /**\n     * @returns {AsyncIterable<CID>}\n     */\n    const pinAdd = async function * () {\n      for await (const { path, recursive, metadata } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n\n        // verify that each hash can be pinned\n        const { reason } = await repo.pins.isPinnedWithType(cid, [PinTypes.recursive, PinTypes.direct])\n\n        if (reason === 'recursive' && !recursive) {\n          // only disallow trying to override recursive pins\n          throw new Error(`${cid} already pinned recursively`)\n        }\n\n        if (recursive) {\n          await repo.pins.pinRecursively(cid, { metadata })\n        } else {\n          await repo.pins.pinDirectly(cid, { metadata })\n        }\n\n        yield cid\n      }\n    }\n\n    // When adding a file, we take a lock that gets released after pinning\n    // is complete, so don't take a second lock here\n    const lock = Boolean(options.lock)\n\n    if (!lock) {\n      yield * pinAdd()\n      return\n    }\n\n    const release = await repo.gcLock.readLock()\n\n    try {\n      yield * pinAdd()\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n","import last from 'it-last'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {ReturnType<typeof import('./add-all').createAddAll>} config.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"add\"]}\n   */\n  return (path, options = {}) => {\n    let iter\n\n    const cid = CID.asCID(path)\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options)\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options)\n    }\n\n    // @ts-expect-error return value of last can be undefined\n    return last(iter)\n  }\n}\n","import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n","import last from 'it-last'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]} config.rmAll\n */\nexport function createRm ({ rmAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    // @ts-expect-error return value of last can be undefined\n    const cid = await last(rmAll([{ path, ...options }], options))\n\n    if (!cid) {\n      throw new Error('CID expected')\n    }\n\n    return cid\n  }\n\n  return rm\n}\n","import errCode from 'err-code'\n\n/**\n * @param {Error} [err]\n */\nexport function dbOpenFailedError (err) {\n  err = err || new Error('Cannot open database')\n  return errCode(err, 'ERR_DB_OPEN_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbDeleteFailedError (err) {\n  err = err || new Error('Delete failed')\n  return errCode(err, 'ERR_DB_DELETE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbWriteFailedError (err) {\n  err = err || new Error('Write failed')\n  return errCode(err, 'ERR_DB_WRITE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function notFoundError (err) {\n  err = err || new Error('Not Found')\n  return errCode(err, 'ERR_NOT_FOUND')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function abortedError (err) {\n  err = err || new Error('Aborted')\n  return errCode(err, 'ERR_ABORTED')\n}\n","export const ERR_IPNS_EXPIRED_RECORD = 'ERR_IPNS_EXPIRED_RECORD';\nexport const ERR_UNRECOGNIZED_VALIDITY = 'ERR_UNRECOGNIZED_VALIDITY';\nexport const ERR_SIGNATURE_CREATION = 'ERR_SIGNATURE_CREATION';\nexport const ERR_SIGNATURE_VERIFICATION = 'ERR_SIGNATURE_VERIFICATION';\nexport const ERR_UNRECOGNIZED_FORMAT = 'ERR_UNRECOGNIZED_FORMAT';\nexport const ERR_PEER_ID_FROM_PUBLIC_KEY = 'ERR_PEER_ID_FROM_PUBLIC_KEY';\nexport const ERR_PUBLIC_KEY_FROM_ID = 'ERR_PUBLIC_KEY_FROM_ID';\nexport const ERR_UNDEFINED_PARAMETER = 'ERR_UNDEFINED_PARAMETER';\nexport const ERR_INVALID_RECORD_DATA = 'ERR_INVALID_RECORD_DATA';\nexport const ERR_INVALID_EMBEDDED_KEY = 'ERR_INVALID_EMBEDDED_KEY';\nexport const ERR_MISSING_PRIVATE_KEY = 'ERR_MISSING_PRIVATE_KEY';\n//# sourceMappingURL=errors.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var IpnsEntry;\n(function (IpnsEntry) {\n    let ValidityType;\n    (function (ValidityType) {\n        ValidityType[\"EOL\"] = \"EOL\";\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let __ValidityTypeValues;\n    (function (__ValidityTypeValues) {\n        __ValidityTypeValues[__ValidityTypeValues[\"EOL\"] = 0] = \"EOL\";\n    })(__ValidityTypeValues || (__ValidityTypeValues = {}));\n    (function (ValidityType) {\n        ValidityType.codec = () => {\n            return enumeration(__ValidityTypeValues);\n        };\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let _codec;\n    IpnsEntry.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.value != null) {\n                    w.uint32(10);\n                    w.bytes(obj.value);\n                }\n                if (obj.signature != null) {\n                    w.uint32(18);\n                    w.bytes(obj.signature);\n                }\n                if (obj.validityType != null) {\n                    w.uint32(24);\n                    IpnsEntry.ValidityType.codec().encode(obj.validityType, w);\n                }\n                if (obj.validity != null) {\n                    w.uint32(34);\n                    w.bytes(obj.validity);\n                }\n                if (obj.sequence != null) {\n                    w.uint32(40);\n                    w.uint64(obj.sequence);\n                }\n                if (obj.ttl != null) {\n                    w.uint32(48);\n                    w.uint64(obj.ttl);\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(58);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.signatureV2 != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signatureV2);\n                }\n                if (obj.data != null) {\n                    w.uint32(74);\n                    w.bytes(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.value = reader.bytes();\n                            break;\n                        case 2:\n                            obj.signature = reader.bytes();\n                            break;\n                        case 3:\n                            obj.validityType = IpnsEntry.ValidityType.codec().decode(reader);\n                            break;\n                        case 4:\n                            obj.validity = reader.bytes();\n                            break;\n                        case 5:\n                            obj.sequence = reader.uint64();\n                            break;\n                        case 6:\n                            obj.ttl = reader.uint64();\n                            break;\n                        case 7:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 8:\n                            obj.signatureV2 = reader.bytes();\n                            break;\n                        case 9:\n                            obj.data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    IpnsEntry.encode = (obj) => {\n        return encodeMessage(obj, IpnsEntry.codec());\n    };\n    IpnsEntry.decode = (buf) => {\n        return decodeMessage(buf, IpnsEntry.codec());\n    };\n})(IpnsEntry || (IpnsEntry = {}));\n//# sourceMappingURL=ipns.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function enumeration(v) {\n    function findValue(val) {\n        // Use the reverse mapping to look up the enum key for the stored value\n        // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n        if (v[val.toString()] == null) {\n            throw new Error('Invalid enum value');\n        }\n        return v[val];\n    }\n    const encode = function enumEncode(val, writer) {\n        const enumValue = findValue(val);\n        writer.int32(enumValue);\n    };\n    const decode = function enumDecode(reader) {\n        const val = reader.int32();\n        return findValue(val);\n    };\n    // @ts-expect-error yeah yeah\n    return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);\n}\n//# sourceMappingURL=enum.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import errCode from 'err-code';\nimport * as ERRORS from './errors.js';\nimport { unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { peerIdFromBytes, peerIdFromKeys } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport * as cborg from 'cborg';\nconst log = logger('ipns:utils');\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/');\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n    const year = time.getUTCFullYear();\n    const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(time.getUTCDate()).padStart(2, '0');\n    const hour = String(time.getUTCHours()).padStart(2, '0');\n    const minute = String(time.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n    const milliseconds = time.getUTCMilliseconds();\n    const nanoseconds = milliseconds * 1000 * 1000;\n    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n    const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n        // 15:04:05\n        '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n        // .999999999Z\n        '\\\\.(\\\\d+)Z');\n    const m = String(time).trim().match(rfc3339Matcher);\n    if (m == null) {\n        throw new Error('Invalid format');\n    }\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const date = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    const millisecond = parseInt(m[7].slice(0, -6), 10);\n    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n/**\n * Extracts a public key from the passed PeerId, falling\n * back to the pubKey embedded in the ipns record\n */\nexport const extractPublicKey = async (peerId, entry) => {\n    if (entry == null || peerId == null) {\n        const error = new Error('one or more of the provided parameters are not defined');\n        log.error(error);\n        throw errCode(error, ERRORS.ERR_UNDEFINED_PARAMETER);\n    }\n    let pubKey;\n    if (entry.pubKey != null) {\n        try {\n            pubKey = unmarshalPublicKey(entry.pubKey);\n        }\n        catch (err) {\n            log.error(err);\n            throw err;\n        }\n        const otherId = await peerIdFromKeys(entry.pubKey);\n        if (!otherId.equals(peerId)) {\n            throw errCode(new Error('Embedded public key did not match PeerID'), ERRORS.ERR_INVALID_EMBEDDED_KEY);\n        }\n    }\n    else if (peerId.publicKey != null) {\n        pubKey = unmarshalPublicKey(peerId.publicKey);\n    }\n    if (pubKey != null) {\n        return pubKey;\n    }\n    throw errCode(new Error('no public key is available'), ERRORS.ERR_UNDEFINED_PARAMETER);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV1Sig = (value, validityType, validity) => {\n    const validityTypeBuffer = uint8ArrayFromString(validityType);\n    return uint8ArrayConcat([value, validity, validityTypeBuffer]);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV2Sig = (data) => {\n    const entryData = uint8ArrayFromString('ipns-signature:');\n    return uint8ArrayConcat([entryData, data]);\n};\nexport const marshal = (obj) => {\n    return IpnsEntry.encode(obj);\n};\nexport const unmarshal = (buf) => {\n    const message = IpnsEntry.decode(buf);\n    // protobufjs returns bigints as numbers\n    if (message.sequence != null) {\n        message.sequence = BigInt(message.sequence);\n    }\n    // protobufjs returns bigints as numbers\n    if (message.ttl != null) {\n        message.ttl = BigInt(message.ttl);\n    }\n    return {\n        value: message.value ?? new Uint8Array(0),\n        signature: message.signature ?? new Uint8Array(0),\n        validityType: message.validityType ?? IpnsEntry.ValidityType.EOL,\n        validity: message.validity ?? new Uint8Array(0),\n        sequence: message.sequence ?? 0n,\n        pubKey: message.pubKey,\n        ttl: message.ttl ?? undefined,\n        signatureV2: message.signatureV2,\n        data: message.data\n    };\n};\nexport const peerIdToRoutingKey = (peerId) => {\n    return uint8ArrayConcat([\n        IPNS_PREFIX,\n        peerId.toBytes()\n    ]);\n};\nexport const peerIdFromRoutingKey = (key) => {\n    return peerIdFromBytes(key.slice(IPNS_PREFIX.length));\n};\nexport const createCborData = (value, validity, validityType, sequence, ttl) => {\n    let ValidityType;\n    if (validityType === IpnsEntry.ValidityType.EOL) {\n        ValidityType = 0;\n    }\n    else {\n        throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    const data = {\n        Value: value,\n        Validity: validity,\n        ValidityType,\n        Sequence: sequence,\n        TTL: ttl\n    };\n    return cborg.encode(data);\n};\nexport const parseCborData = (buf) => {\n    const data = cborg.decode(buf);\n    if (data.ValidityType === 0) {\n        data.ValidityType = IpnsEntry.ValidityType.EOL;\n    }\n    else {\n        throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    if (Number.isInteger(data.Sequence)) {\n        // sequence must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.Sequence = BigInt(data.Sequence);\n    }\n    if (Number.isInteger(data.TTL)) {\n        // ttl must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.TTL = BigInt(data.TTL);\n    }\n    return data;\n};\n//# sourceMappingURL=utils.js.map","import NanoDate from 'timestamp-nano';\nimport { Key } from 'interface-datastore/key';\nimport { unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport errCode from 'err-code';\nimport { base32upper } from 'multiformats/bases/base32';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { logger } from '@libp2p/logger';\nimport { createCborData, ipnsEntryDataForV1Sig, ipnsEntryDataForV2Sig } from './utils.js';\nimport * as ERRORS from './errors.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { IpnsEntry } from './pb/ipns.js';\nconst log = logger('ipns');\nconst ID_MULTIHASH_CODE = identity.code;\nexport const namespace = '/ipns/';\nexport const namespaceLength = namespace.length;\n/**\n * Creates a new ipns entry and signs it with the given private key.\n * The ipns entry validity should follow the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n * Note: This function does not embed the public key. If you want to do that, use `EmbedPublicKey`.\n *\n * @param {PeerId} peerId - peer id containing private key for signing the record.\n * @param {Uint8Array} value - value to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {number} lifetime - lifetime of the record (in milliseconds).\n */\nexport const create = async (peerId, value, seq, lifetime) => {\n    // Validity in ISOString with nanoseconds precision and validity type EOL\n    const expirationDate = new NanoDate(Date.now() + Number(lifetime));\n    const validityType = IpnsEntry.ValidityType.EOL;\n    const [ms, ns] = lifetime.toString().split('.');\n    const lifetimeNs = (BigInt(ms) * BigInt(100000)) + BigInt(ns ?? '0');\n    return await _create(peerId, value, seq, validityType, expirationDate, lifetimeNs);\n};\n/**\n * Same as create(), but instead of generating a new Date, it receives the intended expiration time\n * WARNING: nano precision is not standard, make sure the value in seconds is 9 orders of magnitude lesser than the one provided.\n *\n * @param {PeerId} peerId - PeerId containing private key for signing the record.\n * @param {Uint8Array} value - value to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {string} expiration - expiration datetime for record in the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n */\nexport const createWithExpiration = async (peerId, value, seq, expiration) => {\n    const expirationDate = NanoDate.fromString(expiration);\n    const validityType = IpnsEntry.ValidityType.EOL;\n    const ttlMs = expirationDate.toDate().getTime() - Date.now();\n    const ttlNs = (BigInt(ttlMs) * BigInt(100000)) + BigInt(expirationDate.getNano());\n    return await _create(peerId, value, seq, validityType, expirationDate, ttlNs);\n};\nconst _create = async (peerId, value, seq, validityType, expirationDate, ttl) => {\n    seq = BigInt(seq);\n    const isoValidity = uint8ArrayFromString(expirationDate.toString());\n    if (peerId.privateKey == null) {\n        throw errCode(new Error('Missing private key'), ERRORS.ERR_MISSING_PRIVATE_KEY);\n    }\n    const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n    const signatureV1 = await signLegacyV1(privateKey, value, validityType, isoValidity);\n    const data = createCborData(value, isoValidity, validityType, seq, ttl);\n    const sigData = ipnsEntryDataForV2Sig(data);\n    const signatureV2 = await privateKey.sign(sigData);\n    const entry = {\n        value,\n        signature: signatureV1,\n        validityType,\n        validity: isoValidity,\n        sequence: seq,\n        ttl,\n        signatureV2,\n        data\n    };\n    // if we cannot derive the public key from the PeerId (e.g. RSA PeerIDs),\n    // we have to embed it in the IPNS record\n    if (peerId.publicKey != null) {\n        const digest = Digest.decode(peerId.toBytes());\n        if (digest.code !== ID_MULTIHASH_CODE || !uint8ArrayEquals(peerId.publicKey, digest.digest)) {\n            entry.pubKey = peerId.publicKey;\n        }\n    }\n    log('ipns entry for %b created', value);\n    return entry;\n};\n/**\n * rawStdEncoding with RFC4648\n */\nconst rawStdEncoding = (key) => base32upper.encode(key).slice(1);\n/**\n * Get key for storing the record locally.\n * Format: /ipns/${base32(<HASH>)}\n *\n * @param {Uint8Array} key - peer identifier object.\n */\nexport const getLocalKey = (key) => new Key(`/ipns/${rawStdEncoding(key)}`);\nexport { unmarshal } from './utils.js';\nexport { marshal } from './utils.js';\nexport { peerIdToRoutingKey } from './utils.js';\nexport { peerIdFromRoutingKey } from './utils.js';\n/**\n * Sign ipns record data using the legacy V1 signature scheme\n */\nconst signLegacyV1 = async (privateKey, value, validityType, validity) => {\n    try {\n        const dataForSignature = ipnsEntryDataForV1Sig(value, validityType, validity);\n        return await privateKey.sign(dataForSignature);\n    }\n    catch (error) {\n        log.error('record signature creation failed', error);\n        throw errCode(new Error('record signature creation failed'), ERRORS.ERR_SIGNATURE_CREATION);\n    }\n};\n//# sourceMappingURL=index.js.map","import { isPeerId } from '@libp2p/interface-peer-id'\nimport { notFoundError } from 'datastore-core/errors'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport * as ipns from 'ipns'\n\nconst log = logger('ipfs:ipns:publisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-keys').PublicKey} PublicKey\n * @typedef {import('ipns').IPNSEntry} IPNSEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst ERR_NOT_FOUND = notFoundError().code\nconst defaultRecordLifetime = 60 * 60 * 1000\n\n// IpnsPublisher is capable of publishing and resolving names to the IPFS routing system.\nexport class IpnsPublisher {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (routing, datastore) {\n    this._routing = routing\n    this._datastore = datastore\n  }\n\n  /**\n   * Publish record with a eol\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publishWithEOL (peerId, value, lifetime, options) {\n    const record = await this._updateOrCreateRecord(peerId, value, lifetime, options)\n\n    return this._putRecordToRouting(record, peerId, options)\n  }\n\n  /**\n   * Accepts a keypair, as well as a value (ipfsPath), and publishes it out to the routing system\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} options\n   */\n  publish (peerId, value, options) {\n    return this.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n  }\n\n  /**\n   * @param {Uint8Array} record\n   * @param {PeerId} peerId\n   * @param {AbortOptions} [options]\n   */\n  async _putRecordToRouting (record, peerId, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    if (peerId.publicKey == null) {\n      throw errcode(new Error('Public key was missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n\n    await this._publishEntry(routingKey, record, options)\n\n    return record\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} entry\n   * @param {AbortOptions} [options]\n   */\n  async _publishEntry (key, entry, options) {\n    // Add record to routing (buffer key)\n    try {\n      const res = await this._routing.put(key, entry, options)\n      log(`ipns record for ${uint8ArrayToString(key, 'base32')} was stored in the routing`)\n\n      return res\n    } catch (/** @type {any} */err) {\n      const errMsg = `ipns record for ${uint8ArrayToString(key, 'base32')} could not be stored in the routing - ${err.stack}`\n      log.error(errMsg)\n      log.error(err)\n\n      throw errcode(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING')\n    }\n  }\n\n  /**\n   * Returns the record this node has published corresponding to the given peer ID.\n   *\n   * If `checkRouting` is true and we have no existing record, this method will check the routing system for any existing records.\n   *\n   * @param {PeerId} peerId\n   * @param {object} options\n   * @param {boolean} [options.checkRouting]\n   */\n  async _getPublished (peerId, options = {}) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const checkRouting = options.checkRouting !== false\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      // unmarshal data\n      return this._unmarshalData(dsVal)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error getting the ipns record ${peerId.toString()} from datastore`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_UNEXPECTED_DATASTORE_RESPONSE')\n      }\n\n      if (!checkRouting) {\n        throw errcode(err, 'ERR_NOT_FOUND_AND_CHECK_ROUTING_NOT_ENABLED')\n      }\n\n      // Try to get from routing\n      try {\n        const routingKey = ipns.peerIdToRoutingKey(peerId)\n        const res = await this._routing.get(routingKey)\n\n        // unmarshal data\n        return this._unmarshalData(res)\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n\n        throw err\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  _unmarshalData (data) {\n    try {\n      return ipns.unmarshal(data)\n    } catch (/** @type {any} */ err) {\n      throw errcode(err, 'ERR_INVALID_RECORD_DATA')\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async _updateOrCreateRecord (peerId, value, lifetime, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const getPublishedOptions = {\n      checkRouting: true\n    }\n\n    /** @type {IPNSEntry | undefined} */\n    let record\n\n    try {\n      record = await this._getPublished(peerId, getPublishedOptions)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error when determining the last published IPNS record for ${peerId.toString()} ${err.stack}`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_DETERMINING_PUBLISHED_RECORD')\n      }\n    }\n\n    // Determinate the record sequence number\n    let seqNumber = 0n\n\n    if (record && record.sequence !== undefined) {\n      // Increment if the published value is different\n      seqNumber = uint8ArrayEquals(record.value, value) ? record.sequence : record.sequence + BigInt(1)\n    }\n\n    /** @type {IPNSEntry} */\n    let entryData\n\n    try {\n      // Create record\n      entryData = await ipns.create(peerId, value, seqNumber, lifetime)\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be created`\n\n      log.error(err)\n      throw errcode(new Error(errMsg), 'ERR_CREATING_IPNS_RECORD')\n    }\n\n    // TODO IMPROVEMENT - set ttl (still experimental feature for go)\n\n    try {\n      // Marshal record\n      const data = ipns.marshal(entryData)\n\n      // Store the new record\n      await this._datastore.put(ipns.getLocalKey(peerId.toBytes()), data, options)\n\n      log(`ipns record for ${uint8ArrayToString(value, 'base32')} was stored in the datastore`)\n\n      return data\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be stored in the datastore`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_STORING_IN_DATASTORE')\n    }\n  }\n}\n\nIpnsPublisher.defaultRecordLifetime = defaultRecordLifetime\n","import * as ipns from 'ipns'\nimport { importKey } from '@libp2p/crypto/keys'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { TimeoutController } from 'timeout-abort-controller'\n\nconst log = logger('ipfs:ipns:republisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\n\nconst defaultBroadcastInterval = 4 * hour\nconst defaultRecordLifetime = 24 * hour\n\nexport class IpnsRepublisher {\n  /**\n   * @param {import('./publisher').IpnsPublisher} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (publisher, datastore, peerId, keychain, options = { pass: '' }) {\n    this._publisher = publisher\n    this._datastore = datastore\n    this._peerId = peerId\n    this._keychain = keychain\n    this._options = options\n    this._republishHandle = null\n  }\n\n  async start () { // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING')\n    }\n\n    // TODO: this handler should be isolated in another module\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: (period) => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null\n\n          try {\n            // @ts-expect-error - _task could be null\n            republishHandle._inflightTask = republishHandle._task()\n            await republishHandle._inflightTask\n\n            // Schedule next\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period)\n            }\n          } catch (/** @type {any} */ err) {\n            log.error(err)\n          }\n        }, period())\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId)\n        }\n        republishHandle._task = null\n\n        // wait for the currently in flight task to complete\n        await republishHandle._inflightTask\n      }\n    }\n\n    const { pass } = this._options\n    let firstRun = true\n\n    republishHandle._task = async () => {\n      const timeoutController = new TimeoutController(30000)\n\n      try {\n        await this._republishEntries(this._peerId, pass, {\n          signal: timeoutController.signal\n        })\n      } finally {\n        timeoutController.clear()\n      }\n    }\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false\n        return this._options.initialBroadcastInterval || minute\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval\n    })\n\n    this._republishHandle = republishHandle\n  }\n\n  async stop () {\n    const republishHandle = this._republishHandle\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING')\n    }\n\n    this._republishHandle = null\n\n    await republishHandle.cancel()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {string} pass\n   * @param {AbortOptions} options\n   */\n  async _republishEntries (peerId, pass, options) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(peerId, options)\n    } catch (/** @type {any} */ err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key'\n\n      log.error(errMsg)\n      return\n    }\n\n    // keychain needs pass to get the cryptographic keys\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys()\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue\n          }\n\n          const pem = await this._keychain.exportKey(key.name, pass)\n          const privKey = await importKey(pem, pass)\n          const peerIdKey = await peerIdFromKeys(privKey.public.bytes, privKey.bytes)\n\n          await this._republishEntry(peerIdKey, options)\n        }\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {AbortOptions} options\n   */\n  async _republishEntry (peerId, options) {\n    try {\n      const value = await this._getPreviousValue(peerId)\n      await this._publisher.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _getPreviousValue (peerId) {\n    if (!(isPeerId(peerId))) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID')\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD')\n      }\n\n      // unmarshal data\n      try {\n        const record = ipns.unmarshal(dsVal)\n\n        return record.value\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD')\n      }\n    } catch (/** @type {any} */ err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.toString()}`), 'ERR_NO_ENTRY_FOUND')\n      }\n\n      throw err\n    }\n  }\n}\n","import errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { parseRFC3339, extractPublicKey, ipnsEntryDataForV2Sig, unmarshal, peerIdFromRoutingKey, parseCborData } from './utils.js';\nimport * as ERRORS from './errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('ipns:validator');\n/**\n * Validates the given ipns entry against the given public key\n */\nexport const validate = async (publicKey, entry) => {\n    const { value, validityType, validity } = entry;\n    let dataForSignature;\n    let signature;\n    // Check v2 signature if it's available, otherwise use the v1 signature\n    if ((entry.signatureV2 != null) && (entry.data != null)) {\n        signature = entry.signatureV2;\n        dataForSignature = ipnsEntryDataForV2Sig(entry.data);\n        validateCborDataMatchesPbData(entry);\n    }\n    else {\n        throw errCode(new Error('missing data or signatureV2'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    // Validate Signature\n    let isValid;\n    try {\n        isValid = await publicKey.verify(dataForSignature, signature);\n    }\n    catch (err) {\n        isValid = false;\n    }\n    if (!isValid) {\n        log.error('record signature verification failed');\n        throw errCode(new Error('record signature verification failed'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    // Validate according to the validity type\n    if (validity != null && validityType === IpnsEntry.ValidityType.EOL) {\n        let validityDate;\n        try {\n            validityDate = parseRFC3339(uint8ArrayToString(validity));\n        }\n        catch (e) {\n            log.error('unrecognized validity format (not an rfc3339 format)');\n            throw errCode(new Error('unrecognized validity format (not an rfc3339 format)'), ERRORS.ERR_UNRECOGNIZED_FORMAT);\n        }\n        if (validityDate.getTime() < Date.now()) {\n            log.error('record has expired');\n            throw errCode(new Error('record has expired'), ERRORS.ERR_IPNS_EXPIRED_RECORD);\n        }\n    }\n    else if (validityType != null) {\n        log.error('unrecognized validity type');\n        throw errCode(new Error('unrecognized validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    log('ipns entry for %b is valid', value);\n};\nconst validateCborDataMatchesPbData = (entry) => {\n    if (entry.data == null) {\n        throw errCode(new Error('Record data is missing'), ERRORS.ERR_INVALID_RECORD_DATA);\n    }\n    const data = parseCborData(entry.data);\n    if (!uint8ArrayEquals(data.Value, entry.value)) {\n        throw errCode(new Error('Field \"value\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (!uint8ArrayEquals(data.Validity, entry.validity)) {\n        throw errCode(new Error('Field \"validity\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.ValidityType !== entry.validityType) {\n        throw errCode(new Error('Field \"validityType\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.Sequence !== entry.sequence) {\n        throw errCode(new Error('Field \"sequence\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.TTL !== entry.ttl) {\n        throw errCode(new Error('Field \"ttl\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n};\nexport const ipnsValidator = async (key, marshalledData) => {\n    const peerId = peerIdFromRoutingKey(key);\n    const receivedEntry = unmarshal(marshalledData);\n    // extract public key\n    const pubKey = await extractPublicKey(peerId, receivedEntry);\n    // Record validation\n    await validate(pubKey, receivedEntry);\n};\n//# sourceMappingURL=validator.js.map","import * as ipns from 'ipns'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport * as Errors from 'datastore-core/errors'\nimport { ipnsValidator } from 'ipns/validator'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst log = logger('ipfs:ipns:resolver')\n\nconst ERR_NOT_FOUND = Errors.notFoundError().code\n\nconst defaultMaximumRecursiveDepth = 32\n\nexport class IpnsResolver {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   */\n  constructor (routing) {\n    this._routing = routing\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const recursive = options.recursive && options.recursive.toString() === 'true'\n\n    const nameSegments = name.split('/')\n\n    if (nameSegments.length !== 3 || nameSegments[0] !== '') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const key = nameSegments[2]\n\n    // Define a maximum depth if recursive option enabled\n    let depth = Infinity\n\n    if (recursive) {\n      depth = defaultMaximumRecursiveDepth\n    }\n\n    const res = await this.resolver(key, depth, options)\n\n    log(`${name} was locally resolved correctly`)\n    return res\n  }\n\n  /**\n   * Recursive resolver according to the specified depth\n   *\n   * @param {string} name\n   * @param {number} depth\n   * @param {AbortOptions} options\n   * @returns {Promise<string>}\n   */\n  async resolver (name, depth, options) {\n    // Exceeded recursive maximum depth\n    if (depth === 0) {\n      const errMsg = `could not resolve name (recursion limit of ${defaultMaximumRecursiveDepth} exceeded)`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT')\n    }\n\n    const res = await this._resolveName(name, options)\n    const nameSegments = res.split('/')\n\n    // If obtained a ipfs cid or recursive option is disabled\n    if (nameSegments[1] === 'ipfs' || !depth) {\n      return res\n    }\n\n    // continue recursively until depth equals 0\n    return this.resolver(nameSegments[2], depth - 1, options)\n  }\n\n  /**\n   * Resolve ipns entries from the provided routing\n   *\n   * @param {string} name\n   * @param {AbortOptions} options\n   */\n  async _resolveName (name, options) {\n    const peerId = peerIdFromString(name)\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n    let record\n\n    try {\n      record = await this._routing.get(routingKey, options)\n    } catch (/** @type {any} */ err) {\n      log.error('could not get record from routing', err)\n\n      if (err.code === ERR_NOT_FOUND) {\n        throw errcode(new Error(`record requested for ${name} was not found in the network`), 'ERR_NO_RECORD_FOUND')\n      }\n\n      throw errcode(new Error(`unexpected error getting the ipns record ${peerId.toString()}`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD')\n    }\n\n    // We should have the public key by now (inline, or in the entry)\n    return this._validateRecord(peerId, record)\n  }\n\n  /**\n   * Validate a resolved record\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} record\n   */\n  async _validateRecord (peerId, record) {\n    // IPNS entry validation\n    await ipnsValidator(uint8ArrayConcat([\n      uint8ArrayFromString('/ipns/'),\n      peerId.toBytes()\n    ]), record)\n\n    const ipnsEntry = ipns.unmarshal(record)\n\n    return uint8ArrayToString(ipnsEntry.value)\n  }\n}\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","import errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { IpnsPublisher } from './publisher.js'\nimport { IpnsRepublisher } from './republisher.js'\nimport { IpnsResolver } from './resolver.js'\nimport { TLRU } from '../utils/tlru.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns')\nconst defaultRecordTtl = 60 * 1000\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class IPNS {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (routing, datastore, peerId, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore)\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options)\n    this.resolver = new IpnsResolver(routing)\n    this.cache = new TLRU(1000)\n    this.routing = routing\n  }\n\n  /**\n   * Publish\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publish (peerId, value, lifetime = IpnsPublisher.defaultRecordLifetime, options) {\n    try {\n      await this.publisher.publishWithEOL(peerId, value, lifetime, options)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was published correctly`)\n\n      // // Add to cache\n      const id = peerId.toString()\n      // @ts-expect-error - parseFloat expects string\n      const ttEol = parseFloat(lifetime)\n      const ttl = (ttEol < defaultRecordTtl) ? ttEol : defaultRecordTtl\n\n      this.cache.set(id, value, ttl)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was cached correctly`)\n\n      return {\n        name: id,\n        value: value\n      }\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Resolve\n   *\n   * @param {string} name\n   * @param {object} options\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME')\n    }\n\n    // If recursive, we should not try to get the cached value\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2]\n      const result = this.cache.get(id)\n\n      if (result) {\n        return result\n      }\n    }\n\n    try {\n      const result = await this.resolver.resolve(name, options)\n\n      log(`IPNS record from ${name} was resolved correctly`)\n\n      return result\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Initialize keyspace\n   *\n   * Sets the ipns record for the given key to point to an empty directory\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  async initializeKeyspace (peerId, value, options) { // eslint-disable-line require-await\n    return this.publish(peerId, value, IpnsPublisher.defaultRecordLifetime, options)\n  }\n}\n","/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all(source) {\n    const arr = [];\n    for await (const entry of source) {\n        arr.push(entry);\n    }\n    return arr;\n}\n//# sourceMappingURL=index.js.map","\nimport all from 'it-all'\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nexport const sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @param {string} s\n * @param {string} r\n */\nexport const replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r)\n  return s.replace(matcher, '')\n}\n","import { sortAll } from './utils.js'\nimport drain from 'it-drain'\nimport filter from 'it-filter'\nimport take from 'it-take'\n\n/**\n * @typedef {import('interface-store').Options} Options\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Batch} Batch\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Datastore}\n */\nexport class BaseDatastore {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {Key[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (e) =>\n        e.key.toString().startsWith(/** @type {string} */ (q.prefix))\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (key) =>\n        key.toString().startsWith(/** @type {string} */ (q.prefix))\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n","import { BaseDatastore } from './base.js'\nimport * as Errors from './errors.js'\nimport { logger } from '@libp2p/logger'\nimport { pushable } from 'it-pushable'\nimport drain from 'it-drain'\n\nconst log = logger('datastore:core:tiered')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore that can combine multiple stores. Puts and deletes\n * will write through to all datastores. Has and get will\n * try each store sequentially. Query will always try the\n * last one first.\n *\n */\nexport class TieredDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore[]} stores\n   */\n  constructor (stores) {\n    super()\n\n    this.stores = stores.slice()\n  }\n\n  async open () {\n    try {\n      await Promise.all(this.stores.map((store) => store.open()))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbOpenFailedError(err)\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value, options)))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbWriteFailedError(err)\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async get (key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options)\n        if (res) return res\n      } catch (err) {\n        log.error(err)\n      }\n    }\n    throw Errors.notFoundError()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async has (key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async delete (key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbDeleteFailedError(err)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable({\n        objectMode: true\n      })\n\n      drain(store.putMany(source, options))\n        .catch(err => {\n          // store threw while putting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(pair))\n\n        yield pair\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable({\n        objectMode: true\n      })\n\n      drain(store.deleteMany(source, options))\n        .catch(err => {\n          // store threw while deleting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(key))\n\n        yield key\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  async close () {\n    await Promise.all(this.stores.map(store => store.close()))\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const batches = this.stores.map(store => store.batch())\n\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value))\n      },\n      delete: (key) => {\n        batches.forEach(b => b.delete(key))\n      },\n      commit: async (options) => {\n        for (const batch of batches) {\n          await batch.commit(options)\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    return this.stores[this.stores.length - 1].query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options)\n  }\n}\n","import { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { parseRFC3339 } from './utils.js';\nexport const ipnsSelector = (key, data) => {\n    const entries = data.map((buf, index) => ({\n        entry: IpnsEntry.decode(buf),\n        index\n    }));\n    entries.sort((a, b) => {\n        // having a newer signature version is better than an older signature version\n        if (a.entry.signatureV2 != null && b.entry.signatureV2 == null) {\n            return -1;\n        }\n        else if (a.entry.signatureV2 == null && b.entry.signatureV2 != null) {\n            return 1;\n        }\n        const aSeq = a.entry.sequence ?? 0n;\n        const bSeq = b.entry.sequence ?? 0n;\n        // choose later sequence number\n        if (aSeq > bSeq) {\n            return -1;\n        }\n        else if (aSeq < bSeq) {\n            return 1;\n        }\n        const aValidty = a.entry.validity ?? new Uint8Array(0);\n        const bValidty = b.entry.validity ?? new Uint8Array(0);\n        // choose longer lived record if sequence numbers the same\n        const entryAValidityDate = parseRFC3339(uint8ArrayToString(aValidty));\n        const entryBValidityDate = parseRFC3339(uint8ArrayToString(bValidty));\n        if (entryAValidityDate.getTime() > entryBValidityDate.getTime()) {\n            return -1;\n        }\n        if (entryAValidityDate.getTime() < entryBValidityDate.getTime()) {\n            return 1;\n        }\n        return 0;\n    });\n    return entries[0].index;\n};\n//# sourceMappingURL=selector.js.map","import { namespaceLength, namespace, peerIdToRoutingKey } from 'ipns'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { PubSubDatastore } from 'datastore-pubsub'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:ipns:pubsub')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Pubsub datastore aims to manage the pubsub subscriptions for IPNS\nexport class IpnsPubsubDatastore {\n  /**\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (pubsub, localDatastore, peerId) {\n    /** @type {Record<string, string>} */\n    this._subscriptions = {}\n\n    // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this)\n\n    this._pubsubDs = new PubSubDatastore(pubsub, localDatastore, peerId, ipnsValidator, ipnsSelector, this._handleSubscriptionKey)\n  }\n\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await this._pubsubDs.put(key, value, options)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get a value from the pubsub datastore indexed by the received key properly encoded.\n   * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n   * updated once new publishes occur.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    let res\n    let err\n\n    try {\n      res = await this._pubsubDs.get(key, options)\n    } catch (/** @type {any} */ e) {\n      err = e\n    }\n\n    // Add topic subscribed\n    const ns = key.slice(0, namespaceLength)\n\n    if (uint8ArrayToString(ns) === namespace) {\n      const stringifiedTopic = base58btc.encode(key).substring(1)\n      const id = base58btc.encode(key.slice(namespaceLength)).substring(1)\n\n      this._subscriptions[stringifiedTopic] = id\n\n      log(`subscribed to pubsub topic ${stringifiedTopic}, id ${id}`)\n    }\n\n    // If no data was obtained, after storing the subscription, return the error.\n    if (err) {\n      throw err\n    }\n\n    return res\n  }\n\n  /**\n   * Modify subscription key to have a proper encoding\n   *\n   * @param {Uint8Array | string} key\n   */\n  _handleSubscriptionKey (key) {\n    if (key instanceof Uint8Array) {\n      key = uint8ArrayToString(key, 'base58btc')\n    }\n\n    const subscriber = this._subscriptions[key]\n\n    if (!subscriber) {\n      throw errcode(new Error(`key ${key} does not correspond to a subscription`), 'ERR_INVALID_KEY')\n    }\n\n    try {\n      const k = peerIdToRoutingKey(peerIdFromString(subscriber))\n      return k\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get pubsub subscriptions related to ipns.\n   */\n  getSubscriptions () {\n    const subscriptions = Object.values(this._subscriptions).filter(Boolean)\n\n    return subscriptions.map((sub) => `${namespace}${sub}`)\n  }\n\n  /**\n   * Cancel pubsub subscriptions related to ipns.\n   *\n   * @param {string} name - ipns path to cancel the pubsub subscription.\n   */\n  async cancel (name) { // eslint-disable-line require-await\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME')\n    }\n\n    // Trim /ipns/ prefix from the name\n    if (name.startsWith(namespace)) {\n      name = name.substring(namespaceLength)\n    }\n\n    const stringifiedTopic = Object.keys(this._subscriptions).find((key) => this._subscriptions[key] === name)\n\n    // Not found topic\n    if (!stringifiedTopic) {\n      return {\n        canceled: false\n      }\n    }\n\n    // Unsubscribe topic\n    const bufTopic = uint8ArrayFromString(stringifiedTopic)\n\n    this._pubsubDs.unsubscribe(bufTopic)\n\n    delete this._subscriptions[stringifiedTopic]\n    log(`unsubscribed pubsub ${stringifiedTopic}: ${name}`)\n\n    return {\n      canceled: true\n    }\n  }\n}\n","import { Key } from 'interface-datastore/key'\nimport { Libp2pRecord } from '@libp2p/record'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns:offline-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nexport class OfflineDatastore {\n  /**\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (datastore) {\n    this._datastore = datastore\n    /** @type {any[]} */\n    this.stores = []\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) { // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Libp2pRecord(key, value, new Date())\n\n    await this._datastore.put(routingKey, record.serialize(), options)\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    const res = await this._datastore.get(routingKey, options)\n\n    // Unmarshal libp2p record as the DHT does\n    let record\n    try {\n      record = Libp2pRecord.deserialize(res)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    return record.value\n  }\n\n  /**\n   * encode key properly - base32(/ipns/{cid})\n   *\n   * @param {Uint8Array} key\n   */\n  _routingKey (key) {\n    return new Key('/dht/record/' + uint8ArrayToString(key, 'base32'), false)\n  }\n}\n","import drain from 'it-drain'\nimport { notFoundError } from 'datastore-core/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:ipns:dht-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw notFoundError()\n  }\n}\n","import { IPNS } from '../ipns/index.js'\nimport { createRouting } from '../ipns/routing/config.js'\nimport { OfflineDatastore } from '../ipns/routing/offline-datastore.js'\nimport { NotInitializedError, AlreadyInitializedError } from '../errors.js'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:ipns')\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n *\n * @typedef {object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub]\n *\n * @typedef {object} LibP2POptions\n * @property {DHTConfig} [config]\n *\n * @typedef {object} DHTConfig\n * @property {boolean} [enabled]\n */\n\nexport class IPNSAPI {\n  /**\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {boolean} [options.offline]\n   * @param {LibP2POptions} [options.libp2p]\n   * @param {ExperimentalOptions} [options.EXPERIMENTAL]\n   */\n  constructor (options = { pass: '' }) {\n    this.options = options\n\n    /** @type {IPNS | null} */\n    this.offline = null\n\n    /** @type {IPNS | null} */\n    this.online = null\n  }\n\n  getIPNS () {\n    const ipns = this.online || this.offline\n    if (ipns) {\n      return ipns\n    } else {\n      throw new NotInitializedError()\n    }\n  }\n\n  get routing () {\n    return this.getIPNS().routing\n  }\n\n  /**\n   * Activates IPNS subsystem in an ofline mode. If it was started once already\n   * it will throw an exception.\n   *\n   * This is primarily used for offline ipns modifications, such as the\n   * initializeKeyspace feature.\n   *\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  startOffline ({ repo, peerId, keychain }) {\n    if (this.offline != null) {\n      throw new AlreadyInitializedError()\n    }\n\n    log('initializing IPNS keyspace (offline)')\n\n    const routing = new OfflineDatastore(repo.datastore)\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n\n    this.offline = ipns\n  }\n\n  /**\n   * @param {object} config\n   * @param {import('libp2p').Libp2p} config.libp2p\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  async startOnline ({ libp2p, repo, peerId, keychain }) {\n    if (this.online != null) {\n      throw new AlreadyInitializedError()\n    }\n    const routing = createRouting({ libp2p, repo, peerId, options: this.options })\n\n    // @ts-expect-error routing is a TieredDatastore which wants keys to be Keys, IPNS needs keys to be Uint8Arrays\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n    await ipns.republisher.start()\n    this.online = ipns\n  }\n\n  async stop () {\n    const ipns = this.online\n    if (ipns) {\n      await ipns.republisher.stop()\n      this.online = null\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  publish (peerId, value, lifetime, options) {\n    return this.getIPNS().publish(peerId, value, lifetime, options)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  resolve (name, options) {\n    return this.getIPNS().resolve(name, options)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  initializeKeyspace (peerId, value, options) {\n    return this.getIPNS().initializeKeyspace(peerId, value, options)\n  }\n}\n","import { TieredDatastore } from 'datastore-core/tiered'\nimport get from 'dlv'\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js'\nimport { OfflineDatastore } from './offline-datastore.js'\nimport { DHTDatastore } from './dht-datastore.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting ({ libp2p, repo, peerId, options }) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht))\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore)\n    ipnsStores.push(offlineDatastore)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n","import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n","import { logger } from '@libp2p/logger'\nimport parseDuration from 'parse-duration'\nimport { importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport errcode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR, normalizePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolvePath } from './utils.js'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:name:publish')\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createPublish ({ ipns, repo, codecs, peerId, isOnline, keychain }) {\n  /**\n   * @param {string} keyName\n   */\n  const lookupKey = async keyName => {\n    /** @type {import('@libp2p/interface-keys').PrivateKey} */\n    let privateKey\n\n    if (keyName === 'self' && peerId.privateKey != null) {\n      privateKey = await unmarshalPrivateKey(peerId.privateKey)\n    } else {\n      try {\n        // We're exporting and immediately importing the key, so we can just use a throw away password\n        const pem = await keychain.exportKey(keyName, 'temp')\n        privateKey = await importKey(pem, 'temp')\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(err, 'ERR_CANNOT_GET_KEY')\n      }\n    }\n\n    return peerIdFromKeys(privateKey.public.bytes, privateKey.bytes)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"publish\"]}\n   */\n  async function publish (value, options = {}) {\n    const resolve = !(options.resolve === false)\n    const lifetime = options.lifetime || '24h'\n    const key = options.key || 'self'\n\n    if (!isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: params related logic should be in the core implementation\n    // Normalize path value\n    try {\n      value = normalizePath(value)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    let pubLifetime = 0\n    try {\n      pubLifetime = parseDuration(lifetime) || 0\n\n      // Calculate lifetime with nanoseconds precision\n      pubLifetime = parseFloat(pubLifetime.toFixed(6))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    // TODO: ttl human for cache\n    const results = await Promise.all([\n      // verify if the path exists, if not, an error will stop the execution\n      lookupKey(key),\n      // if resolving, do a get so we make sure we have the blocks\n      resolve ? resolvePath({ ipns, repo, codecs }, value) : Promise.resolve()\n    ])\n\n    const bytes = uint8ArrayFromString(value)\n\n    // Start publishing process\n    const result = await ipns.publish(results[0], bytes, pubLifetime, options)\n\n    return {\n      name: result.name,\n      value: uint8ArrayToString(result.value)\n    }\n  }\n\n  return withTimeoutOption(publish)\n}\n","import { logger } from '@libp2p/logger'\nimport errcode from 'err-code'\nimport mergeOpts from 'merge-options'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { base36 } from 'multiformats/bases/base36'\nimport { peerIdFromString } from '@libp2p/peer-id'\n// @ts-expect-error no types\nimport isDomain from 'is-domain-name'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\nconst log = logger('ipfs:name:resolve')\n\n/**\n *\n * @param {string} result\n * @param {string[]} remainder\n * @returns {string}\n */\nconst appendRemainder = (result, remainder) =>\n  remainder.length > 0\n    ? result + '/' + remainder.join('/')\n    : result\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('../../types').Options} config.options\n */\nexport function createResolve ({ dns, ipns, isOnline, options: { offline } }) {\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"resolve\"]}\n   */\n  async function * resolve (name, options = {}) { // eslint-disable-line require-await\n    options = mergeOptions({\n      nocache: false,\n      recursive: true\n    }, options)\n\n    // TODO: params related logic should be in the core implementation\n    if (offline && options && options.nocache) {\n      throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE')\n    }\n\n    // IPNS resolve needs a online daemon\n    if (!isOnline() && !offline) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    let ipnsName = name.toString()\n\n    if (!ipnsName.startsWith('/ipns/')) {\n      ipnsName = `/ipns/${ipnsName}`\n    }\n\n    let [namespace, hash, ...remainder] = ipnsName.slice(1).split('/')\n\n    try {\n      if (hash.substring(0, 1) === '1') {\n        const id = peerIdFromString(hash)\n        const digest = Digest.decode(id.toBytes())\n        const libp2pKey = CID.createV1(0x72, digest)\n        hash = libp2pKey.toString(base36)\n      } else {\n        const cid = CID.parse(hash)\n\n        if (cid.version === 1) {\n          hash = cid.toString(base36)\n        }\n      }\n    } catch (/** @type {any} */ err) {\n      // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns\n      if (isDomain(hash)) {\n        yield appendRemainder(await dns(hash, options), remainder)\n        return\n      }\n\n      log.error(err)\n      throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME')\n    }\n\n    // multihash is valid lets resolve with IPNS\n    // TODO: convert ipns.resolve to return an iterator\n    const value = await ipns.resolve(`/${namespace}/${hash}`, options)\n    yield appendRemainder(value instanceof Uint8Array ? uint8ArrayToString(value) : value, remainder)\n  }\n\n  return withTimeoutOption(resolve)\n}\n","import { IpnsPubsubDatastore } from '../../../ipns/routing/pubsub-datastore.js'\nimport errcode from 'err-code'\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns').IPNSAPI} ipns\n * @param {ExperimentalOptions} [options]\n */\nexport function getPubsubRouting (ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\nexport class PubSubAPI {\n  /**\n   * @param {object} config\n   * @param {import('../../ipns').IPNSAPI} config.ipns\n   * @param {import('../../../types').Options} config.options\n   */\n  constructor ({ ipns, options }) {\n    this.cancel = createCancel({ ipns, options })\n    this.state = createState({ ipns, options })\n    this.subs = createSubs({ ipns, options })\n  }\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createCancel ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.cancel(name, options)\n  }\n\n  return withTimeoutOption(cancel)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createState ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"state\"]}\n   */\n  async function state (_options = {}) { // eslint-disable-line require-await\n    try {\n      return { enabled: Boolean(getPubsubRouting(ipns, experimental)) }\n    } catch (/** @type {any} */ err) {\n      return { enabled: false }\n    }\n  }\n\n  return withTimeoutOption(state)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createSubs ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"subs\"]}\n   */\n  async function subs (options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.getSubscriptions(options)\n  }\n\n  return withTimeoutOption(subs)\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { notFoundError } from 'datastore-core/errors'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { CID } from 'multiformats/cid'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\n\nconst ERR_NOT_FOUND = notFoundError().code\n\nexport const Format = {\n  default: '<dst>',\n  edges: '<src> -> <dst>'\n}\n\n/**\n * @typedef {object} Node\n * @property {string} [name]\n * @property {CID} cid\n *\n * @typedef {object} TraversalResult\n * @property {Node} parent\n * @property {Node} node\n * @property {boolean} isDuplicate\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} config.resolve\n * @param {import('../../types').Preload} config.preload\n */\nexport function createRefs ({ repo, codecs, resolve, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"refs\"]}\n   */\n  async function * refs (ipfsPath, options = {}) {\n    if (options.maxDepth === 0) {\n      return\n    }\n\n    if (options.edges && options.format && options.format !== Format.default) {\n      throw new Error('Cannot set edges to true and also specify format')\n    }\n\n    options.format = options.edges ? Format.edges : options.format\n\n    if (typeof options.maxDepth !== 'number') {\n      options.maxDepth = options.recursive ? Infinity : 1\n    }\n\n    if (options.timeout) {\n      const controller = new TimeoutController(options.timeout)\n      const signals = [controller.signal]\n\n      if (options.signal) {\n        signals.push(options.signal)\n      }\n\n      options.signal = anySignal(signals)\n    }\n\n    /** @type {(string|CID)[]} */\n    const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath]\n\n    const paths = rawPaths.map(p => getFullPath(preload, p, options))\n\n    for (const path of paths) {\n      try {\n        yield * refsStream(resolve, repo, codecs, path, options)\n      } catch (/** @type {any} */ err) {\n        yield {\n          ref: '',\n          err: err.message\n        }\n      }\n    }\n  }\n\n  return refs\n}\n\n/**\n * @param {import('../../types').Preload} preload\n * @param {string | CID} ipfsPath\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nfunction getFullPath (preload, ipfsPath, options) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (options.preload !== false) {\n    preload(cid)\n  }\n\n  return `/ipfs/${cid}${path || ''}`\n}\n\n/**\n * Get a stream of refs at the given path\n *\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} resolve\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {string} path\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nasync function * refsStream (resolve, repo, codecs, path, options) {\n  // Resolve to the target CID of the path\n  const resPath = await resolve(path, options)\n  const {\n    cid\n  } = toCidAndPath(resPath)\n\n  const maxDepth = options.maxDepth != null ? options.maxDepth : Infinity\n  const unique = options.unique || false\n\n  // Traverse the DAG, converting it into a stream\n  for await (const obj of objectStream(repo, codecs, cid, maxDepth, unique, options)) {\n    // Root object will not have a parent\n    if (!obj.parent) {\n      continue\n    }\n\n    // Filter out duplicates (isDuplicate flag is only set if options.unique is set)\n    if (obj.isDuplicate) {\n      continue\n    }\n\n    // Format the links\n    // Clients expect refs to be in the format { ref: <ref> }\n    yield {\n      ref: formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format)\n    }\n  }\n}\n\n/**\n * Get formatted link\n *\n * @param {CID} srcCid\n * @param {CID} dstCid\n * @param {string} [linkName]\n * @param {string} [format]\n */\nfunction formatLink (srcCid, dstCid, linkName = '', format = Format.default) {\n  let out = format.replace(/<src>/g, srcCid.toString())\n  out = out.replace(/<dst>/g, dstCid.toString())\n  out = out.replace(/<linkname>/g, linkName)\n  return out\n}\n\n/**\n * Do a depth first search of the DAG, starting from the given root cid\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} rootCid\n * @param {number} maxDepth\n * @param {boolean} uniqueOnly\n * @param {AbortOptions} options\n */\nasync function * objectStream (repo, codecs, rootCid, maxDepth, uniqueOnly, options) { // eslint-disable-line require-await\n  const seen = new Set()\n\n  /**\n   * @param {Node} parent\n   * @param {number} depth\n   * @returns {AsyncGenerator<TraversalResult, void, undefined>}\n   */\n  async function * traverseLevel (parent, depth) {\n    const nextLevelDepth = depth + 1\n\n    // Check the depth\n    if (nextLevelDepth > maxDepth) {\n      return\n    }\n\n    // Get this object's links\n    try {\n      // Look at each link, parent and the new depth\n      for await (const link of getLinks(repo, codecs, parent.cid, options)) {\n        yield {\n          parent: parent,\n          node: link,\n          isDuplicate: uniqueOnly && seen.has(link.cid.toString())\n        }\n\n        if (uniqueOnly) {\n          seen.add(link.cid.toString())\n        }\n\n        yield * traverseLevel(link, nextLevelDepth)\n      }\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        err.message = `Could not find object with CID: ${parent.cid}`\n      }\n\n      throw err\n    }\n  }\n\n  yield * traverseLevel({ cid: rootCid }, 0)\n}\n\n/**\n * Fetch a node and then get all its links\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} cid\n * @param {AbortOptions} options\n * @returns {AsyncGenerator<{ name: string, cid: CID }, void, undefined>}\n */\nasync function * getLinks (repo, codecs, cid, options) {\n  const block = await repo.blocks.get(cid, options)\n  const codec = await codecs.getCodec(cid.code)\n  const value = codec.decode(block)\n  const isDagPb = cid.code === dagPB.code\n  /** @type {Array<string|number>} */\n  const base = []\n\n  for (const [name, cid] of links(value, base)) {\n    // special case for dag-pb - use the name of the link\n    // instead of the path within the object\n    if (isDagPb) {\n      const match = name.match(/^Links\\/(\\d+)\\/Hash$/)\n\n      if (match) {\n        const index = Number(match[1])\n\n        if (index < value.Links.length) {\n          yield {\n            name: value.Links[index].Name,\n            cid\n          }\n\n          continue\n        }\n      }\n    }\n\n    yield {\n      name,\n      cid\n    }\n  }\n}\n\n/**\n * @param {*} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nconst links = function * (source, base) {\n  if (source == null) {\n    return\n  }\n\n  if (source instanceof Uint8Array) {\n    return\n  }\n\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key]\n\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [...path, index]\n          const cid = CID.asCID(element)\n\n          // eslint-disable-next-line max-depth\n          if (cid) {\n            yield [elementPath.join('/'), cid]\n          } else if (typeof element === 'object') {\n            yield * links(element, elementPath)\n          }\n        }\n      } else {\n        const cid = CID.asCID(value)\n\n        if (cid) {\n          yield [path.join('/'), cid]\n        } else {\n          yield * links(value, path)\n        }\n      }\n    }\n  }\n\n  // ts requires a @returns annotation when a function is recursive,\n  // eslint requires a return when you use a @returns annotation.\n  return []\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createLocal ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    for await (const cid of repo.blocks.queryKeys({}, { signal: options.signal })) {\n      yield { ref: cid.toString() }\n    }\n  }\n\n  return withTimeoutOption(refsLocal)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createUnwant } from './unwant.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').NetworkService} NetworkService\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class BitswapAPI {\n  /**\n   * @param {object} config\n   * @param {NetworkService} config.network\n   */\n  constructor ({ network }) {\n    this.wantlist = createWantlist({ network })\n    this.wantlistForPeer = createWantlistForPeer({ network })\n    this.unwant = createUnwant({ network })\n    this.stat = createStat({ network })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlist ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.getWantlist()\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlist)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.wantlistForPeer(peerId)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createUnwant ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"unwant\"]}\n   */\n  async function unwant (cids, options = {}) {\n    const { bitswap } = await network.use(options)\n\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    return bitswap.unwant(cids)\n  }\n\n  return withTimeoutOption(unwant)\n}\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { IpNet } from '@chainsafe/netmask';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTC = and(UDP, base('webrtc'), base('certhash'));\nexport const WebRTC = or(and(_WebRTC, base('p2p')), _WebRTC);\nexport const WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nexport const WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS, WebRTC);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), WebRTCStar, WebRTCDirect, WebRTC, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { IPFS } from '@multiformats/mafmt'\n\n/**\n * @param {any} ma\n */\nexport function isValidMultiaddr (ma) {\n  try {\n    return IPFS.matches(ma)\n  } catch (/** @type {any} */ err) {\n    return false\n  }\n}\n","\nexport default () => ({\n  Addresses: {\n    Swarm: [\n    ],\n    Announce: [],\n    NoAnnounce: [],\n    API: '',\n    Gateway: '',\n    RPC: '',\n    Delegates: [\n      '/dns4/node0.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node1.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node2.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node3.delegate.ipfs.io/tcp/443/https'\n    ]\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10\n    },\n    webRTCStar: {\n      Enabled: true\n    }\n  },\n  Bootstrap: [\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n    '/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n    '/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',\n    '/dns4/node2.preload.ipfs.io/tcp/443/wss/p2p/QmV7gnbW5VTcJ3oyM2Xk1rdFBJ3kTkvxc87UFGsun29STS',\n    '/dns4/node3.preload.ipfs.io/tcp/443/wss/p2p/QmY7JB6MQXhxHvq7dBDh4HpbH29v4yE9JRadAVpndvzySN'\n  ],\n  Pubsub: {\n    Enabled: true\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 5,\n      HighWater: 20\n    },\n    DisableNatPortMap: true\n  },\n  Routing: {\n    Type: 'dhtclient'\n  }\n})\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\nexport class BootstrapAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo }) {\n    this.add = createAdd({ repo })\n    this.list = createList({ repo })\n    this.rm = createRm({ repo })\n    this.clear = createClear({ repo })\n    this.reset = createReset({ repo })\n  }\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAdd ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"add\"]}\n   */\n  async function add (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    const boostrappers = config.Bootstrap || []\n    boostrappers.push(multiaddr.toString())\n\n    config.Bootstrap = Array.from(\n      new Set(boostrappers)\n    ).sort((a, b) => a.localeCompare(b))\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: [multiaddr]\n    }\n  }\n\n  return withTimeoutOption(add)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createList ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createClear ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n","import defaultConfig from 'ipfs-core-config/config'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createReset ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","import { CID } from 'multiformats/cid'\n\n/**\n * @param {string|Uint8Array|CID} cid\n */\nexport function cleanCid (cid) {\n  if (cid instanceof Uint8Array) {\n    return CID.decode(cid)\n  }\n\n  return CID.parse(cid.toString())\n}\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n */\n\nexport class BlockAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/src/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, hashers, preload, repo }) {\n    this.get = createGet({ preload, repo })\n    this.put = createPut({ codecs, hashers, preload, repo })\n    this.rm = createRm({ repo })\n    this.stat = createStat({ preload, repo })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createGet ({ preload, repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nexport function createPut ({ codecs, hashers, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import errCode from 'err-code'\nimport parallel from 'it-parallel'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { pipe } from 'it-pipe'\nimport { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        source => map(source, cid => {\n          return async () => {\n            cid = cleanCid(cid)\n\n            /** @type {import('ipfs-core-types/src/block').RmResult} */\n            const result = { cid }\n\n            try {\n              const has = await repo.blocks.has(cid)\n\n              if (!has) {\n                throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n              }\n\n              await repo.blocks.delete(cid)\n            } catch (/** @type {any} */ err) {\n              if (!options.force) {\n                err.message = `cannot remove ${cid}: ${err.message}`\n                result.error = err\n              }\n            }\n\n            return result\n          }\n        }),\n        source => parallel(source, { concurrency: BLOCK_RM_CONCURRENCY }),\n        source => filter(source, () => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid)\n\n    return { cid, size: block.length }\n  }\n\n  return withTimeoutOption(stat)\n}\n","/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches\n */\nexport default async function* batch(source, size = 1) {\n    let things = [];\n    if (size < 1) {\n        size = 1;\n    }\n    for await (const thing of source) {\n        things.push(thing);\n        while (things.length >= size) {\n            yield things.slice(0, size);\n            things = things.slice(size);\n        }\n    }\n    while (things.length > 0) {\n        yield things.slice(0, size);\n        things = things.slice(size);\n    }\n}\n//# sourceMappingURL=index.js.map","import batch from 'it-batch';\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function* parallelBatch(source, size = 1) {\n    for await (const tasks of batch(source, size)) {\n        const things = tasks.map(async (p) => {\n            return await p().then(value => ({ ok: true, value }), err => ({ ok: false, err }));\n        });\n        for (let i = 0; i < things.length; i++) {\n            const result = await things[i];\n            if (result.ok) {\n                yield result.value;\n            }\n            else {\n                throw result.err;\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import mergeOptions from 'merge-options'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653, // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n}\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true })\n  return defaults(defaultOptions, options)\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","import { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {import('../types').PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nexport default persist\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('../types').Directory} Directory\n */\n\n/**\n * @type {import('../types').UnixFSV1DagBuilder<Directory>}\n */\nconst dirBuilder = async (item, blockstore, options) => {\n  const unixfs = new UnixFS({\n    type: 'directory',\n    mtime: item.mtime,\n    mode: item.mode\n  })\n\n  const buffer = encode(prepare({ Data: unixfs.marshal() }))\n  const cid = await persist(buffer, blockstore, options)\n  const path = item.path\n\n  return {\n    cid,\n    path,\n    unixfs,\n    size: buffer.length\n  }\n}\n\nexport default dirBuilder\n","import all from 'it-all'\n\n/**\n * @type {import('../../types').FileDAGBuilder}\n */\nasync function flat (source, reduce) {\n  return reduce(await all(source))\n}\n\nexport default flat\n","/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all(source) {\n    const arr = [];\n    for await (const entry of source) {\n        arr.push(entry);\n    }\n    return arr;\n}\n//# sourceMappingURL=index.js.map","import batch from 'it-batch'\n\n/**\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nfunction balanced (source, reduce, options) {\n  return reduceToParents(source, reduce, options)\n}\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function reduceToParents (source, reduce, options) {\n  const roots = []\n\n  for await (const chunked of batch(source, options.maxChildrenPerNode)) {\n    roots.push(await reduce(chunked))\n  }\n\n  if (roots.length > 1) {\n    return reduceToParents(roots, reduce, options)\n  }\n\n  return roots[0]\n}\n\nexport default balanced\n","import batch from 'it-batch'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function trickleStream (source, reduce, options) {\n  const root = new Root(options.layerRepeat)\n  let iteration = 0\n  let maxDepth = 1\n\n  /** @type {SubTree} */\n  let subTree = root\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce))\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration)\n\n      iteration++\n    }\n\n    subTree.append(layer)\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce))\n  }\n\n  return root.reduce(reduce)\n}\n\nexport default trickleStream\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor (maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth\n    this.layerRepeat = layerRepeat\n    this.currentDepth = 1\n    this.iteration = iteration\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    }\n  }\n\n  isFull () {\n    if (!this.root.data) {\n      return false\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node)\n\n      return false\n    }\n\n    // try to find new node from node.parent\n    const distantRelative = this._findParent(this.node, this.currentDepth)\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative)\n\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @param {TrickleDagNode} parent\n   */\n  _addNextNodeToParent (parent) {\n    this.parent = parent\n\n    // find site for new node\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }\n\n    // @ts-ignore\n    parent.children.push(nextNode)\n\n    this.currentDepth = nextNode.depth\n    this.node = nextNode\n  }\n\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n  append (layer) {\n    this.node.data = layer\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return this._reduce(this.root, reduce)\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n  async _reduce (node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = []\n\n    if (node.children.length) {\n      children = await Promise.all(\n        node.children\n          // @ts-ignore\n          .filter(child => child.data)\n          // @ts-ignore\n          .map(child => this._reduce(child, reduce))\n      )\n    }\n\n    return reduce((node.data || []).concat(children))\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n  _findParent (node, depth) {\n    const parent = node.parent\n\n    if (!parent || parent.depth === 0) {\n      return\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth)\n    }\n\n    return parent\n  }\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor (layerRepeat) {\n    super(0, layerRepeat)\n\n    this.root.depth = 0\n    this.currentDepth = 1\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  addChild (child) {\n    this.root.children.push(child)\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return reduce((this.root.data || []).concat(this.root.children))\n  }\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nasync function * bufferImporter (file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path)\n      let unixfs\n\n      /** @type {import('../../types').PersistOptions} */\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = raw\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        })\n\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        })\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nexport default bufferImporter\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\nimport parallelBatch from 'it-parallel-batch'\nimport * as rawCodec from 'multiformats/codecs/raw'\nimport * as dagPb from '@ipld/dag-pb'\n\nimport dagFlat from './flat.js'\nimport dagBalanced from './balanced.js'\nimport dagTrickle from './trickle.js'\nimport bufferImporterFn from './buffer-importer.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').File} File\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').DAGBuilder} DAGBuilder\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {{ [key: string]: FileDAGBuilder}}\n */\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nasync function * buildFileBatch (file, blockstore, options) {\n  let count = -1\n  let previous\n  let bufferImporter\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter\n  } else {\n    bufferImporter = bufferImporterFn\n  }\n\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++\n\n    if (count === 0) {\n      previous = entry\n      continue\n    } else if (count === 1 && previous) {\n      yield previous\n      previous = null\n    }\n\n    yield entry\n  }\n\n  if (previous) {\n    previous.single = true\n    yield previous\n  }\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nconst reduce = (file, blockstore, options) => {\n  /**\n   * @type {Reducer}\n   */\n  async function reducer (leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0]\n\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        // only one leaf node which is a buffer - we have metadata so convert it into a\n        // UnixFS entry otherwise we'll have nowhere to store the metadata\n        let buffer = await blockstore.get(leaf.cid)\n\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        })\n\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }))\n\n        // // TODO vmx 2021-03-26: This is what the original code does, it checks\n        // // the multihash of the original leaf node and uses then the same\n        // // hasher. i wonder if that's really needed or if we could just use\n        // // the hasher from `options.hasher` instead.\n        // const multihash = mh.decode(leaf.cid.multihash.bytes)\n        // let hasher\n        // switch multihash {\n        //   case sha256.code {\n        //     hasher = sha256\n        //     break;\n        //   }\n        //   //case identity.code {\n        //   //  hasher = identity\n        //   //  break;\n        //   //}\n        //   default: {\n        //     throw new Error(`Unsupported hasher \"${multihash}\"`)\n        //   }\n        // }\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        })\n        leaf.size = buffer.length\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      }\n    }\n\n    // create a parent node and add all the leaves\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    })\n\n    const links = leaves\n      .filter(leaf => {\n        if (leaf.cid.code === rawCodec.code && leaf.size) {\n          return true\n        }\n\n        if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n          return true\n        }\n\n        return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length)\n      })\n      .map((leaf) => {\n        if (leaf.cid.code === rawCodec.code) {\n          // node is a leaf buffer\n          f.addBlockSize(leaf.size)\n\n          return {\n            Name: '',\n            Tsize: leaf.size,\n            Hash: leaf.cid\n          }\n        }\n\n        if (!leaf.unixfs || !leaf.unixfs.data) {\n          // node is an intermediate node\n          f.addBlockSize((leaf.unixfs && leaf.unixfs.fileSize()) || 0)\n        } else {\n          // node is a unixfs 'file' leaf node\n          f.addBlockSize(leaf.unixfs.data.length)\n        }\n\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        }\n      })\n\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, blockstore, options)\n\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    }\n  }\n\n  return reducer\n}\n\n/**\n * @type {import('../../types').UnixFSV1DagBuilder<File>}\n */\nfunction fileBuilder (file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy]\n\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY')\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options)\n}\n\nexport default fileBuilder\n","import { Uint8ArrayList } from 'uint8arraylist'\n// @ts-ignore\nimport { create } from 'rabin-wasm'\nimport errcode from 'err-code'\n\n/**\n * @typedef {object} RabinOptions\n * @property {number} min\n * @property {number} max\n * @property {number} bits\n * @property {number} window\n * @property {number} polynomial\n */\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * rabinChunker (source, options) {\n  let min, max, avg\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize\n    min = options.minChunkSize\n    max = options.maxChunkSize\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE')\n  } else {\n    avg = options.avgChunkSize\n    min = avg / 3\n    max = avg + (avg / 2)\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE')\n  }\n\n  if (max < min) {\n    max = min\n  }\n\n  if (avg < min) {\n    avg = min\n  }\n\n  const sizepow = Math.floor(Math.log2(avg))\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk\n  }\n}\n\nexport default rabinChunker\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {RabinOptions} options\n */\nasync function * rabin (source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window)\n  const buffers = new Uint8ArrayList()\n\n  for await (const chunk of source) {\n    buffers.append(chunk)\n\n    const sizes = r.fingerprint(chunk)\n\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i]\n      const buf = buffers.slice(0, size)\n      buffers.consume(size)\n\n      yield buf\n    }\n  }\n\n  if (buffers.length) {\n    yield buffers.subarray(0)\n  }\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * fixedSizeChunker (source, options) {\n  let list = new Uint8ArrayList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    list.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield list.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === list.length) {\n        list = new Uint8ArrayList()\n        currentLength = 0\n      } else {\n        const newBl = new Uint8ArrayList()\n        newBl.append(list.sublist(maxChunkSize))\n        list = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield list.subarray(0, currentLength)\n  }\n}\n\nexport default fixedSizeChunker\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @type {ChunkValidator}\n */\nasync function * validateChunks (source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString())\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content)\n    } else if (content instanceof Uint8Array) {\n      yield content\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n  }\n}\n\nexport default validateChunks\n","import dirBuilder from './dir.js'\nimport fileBuilder from './file/index.js'\nimport errCode from 'err-code'\nimport rabin from '../chunker/rabin.js'\nimport fixedSize from '../chunker/fixed-size.js'\nimport validateChunks from './validate-chunks.js'\n\n/**\n * @typedef {import('../types').File} File\n * @typedef {import('../types').Directory} Directory\n * @typedef {import('../types').DAGBuilder} DAGBuilder\n * @typedef {import('../types').Chunker} Chunker\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @param {any} thing\n * @returns {thing is Iterable<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterable<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {Uint8Array | AsyncIterable<Uint8Array> | Iterable<Uint8Array>} content\n * @returns {AsyncIterable<Uint8Array>}\n */\nfunction contentAsAsyncIterable (content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return (async function * () {\n        yield content\n      }())\n    } else if (isIterable(content)) {\n      return (async function * () {\n        yield * content\n      }())\n    } else if (isAsyncIterable(content)) {\n      return content\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n  }\n\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n}\n\n/**\n * @type {DAGBuilder}\n */\nasync function * dagBuilder (source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      /**\n       * @type {Chunker}\n       */\n      let chunker\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin\n      } else {\n        chunker = fixedSize\n      }\n\n      /**\n       * @type {ChunkValidator}\n       */\n      let chunkValidator\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator\n      } else {\n        chunkValidator = validateChunks\n      }\n\n      /** @type {File} */\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      }\n\n      yield () => fileBuilder(file, blockstore, options)\n    } else if (entry.path) {\n      /** @type {Directory} */\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      }\n\n      yield () => dirBuilder(dir, blockstore, options)\n    } else {\n      throw new Error('Import candidate must have content or path or both')\n    }\n  }\n}\n\nexport default dagBuilder\n","/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n *\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) { }\n\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n  async * eachChildSeries () { }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport default Dir\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {}\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return Promise.resolve(this._children[name])\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  async * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        })\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    /** @type {PBNode} */\n    const node = { Data: unixfs.marshal(), Links: links }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce(\n      /**\n       * @param {number} acc\n       * @param {PBLink} curr\n       */\n      (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize),\n      0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    }\n  }\n}\n\nexport default DirFlat\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      }\n    }\n  }\n}\n\nexport default DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  }\n}\n","import DirSharded from './dir-sharded.js'\nimport DirFlat from './dir-flat.js'\n\n/**\n * @typedef {import('./dir').default} Dir\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @param {Dir | null} child\n * @param {Dir} dir\n * @param {number} threshold\n * @param {ImporterOptions} options\n * @returns {Promise<DirSharded>}\n */\nasync function flatToShard (child, dir, threshold, options) {\n  let newDir = dir\n\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options)\n  }\n\n  const parent = newDir.parent\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir\n      }\n\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found')\n      }\n\n      await parent.put(newDir.parentKey, newDir)\n    }\n\n    return flatToShard(newDir, parent, threshold, options)\n  }\n\n  // @ts-ignore\n  return newDir\n}\n\n/**\n * @param {DirFlat} oldDir\n * @param {ImporterOptions} options\n */\nasync function convertToShard (oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options)\n\n  for await (const { key, child } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child)\n  }\n\n  return newDir\n}\n\nexport default flatToShard\n","const toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\nexport default toPathComponents\n","import DirFlat from './dir-flat.js'\nimport flatToShard from './flat-to-shard.js'\nimport Dir from './dir.js'\nimport toPathComponents from './utils/to-path-components.js'\n\n/**\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {(source: AsyncIterable<InProgressImportResult>, blockstore: Blockstore, options: ImporterOptions) => AsyncIterable<ImportResult>} TreeBuilder\n */\n\n/**\n * @param {InProgressImportResult} elem\n * @param {Dir} tree\n * @param {ImporterOptions} options\n */\nasync function addToTree (elem, tree, options) {\n  const pathElems = toPathComponents(elem.path || '')\n  const lastIndex = pathElems.length - 1\n  let parent = tree\n  let currentPath = ''\n\n  for (let i = 0; i < pathElems.length; i++) {\n    const pathElem = pathElems[i]\n\n    currentPath += `${currentPath ? '/' : ''}${pathElem}`\n\n    const last = (i === lastIndex)\n    parent.dirty = true\n    parent.cid = undefined\n    parent.size = undefined\n\n    if (last) {\n      await parent.put(pathElem, elem)\n      tree = await flatToShard(null, parent, options.shardSplitThreshold, options)\n    } else {\n      let dir = await parent.get(pathElem)\n\n      if (!dir || !(dir instanceof Dir)) {\n        dir = new DirFlat({\n          root: false,\n          dir: true,\n          parent: parent,\n          parentKey: pathElem,\n          path: currentPath,\n          dirty: true,\n          flat: true,\n          mtime: dir && dir.unixfs && dir.unixfs.mtime,\n          mode: dir && dir.unixfs && dir.unixfs.mode\n        }, options)\n      }\n\n      await parent.put(pathElem, dir)\n\n      parent = dir\n    }\n  }\n\n  return tree\n}\n\n/**\n * @param {Dir | InProgressImportResult} tree\n * @param {Blockstore} blockstore\n */\nasync function * flushAndYield (tree, blockstore) {\n  if (!(tree instanceof Dir)) {\n    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {\n      yield tree\n    }\n\n    return\n  }\n\n  yield * tree.flush(blockstore)\n}\n\n/**\n * @type {TreeBuilder}\n */\nasync function * treeBuilder (source, block, options) {\n  /** @type {Dir} */\n  let tree = new DirFlat({\n    root: true,\n    dir: true,\n    path: '',\n    dirty: true,\n    flat: true\n  }, options)\n\n  for await (const entry of source) {\n    if (!entry) {\n      continue\n    }\n\n    tree = await addToTree(entry, tree, options)\n\n    if (!entry.unixfs || !entry.unixfs.isDirectory()) {\n      yield entry\n    }\n  }\n\n  if (options.wrapWithDirectory) {\n    yield * flushAndYield(tree, block)\n  } else {\n    for await (const unwrapped of tree.eachChildSeries()) {\n      if (!unwrapped) {\n        continue\n      }\n\n      yield * flushAndYield(unwrapped.child, block)\n    }\n  }\n}\n\nexport default treeBuilder\n","import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n","/**\n * @typedef {object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nexport const parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * @typedef {object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nexport const parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nexport const parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n","import { importer } from 'ipfs-unixfs-importer'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple'\nimport { parseChunkerString } from './utils.js'\nimport { pipe } from 'it-pipe'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll ({ repo, preload, hashers, options }) {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    /** @type {MultihashHasher | undefined} */\n    let hasher\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg)\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        hasher,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString()\n\n        // do not keep file totals around forever\n        delete totals[path]\n\n        yield {\n          ...added,\n          path\n        }\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateMultiple(input, normaliseContent)\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","\nimport { Bucket, createHAMT } from 'hamt-sharding'\nimport { decode } from '@ipld/dag-pb'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n// FIXME: this is copy/pasted from ipfs-unixfs-importer/src/options.js\n/**\n * @param {Uint8Array} buf\n */\nconst hashFn = async function (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @param {PBLink[]} links\n * @param {Bucket<boolean>} bucket\n * @param {Bucket<boolean>} rootBucket\n */\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(\n    links.map(link => {\n      if (link.Name == null) {\n        // TODO(@rvagg): what do? this is technically possible\n        throw new Error('Unexpected Link without a Name')\n      }\n      if (link.Name.length === 2) {\n        const pos = parseInt(link.Name, 16)\n\n        return bucket._putObjectAt(pos, new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos))\n      }\n\n      return rootBucket.put(link.Name.substring(2), true)\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nconst toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {import('hamt-sharding').BucketPosition<boolean>} position\n */\nconst toBucketPath = (position) => {\n  let bucket = position.bucket\n  const path = []\n\n  while (bucket._parent) {\n    path.push(bucket)\n\n    bucket = bucket._parent\n  }\n\n  path.push(bucket)\n\n  return path.reverse()\n}\n\n/**\n * @typedef {import('../types').ShardTraversalContext} ShardTraversalContext\n *\n * @param {PBNode} node\n * @param {string} name\n * @param {Blockstore} blockstore\n * @param {ShardTraversalContext} [context]\n * @param {ExporterOptions} [options]\n * @returns {Promise<CID|null>}\n */\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = createHAMT({\n      hashFn\n    })\n\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    }\n  }\n\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket)\n\n  const position = await context.rootBucket._findNewBucketAndPos(name)\n  let prefix = toPrefix(position.pos)\n  const bucketPath = toBucketPath(position)\n\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth]\n\n    prefix = toPrefix(context.lastBucket._posAtParent)\n  }\n\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false\n    }\n\n    const entryPrefix = link.Name.substring(0, 2)\n    const entryName = link.Name.substring(2)\n\n    if (entryPrefix !== prefix) {\n      // not the entry or subshard we're looking for\n      return false\n    }\n\n    if (entryName && entryName !== name) {\n      // not the entry we're looking for\n      return false\n    }\n\n    return true\n  })\n\n  if (!link) {\n    return null\n  }\n\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash\n  }\n\n  context.hamtDepth++\n\n  const block = await blockstore.get(link.Hash, options)\n  node = decode(block)\n\n  return findShardCid(node, name, blockstore, context, options)\n}\n\nexport default findShardCid\n","/**\n * @param {Uint8Array} block\n * @param {number} blockStart\n * @param {number} requestedStart\n * @param {number} requestedEnd\n */\nfunction extractDataFromBlock (block, blockStart, requestedStart, requestedEnd) {\n  const blockLength = block.length\n  const blockEnd = blockStart + blockLength\n\n  if (requestedStart >= blockEnd || requestedEnd < blockStart) {\n    // If we are looking for a byte range that is starts after the start of the block,\n    // return an empty block.  This can happen when internal nodes contain data\n    return new Uint8Array(0)\n  }\n\n  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {\n    // If the end byte is in the current block, truncate the block to the end byte\n    block = block.subarray(0, requestedEnd - blockStart)\n  }\n\n  if (requestedStart >= blockStart && requestedStart < blockEnd) {\n    // If the start byte is in the current block, skip to the start byte\n    block = block.subarray(requestedStart - blockStart)\n  }\n\n  return block\n}\n\nexport default extractDataFromBlock\n","import errCode from 'err-code'\n\n/**\n * @param {number} size\n * @param {number} [offset]\n * @param {number} [length]\n */\nconst validateOffsetAndLength = (size, offset, length) => {\n  if (!offset) {\n    offset = 0\n  }\n\n  if (offset < 0) {\n    throw errCode(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset > size) {\n    throw errCode(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (!length && length !== 0) {\n    length = size - offset\n  }\n\n  if (length < 0) {\n    throw errCode(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset + length > size) {\n    length = size - offset\n  }\n\n  return {\n    offset,\n    length\n  }\n}\n\nexport default validateOffsetAndLength\n","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","import extractDataFromBlock from '../../../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../../../utils/validate-offset-and-length.js'\nimport { UnixFS } from 'ipfs-unixfs'\nimport errCode from 'err-code'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\nimport { pushable } from 'it-pushable'\nimport parallel from 'it-parallel'\nimport { pipe } from 'it-pipe'\nimport map from 'it-map'\nimport PQueue from 'p-queue'\n\n/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode | Uint8Array} node\n * @param {import('it-pushable').Pushable<Uint8Array>} queue\n * @param {number} streamPosition\n * @param {number} start\n * @param {number} end\n * @param {PQueue} walkQueue\n * @param {ExporterOptions} options\n * @returns {Promise<void>}\n */\nasync function walkDAG (blockstore, node, queue, streamPosition, start, end, walkQueue, options) {\n  // a `raw` node\n  if (node instanceof Uint8Array) {\n    queue.push(extractDataFromBlock(node, streamPosition, start, end))\n\n    return\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  /** @type {UnixFS} */\n  let file\n\n  try {\n    file = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  // might be a unixfs `raw` node or have data on intermediate nodes\n  if (file.data != null) {\n    const data = file.data\n    const buf = extractDataFromBlock(data, streamPosition, start, end)\n\n    queue.push(buf)\n\n    streamPosition += buf.byteLength\n  }\n\n  /** @type {Array<{ link: PBLink, blockStart: number }>} */\n  const childOps = []\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i]\n    const childStart = streamPosition // inclusive\n    const childEnd = childStart + file.blockSizes[i] // exclusive\n\n    if ((start >= childStart && start < childEnd) || // child has offset byte\n        (end >= childStart && end <= childEnd) || // child has end byte\n        (start < childStart && end > childEnd)) { // child is between offset and end bytes\n      childOps.push({\n        link: childLink,\n        blockStart: streamPosition\n      })\n    }\n\n    streamPosition = childEnd\n\n    if (streamPosition > end) {\n      break\n    }\n  }\n\n  await pipe(\n    childOps,\n    (source) => map(source, (op) => {\n      return async () => {\n        const block = await blockstore.get(op.link.Hash, {\n          signal: options.signal\n        })\n\n        return {\n          ...op,\n          block\n        }\n      }\n    }),\n    (source) => parallel(source, {\n      ordered: true\n    }),\n    async (source) => {\n      for await (const { link, block, blockStart } of source) {\n        /** @type {PBNode | Uint8Array} */\n        let child\n        switch (link.Hash.code) {\n          case dagPb.code:\n            child = dagPb.decode(block)\n            break\n          case raw.code:\n            child = block\n            break\n          default:\n            queue.end(errCode(new Error(`Unsupported codec: ${link.Hash.code}`), 'ERR_NOT_UNIXFS'))\n            return\n        }\n\n        walkQueue.add(async () => {\n          await walkDAG(blockstore, child, queue, blockStart, start, end, walkQueue, options)\n        })\n      }\n    }\n  )\n}\n\n/**\n * @type {import('../').UnixfsV1Resolver}\n */\nconst fileContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * yieldFileContent (options = {}) {\n    const fileSize = unixfs.fileSize()\n\n    if (fileSize === undefined) {\n      throw new Error('File was a directory')\n    }\n\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length)\n\n    if (length === 0) {\n      return\n    }\n\n    // use a queue to walk the DAG instead of recursion to ensure very deep DAGs\n    // don't overflow the stack\n    const walkQueue = new PQueue({\n      concurrency: 1\n    })\n    const queue = pushable()\n\n    walkQueue.add(async () => {\n      await walkDAG(blockstore, node, queue, 0, offset, offset + length, walkQueue, options)\n    })\n\n    walkQueue.on('error', error => {\n      queue.end(error)\n    })\n\n    let read = 0\n\n    for await (const buf of queue) {\n      if (buf == null) {\n        continue\n      }\n\n      read += buf.byteLength\n\n      if (read === length) {\n        queue.end()\n      }\n\n      yield buf\n    }\n  }\n\n  return yieldFileContent\n}\n\nexport default fileContent\n","/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} [options]\n   * @returns {UnixfsV1DirectoryContent}\n   */\n  async function * yieldDirectoryContent (options = {}) {\n    const offset = options.offset || 0\n    const length = options.length || node.Links.length\n    const links = node.Links.slice(offset, length)\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options)\n\n      if (result.entry) {\n        yield result.entry\n      }\n    }\n  }\n\n  return yieldDirectoryContent\n}\n\nexport default directoryContent\n","import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport findShardCid from '../../utils/find-cid-in-shard.js'\nimport { decode } from '@ipld/dag-pb'\n\nimport contentFile from './content/file.js'\nimport contentDirectory from './content/directory.js'\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js'\n\n/**\n * @typedef {import('../../types').Resolve} Resolve\n * @typedef {import('../../types').Resolver} Resolver\n * @typedef {import('../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @param {PBNode} node\n * @param {string} name\n */\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name)\n\n  return link && link.Hash\n}\n\n/**\n * @type {{ [key: string]: UnixfsV1Resolver }}\n */\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  }\n}\n\n/**\n * @type {Resolver}\n */\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options)\n  const node = decode(block)\n  let unixfs\n  let next\n\n  if (!name) {\n    name = cid.toString()\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  try {\n    unixfs = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    // non-UnixFS dag-pb node? It could happen.\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  if (!path) {\n    path = name\n  }\n\n  if (toResolve.length) {\n    let linkCid\n\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      // special case - unixfs v1 hamt shards\n      linkCid = await findShardCid(node, toResolve[0], blockstore)\n    } else {\n      linkCid = findLinkCid(node, toResolve[0])\n    }\n\n    if (!linkCid) {\n      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND')\n    }\n\n    // remove the path component we have resolved\n    const nextName = toResolve.shift()\n    const nextPath = `${path}/${nextName}`\n\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    }\n  }\n\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      // @ts-ignore\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  }\n}\n\nexport default unixFsResolver\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {import('../types').Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n\n  const block = await blockstore.get(cid, options)\n\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  }\n}\n\nexport default resolve\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport * as dagCbor from '@ipld/dag-cbor'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid)\n  const object = dagCbor.decode(block)\n  let subObject = object\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      const subObjectCid = CID.asCID(subObject[prop])\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function * () {\n              yield object\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function * () {\n        yield object\n      }\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\nimport * as mh from 'multiformats/hashes/digest'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n  const buf = await mh.decode(cid.multihash.bytes)\n\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\n\nimport * as dagPb from '@ipld/dag-pb'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as raw from 'multiformats/codecs/raw'\nimport { identity } from 'multiformats/hashes/identity'\n\nimport dagPbResolver from './unixfs-v1/index.js'\nimport rawResolver from './raw.js'\nimport dagCborResolver from './dag-cbor.js'\nimport identifyResolver from './identity.js'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n * @typedef {import('../types').Resolve} Resolve\n */\n\n/**\n * @type {{ [ key: string ]: Resolver }}\n */\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n}\n\n/**\n * @type {Resolve}\n */\nfunction resolve (cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code]\n\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER')\n  }\n\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options)\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\nimport resolve from './resolvers/index.js'\nimport last from 'it-last'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ExporterOptions} ExporterOptions\n * @typedef {import('./types').UnixFSFile} UnixFSFile\n * @typedef {import('./types').UnixFSDirectory} UnixFSDirectory\n * @typedef {import('./types').ObjectNode} ObjectNode\n * @typedef {import('./types').RawNode} RawNode\n * @typedef {import('./types').IdentityNode} IdentityNode\n * @typedef {import('./types').UnixFSEntry} UnixFSEntry\n */\n\nconst toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\n/**\n * @param {string|Uint8Array|CID} path\n */\nconst cidAndRest = (path) => {\n  if (path instanceof Uint8Array) {\n    return {\n      cid: CID.decode(path),\n      toResolve: []\n    }\n  }\n\n  const cid = CID.asCID(path)\n  if (cid) {\n    return {\n      cid,\n      toResolve: []\n    }\n  }\n\n  if (typeof path === 'string') {\n    if (path.indexOf('/ipfs/') === 0) {\n      path = path.substring(6)\n    }\n\n    const output = toPathComponents(path)\n\n    return {\n      cid: CID.parse(output[0]),\n      toResolve: output.slice(1)\n    }\n  }\n\n  throw errCode(new Error(`Unknown path type ${path}`), 'ERR_BAD_PATH')\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * walkPath (path, blockstore, options = {}) {\n  let {\n    cid,\n    toResolve\n  } = cidAndRest(path)\n  let name = cid.toString()\n  let entryPath = name\n  const startingDepth = toResolve.length\n\n  while (true) {\n    const result = await resolve(cid, name, entryPath, toResolve, startingDepth, blockstore, options)\n\n    if (!result.entry && !result.next) {\n      throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n    }\n\n    if (result.entry) {\n      yield result.entry\n    }\n\n    if (!result.next) {\n      return\n    }\n\n    // resolve further parts\n    toResolve = result.next.toResolve\n    cid = result.next.cid\n    name = result.next.name\n    entryPath = result.next.path\n  }\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function exporter (path, blockstore, options = {}) {\n  const result = await last(walkPath(path, blockstore, options))\n\n  if (!result) {\n    throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n  }\n\n  return result\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * recursive (path, blockstore, options = {}) {\n  const node = await exporter(path, blockstore, options)\n\n  if (!node) {\n    return\n  }\n\n  yield node\n\n  if (node.type === 'directory') {\n    for await (const child of recurse(node, options)) {\n      yield child\n    }\n  }\n\n  /**\n   * @param {UnixFSDirectory} node\n   * @param {ExporterOptions} options\n   * @returns {AsyncGenerator<UnixFSEntry, void, any>}\n   */\n  async function * recurse (node, options) {\n    for await (const file of node.content(options)) {\n      yield file\n\n      if (file instanceof Uint8Array) {\n        continue\n      }\n\n      if (file.type === 'directory') {\n        yield * recurse(file, options)\n      }\n    }\n  }\n}\n","import { Uint8ArrayList, isUint8ArrayList } from 'uint8arraylist';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nconst ZERO_OFFSET = '0'.charCodeAt(0);\nconst USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary');\nconst GNU_MAGIC = uint8ArrayFromString('ustar\\x20', 'binary');\nconst GNU_VER = uint8ArrayFromString('\\x20\\x00', 'binary');\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nconst clamp = function (index, len, defaultValue) {\n    if (typeof index !== 'number')\n        return defaultValue;\n    index = ~~index; // Coerce to integer.\n    if (index >= len)\n        return len;\n    if (index >= 0)\n        return index;\n    index += len;\n    if (index >= 0)\n        return index;\n    return 0;\n};\nconst toType = function (flag) {\n    switch (flag) {\n        case 0:\n            return 'file';\n        case 1:\n            return 'link';\n        case 2:\n            return 'symlink';\n        case 3:\n            return 'character-device';\n        case 4:\n            return 'block-device';\n        case 5:\n            return 'directory';\n        case 6:\n            return 'fifo';\n        case 7:\n            return 'contiguous-file';\n        case 72:\n            return 'pax-header';\n        case 55:\n            return 'pax-global-header';\n        case 27:\n            return 'gnu-long-link-path';\n        case 28:\n        case 30:\n            return 'gnu-long-path';\n        default:\n            return undefined;\n    }\n};\nconst indexOf = function (block, num, offset, end) {\n    for (; offset < end; offset++) {\n        if (block.get(offset) === num)\n            return offset;\n    }\n    return end;\n};\nconst cksum = function (block) {\n    let sum = 8 * 32;\n    for (let i = 0; i < 148; i++)\n        sum += block.get(i);\n    for (let j = 156; j < 512; j++)\n        sum += block.get(j);\n    return sum;\n};\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256(buf) {\n    // first byte MUST be either 80 or FF\n    // 80 for positive, FF for 2's comp\n    let positive;\n    if (buf.get(0) === 0x80) {\n        positive = true;\n    }\n    else if (buf.get(0) === 0xFF) {\n        positive = false;\n    }\n    else {\n        return 0;\n    }\n    // build up a base-256 tuple from the least sig to the highest\n    let zero = false;\n    const tuple = [];\n    for (let i = buf.length - 1; i > 0; i--) {\n        const byte = buf.get(i);\n        if (positive)\n            tuple.push(byte);\n        else if (zero && byte === 0)\n            tuple.push(0);\n        else if (zero) {\n            zero = false;\n            tuple.push(0x100 - byte);\n        }\n        else\n            tuple.push(0xFF - byte);\n    }\n    let sum = 0;\n    const l = tuple.length;\n    for (let i = 0; i < l; i++) {\n        sum += tuple[i] * Math.pow(256, i);\n    }\n    return positive ? sum : -1 * sum;\n}\nconst decodeOct = function (val, offset, length) {\n    val = val.sublist(offset, offset + length);\n    offset = 0;\n    // If prefixed with 0x80 then parse as a base-256 integer\n    if ((val.get(offset) & 0x80) !== 0) {\n        return parse256(val);\n    }\n    else {\n        // Older versions of tar can prefix with spaces\n        while (offset < val.length && val.get(offset) === 32) {\n            offset++;\n        }\n        const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n        while (offset < end && val.get(offset) === 0) {\n            offset++;\n        }\n        if (end === offset) {\n            return 0;\n        }\n        return parseInt(uint8ArrayToString(val.subarray(offset, end)), 8);\n    }\n};\nconst decodeStr = function (val, offset, length, encoding) {\n    return uint8ArrayToString(val.subarray(offset, indexOf(val, 0, offset, offset + length)), encoding);\n};\nexport function decodeLongPath(buf, encoding) {\n    const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    return decodeStr(list, 0, buf.length, encoding);\n}\nexport function decodePax(buf, encoding) {\n    let list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    const result = {};\n    while (list.length > 0) {\n        let i = 0;\n        while (i < buf.length && list.get(i) !== 32) {\n            i++;\n        }\n        const len = parseInt(uint8ArrayToString(list.subarray(0, i)), 10);\n        if (len === 0) {\n            return result;\n        }\n        const b = uint8ArrayToString(list.subarray(i + 1, len - 1), encoding);\n        const keyIndex = b.indexOf('=');\n        if (keyIndex === -1) {\n            return result;\n        }\n        result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n        list = list.sublist(len);\n    }\n    return result;\n}\nexport function decode(buf, filenameEncoding) {\n    const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    let typeflag = list.get(156) === 0 ? 0 : list.get(156) - ZERO_OFFSET;\n    let name = decodeStr(list, 0, 100, filenameEncoding);\n    const mode = decodeOct(list, 100, 8);\n    const uid = decodeOct(list, 108, 8);\n    const gid = decodeOct(list, 116, 8);\n    const size = decodeOct(list, 124, 12);\n    const mtime = decodeOct(list, 136, 12);\n    const type = toType(typeflag);\n    const linkname = list.get(157) === 0 ? undefined : decodeStr(list, 157, 100, filenameEncoding);\n    const uname = decodeStr(list, 265, 32);\n    const gname = decodeStr(list, 297, 32);\n    const devmajor = decodeOct(list, 329, 8);\n    const devminor = decodeOct(list, 337, 8);\n    const c = cksum(list);\n    // checksum is still initial value if header was null.\n    if (c === 8 * 32) {\n        return null;\n    }\n    // valid checksum\n    if (c !== decodeOct(list, 148, 8)) {\n        throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?');\n    }\n    if (uint8ArrayCompare(USTAR_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n        // ustar (posix) format.\n        // prepend prefix, if present.\n        if (list.get(345) !== 0) {\n            name = decodeStr(list, 345, 155, filenameEncoding) + '/' + name;\n        }\n    }\n    else if (uint8ArrayCompare(GNU_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 &&\n        uint8ArrayCompare(GNU_VER, list.subarray(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n        // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n        // multi-volume tarballs.\n    }\n    else {\n        throw new Error('Invalid tar header: unknown format.');\n    }\n    // to support old tar versions that use trailing / to indicate dirs\n    if (typeflag === 0 && name != null && name[name.length - 1] === '/') {\n        typeflag = 5;\n    }\n    return {\n        name: name,\n        mode: mode,\n        uid: uid,\n        gid: gid,\n        size: size,\n        mtime: new Date(1000 * (mtime ?? 0)),\n        type: type,\n        linkname: linkname,\n        uname: uname,\n        gname: gname,\n        devmajor: devmajor,\n        devminor: devminor\n    };\n}\n//# sourceMappingURL=extract-headers.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n */\nexport default async function toBuffer(stream) {\n    let buffer = new Uint8Array(0);\n    for await (const buf of stream) {\n        buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length);\n    }\n    return buffer;\n}\n//# sourceMappingURL=index.js.map","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst ZEROS = '0000000000000000000';\nconst SEVENS = '7777777777777777777';\nconst ZERO_OFFSET = '0'.charCodeAt(0);\nconst USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary');\nconst USTAR_VER = uint8ArrayFromString('00', 'binary');\nconst MASK = parseInt('7777', 8);\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nconst toTypeflag = function (flag) {\n    switch (flag) {\n        case 'file':\n            return 0;\n        case 'link':\n            return 1;\n        case 'symlink':\n            return 2;\n        case 'character-device':\n            return 3;\n        case 'block-device':\n            return 4;\n        case 'directory':\n            return 5;\n        case 'fifo':\n            return 6;\n        case 'contiguous-file':\n            return 7;\n        case 'pax-header':\n            return 72;\n        default:\n            return 0;\n    }\n};\nconst cksum = function (block) {\n    let sum = 8 * 32;\n    for (let i = 0; i < 148; i++)\n        sum += block[i];\n    for (let j = 156; j < 512; j++)\n        sum += block[j];\n    return sum;\n};\nconst encodeOct = function (val, n) {\n    const str = val.toString(8);\n    if (str.length > n) {\n        return uint8ArrayFromString(SEVENS.slice(0, n) + ' ');\n    }\n    return uint8ArrayFromString(ZEROS.slice(0, n - str.length) + str + ' ');\n};\nconst addLength = function (str) {\n    const len = uint8ArrayFromString(str).byteLength;\n    let digits = Math.floor(Math.log(len) / Math.log(10)) + 1;\n    if (len + digits >= Math.pow(10, digits)) {\n        digits++;\n    }\n    return `${len + digits}${str}`;\n};\nexport function encodePax(opts) {\n    let result = '';\n    if (opts.name != null) {\n        result += addLength(' path=' + opts.name + '\\n');\n    }\n    if (opts.linkname != null) {\n        result += addLength(' linkpath=' + opts.linkname + '\\n');\n    }\n    const pax = opts.pax;\n    if (pax != null) {\n        for (const key in pax) {\n            if (Object.prototype.hasOwnProperty.call(pax, key)) {\n                result += addLength(' ' + key + '=' + pax[key] + '\\n');\n            }\n        }\n    }\n    return uint8ArrayFromString(result);\n}\nexport function encode(opts) {\n    const buf = new Uint8Array(512);\n    let name = opts.name;\n    let prefix = '';\n    if (opts.typeflag === 5 && name[name.length - 1] !== '/') {\n        name += '/';\n    }\n    if (uint8ArrayFromString(name).byteLength !== name.length) {\n        return null; // utf-8\n    }\n    while (uint8ArrayFromString(name).byteLength > 100) {\n        const i = name.indexOf('/');\n        if (i === -1) {\n            return null;\n        }\n        prefix += prefix !== '' ? '/' + name.slice(0, i) : name.slice(0, i);\n        name = name.slice(i + 1);\n    }\n    if (uint8ArrayFromString(name).byteLength > 100 || uint8ArrayFromString(prefix).byteLength > 155) {\n        return null;\n    }\n    if (opts.linkname != null && uint8ArrayFromString(opts.linkname).byteLength > 100) {\n        return null;\n    }\n    buf.set(uint8ArrayFromString(name), 0);\n    buf.set(encodeOct(opts.mode & MASK, 6), 100);\n    buf.set(encodeOct(opts.uid, 6), 108);\n    buf.set(encodeOct(opts.gid, 6), 116);\n    buf.set(encodeOct(opts.size, 11), 124);\n    buf.set(encodeOct((opts.mtime.getTime() / 1000) | 0, 11), 136);\n    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);\n    if (opts.linkname != null) {\n        buf.set(uint8ArrayFromString(opts.linkname), 157);\n    }\n    buf.set(USTAR_MAGIC, MAGIC_OFFSET);\n    buf.set(USTAR_VER, VERSION_OFFSET);\n    if (opts.uname != null) {\n        buf.set(uint8ArrayFromString(opts.uname), 265);\n    }\n    if (opts.gname != null) {\n        buf.set(uint8ArrayFromString(opts.gname), 297);\n    }\n    buf.set(encodeOct(opts.devmajor ?? 0, 6), 329);\n    buf.set(encodeOct(opts.devminor ?? 0, 6), 337);\n    if (prefix != null) {\n        buf.set(uint8ArrayFromString(prefix), 345);\n    }\n    buf.set(encodeOct(cksum(buf), 6), 148);\n    return buf;\n}\n//# sourceMappingURL=pack-headers.js.map","// @ts-expect-error no types\nimport isoConstants from 'iso-constants';\nimport toBuffer from 'it-to-buffer';\nimport { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist';\nimport * as Headers from './pack-headers.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nconst { S_IFMT, S_IFBLK, S_IFCHR, S_IFDIR, S_IFIFO, S_IFLNK } = isoConstants;\nconst DMODE = parseInt('755', 8);\nconst FMODE = parseInt('644', 8);\nconst END_OF_TAR = new Uint8Array(1024);\nfunction modeToType(mode = 0) {\n    switch (mode & S_IFMT) {\n        case S_IFBLK: return 'block-device';\n        case S_IFCHR: return 'character-device';\n        case S_IFDIR: return 'directory';\n        case S_IFIFO: return 'fifo';\n        case S_IFLNK: return 'symlink';\n        default: return 'file';\n    }\n}\nfunction getPadding(size) {\n    size &= 511;\n    if (size !== 0) {\n        return END_OF_TAR.subarray(0, 512 - size);\n    }\n    return new Uint8Array(0);\n}\nfunction encode(header) {\n    if (header.pax == null) {\n        const encoded = Headers.encode(header);\n        if (encoded != null) {\n            return encoded;\n        }\n    }\n    return encodePax(header);\n}\nfunction encodePax(header) {\n    const paxHeader = Headers.encodePax(header);\n    const newHeader = {\n        name: 'PaxHeader',\n        mode: header.mode,\n        uid: header.uid,\n        gid: header.gid,\n        size: paxHeader.length,\n        mtime: header.mtime,\n        type: 'pax-header',\n        linkname: header.linkname,\n        uname: header.uname,\n        gname: header.gname,\n        devmajor: header.devmajor,\n        devminor: header.devminor\n    };\n    return new Uint8ArrayList(Headers.encode(newHeader) ?? new Uint8Array(0), paxHeader, getPadding(paxHeader.length), Headers.encode({ ...newHeader, size: header.size, type: header.type }) ?? new Uint8Array(0)).subarray();\n}\nexport function pack() {\n    return async function* (source) {\n        for await (let { header: partialHeader, body } of source) {\n            const header = {\n                ...partialHeader,\n                size: partialHeader.type === 'symlink' ? 0 : partialHeader.size ?? 0,\n                type: partialHeader.type ?? modeToType(partialHeader.mode),\n                mode: partialHeader.mode ?? (partialHeader.type === 'directory' ? DMODE : FMODE),\n                uid: partialHeader.uid ?? 0,\n                gid: partialHeader.gid ?? 0,\n                mtime: partialHeader.mtime ?? new Date()\n            };\n            if (typeof body === 'string') {\n                body = uint8ArrayFromString(body);\n            }\n            if (body instanceof Uint8Array || isUint8ArrayList(body)) {\n                header.size = body.length;\n                yield encode(header);\n                yield isUint8ArrayList(body) ? body.subarray() : body;\n                yield getPadding(header.size);\n                continue;\n            }\n            if (header.type === 'symlink' && header.linkname == null) {\n                if (body == null) {\n                    throw new Error('type was symlink but no linkname or body specified');\n                }\n                header.linkname = uint8ArrayToString(await toBuffer(body));\n                yield encode(header);\n                continue;\n            }\n            yield encode(header);\n            if (header.type !== 'file' && header.type !== 'contiguous-file') {\n                continue;\n            }\n            let written = 0;\n            for await (const chunk of (body ?? [])) {\n                written += chunk.length; // eslint-disable-line @typescript-eslint/restrict-plus-operands\n                yield isUint8ArrayList(chunk) ? chunk.subarray() : chunk;\n            }\n            if (written !== header.size) { // corrupting tar\n                throw new Error(`size mismatch, wrote ${written} of ${header.size} bytes`);\n            }\n            yield getPadding(header.size);\n        }\n        yield END_OF_TAR;\n    };\n}\n//# sourceMappingURL=pack.js.map","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all/index.js'\nimport { createCat } from './cat.js'\nimport { createGet } from './get.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context\n * @typedef {import('./add-all').Context} AddAllContext\n * @typedef {import('./cat').Context} CatContext\n * @typedef {import('./get').Context} GetContext\n * @typedef {import('./ls').Context} ListContext\n */\nexport class RootAPI {\n  /**\n   * @param {Context} context\n   */\n  constructor ({ preload, repo, hashers, options }) {\n    const addAll = createAddAll({\n      preload,\n      repo,\n      options,\n      hashers\n    })\n\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    this.cat = createCat({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.ls = createLs({ repo, preload })\n  }\n}\n","import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n","import { exporter, recursive } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\nimport { pack } from 'it-tar'\nimport { pipe } from 'it-pipe'\nimport Pako from 'pako'\nimport toBuffer from 'it-to-buffer'\n\n// https://www.gnu.org/software/gzip/manual/gzip.html\nconst DEFAULT_COMPRESSION_LEVEL = 6\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"get\"]}\n   */\n  async function * get (ipfsPath, options = {}) {\n    if (options.compressionLevel != null && (options.compressionLevel < -1 || options.compressionLevel > 9)) {\n      throw errCode(new Error('Compression level must be between -1 and 9'), 'ERR_INVALID_PARAMS')\n    }\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (/** @type {any} */ err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(ipfsPath) || ipfsPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file' || file.type === 'raw') {\n      const args = []\n\n      if (!options.compress || options.archive === true) {\n        args.push([{\n          header: {\n            name: file.path,\n            mode: file.type === 'file' && file.unixfs.mode,\n            mtime: file.type === 'file' && file.unixfs.mtime ? new Date(file.unixfs.mtime.secs * 1000) : undefined,\n            size: file.size,\n            type: 'file'\n          },\n          body: file.content()\n        }],\n        pack()\n        )\n      } else {\n        args.push(\n          file.content\n        )\n      }\n\n      if (options.compress) {\n        args.push(\n          /**\n           * @param {AsyncIterable<Uint8Array>} source\n           */\n          async function * (source) {\n            const buf = await toBuffer(source)\n\n            yield Pako.gzip(buf, {\n              level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n            })\n          }\n        )\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    if (file.type === 'directory') {\n      /** @type {any[]} */\n      const args = [\n        recursive(ipfsPathOrCid, repo.blocks, options),\n        /**\n         * @param {AsyncIterable<import('ipfs-unixfs-exporter').UnixFSEntry>} source\n         */\n        async function * (source) {\n          for await (const entry of source) {\n            /** @type {import('it-tar').TarImportCandidate} */\n            const output = {\n              header: {\n                name: entry.path,\n                size: entry.size\n              }\n            }\n\n            if (entry.type === 'file') {\n              output.header.type = 'file'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n              output.body = entry.content()\n            } else if (entry.type === 'raw') {\n              output.header.type = 'file'\n              output.body = entry.content()\n            } else if (entry.type === 'directory') {\n              output.header.type = 'directory'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n            } else {\n              throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n            }\n\n            yield output\n          }\n        },\n        pack()\n      ]\n\n      if (options.compress) {\n        if (!options.archive) {\n          throw errCode(new Error('file is not regular'), 'ERR_INVALID_PATH')\n        }\n\n        if (options.compress) {\n          args.push(\n            /**\n             * @param {AsyncIterable<Uint8Array>} source\n             */\n            async function * (source) {\n              const buf = await toBuffer(source)\n\n              yield Pako.gzip(buf, {\n                level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n              })\n            }\n          )\n        }\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n  }\n\n  return withTimeoutOption(get)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n","\nexport const ipfsCore = '0.18.0'\nexport const commit = ''\nexport const interfaceIpfsCore = '^0.158.0'\n","import { ipfsCore as pkgversion } from '../version.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NotStartedError } from '../errors.js'\nimport errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:id')\n\n/**\n * @typedef {import('libp2p').Libp2p} Libp2p\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\nexport function createId ({ peerId, network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"id\"]}\n   */\n  async function id (options = {}) { // eslint-disable-line require-await\n    const net = network.try()\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError()\n      }\n\n      if (peerId.publicKey == null) {\n        throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n      }\n\n      return {\n        id: peerId,\n        publicKey: uint8ArrayToString(peerId.publicKey, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      }\n    }\n\n    const { libp2p } = net\n    const peerIdToId = options.peerId ? options.peerId : peerId\n    const peer = await findPeer(peerIdToId, libp2p, options)\n    const agentVersion = uint8ArrayToString(peer.metadata.get('AgentVersion') || new Uint8Array())\n    const protocolVersion = uint8ArrayToString(peer.metadata.get('ProtocolVersion') || new Uint8Array())\n    const idStr = peer.id.toString()\n    const publicKeyStr = peer.publicKey ? uint8ArrayToString(peer.publicKey, 'base64pad') : ''\n\n    return {\n      id: peerIdToId,\n      publicKey: publicKeyStr,\n      addresses: (peer.addresses || [])\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${idStr}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${idStr}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (peer.protocols || []).sort()\n    }\n  }\n\n  return withTimeoutOption(id)\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeer (peerId, libp2p, options) {\n  let peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    peer = await findPeerOnDht(peerId, libp2p, options)\n  }\n\n  let publicKey = peerId.publicKey ? peerId.publicKey : await libp2p.peerStore.keyBook.get(peerId)\n\n  if (publicKey == null) {\n    try {\n      publicKey = await libp2p.getPublicKey(peerId, options)\n    } catch (err) {\n      log.error('Could not load public key for', peerId.toString(), err)\n    }\n  }\n\n  return {\n    ...peer,\n    publicKey,\n    metadata: peer.metadata || new Map(),\n    addresses: peer.addresses.map(addr => addr.multiaddr)\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeerOnDht (peerId, libp2p, options) {\n  if (libp2p.dht == null) {\n    throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n  }\n\n  for await (const event of libp2p.dht.findPeer(peerId, options)) {\n    if (event.name === 'FINAL_PEER') {\n      break\n    }\n  }\n\n  const peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    throw errCode(new Error('Could not find peer'), 'ERR_NOT_FOUND')\n  }\n\n  return peer\n}\n","var objectSafeSet = set;\n\n/*\n  var obj1 = {};\n  set(obj1, 'a.aa.aaa', 4); // true\n  obj1; // {a: {aa: {aaa: 4}}}\n\n  var obj2 = {};\n  set(obj2, ['a', 'aa', 'aaa'], 4); // true\n  obj2; // {a: {aa: {aaa: 4}}}\n\n  var obj3 = {a: {aa: {aaa: 2}}};\n  set(obj3, 'a.aa.aaa', 3); // true\n  obj3; // {a: {aa: {aaa: 3}}}\n\n  const obj5 = {a: {}};\n  const sym = Symbol();\n  set(obj5.a, sym, 7); // true\n  obj5; // {a: {Symbol(): 7}}\n*/\n\nfunction set(obj, propsArg, value) {\n  var props, lastProp;\n  if (Array.isArray(propsArg)) {\n    props = propsArg.slice(0);\n  }\n  if (typeof propsArg == 'string') {\n    props = propsArg.split('.');\n  }\n  if (typeof propsArg == 'symbol') {\n    props = [propsArg];\n  }\n  if (!Array.isArray(props)) {\n    throw new Error('props arg must be an array, a string or a symbol');\n  }\n  lastProp = props.pop();\n  if (!lastProp) {\n    return false;\n  }\n  prototypeCheck(lastProp);\n  var thisProp;\n  while ((thisProp = props.shift())) {\n    prototypeCheck(thisProp);\n    if (typeof obj[thisProp] == 'undefined') {\n      obj[thisProp] = {};\n    }\n    obj = obj[thisProp];\n    if (!obj || typeof obj != 'object') {\n      return false;\n    }\n  }\n  obj[lastProp] = value;\n  return true;\n}\n\nfunction prototypeCheck(prop) {\n  // coercion is intentional to catch prop values like `['__proto__']`\n  if (prop == '__proto__' || prop == 'constructor' || prop == 'prototype') {\n    throw new Error('setting of prototype values not supported');\n  }\n}\n\nexport {objectSafeSet as default};\n","import set from 'just-safe-set'\nimport getDefaultConfig from 'ipfs-core-config/config'\n\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @type {Record<string, Transformer>}\n */\nexport const profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      config.Swarm = {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      }\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', true)\n      set(config, 'Discovery.webRTCStar.Enabled', true)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [])\n      set(config, 'Addresses.Delegates', [])\n      set(config, 'Bootstrap', [])\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      })\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API)\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway)\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm)\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates)\n      set(config, 'Bootstrap', defaultConfig.Bootstrap)\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled)\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      const Swarm = config.Swarm || {}\n      const ConnMgr = Swarm.ConnMgr || {}\n      ConnMgr.LowWater = 20\n      ConnMgr.HighWater = 40\n\n      Swarm.ConnMgr = ConnMgr\n      config.Swarm = Swarm\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n","import varint from 'varint'\nimport { encode as dagCborEncode } from '@ipld/dag-cbor'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./coding').CarEncoder} CarEncoder\n * @typedef {import('./coding').IteratorChannel_Writer<Uint8Array>} IteratorChannel_Writer\n */\n\n/**\n * Create a header from an array of roots.\n *\n * @param {CID[]} roots\n * @returns {Uint8Array}\n */\nexport function createHeader (roots) {\n  const headerBytes = dagCborEncode({ version: 1, roots })\n  const varintBytes = varint.encode(headerBytes.length)\n  const header = new Uint8Array(varintBytes.length + headerBytes.length)\n  header.set(varintBytes, 0)\n  header.set(headerBytes, varintBytes.length)\n  return header\n}\n\n/**\n * @param {IteratorChannel_Writer} writer\n * @returns {CarEncoder}\n */\nfunction createEncoder (writer) {\n  // none of this is wrapped in a mutex, that needs to happen above this to\n  // avoid overwrites\n\n  return {\n    /**\n     * @param {CID[]} roots\n     * @returns {Promise<void>}\n     */\n    async setRoots (roots) {\n      const bytes = createHeader(roots)\n      await writer.write(bytes)\n    },\n\n    /**\n     * @param {Block} block\n     * @returns {Promise<void>}\n     */\n    async writeBlock (block) {\n      const { cid, bytes } = block\n      await writer.write(new Uint8Array(varint.encode(cid.bytes.length + bytes.length)))\n      await writer.write(cid.bytes)\n      if (bytes.length) {\n        // zero-length blocks are valid, but it'd be safer if we didn't write them\n        await writer.write(bytes)\n      }\n    },\n\n    /**\n     * @returns {Promise<void>}\n     */\n    async close () {\n      await writer.end()\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n  }\n}\n\nexport { createEncoder }\n","/**\n * @template {any} T\n * @typedef {import('./coding').IteratorChannel<T>} IteratorChannel\n */\n\nfunction noop () {}\n\n/**\n * @template {any} T\n * @returns {IteratorChannel<T>}\n */\nexport function create () {\n  /** @type {T[]} */\n  const chunkQueue = []\n  /** @type {Promise<void> | null} */\n  let drainer = null\n  let drainerResolver = noop\n  let ended = false\n  /** @type {Promise<IteratorResult<T>> | null} */\n  let outWait = null\n  let outWaitResolver = noop\n\n  const makeDrainer = () => {\n    if (!drainer) {\n      drainer = new Promise((resolve) => {\n        drainerResolver = () => {\n          drainer = null\n          drainerResolver = noop\n          resolve()\n        }\n      })\n    }\n    return drainer\n  }\n\n  /**\n   * @returns {IteratorChannel<T>}\n   */\n  const writer = {\n    /**\n     * @param {T} chunk\n     * @returns {Promise<void>}\n     */\n    write (chunk) {\n      chunkQueue.push(chunk)\n      const drainer = makeDrainer()\n      outWaitResolver()\n      return drainer\n    },\n\n    async end () {\n      ended = true\n      const drainer = makeDrainer()\n      outWaitResolver()\n      await drainer\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n  }\n\n  /** @type {AsyncIterator<T>} */\n  const iterator = {\n    /** @returns {Promise<IteratorResult<T>>} */\n    async next () {\n      const chunk = chunkQueue.shift()\n      if (chunk) {\n        if (chunkQueue.length === 0) {\n          drainerResolver()\n        }\n        return { done: false, value: chunk }\n      }\n\n      if (ended) {\n        drainerResolver()\n        return { done: true, value: undefined }\n      }\n\n      if (!outWait) {\n        outWait = new Promise((resolve) => {\n          outWaitResolver = () => {\n            outWait = null\n            outWaitResolver = noop\n            return resolve(iterator.next())\n          }\n        })\n      }\n\n      return outWait\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n  }\n\n  return { writer, iterator }\n}\n","/* eslint-disable jsdoc/check-indentation */\n\n/** Auto-generated with ipld-schema-validator@0.0.0-dev at Thu Jun 17 2021 from IPLD Schema:\n *\n * type CarHeader struct {\n *   version Int\n *   roots optional [&Any]\n *   # roots is _not_ optional for CarV1 but we defer that check within code to\n *   # gracefully handle the >V1 case where it's just {version:X}\n * }\n *\n */\n\nconst Kinds = {\n  Null: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => obj === null,\n  Int: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => Number.isInteger(obj),\n  Float: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => typeof obj === 'number' && Number.isFinite(obj),\n  String: /**\n           * @param {any} obj\n           * @returns {boolean}\n           */ (/** @type {any} */ obj) => typeof obj === 'string',\n  Bool: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => typeof obj === 'boolean',\n  Bytes: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => obj instanceof Uint8Array,\n  Link: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID === obj,\n  List: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => Array.isArray(obj),\n  Map: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)\n}\n/** @type {{ [k in string]: (obj:any)=>boolean}} */\nconst Types = {\n  Int: Kinds.Int,\n  'CarHeader > version': /**\n                          * @param {any} obj\n                          * @returns {boolean}\n                          */ (/** @type {any} */ obj) => Types.Int(obj),\n  'CarHeader > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarHeader > roots (anon)': /**\n                               * @param {any} obj\n                               * @returns {boolean}\n                               */ (/** @type {any} */ obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types['CarHeader > roots (anon) > valueType (anon)']),\n  'CarHeader > roots': /**\n                        * @param {any} obj\n                        * @returns {boolean}\n                        */ (/** @type {any} */ obj) => Types['CarHeader > roots (anon)'](obj),\n  CarHeader: /**\n              * @param {any} obj\n              * @returns {boolean}\n              */ (/** @type {any} */ obj) => { const keys = obj && Object.keys(obj); return Kinds.Map(obj) && ['version'].every((k) => keys.includes(k)) && Object.entries(obj).every(([name, value]) => Types['CarHeader > ' + name] && Types['CarHeader > ' + name](value)) }\n}\n\nexport const CarHeader = Types.CarHeader\n","import varint from 'varint'\n\nexport const CIDV0_BYTES = {\n  SHA2_256: 0x12,\n  LENGTH: 0x20,\n  DAG_PB: 0x70\n}\n\nexport const V2_HEADER_LENGTH = /* characteristics */ 16 /* v1 offset */ + 8 /* v1 size */ + 8 /* index offset */ + 8\n\n/**\n * Decodes varint and seeks the buffer\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @param {import('./coding').Seekable} seeker\n * @returns {number}\n */\nexport function decodeVarint (bytes, seeker) {\n  if (!bytes.length) {\n    throw new Error('Unexpected end of data')\n  }\n  const i = varint.decode(bytes)\n  seeker.seek(/** @type {number} */(varint.decode.bytes))\n  return i\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * Decode v2 header\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.exactly(V2_HEADER_LENGTH, true) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @returns {import('./coding').CarV2FixedHeader}\n */\nexport function decodeV2Header (bytes) {\n  const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n  let offset = 0\n  const header = {\n    version: 2,\n    /** @type {[bigint, bigint]} */\n    characteristics: [\n      dv.getBigUint64(offset, true),\n      dv.getBigUint64(offset += 8, true)\n    ],\n    dataOffset: Number(dv.getBigUint64(offset += 8, true)),\n    dataSize: Number(dv.getBigUint64(offset += 8, true)),\n    indexOffset: Number(dv.getBigUint64(offset += 8, true))\n  }\n  return header\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * Checks the length of the multihash to be read afterwards\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n */\nexport function getMultihashLength (bytes) {\n  // | code | length | .... |\n  // where both code and length are varints, so we have to decode\n  // them first before we can know total length\n\n  varint.decode(bytes) // code\n  const codeLength = /** @type {number} */(varint.decode.bytes)\n  const length = varint.decode(bytes.subarray(varint.decode.bytes))\n  const lengthLength = /** @type {number} */(varint.decode.bytes)\n  const mhLength = codeLength + lengthLength + length\n\n  return mhLength\n}\n","import { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { decode as decodeDagCbor } from '@ipld/dag-cbor'\nimport { CarHeader as headerValidator } from './header-validator.js'\nimport { CIDV0_BYTES, decodeV2Header, decodeVarint, getMultihashLength, V2_HEADER_LENGTH } from './decoder-common.js'\n\n/**\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').BlockHeader} BlockHeader\n * @typedef {import('./api').BlockIndex} BlockIndex\n * @typedef {import('./coding').BytesReader} BytesReader\n * @typedef {import('./coding').CarHeader} CarHeader\n * @typedef {import('./coding').CarV2Header} CarV2Header\n * @typedef {import('./coding').CarV2FixedHeader} CarV2FixedHeader\n * @typedef {import('./coding').CarDecoder} CarDecoder\n */\n\n/**\n * Reads header data from a `BytesReader`. The header may either be in the form\n * of a `CarHeader` or `CarV2Header` depending on the CAR being read.\n *\n * @name async decoder.readHeader(reader)\n * @param {BytesReader} reader\n * @param {number} [strictVersion]\n * @returns {Promise<CarHeader|CarV2Header>}\n */\nexport async function readHeader (reader, strictVersion) {\n  const length = decodeVarint(await reader.upTo(8), reader)\n  if (length === 0) {\n    throw new Error('Invalid CAR header (zero length)')\n  }\n  const header = await reader.exactly(length, true)\n  const block = decodeDagCbor(header)\n  if (!headerValidator(block)) {\n    throw new Error('Invalid CAR header format')\n  }\n  if ((block.version !== 1 && block.version !== 2) || (strictVersion !== undefined && block.version !== strictVersion)) {\n    throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== undefined ? ` (expected ${strictVersion})` : ''}`)\n  }\n  // we've made 'roots' optional in the schema so we can do the version check\n  // before rejecting the block as invalid if there is no version\n  const hasRoots = Array.isArray(block.roots)\n  if ((block.version === 1 && !hasRoots) || (block.version === 2 && hasRoots)) {\n    throw new Error('Invalid CAR header format')\n  }\n  if (block.version === 1) {\n    return block\n  }\n  // version 2\n  const v2Header = decodeV2Header(await reader.exactly(V2_HEADER_LENGTH, true))\n  reader.seek(v2Header.dataOffset - reader.pos)\n  const v1Header = await readHeader(reader, 1)\n  return Object.assign(v1Header, v2Header)\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<CID>}\n */\nasync function readCid (reader) {\n  const first = await reader.exactly(2, false)\n  if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {\n    // cidv0 32-byte sha2-256\n    const bytes = await reader.exactly(34, true)\n    const multihash = Digest.decode(bytes)\n    return CID.create(0, CIDV0_BYTES.DAG_PB, multihash)\n  }\n\n  const version = decodeVarint(await reader.upTo(8), reader)\n  if (version !== 1) {\n    throw new Error(`Unexpected CID version (${version})`)\n  }\n  const codec = decodeVarint(await reader.upTo(8), reader)\n  const bytes = await reader.exactly(getMultihashLength(await reader.upTo(8)), true)\n  const multihash = Digest.decode(bytes)\n  return CID.create(version, codec, multihash)\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * Reads the leading data of an individual block from CAR data from a\n * `BytesReader`. Returns a `BlockHeader` object which contains\n * `{ cid, length, blockLength }` which can be used to either index the block\n * or read the block binary data.\n *\n * @name async decoder.readBlockHead(reader)\n * @param {BytesReader} reader\n * @returns {Promise<BlockHeader>}\n */\nexport async function readBlockHead (reader) {\n  // length includes a CID + Binary, where CID has a variable length\n  // we have to deal with\n  const start = reader.pos\n  let length = decodeVarint(await reader.upTo(8), reader)\n  if (length === 0) {\n    throw new Error('Invalid CAR section (zero length)')\n  }\n  length += (reader.pos - start)\n  const cid = await readCid(reader)\n  const blockLength = length - Number(reader.pos - start) // subtract CID length\n\n  return { cid, length, blockLength }\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<Block>}\n */\nasync function readBlock (reader) {\n  const { cid, blockLength } = await readBlockHead(reader)\n  const bytes = await reader.exactly(blockLength, true)\n  return { bytes, cid }\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<BlockIndex>}\n */\nasync function readBlockIndex (reader) {\n  const offset = reader.pos\n  const { cid, length, blockLength } = await readBlockHead(reader)\n  const index = { cid, length, blockLength, offset, blockOffset: reader.pos }\n  reader.seek(index.blockLength)\n  return index\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * Creates a `CarDecoder` from a `BytesReader`. The `CarDecoder` is as async\n * interface that will consume the bytes from the `BytesReader` to yield a\n * `header()` and either `blocks()` or `blocksIndex()` data.\n *\n * @name decoder.createDecoder(reader)\n * @param {BytesReader} reader\n * @returns {CarDecoder}\n */\nexport function createDecoder (reader) {\n  const headerPromise = (async () => {\n    const header = await readHeader(reader)\n    if (header.version === 2) {\n      const v1length = reader.pos - header.dataOffset\n      reader = limitReader(reader, header.dataSize - v1length)\n    }\n    return header\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  })()\n\n  return {\n    header: () => headerPromise,\n\n    async * blocks () {\n      await headerPromise\n      while ((await reader.upTo(8)).length > 0) {\n        yield await readBlock(reader)\n      }\n    },\n\n    async * blocksIndex () {\n      await headerPromise\n      while ((await reader.upTo(8)).length > 0) {\n        yield await readBlockIndex(reader)\n      }\n    }\n  }\n}\n\n/**\n * Creates a `BytesReader` from a `Uint8Array`.\n *\n * @name decoder.bytesReader(bytes)\n * @param {Uint8Array} bytes\n * @returns {BytesReader}\n */\nexport function bytesReader (bytes) {\n  let pos = 0\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      const out = bytes.subarray(pos, pos + Math.min(length, bytes.length - pos))\n      /* c8 ignore next 2 */\n      return out\n      // Node.js 12 c8 bug\n    },\n\n    async exactly (length, seek = false) {\n      if (length > bytes.length - pos) {\n        throw new Error('Unexpected end of data')\n      }\n      const out = bytes.subarray(pos, pos + length)\n      if (seek) {\n        pos += length\n      }\n      return out\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    },\n\n    seek (length) {\n      pos += length\n    },\n\n    get pos () {\n      return pos\n    }\n  }\n}\n\n/**\n * @ignore\n * reusable reader for streams and files, we just need a way to read an\n * additional chunk (of some undetermined size) and a way to close the\n * reader when finished\n * @param {() => Promise<Uint8Array|null>} readChunk\n * @returns {BytesReader}\n */\nexport function chunkReader (readChunk /*, closer */) {\n  let pos = 0\n  let have = 0\n  let offset = 0\n  let currentChunk = new Uint8Array(0)\n\n  const read = async (/** @type {number} */ length) => {\n    have = currentChunk.length - offset\n    const bufa = [currentChunk.subarray(offset)]\n    while (have < length) {\n      const chunk = await readChunk()\n      if (chunk == null) {\n        break\n      }\n      /* c8 ignore next 8 */\n      // undo this ignore ^ when we have a fd implementation that can seek()\n      if (have < 0) { // because of a seek()\n        /* c8 ignore next 4 */\n        // toohard to test the else\n        if (chunk.length > have) {\n          bufa.push(chunk.subarray(-have))\n        } // else discard\n      } else {\n        bufa.push(chunk)\n      }\n      have += chunk.length\n    }\n    currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0))\n    let off = 0\n    for (const b of bufa) {\n      currentChunk.set(b, off)\n      off += b.length\n    }\n    offset = 0\n  }\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      if (currentChunk.length - offset < length) {\n        await read(length)\n      }\n      return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length))\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    },\n\n    async exactly (length, seek = false) {\n      if (currentChunk.length - offset < length) {\n        await read(length)\n      }\n      if (currentChunk.length - offset < length) {\n        throw new Error('Unexpected end of data')\n      }\n      const out = currentChunk.subarray(offset, offset + length)\n      if (seek) {\n        pos += length\n        offset += length\n      }\n      return out\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    },\n\n    seek (length) {\n      pos += length\n      offset += length\n    },\n\n    get pos () {\n      return pos\n    }\n  }\n}\n\n/**\n * Creates a `BytesReader` from an `AsyncIterable<Uint8Array>`, which allows for\n * consumption of CAR data from a streaming source.\n *\n * @name decoder.asyncIterableReader(asyncIterable)\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {BytesReader}\n */\nexport function asyncIterableReader (asyncIterable) {\n  const iterator = asyncIterable[Symbol.asyncIterator]()\n\n  async function readChunk () {\n    const next = await iterator.next()\n    if (next.done) {\n      return null\n    }\n    return next.value\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  return chunkReader(readChunk)\n}\n\n/**\n * Wraps a `BytesReader` in a limiting `BytesReader` which limits maximum read\n * to `byteLimit` bytes. It _does not_ update `pos` of the original\n * `BytesReader`.\n *\n * @name decoder.limitReader(reader, byteLimit)\n * @param {BytesReader} reader\n * @param {number} byteLimit\n * @returns {BytesReader}\n */\nexport function limitReader (reader, byteLimit) {\n  let bytesRead = 0\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      let bytes = await reader.upTo(length)\n      if (bytes.length + bytesRead > byteLimit) {\n        bytes = bytes.subarray(0, byteLimit - bytesRead)\n      }\n      return bytes\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    },\n\n    async exactly (length, seek = false) {\n      const bytes = await reader.exactly(length, seek)\n      if (bytes.length + bytesRead > byteLimit) {\n        throw new Error('Unexpected end of data')\n      }\n      if (seek) {\n        bytesRead += length\n      }\n      return bytes\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    },\n\n    seek (length) {\n      bytesRead += length\n      reader.seek(length)\n    },\n\n    get pos () {\n      return reader.pos\n    }\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { createEncoder, createHeader } from './encoder.js'\nimport { create as iteratorChannel } from './iterator-channel.js'\nimport { bytesReader, readHeader } from './decoder.js'\n\n/**\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').BlockWriter} BlockWriter\n * @typedef {import('./api').WriterChannel} WriterChannel\n * @typedef {import('./coding').CarEncoder} CarEncoder\n * @typedef {import('./coding').IteratorChannel<Uint8Array>} IteratorChannel\n */\n\n/**\n * Provides a writer interface for the creation of CAR files.\n *\n * Creation of a `CarWriter` involves the instatiation of an input / output pair\n * in the form of a `WriterChannel`, which is a\n * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair. These two\n * components form what can be thought of as a stream-like interface. The\n * `writer` component (an instantiated `CarWriter`), has methods to\n * {@link CarWriter.put `put()`} new blocks and {@link CarWriter.put `close()`}\n * the writing operation (finalising the CAR archive). The `out` component is\n * an `AsyncIterable` that yields the bytes of the archive. This can be\n * redirected to a file or other sink. In Node.js, you can use the\n * [`Readable.from()`](https://nodejs.org/api/stream.html#stream_stream_readable_from_iterable_options)\n * API to convert this to a standard Node.js stream, or it can be directly fed\n * to a\n * [`stream.pipeline()`](https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback).\n *\n * The channel will provide a form of backpressure. The `Promise` from a\n * `write()` won't resolve until the resulting data is drained from the `out`\n * iterable.\n *\n * It is also possible to ignore the `Promise` from `write()` calls and allow\n * the generated data to queue in memory. This should be avoided for large CAR\n * archives of course due to the memory costs and potential for memory overflow.\n *\n * Load this class with either\n * `import { CarWriter } from '@ipld/car/writer'`\n * (`const { CarWriter } = require('@ipld/car/writer')`). Or\n * `import { CarWriter } from '@ipld/car'`\n * (`const { CarWriter } = require('@ipld/car')`). The former will likely\n * result in smaller bundle sizes where this is important.\n *\n * @name CarWriter\n * @class\n * @implements {BlockWriter}\n */\nexport class CarWriter {\n  /**\n   * @param {CID[]} roots\n   * @param {CarEncoder} encoder\n   */\n  constructor (roots, encoder) {\n    this._encoder = encoder\n    /** @type {Promise<void>} */\n    this._mutex = encoder.setRoots(roots)\n    this._ended = false\n  }\n\n  /**\n   * Write a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.\n   *\n   * @function\n   * @memberof CarWriter\n   * @instance\n   * @async\n   * @param {Block} block - A `{ cid:CID, bytes:Uint8Array }` pair.\n   * @returns {Promise<void>} The returned promise will only resolve once the\n   * bytes this block generates are written to the `out` iterable.\n   */\n  async put (block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects')\n    }\n    if (this._ended) {\n      throw new Error('Already closed')\n    }\n    const cid = CID.asCID(block.cid)\n    if (!cid) {\n      throw new TypeError('Can only write {cid, bytes} objects')\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({ cid, bytes: block.bytes }))\n    return this._mutex\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Finalise the CAR archive and signal that the `out` iterable should end once\n   * any remaining bytes are written.\n   *\n   * @function\n   * @memberof CarWriter\n   * @instance\n   * @async\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this._ended) {\n      throw new Error('Already closed')\n    }\n    await this._mutex\n    this._ended = true\n    return this._encoder.close()\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Create a new CAR writer \"channel\" which consists of a\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @param {CID[] | CID | void} roots\n   * @returns {WriterChannel} The channel takes the form of\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n   */\n  static create (roots) {\n    roots = toRoots(roots)\n    const { encoder, iterator } = encodeWriter()\n    const writer = new CarWriter(roots, encoder)\n    const out = new CarWriterOut(iterator)\n    return { writer, out }\n  }\n\n  /**\n   * Create a new CAR appender \"channel\" which consists of a\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\n   * This appender does not consider roots and does not produce a CAR header.\n   * It is designed to append blocks to an _existing_ CAR archive. It is\n   * expected that `out` will be concatenated onto the end of an existing\n   * archive that already has a properly formatted header.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @returns {WriterChannel} The channel takes the form of\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n   */\n  static createAppender () {\n    const { encoder, iterator } = encodeWriter()\n    encoder.setRoots = () => Promise.resolve()\n    const writer = new CarWriter([], encoder)\n    const out = new CarWriterOut(iterator)\n    return { writer, out }\n  }\n\n  /**\n   * Update the list of roots in the header of an existing CAR as represented\n   * in a Uint8Array.\n   *\n   * This operation is an _overwrite_, the total length of the CAR will not be\n   * modified. A rejection will occur if the new header will not be the same\n   * length as the existing header, in which case the CAR will not be modified.\n   * It is the responsibility of the user to ensure that the roots being\n   * replaced encode as the same length as the new roots.\n   *\n   * The byte array passed in an argument will be modified and also returned\n   * upon successful modification.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @param {Uint8Array} bytes\n   * @param {CID[]} roots - A new list of roots to replace the existing list in\n   * the CAR header. The new header must take up the same number of bytes as the\n   * existing header, so the roots should collectively be the same byte length\n   * as the existing roots.\n   * @returns {Promise<Uint8Array>}\n   */\n  static async updateRootsInBytes (bytes, roots) {\n    const reader = bytesReader(bytes)\n    await readHeader(reader)\n    const newHeader = createHeader(roots)\n    if (Number(reader.pos) !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`)\n    }\n    bytes.set(newHeader, 0)\n    return bytes\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * @class\n * @implements {AsyncIterable<Uint8Array>}\n */\nexport class CarWriterOut {\n  /**\n   * @param {AsyncIterator<Uint8Array>} iterator\n   */\n  constructor (iterator) {\n    this._iterator = iterator\n  }\n\n  [Symbol.asyncIterator] () {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported')\n    }\n    this._iterating = true\n    return this._iterator\n  }\n}\n\nfunction encodeWriter () {\n  /** @type {IteratorChannel} */\n  const iw = iteratorChannel()\n  const { writer, iterator } = iw\n  const encoder = createEncoder(writer)\n  return { encoder, iterator }\n}\n\n/**\n * @private\n * @param {CID[] | CID | void} roots\n * @returns {CID[]}\n */\nfunction toRoots (roots) {\n  if (roots === undefined) {\n    return []\n  }\n\n  if (!Array.isArray(roots)) {\n    const cid = CID.asCID(roots)\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs')\n    }\n    return [cid]\n  }\n\n  const _roots = []\n  for (const root of roots) {\n    const _root = CID.asCID(root)\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs')\n    }\n    _roots.push(_root)\n  }\n  return _roots\n}\n\nexport const __browser = true\n","import { CID } from 'multiformats/cid'\nimport { createUnsafe } from 'multiformats/block'\nimport { CarWriter } from '@ipld/car/writer'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as json from 'multiformats/codecs/json'\nimport { walk } from 'multiformats/traversal'\n\nconst log = logger('ipfs:components:dag:import')\n\n// blocks that we're OK with not inspecting for links\n/** @type {number[]} */\nconst NO_LINKS_CODECS = [\n  raw.code, // raw\n  json.code // JSON\n]\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('@ipld/car/api').BlockWriter} BlockWriter\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template T\n * @template C\n * @template A\n * @template V\n * @typedef {import('multiformats/block').Block<T, C, A, V>} Block\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Preload} config.preload\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createExport ({ repo, preload, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    if (options.preload !== false) {\n      preload(root)\n    }\n\n    const cid = CID.asCID(root)\n    if (!cid) {\n      throw new Error(`Unexpected error converting CID type: ${root}`)\n    }\n\n    log(`Exporting ${cid} as car`)\n    const { writer, out } = await CarWriter.create([cid])\n\n    // we need to write with one async channel and send the CarWriter output\n    // with another to the caller, but if the write causes an error we capture\n    // that and make sure it gets propagated\n    /** @type {Error|null} */\n    let err = null\n    ;(async () => {\n      try {\n        const load = makeLoader(repo, writer, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs)\n        await walk({ cid, load })\n      } catch (/** @type {any} */ e) {\n        err = e\n      } finally {\n        writer.close()\n      }\n    })()\n\n    for await (const chunk of out) {\n      if (err) {\n        break\n      }\n      yield chunk\n    }\n    if (err) {\n      throw err\n    }\n  }\n\n  return withTimeoutOption(dagExport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {BlockWriter} writer\n * @param {AbortOptions} options\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @returns {(cid:CID)=>Promise<ReturnType<createUnsafe>|null>}\n */\nfunction makeLoader (repo, writer, options, codecs) {\n  return async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`)\n    }\n\n    const bytes = await repo.blocks.get(cid, options)\n\n    log(`Adding block ${cid} to car`)\n    await writer.put({ cid, bytes })\n\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null // skip this block, no need to look inside\n    }\n\n    return createUnsafe({ bytes, cid, codec })\n  }\n}\n","import {\n  asyncIterableReader,\n  bytesReader,\n  createDecoder\n} from './decoder.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').RootsReader} RootsReader\n * @typedef {import('./coding').BytesReader} BytesReader\n */\n\n/**\n * @class\n * @implements {RootsReader}\n * @property {number} version The version number of the CAR referenced by this reader (should be `1`).\n */\nexport class CarIteratorBase {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {AsyncIterable<Block>|void} iterable\n   */\n  constructor (version, roots, iterable) {\n    this._version = version\n    this._roots = roots\n    this._iterable = iterable\n    this._decoded = false\n  }\n\n  get version () {\n    return this._version\n  }\n\n  /**\n   * @returns {Promise<CID[]>}\n   */\n  async getRoots () {\n    return this._roots\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * Provides an iterator over all of the `Block`s in a CAR. Implements a\n * `BlockIterator` interface, or `AsyncIterable<Block>`. Where a `Block` is\n * a `{ cid:CID, bytes:Uint8Array }` pair.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const block of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarBlockiterator.fromBytes} or\n * {@link CarBlockiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarBlockIterator` also implements the `RootsReader` interface and provides\n * the {@link CarBlockiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarBlockIterator } from '@ipld/car/iterator'`\n * (`const { CarBlockIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarBlockIterator } from '@ipld/car'`\n * (`const { CarBlockIterator } = require('@ipld/car')`).\n *\n * @name CarBlockIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<Block>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarBlockIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarBlockIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<Block>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    return this._iterable[Symbol.asyncIterator]()\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarBlockIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarBlockIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarBlockIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * Provides an iterator over all of the `CID`s in a CAR. Implements a\n * `CIDIterator` interface, or `AsyncIterable<CID>`. Similar to\n * {@link CarBlockIterator} but only yields the CIDs in the CAR.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const cid of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarCIDiterator.fromBytes} or\n * {@link CarCIDiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarCIDIterator` also implements the `RootsReader` interface and provides\n * the {@link CarCIDiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarCIDIterator } from '@ipld/car/iterator'`\n * (`const { CarCIDIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarCIDIterator } from '@ipld/car'`\n * (`const { CarCIDIterator } = require('@ipld/car')`).\n *\n * @name CarCIDIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<CID>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarCIDIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarCIDIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<CID>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    const iterable = this._iterable[Symbol.asyncIterator]()\n    return {\n      async next () {\n        const next = await iterable.next()\n        if (next.done) {\n          return next\n        }\n        return { done: false, value: next.value.cid }\n        /* c8 ignore next 2 */\n        // Node.js 12 c8 bug\n      }\n    }\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarCIDIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarCIDIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromBytes (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array')\n  }\n  return decodeIterator(bytesReader(bytes))\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromIterable (asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable')\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable))\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @private\n * @param {BytesReader} reader\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function decodeIterator (reader) {\n  const decoder = createDecoder(reader)\n  const { version, roots } = await decoder.header()\n  return { version, roots, iterator: decoder.blocks() }\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n","import { CarBlockIterator } from '@ipld/car/iterator'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport itPeekable from 'it-peekable'\nimport drain from 'it-drain'\nimport map from 'it-map'\nimport { logger } from '@libp2p/logger'\nconst log = logger('ipfs:components:dag:import')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n */\nexport function createImport ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"import\"]}\n   */\n  async function * dagImport (sources, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const abortOptions = { signal: options.signal, timeout: options.timeout }\n      const peekable = itPeekable(sources)\n\n      const { value, done } = await peekable.peek()\n\n      if (done) {\n        return\n      }\n\n      if (value) {\n        // @ts-expect-error\n        peekable.push(value)\n      }\n\n      /**\n       * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n       */\n      let cars\n\n      if (value instanceof Uint8Array) {\n        // @ts-expect-error\n        cars = [peekable]\n      } else {\n        // @ts-expect-error\n        cars = peekable\n      }\n\n      for await (const car of cars) {\n        const roots = await importCar(repo, abortOptions, car)\n\n        if (options.pinRoots !== false) { // default=true\n          for (const cid of roots) {\n            let pinErrorMsg = ''\n\n            try { // eslint-disable-line max-depth\n              if (await repo.blocks.has(cid)) { // eslint-disable-line max-depth\n                log(`Pinning root ${cid}`)\n                await repo.pins.pinRecursively(cid)\n              } else {\n                pinErrorMsg = 'blockstore: block not found'\n              }\n            } catch (/** @type {any} */ err) {\n              pinErrorMsg = err.message\n            }\n\n            yield { root: { cid, pinErrorMsg } }\n          }\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(dagImport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\nasync function importCar (repo, options, source) {\n  const reader = await CarBlockIterator.fromIterable(source)\n  const roots = await reader.getRoots()\n\n  await drain(\n    repo.blocks.putMany(\n      map(reader, ({ cid: key, bytes: value }) => {\n        log(`Import block ${key}`)\n\n        return { key, value }\n      }),\n      { signal: options.signal }\n    )\n  )\n\n  return roots\n}\n","export default function peekableIterator(iterable) {\n    // @ts-expect-error\n    const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n        // @ts-expect-error\n        ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n        // @ts-expect-error\n        : [iterable[Symbol.iterator](), Symbol.iterator];\n    const queue = [];\n    // @ts-expect-error\n    return {\n        peek: () => {\n            return iterator.next();\n        },\n        push: (value) => {\n            queue.push(value);\n        },\n        next: () => {\n            if (queue.length > 0) {\n                return {\n                    done: false,\n                    value: queue.shift()\n                };\n            }\n            return iterator.next();\n        },\n        [symbol]() {\n            return this;\n        }\n    };\n}\n//# sourceMappingURL=index.js.map","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\nexport class DagAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('../../types').Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo, codecs, hashers, preload }) {\n    this.export = createExport({ repo, preload, codecs })\n    this.get = createGet({ codecs, repo, preload })\n    this.import = createImport({ repo })\n    this.resolve = createResolve({ repo, codecs, preload })\n    this.put = createPut({ repo, codecs, hashers, preload })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { resolve } from '../../utils.js'\nimport errCode from 'err-code'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ codecs, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { resolvePath } from '../../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createResolve ({ repo, codecs, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n","import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { logger } from '@libp2p/logger'\nimport shuffle from 'array-shuffle'\nimport { preload } from 'ipfs-core-config/preload'\nimport hashlru from 'hashlru'\n\nconst log = logger('ipfs:preload')\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader (options = {}) {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map((str) => multiaddrToUri(str))\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (/** @type {any} */ err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n","import { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs-preload')\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader ({ preload, files, options = {} }) {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (/** @type {any} */ err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n","import mortice from 'mortice'\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nexport function createLock (repoOwner = false) {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n","import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n","\n/**\n * @param {string} [path]\n */\nexport function toPathComponents (path = '') {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n","import { loadMfsRoot } from './with-mfs-root.js'\nimport { toPathComponents } from './to-path-components.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\nconst IPFS_PREFIX = 'ipfs'\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport const toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options)\n\n  /** @type {MfsPath} */\n  // @ts-expect-error fields get set later\n  let output = {\n    entryType: 'file'\n  }\n\n  let ipfsPath = ''\n\n  if (CID.asCID(path)) {\n    ipfsPath = `/ipfs/${path}`\n  } else {\n    ipfsPath = path.toString()\n  }\n\n  ipfsPath = ipfsPath.trim()\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/')\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH')\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  const pathComponents = toPathComponents(ipfsPath)\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n    }\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options)\n\n    output.cid = res.cid\n    output.mfsPath = `/ipfs/${res.path}`\n    output.entryType = res.type\n    output.content = res.content\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs\n    }\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  output.exists = Boolean(output.cid)\n\n  return output\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n","import { walkPath } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nexport async function toTrail (context, path) {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n","import { CID } from 'multiformats/cid'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n","import { murmur3128 } from '@multiformats/murmur3'\n\nexport const hamtHashCode = murmur3128.code\nexport const hamtBucketBits = 8\n\n/**\n * @param {Uint8Array} buf\n */\nexport async function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .subarray(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { persist } from './persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nexport class Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport class DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport {\n  Bucket,\n  createHAMT\n} from 'hamt-sharding'\nimport { DirSharded } from './dir-sharded.js'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport last from 'it-last'\nimport { CID } from 'multiformats/cid'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\nconst log = logger('ipfs:mfs:core:utils:hamt-utils')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {object} options\n * @param {PBNode} options.parent\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {string} options.hashAlg\n */\nexport const updateHamtDirectory = async (context, links, bucket, options) => {\n  if (!options.parent.Data) {\n    throw new Error('Could not update HAMT directory because parent had no data')\n  }\n\n  // update parent with new bit field\n  const data = Uint8Array.from(bucket._children.bitField().reverse())\n  const node = UnixFS.unmarshal(options.parent.Data)\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mode: node.mode,\n    mtime: node.mtime\n  })\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const parent = {\n    Data: dir.marshal(),\n    Links: links.sort((a, b) => (a.Name || '').localeCompare(b.Name || ''))\n  }\n  const buf = dagPB.encode(parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: parent,\n    cid,\n    size: links.reduce((sum, link) => sum + (link.Tsize || 0), buf.length)\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} rootBucket\n * @param {Bucket<any>} parentBucket\n * @param {number} positionAtParent\n */\nexport const recreateHamtLevel = async (context, links, rootBucket, parentBucket, positionAtParent) => {\n  // recreate this level of the HAMT\n  const bucket = new Bucket({\n    hash: rootBucket._options.hash,\n    bits: rootBucket._options.bits\n  }, parentBucket, positionAtParent)\n  parentBucket._putObjectAt(positionAtParent, bucket)\n\n  await addLinksToHamtBucket(context, links, bucket, rootBucket)\n\n  return bucket\n}\n\n/**\n * @param {PBLink[]} links\n */\nexport const recreateInitialHamtLevel = async (links) => {\n  const bucket = createHAMT({\n    hashFn: hamtHashFn,\n    bits: hamtBucketBits\n  })\n\n  // populate sub bucket but do not recurse as we do not want to pull whole shard in\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        const pos = parseInt(linkName, 16)\n\n        const subBucket = new Bucket({\n          hash: bucket._options.hash,\n          bits: bucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        return Promise.resolve()\n      }\n\n      return bucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n\n  return bucket\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {Bucket<any>} rootBucket\n */\nexport const addLinksToHamtBucket = async (context, links, bucket, rootBucket) => {\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        log('Populating sub bucket', linkName)\n        const pos = parseInt(linkName, 16)\n        const block = await context.repo.blocks.get(link.Hash)\n        const node = dagPB.decode(block)\n\n        const subBucket = new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        await addLinksToHamtBucket(context, node.Links, subBucket, rootBucket)\n\n        return Promise.resolve()\n      }\n\n      return rootBucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nexport const toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} fileName\n * @param {PBNode} rootNode\n */\nexport const generatePath = async (context, fileName, rootNode) => {\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(rootNode.Links)\n  const position = await rootBucket._findNewBucketAndPos(fileName)\n\n  // the path to the root bucket\n  /** @type {{ bucket: Bucket<any>, prefix: string, node?: PBNode }[]} */\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n  let currentBucket = position.bucket\n\n  while (currentBucket !== rootBucket) {\n    path.push({\n      bucket: currentBucket,\n      prefix: toPrefix(currentBucket._posAtParent)\n    })\n\n    // @ts-expect-error - only the root bucket's parent will be undefined\n    currentBucket = currentBucket._parent\n  }\n\n  path.reverse()\n  path[0].node = rootNode\n\n  // load PbNode for each path segment\n  for (let i = 0; i < path.length; i++) {\n    const segment = path[i]\n\n    if (!segment.node) {\n      throw new Error('Could not generate HAMT path')\n    }\n\n    // find prefix in links\n    const link = segment.node.Links\n      .filter(link => (link.Name || '').substring(0, 2) === segment.prefix)\n      .pop()\n\n    // entry was not in shard\n    if (!link) {\n      // reached bottom of tree, file will be added to the current bucket\n      log(`Link ${segment.prefix}${fileName} will be added`)\n      // return path\n      continue\n    }\n\n    // found entry\n    if (link.Name === `${segment.prefix}${fileName}`) {\n      log(`Link ${segment.prefix}${fileName} will be replaced`)\n      // file already existed, file will be added to the current bucket\n      // return path\n      continue\n    }\n\n    // found subshard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const node = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[i + 1]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n\n      await recreateHamtLevel(context, node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n      const position = await rootBucket._findNewBucketAndPos(fileName)\n\n      // i--\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: node\n      })\n\n      continue\n    }\n\n    const nextSegment = path[i + 1]\n\n    // add intermediate links to bucket\n    await addLinksToHamtBucket(context, node.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = node\n  }\n\n  await rootBucket.put(fileName, true)\n\n  path.reverse()\n\n  return {\n    rootBucket,\n    path\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ name: string, size: number, cid: CID }[]} contents\n * @param {object} [options]\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nexport const createShard = async (context, contents, options = {}) => {\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mtime: options.mtime,\n    mode: options.mode\n  }, options)\n\n  for (let i = 0; i < contents.length; i++) {\n    await shard._bucket.put(contents[i].name, {\n      size: contents[i].size,\n      cid: contents[i].cid\n    })\n  }\n\n  const res = await last(shard.flush(context.repo.blocks))\n\n  if (!res) {\n    throw new Error('Flushing shard yielded no result')\n  }\n\n  return res\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { DirSharded } from './dir-sharded.js'\nimport {\n  updateHamtDirectory,\n  recreateHamtLevel,\n  recreateInitialHamtLevel,\n  createShard,\n  toPrefix,\n  addLinksToHamtBucket\n} from './hamt-utils.js'\nimport errCode from 'err-code'\nimport last from 'it-last'\n\nconst log = logger('ipfs:mfs:core:utils:add-link')\n\n/**\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {CID} [options.parentCid]\n * @param {PBNode} [options.parent]\n */\nexport async function addLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID')\n    }\n\n    if (parentCid.code !== dagPB.code) {\n      throw errCode(new Error('Unsupported codec. Only DAG-PB is supported'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.cid) {\n    throw errCode(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!options.size && options.size !== 0) {\n    throw errCode(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addLink'), 'ERR_INVALID_PARENT')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log('Adding link to sharded directory')\n\n    return addToShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  if (parent.Links.length >= options.shardSplitThreshold) {\n    log('Converting directory to sharded directory')\n\n    return convertToShardedDirectory(context, {\n      ...options,\n      parent,\n      mtime: meta.mtime,\n      mode: meta.mode\n    })\n  }\n\n  log(`Adding ${options.name} (${options.cid}) to regular directory`)\n\n  return addToDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst convertToShardedDirectory = async (context, options) => {\n  const result = await createShard(context, options.parent.Links.map(link => ({\n    name: (link.Name || ''),\n    size: link.Tsize || 0,\n    cid: link.Hash\n  })).concat({\n    name: options.name,\n    size: options.size,\n    cid: options.cid\n  }), options)\n\n  log(`Converted directory to sharded directory ${result.cid}`)\n\n  return result\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst addToDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  const parentLinks = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n  parentLinks.push({\n    Name: options.name,\n    Tsize: options.size,\n    Hash: options.cid\n  })\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addToDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  let data\n  if (node.mtime) {\n    // Update mtime if previously set\n    const ms = Date.now()\n    const secs = Math.floor(ms / 1000)\n\n    node.mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n\n    data = node.marshal()\n  } else {\n    data = options.parent.Data\n  }\n  options.parent = dagPB.prepare({\n    Data: data,\n    Links: parentLinks\n  })\n\n  // Persist the new parent PbNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const buf = dagPB.encode(options.parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: options.parent,\n    cid,\n    size: buf.length\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst addToShardedDirectory = async (context, options) => {\n  const {\n    shard, path\n  } = await addFileToShardedDirectory(context, options)\n  const result = await last(shard.flush(context.repo.blocks))\n\n  if (!result) {\n    throw new Error('No result from flushing shard')\n  }\n\n  const block = await context.repo.blocks.get(result.cid)\n  const node = dagPB.decode(block)\n\n  // we have written out the shard, but only one sub-shard will have been written so replace it in the original shard\n  const parentLinks = options.parent.Links.filter((link) => {\n    // TODO vmx 2021-03-31: Check that there cannot be multiple ones matching\n    // Remove the old link\n    return (link.Name || '').substring(0, 2) !== path[0].prefix\n  })\n\n  const newLink = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === path[0].prefix)\n\n  if (!newLink) {\n    throw new Error(`No link found with prefix ${path[0].prefix}`)\n  }\n\n  parentLinks.push(newLink)\n\n  return updateHamtDirectory(context, parentLinks, path[0].bucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n */\nconst addFileToShardedDirectory = async (context, options) => {\n  const file = {\n    name: options.name,\n    cid: options.cid,\n    size: options.size\n  }\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addFileToShardedDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(options.parent.Links)\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mode: node.mode\n  }, options)\n  shard._bucket = rootBucket\n\n  if (node.mtime) {\n    // update mtime if previously set\n    shard.mtime = {\n      secs: Math.round(Date.now() / 1000)\n    }\n  }\n\n  // load subshards until the bucket & position no longer changes\n  const position = await rootBucket._findNewBucketAndPos(file.name)\n  const path = toBucketPath(position)\n  path[0].node = options.parent\n  let index = 0\n\n  while (index < path.length) {\n    const segment = path[index]\n    index++\n    const node = segment.node\n\n    if (!node) {\n      throw new Error('Segment had no node')\n    }\n\n    const link = node.Links\n      .find(link => (link.Name || '').substring(0, 2) === segment.prefix)\n\n    if (!link) {\n      // prefix is new, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be added`)\n      index = path.length\n\n      break\n    }\n\n    if (link.Name === `${segment.prefix}${file.name}`) {\n      // file already existed, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be replaced`)\n      index = path.length\n\n      break\n    }\n\n    if ((link.Name || '').length > 2) {\n      // another file had the same prefix, will be replaced with a subshard\n      log(`Link ${link.Name} ${link.Hash} will be replaced with a subshard`)\n      index = path.length\n\n      break\n    }\n\n    // load sub-shard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const subShard = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[index]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n      await recreateHamtLevel(context, subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n\n      const position = await rootBucket._findNewBucketAndPos(file.name)\n\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: subShard\n      })\n\n      break\n    }\n\n    const nextSegment = path[index]\n\n    // add next levels worth of links to bucket\n    await addLinksToHamtBucket(context, subShard.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = subShard\n  }\n\n  // finally add the new file into the shard\n  await shard._bucket.put(file.name, {\n    size: file.size,\n    cid: file.cid\n  })\n\n  return {\n    shard, path\n  }\n}\n\n/**\n * @param {{ pos: number, bucket: Bucket }} position\n * @returns {{ bucket: Bucket, prefix: string, node?: PBNode }[]}\n */\nconst toBucketPath = (position) => {\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n\n  let bucket = position.bucket._parent\n  let positionInBucket = position.bucket._posAtParent\n\n  while (bucket) {\n    path.push({\n      bucket,\n      prefix: toPrefix(positionInBucket)\n    })\n\n    positionInBucket = bucket._posAtParent\n    bucket = bucket._parent\n  }\n\n  path.reverse()\n\n  return path\n}\n","import { logger } from '@libp2p/logger'\nimport { addLink } from './add-link.js'\nimport {\n  decode\n} from '@ipld/dag-pb'\n\nconst log = logger('ipfs:mfs:utils:update-tree')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree (context, trail, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n","import { logger } from '@libp2p/logger'\nimport {\n  MFS_ROOT_KEY\n} from '../../../utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:utils:update-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport async function updateMfsRoot (context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { createNode } from './utils/create-node.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { addLink } from './utils/add-link.js'\nimport { loadMfsRoot } from './utils/with-mfs-root.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:mkdir')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} flush\n * @property {number} [mode]\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000,\n  flush: true\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMkdir (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mkdir\"]}\n   */\n  async function mfsMkdir (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    if (!path) {\n      throw new Error('no path given to Mkdir')\n    }\n\n    path = path.trim()\n\n    if (path === '/') {\n      if (opts.parents) {\n        return\n      }\n\n      throw errCode(new Error('cannot create directory \\'/\\': Already exists'), 'ERR_INVALID_PATH')\n    }\n\n    if (path.substring(0, 1) !== '/') {\n      throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n    }\n\n    log(`Creating ${path}`)\n\n    const pathComponents = toPathComponents(path)\n\n    if (pathComponents[0] === 'ipfs') {\n      throw errCode(new Error(\"path cannot have the prefix 'ipfs'\"), 'ERR_INVALID_PATH')\n    }\n\n    const root = await loadMfsRoot(context, opts)\n    let parent\n    const trail = []\n    const emptyDir = await createNode(context, 'directory', opts)\n\n    // make sure the containing folder exists, creating it if necessary\n    for (let i = 0; i <= pathComponents.length; i++) {\n      const subPathComponents = pathComponents.slice(0, i)\n      const subPath = `/ipfs/${root}/${subPathComponents.join('/')}`\n\n      try {\n        parent = await exporter(subPath, context.repo.blocks)\n\n        if (parent.type !== 'file' && parent.type !== 'directory') {\n          throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n        }\n\n        if (i === pathComponents.length) {\n          if (opts.parents) {\n            return\n          }\n\n          throw errCode(new Error('file already exists'), 'ERR_ALREADY_EXISTS')\n        }\n\n        trail.push({\n          name: parent.name,\n          cid: parent.cid\n        })\n      } catch (/** @type {any} */ err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          if (i < pathComponents.length && !opts.parents) {\n            throw errCode(new Error(`Intermediate directory path ${subPath} does not exist, use the -p flag to create it`), 'ERR_NOT_FOUND')\n          }\n\n          // add the intermediate directory\n          await addEmptyDir(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, opts)\n        } else {\n          throw err\n        }\n      }\n    }\n\n    // add an empty dir to the last path component\n    // await addEmptyDir(context, pathComponents[pathComponents.length - 1], emptyDir, parent, trail)\n\n    // update the tree from the leaf to the root\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsMkdir)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} childName\n * @param {{ cid: CID, node?: PBNode }} emptyDir\n * @param {{ cid?: CID, node?: PBNode }} parent\n * @param {{ name: string, cid: CID }[]} trail\n * @param {DefaultOptions} options\n */\nconst addEmptyDir = async (context, childName, emptyDir, parent, trail, options) => {\n  log(`Adding empty dir called ${childName} to ${parent.cid}`)\n\n  const result = await addLink(context, {\n    parent: parent.node,\n    parentCid: parent.cid,\n    // TODO vmx 2021-03-09: Remove the usage of size completely\n    size: 0,\n    cid: emptyDir.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  trail[trail.length - 1].cid = result.cid\n\n  trail.push({\n    name: childName,\n    cid: emptyDir.cid\n  })\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n","import { createMkdir } from './mkdir.js'\nimport { createStat } from './stat.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { addLink } from './utils/add-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport mergeOpts from 'merge-options'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:cp')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createCp (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"cp\"]}\n   */\n  async function mfsCp (from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(from)) {\n      from = [from]\n    }\n\n    const sources = await Promise.all(\n      from.map((/** @type {CID | string} */ path) => toMfsPath(context, path, options))\n    )\n    let destination = await toMfsPath(context, to, options)\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS')\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists)\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS')\n    }\n\n    const destinationIsDirectory = isDirectory(destination)\n\n    if (destination.exists) {\n      log('Destination exists')\n\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS')\n      }\n    } else {\n      log('Destination does not exist')\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n        }\n\n        await createMkdir(context)(destination.path, options)\n        destination = await toMfsPath(context, destination.path, options)\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`\n\n        try {\n          await createStat(context)(parentFolder, options)\n        } catch (/** @type {any} */ err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n          }\n\n          await createMkdir(context)(parentFolder, options)\n          destination = await toMfsPath(context, destination.path, options)\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory\n    const trail = await toTrail(context, destinationPath)\n\n    if (sources.length === 1) {\n      const source = sources.pop()\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS')\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name\n\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`)\n\n      return copyToFile(context, source, destinationName, trail, options)\n    }\n\n    log('Multiple sources, wrapping in a directory')\n    return copyToDirectory(context, sources, destination, trail, options)\n  }\n\n  return withTimeoutOption(mfsCp)\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = (destination) => {\n  return destination.unixfs &&\n    destination.unixfs.type &&\n    destination.unixfs.type.includes('directory')\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop()\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS')\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options)\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent)\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n\n    destination = await addSourceToParent(context, source, source.name, destination, options)\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid)\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.node = node\n  parent.cid = cid\n  parent.size = size\n\n  return parent\n}\n","\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport {\n  generatePath,\n  updateHamtDirectory\n} from './hamt-utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:core:utils:remove-link')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} RemoveLinkOptions\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {CID} [parentCid]\n * @property {PBNode} [parent]\n *\n * @typedef {object} RemoveLinkOptionsInternal\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {PBNode} parent\n */\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptions} options\n */\nexport async function removeLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node had no data'), 'ERR_INVALID_NODE')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log(`Removing ${options.name} from sharded directory`)\n\n    return removeFromShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  log(`Removing link ${options.name} regular directory`)\n\n  return removeFromDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  options.parent.Links = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n\n  const parentBlock = await dagPB.encode(options.parent)\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const hash = await hasher.digest(parentBlock)\n  const parentCid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  await context.repo.blocks.put(parentCid, parentBlock)\n\n  log(`Updated regular directory ${parentCid}`)\n\n  return {\n    node: options.parent,\n    cid: parentCid\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromShardedDirectory = async (context, options) => {\n  const {\n    rootBucket, path\n  } = await generatePath(context, options.name, options.parent)\n\n  await rootBucket.del(options.name)\n\n  const {\n    node\n  } = await updateShard(context, path, options.name, options)\n\n  return updateHamtDirectory(context, node.Links, rootBucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ bucket: Bucket, prefix: string, node?: PBNode }[]} positions\n * @param {string} name\n * @param {RemoveLinkOptionsInternal} options\n * @returns {Promise<{ node: PBNode, cid: CID, size: number }>}\n */\nconst updateShard = async (context, positions, name, options) => {\n  const last = positions.pop()\n\n  if (!last) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const {\n    bucket,\n    prefix,\n    node\n  } = last\n\n  if (!node) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const link = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === prefix)\n\n  if (!link) {\n    throw errCode(new Error(`No link found with prefix ${prefix} for file ${name}`), 'ERR_NOT_FOUND')\n  }\n\n  if (link.Name === `${prefix}${name}`) {\n    log(`Removing existing link ${link.Name}`)\n\n    const links = node.Links.filter((nodeLink) => {\n      return nodeLink.Name !== link.Name\n    })\n\n    await bucket.del(name)\n\n    return updateHamtDirectory(context, links, bucket, options)\n  }\n\n  log(`Descending into sub-shard ${link.Name} for ${prefix}${name}`)\n\n  const result = await updateShard(context, positions, name, options)\n\n  let cid = result.cid\n  let size = result.size\n  let newName = prefix\n\n  if (result.node.Links.length === 1) {\n    log(`Removing subshard for ${prefix}`)\n\n    // convert shard back to normal dir\n    const link = result.node.Links[0]\n\n    newName = `${prefix}${(link.Name || '').substring(2)}`\n    cid = link.Hash\n    size = link.Tsize || 0\n  }\n\n  log(`Updating shard ${prefix} with name ${newName}`)\n\n  return updateShardParent(context, bucket, node, prefix, newName, size, cid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {Bucket} bucket\n * @param {PBNode} parent\n * @param {string} oldName\n * @param {string} newName\n * @param {number} size\n * @param {CID} cid\n * @param {RemoveLinkOptionsInternal} options\n */\nconst updateShardParent = (context, bucket, parent, oldName, newName, size, cid, options) => {\n  // Remove existing link if it exists\n  const parentLinks = parent.Links.filter((link) => {\n    return link.Name !== oldName\n  })\n  parentLinks.push({\n    Name: newName,\n    Tsize: size,\n    Hash: cid\n  })\n\n  return updateHamtDirectory(context, parentLinks, bucket, options)\n}\n","import errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { removeLink } from './utils/remove-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} recursive\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRm (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"rm\"]}\n   */\n  async function mfsRm (paths, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(paths)) {\n      paths = [paths]\n    }\n\n    const sources = await Promise.all(\n      paths.map(path => toMfsPath(context, path, options))\n    )\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === '/') {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  }\n\n  return withTimeoutOption(mfsRm)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {DefaultOptions} options\n */\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path, options)\n  const trail = await toTrail(context, mfsPath.mfsPath)\n  const child = trail[trail.length - 1]\n  trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { pipe } from 'it-pipe'\nimport { importer } from 'ipfs-unixfs-importer'\nimport { recursive } from 'ipfs-unixfs-exporter'\nimport last from 'it-last'\nimport { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport { persist } from './utils/persist.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('./').MfsContext} MfsContext\n *\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} recursive\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  recursive: false\n}\n\n/**\n * @param {string} mode\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction calculateModification (mode, originalMode, isDirectory) {\n  let modification = 0\n\n  if (mode.includes('x') || (mode.includes('X') && (isDirectory || (originalMode & 0o1 || originalMode & 0o10 || originalMode & 0o100)))) {\n    modification += 1\n  }\n\n  if (mode.includes('w')) {\n    modification += 2\n  }\n\n  if (mode.includes('r')) {\n    modification += 4\n  }\n\n  return modification\n}\n\n/**\n * @param {string} references\n * @param {number} modification\n */\nfunction calculateUGO (references, modification) {\n  let ugo = 0\n\n  if (references.includes('u')) {\n    ugo += (modification << 6)\n  }\n\n  if (references.includes('g')) {\n    ugo += (modification << 3)\n  }\n\n  if (references.includes('o')) {\n    ugo += (modification)\n  }\n\n  return ugo\n}\n\n/**\n * @param {string} references\n * @param {string} mode\n * @param {number} modification\n */\nfunction calculateSpecial (references, mode, modification) {\n  if (mode.includes('t')) {\n    modification += parseInt('1000', 8)\n  }\n\n  if (mode.includes('s')) {\n    if (references.includes('u')) {\n      modification += parseInt('4000', 8)\n    }\n\n    if (references.includes('g')) {\n      modification += parseInt('2000', 8)\n    }\n  }\n\n  return modification\n}\n\n/**\n * https://en.wikipedia.org/wiki/Chmod#Symbolic_modes\n *\n * @param {string} input\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction parseSymbolicMode (input, originalMode, isDirectory) {\n  if (!originalMode) {\n    originalMode = 0\n  }\n\n  const match = input.match(/^(u?g?o?a?)(-?\\+?=?)?(r?w?x?X?s?t?)$/)\n\n  if (!match) {\n    throw new Error(`Invalid file mode: ${input}`)\n  }\n\n  let [\n    ,\n    references,\n    operator,\n    mode\n  ] = match\n\n  if (references === 'a' || !references) {\n    references = 'ugo'\n  }\n\n  let modification = calculateModification(mode, originalMode, isDirectory)\n  modification = calculateUGO(references, modification)\n  modification = calculateSpecial(references, mode, modification)\n\n  if (operator === '=') {\n    if (references.includes('u')) {\n      // blank u bits\n      originalMode = originalMode & parseInt('7077', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('g')) {\n      // blank g bits\n      originalMode = originalMode & parseInt('7707', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('o')) {\n      // blank o bits\n      originalMode = originalMode & parseInt('7770', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    return originalMode\n  }\n\n  if (operator === '+') {\n    return modification | originalMode\n  }\n\n  if (operator === '-') {\n    return modification ^ originalMode\n  }\n\n  return originalMode\n}\n\n/**\n * @param {string | InstanceType<typeof window.String> | number} mode\n * @param {UnixFS} metadata\n * @returns {number}\n */\nfunction calculateMode (mode, metadata) {\n  if (mode instanceof String || typeof mode === 'string') {\n    const strMode = `${mode}`\n\n    if (strMode.match(/^\\d+$/g)) {\n      mode = parseInt(strMode, 8)\n    } else {\n      mode = 0 + strMode.split(',').reduce((curr, acc) => {\n        return parseSymbolicMode(acc, curr, metadata.isDirectory())\n      }, metadata.mode || 0)\n    }\n  }\n\n  return mode\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createChmod (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"chmod\"]}\n   */\n  async function mfsChmod (path, mode, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name\n    } = await toMfsPath(context, path, opts)\n\n    if (cid.code !== dagPB.code) {\n      throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n    }\n\n    if (opts.recursive) {\n      // recursively export from root CID, change perms of each entry then reimport\n      // but do not reimport files, only manipulate dag-pb nodes\n      const root = await pipe(\n        async function * () {\n          for await (const entry of recursive(cid, context.repo.blocks)) {\n            if (entry.type !== 'file' && entry.type !== 'directory') {\n              throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n            }\n\n            entry.unixfs.mode = calculateMode(mode, entry.unixfs)\n\n            const node = dagPB.prepare({\n              Data: entry.unixfs.marshal(),\n              Links: entry.node.Links\n            })\n\n            yield {\n              path: entry.path,\n              content: node\n            }\n          }\n        },\n        // @ts-expect-error we account for the incompatible source type with our custom dag builder below\n        (source) => importer(source, context.repo.blocks, {\n          ...opts,\n          pin: false,\n          dagBuilder: async function * (source, block, opts) {\n            for await (const entry of source) {\n              yield async function () {\n                /** @type {PBNode} */\n                // @ts-expect-error - cannot derive type\n                const node = entry.content\n\n                const buf = dagPB.encode(node)\n                const cid = await persist(buf, block, opts)\n\n                if (!node.Data) {\n                  throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n                }\n\n                const unixfs = UnixFS.unmarshal(node.Data)\n\n                return {\n                  cid,\n                  size: buf.length,\n                  path: entry.path,\n                  unixfs\n                }\n              }\n            }\n          }\n        }),\n        (nodes) => last(nodes)\n      )\n\n      if (!root) {\n        throw errCode(new Error(`Could not chmod ${path}`), 'ERR_COULD_NOT_CHMOD')\n      }\n\n      // remove old path from mfs\n      await createRm(context)(path, opts)\n\n      // add newly created tree to mfs at path\n      await createCp(context)(`/ipfs/${root.cid}`, path, opts)\n\n      return\n    }\n\n    const block = await context.repo.blocks.get(cid)\n    const node = dagPB.decode(block)\n\n    if (!node.Data) {\n      throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n    }\n\n    const metadata = UnixFS.unmarshal(node.Data)\n    metadata.mode = calculateMode(mode, metadata)\n    const updatedBlock = dagPB.encode({\n      Data: metadata.marshal(),\n      Links: node.Links\n    })\n\n    const hashAlg = opts.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n    const hash = await hasher.digest(updatedBlock)\n    const updatedCid = CID.create(opts.cidVersion, dagPB.code, hash)\n\n    if (opts.flush) {\n      await context.repo.blocks.put(updatedCid, updatedBlock)\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = CID.decode(parent.cid.bytes)\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: opts.flush,\n      // TODO vmx 2021-03-29: decide on the API, whether it should be a `hashAlg` or `hasher`\n      hashAlg,\n      cidVersion: cid.version,\n      shardSplitThreshold: Infinity\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsChmod)\n}\n","import { createStat } from './stat.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {}\n\n/**\n * @param {MfsContext} context\n */\nexport function createFlush (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"flush\"]}\n   */\n  async function mfsFlush (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await createStat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n","import { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await createCp(context)(from, to, opts)\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPB.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPB.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n    return browserStreamToIt(content.stream())\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n","import { logger } from '@libp2p/logger'\nimport { importer } from 'ipfs-unixfs-importer'\nimport {\n  decode\n} from '@ipld/dag-pb'\nimport { createStat } from './stat.js'\nimport { createMkdir } from './mkdir.js'\nimport { addLink } from './utils/add-link.js'\nimport mergeOpts from 'merge-options'\nimport { createLock } from './utils/create-lock.js'\nimport { toAsyncIterator } from './utils/to-async-iterator.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport errCode from 'err-code'\nimport {\n  MFS_MAX_CHUNK_SIZE\n} from '../../utils.js'\nimport last from 'it-last'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport {\n  parseMode,\n  parseMtime\n} from 'ipfs-unixfs'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:write')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: Infinity, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createWrite (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"write\"]}\n   */\n  async function mfsWrite (path, content, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    /** @type {AsyncIterable<Uint8Array>} */\n    let source\n    /** @type {MfsPath} */\n    let destination\n    /** @type {MfsPath} */\n    let parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-expect-error - parent may be undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-expect-error\n    if (source == null) {\n      throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE')\n    }\n\n    // @ts-expect-error\n    if (destination == null) {\n      throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION')\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (destination.entryType !== 'file') {\n      throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n\n    if (fileName == null) {\n      throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST')\n    }\n\n    let parentExists = false\n\n    try {\n      await createStat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (/** @type {any} */ err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await createMkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (!parent.type || !parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentBlock = await context.repo.blocks.get(parent.cid)\n    const parentNode = decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  /** @type {number | undefined} */\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = parseMode(options.mode)\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  /** @type {import('ipfs-unixfs').Mtime | undefined} */\n  let mtime\n\n  if (options.mtime != null) {\n    mtime = parseMtime(options.mtime)\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.repo.blocks, {\n    progress: options.progress,\n    hasher,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType\n  }))\n\n  if (!result) {\n    throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE')\n  }\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.subarray(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  async function * _asyncZeroes () {\n    while (true) {\n      yield buf\n    }\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count)\n}\n\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport map from 'it-map'\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = (fsEntry) => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  }\n\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode\n    output.mtime = fsEntry.unixfs.mtime\n  }\n\n  return output\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function * mfsLs (path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options)\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield * map(fsEntry.content(options), toOutput)\n\n      return\n    }\n\n    // single file/node\n    yield toOutput(fsEntry)\n  }\n\n  return withTimeoutOption(mfsLs)\n}\n","import { createLock } from './utils/create-lock.js'\nimport * as isIpfs from 'is-ipfs'\nimport { createStat } from './stat.js'\nimport { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRm } from './rm.js'\nimport { createTouch } from './touch.js'\nimport { createRead } from './read.js'\nimport { createWrite } from './write.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n *\n * @typedef {object} MfsContext\n * @property {IPFSRepo} repo\n * @property {Multihashes} hashers\n */\n\n/**\n * These operations are read-locked at the function level and will execute simultaneously\n *\n * @type {Record<string, any>}\n */\nconst readOperations = {\n  stat: createStat\n}\n\n/**\n * These operations are locked at the function level and will execute in series\n *\n * @type {Record<string, any>}\n */\nconst writeOperations = {\n  chmod: createChmod,\n  cp: createCp,\n  flush: createFlush,\n  mkdir: createMkdir,\n  mv: createMv,\n  rm: createRm,\n  touch: createTouch\n}\n\n/**\n * These operations are asynchronous and manage their own locking\n *\n * @type {Record<string, any>}\n */\nconst unwrappedOperations = {\n  write: createWrite,\n  read: createRead,\n  ls: createLs\n}\n\n/**\n * @param {object} arg\n * @param {MfsContext} arg.options\n * @param {*} arg.mfs\n * @param {*} arg.operations\n * @param {*} arg.lock\n */\nconst wrap = ({\n  options, mfs, operations, lock\n}) => {\n  Object.keys(operations).forEach(key => {\n    mfs[key] = lock(operations[key](options))\n  })\n}\n\nconst defaultOptions = {\n  repoOwner: true,\n  repo: null\n}\n\n/**\n * @param {object} options\n * @param {IPFSRepo} options.repo\n * @param {boolean} options.repoOwner\n * @param {Multihashes} options.hashers\n */\nfunction createMfs (options) {\n  const {\n    repoOwner\n  } = Object.assign({}, defaultOptions || {}, options)\n\n  const lock = createLock(repoOwner)\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const readLock = (operation) => {\n    return lock.readLock(operation)\n  }\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const writeLock = (operation) => {\n    return lock.writeLock(operation)\n  }\n\n  /** @type {Record<string, any>} */\n  const mfs = {}\n\n  wrap({\n    options, mfs, operations: readOperations, lock: readLock\n  })\n  wrap({\n    options, mfs, operations: writeOperations, lock: writeLock\n  })\n\n  Object.keys(unwrappedOperations).forEach(key => {\n    mfs[key] = unwrappedOperations[key](options)\n  })\n\n  return mfs\n}\n\n/**\n * @param {object} context\n * @param {IPFSRepo} context.repo\n * @param {import('../../types').Preload} context.preload\n * @param {import('..').Options} context.options\n * @param {Multihashes} context.hashers\n * @returns {import('ipfs-core-types/src/files').API}\n */\nexport function createFiles ({ repo, preload, hashers, options: constructorOptions }) {\n  const methods = createMfs({\n    repo,\n    repoOwner: constructorOptions.repoOwner !== false,\n    hashers\n  })\n\n  /**\n   * @param {any} fn\n   */\n  const withPreload = fn => {\n    /**\n     * @param  {...any} args\n     */\n    const wrapped = (...args) => {\n      const paths = args.filter(arg => isIpfs.ipfsPath(arg) || isIpfs.cid(arg))\n\n      if (paths.length) {\n        const options = args[args.length - 1]\n        if (options && options.preload !== false) {\n          paths.forEach(path => preload(path))\n        }\n      }\n\n      return fn(...args)\n    }\n\n    return wrapped\n  }\n\n  return {\n    ...methods,\n    chmod: methods.chmod,\n    cp: withPreload(methods.cp),\n    mkdir: methods.mkdir,\n    stat: withPreload(methods.stat),\n    rm: methods.rm,\n    read: withPreload(methods.read),\n    touch: methods.touch,\n    write: methods.write,\n    mv: withPreload(methods.mv),\n    flush: methods.flush,\n    ls: withPreload(async function * (/** @type {...any} */ ...args) {\n      for await (const file of methods.ls(...args)) {\n        yield { ...file, size: file.size || 0 }\n      }\n    })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst DEFAULT_KEY_TYPE = 'Ed25519'\nconst DEFAULT_KEY_SIZE = 2048\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createGen ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"gen\"]}\n   */\n  const gen = (name, options = { type: DEFAULT_KEY_TYPE, size: DEFAULT_KEY_SIZE }) => {\n    return keychain.createKey(name, options.type || DEFAULT_KEY_TYPE, options.size || DEFAULT_KEY_SIZE)\n  }\n\n  return withTimeoutOption(gen)\n}\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @typedef {import('@libp2p/interface-keychain').KeyChain} Keychain\n */\n\nexport class KeyAPI {\n  /**\n   * @param {object} config\n   * @param {Keychain} config.keychain\n   */\n  constructor ({ keychain }) {\n    this.gen = createGen({ keychain })\n    this.list = createList({ keychain })\n    this.rm = createRm({ keychain })\n    this.rename = createRename({ keychain })\n    this.export = createExport({ keychain })\n    this.import = createImport({ keychain })\n    this.info = createInfo({ keychain })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createList ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"list\"]}\n   */\n  const list = () => keychain.listKeys()\n\n  return withTimeoutOption(list)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRm ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rm\"]}\n   */\n  const rm = (name) => keychain.removeKey(name)\n\n  return withTimeoutOption(rm)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRename ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createExport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"export\"]}\n   */\n  const exportKey = (name, password) =>\n    keychain.exportKey(name, password)\n\n  return withTimeoutOption(exportKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createImport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"import\"]}\n   */\n  const importKey = (name, pem, password) => {\n    return keychain.importKey(name, pem, password)\n  }\n\n  return withTimeoutOption(importKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createInfo ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"info\"]}\n   */\n  const info = (name) => keychain.findKeyByName(name)\n\n  return withTimeoutOption(info)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid, options)\n\n    return dagPB.decode(block)\n  }\n\n  return withTimeoutOption(get)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (/** @type {any} */ _) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLinks ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    switch (cid.code) {\n      case raw.code:\n        return []\n      case dagPB.code:\n        return node.Links\n      case dagCBOR.code:\n      case dagJSON.code:\n        return findLinks(node)\n      default:\n        throw new Error(`Cannot resolve links from codec ${cid.code}`)\n    }\n  }\n\n  return withTimeoutOption(links)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @typedef {import('../../../types').Preload} Preload\n */\n\nexport class ObjectPatchAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, preload }) {\n    this.addLink = createAddLink({ repo, preload })\n    this.appendData = createAppendData({ repo, preload })\n    this.rmLink = createRmLink({ repo, preload })\n    this.setData = createSetData({ repo, preload })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAddLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"addLink\"]}\n   */\n  async function addLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Links: node.Links.concat([link])\n    }, options)\n  }\n\n  return withTimeoutOption(addLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAppendData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    const node = await get(cid, options)\n    const newData = uint8ArrayConcat([node.Data || [], data])\n\n    return put({\n      ...node,\n      Data: newData\n    }, options)\n  }\n\n  return withTimeoutOption(appendData)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createRmLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"rmLink\"]}\n   */\n  async function rmLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n    const name = (typeof link === 'string' ? link : link.Name) || ''\n\n    node.Links = node.Links.filter(l => l.Name !== name)\n\n    return put(node, options)\n  }\n\n  return withTimeoutOption(rmLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createSetData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Data: data\n    }, options)\n  }\n\n  return withTimeoutOption(setData)\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { ObjectPatchAPI } from './patch/index.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class ObjectAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, codecs, preload }) {\n    this.data = createData({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.links = createLinks({ repo, codecs })\n    this.new = createNew({ repo, preload })\n    this.put = createPut({ repo, preload })\n    this.stat = createStat({ repo, preload })\n    this.patch = new ObjectPatchAPI({ repo, preload })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"data\"]}\n   */\n  async function data (multihash, options = {}) {\n    const node = await get(multihash, options)\n    return node.Data || new Uint8Array(0)\n  }\n\n  return withTimeoutOption(data)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPB.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createStat ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const stats = await repo.stat()\n\n    return {\n      numObjects: BigInt(stats.numObjects.toString()),\n      repoSize: BigInt(stats.repoSize.toString()),\n      repoPath: stats.repoPath,\n      version: `${stats.version}`,\n      storageMax: BigInt(stats.storageMax.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","\nexport const repoVersion = 12\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\nexport class RepoAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Multihashes} config.hashers\n   */\n  constructor ({ repo, hashers }) {\n    this.gc = createGc({ repo, hashers })\n    this.stat = createStat({ repo })\n    this.version = createVersion({ repo })\n\n    /**\n     * @param {string} addr\n     */\n    this.setApiAddr = (addr) => repo.apiAddr.set(addr)\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { repoVersion } from 'ipfs-repo/constants'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options)\n    } catch (/** @type {any} */ err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n","import parseDuration from 'parse-duration'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/stats').BWOptions} BWOptions\n * @typedef {import('ipfs-core-types/src/stats').BWResult} BandwidthInfo\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\nfunction getBandwidthStats (libp2p, opts) {\n/*\n  let stats\n\n  if (!libp2p.metrics) {\n    stats = undefined\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.getGlobal()\n  }\n*/\n  //  if (!stats) {\n  return {\n    totalIn: BigInt(0),\n    totalOut: BigInt(0),\n    rateIn: 0.0,\n    rateOut: 0.0\n  }\n  //  }\n/*\n  const movingAverages = stats.getMovingAverages()\n  const snapshot = stats.getSnapshot()\n\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: movingAverages.dataReceived[60000].movingAverage / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage / 60\n  }\n*/\n}\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createBw ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/stats').API<{}>[\"bw\"]}\n   */\n  const bw = async function * (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    const interval = options.interval || 1000\n    let ms = -1\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval\n      if (!ms || ms < 0) throw new Error('invalid duration')\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, ms) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  return withTimeoutOption(bw)\n}\n","import { createBw } from './bw.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createStat as createBitswap } from '../bitswap/stat.js'\n\nexport class StatsAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('../../types').NetworkService} config.network\n   */\n  constructor ({ repo, network }) {\n    this.repo = createRepo({ repo })\n    this.bw = createBw({ network })\n    this.bitswap = createBitswap({ network })\n  }\n}\n","var objectSafeGet = get;\n\n/*\n  const obj = {a: {aa: {aaa: 2}}, b: 4};\n\n  get(obj, 'a.aa.aaa'); // 2\n  get(obj, ['a', 'aa', 'aaa']); // 2\n\n  get(obj, 'b.bb.bbb'); // undefined\n  get(obj, ['b', 'bb', 'bbb']); // undefined\n\n  get(obj.a, 'aa.aaa'); // 2\n  get(obj.a, ['aa', 'aaa']); // 2\n\n  get(obj.b, 'bb.bbb'); // undefined\n  get(obj.b, ['bb', 'bbb']); // undefined\n\n  get(obj.b, 'bb.bbb', 42); // 42\n  get(obj.b, ['bb', 'bbb'], 42); // 42\n\n  get(null, 'a'); // undefined\n  get(undefined, ['a']); // undefined\n\n  get(null, 'a', 42); // 42\n  get(undefined, ['a'], 42); // 42\n\n  const obj = {a: {}};\n  const sym = Symbol();\n  obj.a[sym] = 4;\n  get(obj.a, sym); // 4\n*/\n\nfunction get(obj, propsArg, defaultValue) {\n  if (!obj) {\n    return defaultValue;\n  }\n  var props, prop;\n  if (Array.isArray(propsArg)) {\n    props = propsArg.slice(0);\n  }\n  if (typeof propsArg == 'string') {\n    props = propsArg.split('.');\n  }\n  if (typeof propsArg == 'symbol') {\n    props = [propsArg];\n  }\n  if (!Array.isArray(props)) {\n    throw new Error('props arg must be an array, a string or a symbol');\n  }\n  while (props.length) {\n    prop = props.shift();\n    if (!obj) {\n      return defaultValue;\n    }\n    obj = obj[prop];\n    if (obj === undefined) {\n      return defaultValue;\n    }\n  }\n  return obj;\n}\n\nexport {objectSafeGet as default};\n","/**\n * Consumes the passed iterator and returns the number of items it contained\n */\nexport default async function length(iterator) {\n    let count = 0;\n    for await (const _ of iterator) { // eslint-disable-line no-unused-vars,@typescript-eslint/no-unused-vars\n        count++;\n    }\n    return count;\n}\n//# sourceMappingURL=index.js.map","\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport length from 'it-length'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as mhd from 'multiformats/hashes/digest'\n\nconst log = debug('ipfs:repo:migrator:migration-8')\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\nfunction unwrap (blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child)\n  }\n\n  return blockstore\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToMultihash (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n\n    // Extract multihash from CID\n    const multihash = CID.decode(buf).multihash.bytes\n\n    // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase()\n\n    return new Key(`/${multihashStr}`, false)\n  } catch (/** @type {any} */ err) {\n    return key\n  }\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n    const digest = mhd.decode(buf)\n\n    // CID to Key\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1)\n\n    return new Key(`/${multihash.toUpperCase()}`, false)\n  } catch {\n    return key\n  }\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\nasync function process (backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks\n  await blockstore.open()\n\n  const unwrapped = unwrap(blockstore)\n\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [(key) => {\n      const newKey = keyFunction(key)\n\n      return newKey.toString() !== key.toString()\n    }]\n  }))\n\n  try {\n    let counter = 0\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key)\n\n      // If the Key is base32 CIDv0 then there's nothing to do\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key))\n\n        await unwrapped.delete(block.key)\n        await unwrapped.put(newKey, block.value)\n\n        onProgress((counter / blockCount) * 100, `Migrated Block from ${block.key} to ${newKey}`)\n      }\n    }\n  } finally {\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid)\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ipfs = $root.ipfs = (() => {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    const ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        const pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nexport { $root as default };\n","\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { CID } from 'multiformats/cid'\n\nexport const PIN_DS_KEY = new Key('/local/pins')\nexport const DEFAULT_FANOUT = 256\nexport const MAX_ITEMS = 8192\nexport const EMPTY_KEY = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n\nexport const PinTypes = {\n  direct: 'direct',\n  recursive: 'recursive'\n}\n\n/**\n * @param {import('multiformats').CID} cid\n */\nexport function cidToKey (cid) {\n  return new Key(`/${base32.encode(cid.multihash.bytes).toUpperCase().substring(1)}`)\n}\n","\nimport { CID } from 'multiformats/cid'\nimport { ipfs } from './pin.js'\n// @ts-ignore\nimport fnv1a from 'fnv1a'\nimport varint from 'varint'\nimport * as dagPb from '@ipld/dag-pb'\nimport { DEFAULT_FANOUT, MAX_ITEMS, EMPTY_KEY } from './utils.js'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nconst PinSet = ipfs.pin.Set\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} Pin\n * @property {CID} key\n * @property {Uint8Array} [data]\n */\n\n/**\n * @param {PBNode} rootNode\n */\nfunction readHeader (rootNode) {\n  // rootNode.data should be a buffer of the format:\n  // < varint(headerLength) | header | itemData... >\n  const rootData = rootNode.Data\n\n  if (!rootData) {\n    throw new Error('No data present')\n  }\n\n  const hdrLength = varint.decode(rootData)\n  const vBytes = varint.decode.bytes ?? 0\n\n  if (vBytes <= 0) {\n    throw new Error('Invalid Set header length')\n  }\n\n  if (vBytes + hdrLength > rootData.length) {\n    throw new Error('Impossibly large set header length')\n  }\n\n  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes)\n  const header = PinSet.toObject(PinSet.decode(hdrSlice), {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  if (header.version !== 1) {\n    throw new Error(`Unsupported Set version: ${header.version}`)\n  }\n\n  if (header.fanout > rootNode.Links.length) {\n    throw new Error('Impossibly large fanout')\n  }\n\n  return {\n    header: header,\n    data: rootData.slice(hdrLength + vBytes)\n  }\n}\n\n/**\n * @param {number} seed\n * @param {CID} key\n */\nfunction hash (seed, key) {\n  const buffer = new Uint8Array(4)\n  const dataView = new DataView(buffer.buffer)\n  dataView.setUint32(0, seed, true)\n  const encodedKey = uint8ArrayFromString(key.toString())\n  const data = uint8ArrayConcat([buffer, encodedKey], buffer.byteLength + encodedKey.byteLength)\n\n  return fnv1a(uint8ArrayToString(data))\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} node\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkItems (blockstore, node) {\n  const pbh = readHeader(node)\n  let idx = 0\n\n  for (const link of node.Links) {\n    if (idx < pbh.header.fanout) {\n      // the first pbh.header.fanout links are fanout bins\n      // if a fanout bin is not 'empty', dig into and walk its DAGLinks\n      const linkHash = link.Hash\n\n      if (!EMPTY_KEY.equals(linkHash)) {\n        // walk the links of this fanout bin\n        const buf = await blockstore.get(linkHash)\n        const node = dagPb.decode(buf)\n\n        yield * walkItems(blockstore, node)\n      }\n    } else {\n      // otherwise, the link is a pin\n      yield link.Hash\n    }\n\n    idx++\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} rootNode\n * @param {string} name\n */\nexport async function * loadSet (blockstore, rootNode, name) {\n  const link = rootNode.Links.find(l => l.Name === name)\n\n  if (!link) {\n    throw new Error('No link found with name ' + name)\n  }\n\n  const buf = await blockstore.get(link.Hash)\n  const node = dagPb.decode(buf)\n\n  yield * walkItems(blockstore, node)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Pin[]} items\n */\nfunction storeItems (blockstore, items) {\n  return storePins(items, 0)\n\n  /**\n   * @param {Pin[]} pins\n   * @param {number} depth\n   */\n  async function storePins (pins, depth) {\n    const pbHeader = PinSet.encode({\n      version: 1,\n      fanout: DEFAULT_FANOUT,\n      seed: depth\n    }).finish()\n\n    const header = varint.encode(pbHeader.length)\n    const headerBuf = uint8ArrayConcat([header, pbHeader])\n    const fanoutLinks = []\n\n    for (let i = 0; i < DEFAULT_FANOUT; i++) {\n      fanoutLinks.push({\n        Name: '',\n        Tsize: 1,\n        Hash: EMPTY_KEY\n      })\n    }\n\n    if (pins.length <= MAX_ITEMS) {\n      const nodes = pins\n        .map(item => {\n          return ({\n            link: {\n              Name: '',\n              Tsize: 1,\n              Hash: item.key\n            },\n            data: item.data || new Uint8Array()\n          })\n        })\n        // sorting makes any ordering of `pins` produce the same DAGNode\n        .sort((a, b) => {\n          return uint8ArrayCompare(a.link.Hash.bytes, b.link.Hash.bytes)\n        })\n\n      const rootLinks = fanoutLinks.concat(nodes.map(item => item.link))\n      const rootData = uint8ArrayConcat([headerBuf, ...nodes.map(item => item.data)])\n\n      return {\n        Data: rootData,\n        Links: rootLinks\n      }\n    } else {\n      // If the array of pins is > MAX_ITEMS, we:\n      //  - distribute the pins among `DEFAULT_FANOUT` bins\n      //    - create a DAGNode for each bin\n      //      - add each pin as a DAGLink to that bin\n      //  - create a root DAGNode\n      //    - add each bin as a DAGLink\n      //  - send that root DAGNode via callback\n      // (using go-ipfs' \"wasteful but simple\" approach for consistency)\n      // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57\n\n      /** @type {Pin[][]} */\n      const bins = pins.reduce((bins, pin) => {\n        const n = hash(depth, pin.key) % DEFAULT_FANOUT\n        // @ts-ignore\n        bins[n] = n in bins ? bins[n].concat([pin]) : [pin]\n        return bins\n      }, [])\n\n      let idx = 0\n      for (const bin of bins) {\n        const child = await storePins(bin, depth + 1)\n\n        await storeChild(child, idx)\n\n        idx++\n      }\n\n      return {\n        Data: headerBuf,\n        Links: fanoutLinks\n      }\n    }\n\n    /**\n     * @param {PBNode} child\n     * @param {number} binIdx\n     */\n    async function storeChild (child, binIdx) {\n      const buf = dagPb.encode(child)\n      const digest = await sha256.digest(buf)\n      const cid = CID.createV0(digest)\n\n      await blockstore.put(cid, buf)\n\n      const size = child.Links.reduce((acc, curr) => acc + (curr.Tsize || 0), 0) + buf.length\n\n      fanoutLinks[binIdx] = {\n        Name: '',\n        Tsize: size,\n        Hash: cid\n      }\n    }\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {string} type\n * @param {CID[]} cids\n */\nexport async function storeSet (blockstore, type, cids) {\n  const rootNode = await storeItems(blockstore, cids.map(cid => {\n    return {\n      key: cid\n    }\n  }))\n  const buf = dagPb.encode(rootNode)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n\n  const size = rootNode.Links.reduce((acc, curr) => acc + curr.Tsize, 0) + buf.length\n\n  return {\n    Name: type,\n    Tsize: size,\n    Hash: cid\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as cbor from 'cborg'\nimport * as pinset from './pin-set.js'\nimport { cidToKey, PIN_DS_KEY, PinTypes } from './utils.js'\nimport length from 'it-length'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport * as mhd from 'multiformats/hashes/digest'\nimport { base32 } from 'multiformats/bases/base32'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = CID.decode(mh)\n  const pinRootBuf = await blockstore.get(cid)\n  const pinRoot = dagPb.decode(pinRootBuf)\n  let counter = 0\n  const pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cid)\n  await datastore.delete(PIN_DS_KEY)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = []\n  const directPins = []\n  let counter = 0\n  const pinCount = await length(pinstore.queryKeys({}))\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = CID.create(\n      pin.version || 0,\n      pin.codec || dagPb.code,\n      mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop()))\n    )\n\n    if (pin.depth === 0) {\n      onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n\n      directPins.push(cid)\n    } else {\n      onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = {\n    Links: [\n      await pinset.storeSet(blockstore, PinTypes.direct, directPins),\n      await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins)\n    ]\n  }\n  const buf = dagPb.encode(pinRoot)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n  await datastore.put(PIN_DS_KEY, cid.bytes)\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  const blockstore = backends.blocks\n  const datastore = backends.datastore\n  const pinstore = backends.pins\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDatastore)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDAG)\n  }\n}\n","import errCode from 'err-code'\n\n/**\n * @param {Error} [err]\n */\nexport function dbOpenFailedError (err) {\n  err = err || new Error('Cannot open database')\n  return errCode(err, 'ERR_DB_OPEN_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbDeleteFailedError (err) {\n  err = err || new Error('Delete failed')\n  return errCode(err, 'ERR_DB_DELETE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbWriteFailedError (err) {\n  err = err || new Error('Write failed')\n  return errCode(err, 'ERR_DB_WRITE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function notFoundError (err) {\n  err = err || new Error('Not Found')\n  return errCode(err, 'ERR_NOT_FOUND')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function abortedError (err) {\n  err = err || new Error('Aborted')\n  return errCode(err, 'ERR_ABORTED')\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { notFoundError } from 'datastore-core/errors'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config')\nexport const VERSION_KEY = new Key('/version')\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nexport function findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nasync function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw notFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(notFoundError())\n    }\n  })\n}\n\n/**\n * @param {Datastore} store\n */\nfunction wrapStore (store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store)\n  const originalHas = store.has.bind(store)\n  /**\n   * @param {Key} key\n   */\n  store.get = (key) => getWithFallback(key, originalGet, originalHas, store)\n  /**\n   * @param {Key} key\n   */\n  store.has = (key) => hasWithFallback(key, originalHas, store)\n\n  return store\n}\n\n/**\n * @param {import('./types').Backends} backends\n */\nexport function wrapBackends (backends) {\n  return {\n    ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  }\n}\n","\nimport { findLevelJs } from '../../utils.js'\nimport { fromString } from 'uint8arrays/from-string'\nimport { toString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (/** @type {any} */ err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n","\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Protocols = $root.Protocols = (() => {\n\n    /**\n     * Properties of a Protocols.\n     * @exports IProtocols\n     * @interface IProtocols\n     * @property {Array.<string>|null} [protocols] Protocols protocols\n     */\n\n    /**\n     * Constructs a new Protocols.\n     * @exports Protocols\n     * @classdesc Represents a Protocols.\n     * @implements IProtocols\n     * @constructor\n     * @param {IProtocols=} [p] Properties to set\n     */\n    function Protocols(p) {\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Protocols protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Protocols\n     * @instance\n     */\n    Protocols.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n     * @function encode\n     * @memberof Protocols\n     * @static\n     * @param {IProtocols} m Protocols message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Protocols.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(10).string(m.protocols[i]);\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a Protocols message from the specified reader or buffer.\n     * @function decode\n     * @memberof Protocols\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Protocols} Protocols\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Protocols.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Protocols\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Protocols} Protocols\n     */\n    Protocols.fromObject = function fromObject(d) {\n        if (d instanceof $root.Protocols)\n            return d;\n        var m = new $root.Protocols();\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Protocols.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Protocols\n     * @static\n     * @param {Protocols} m Protocols\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Protocols.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.protocols = [];\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Protocols to JSON.\n     * @function toJSON\n     * @memberof Protocols\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Protocols.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Protocols;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Addresses = $root.Addresses = (() => {\n\n    /**\n     * Properties of an Addresses.\n     * @exports IAddresses\n     * @interface IAddresses\n     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n     */\n\n    /**\n     * Constructs a new Addresses.\n     * @exports Addresses\n     * @classdesc Represents an Addresses.\n     * @implements IAddresses\n     * @constructor\n     * @param {IAddresses=} [p] Properties to set\n     */\n    function Addresses(p) {\n        this.addrs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Addresses addrs.\n     * @member {Array.<Addresses.IAddress>} addrs\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.addrs = $util.emptyArray;\n\n    /**\n     * Addresses certifiedRecord.\n     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.certifiedRecord = null;\n\n    /**\n     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses\n     * @static\n     * @param {IAddresses} m Addresses message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Addresses.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addrs != null && m.addrs.length) {\n            for (var i = 0; i < m.addrs.length; ++i)\n                $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\"))\n            $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes an Addresses message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses} Addresses\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Addresses.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addrs && m.addrs.length))\n                    m.addrs = [];\n                m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses} Addresses\n     */\n    Addresses.fromObject = function fromObject(d) {\n        if (d instanceof $root.Addresses)\n            return d;\n        var m = new $root.Addresses();\n        if (d.addrs) {\n            if (!Array.isArray(d.addrs))\n                throw TypeError(\".Addresses.addrs: array expected\");\n            m.addrs = [];\n            for (var i = 0; i < d.addrs.length; ++i) {\n                if (typeof d.addrs[i] !== \"object\")\n                    throw TypeError(\".Addresses.addrs: object expected\");\n                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n            }\n        }\n        if (d.certifiedRecord != null) {\n            if (typeof d.certifiedRecord !== \"object\")\n                throw TypeError(\".Addresses.certifiedRecord: object expected\");\n            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses\n     * @static\n     * @param {Addresses} m Addresses\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Addresses.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addrs = [];\n        }\n        if (o.defaults) {\n            d.certifiedRecord = null;\n        }\n        if (m.addrs && m.addrs.length) {\n            d.addrs = [];\n            for (var j = 0; j < m.addrs.length; ++j) {\n                d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n            }\n        }\n        if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n            d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Addresses to JSON.\n     * @function toJSON\n     * @memberof Addresses\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Addresses.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Addresses.Address = (function() {\n\n        /**\n         * Properties of an Address.\n         * @memberof Addresses\n         * @interface IAddress\n         * @property {Uint8Array|null} [multiaddr] Address multiaddr\n         * @property {boolean|null} [isCertified] Address isCertified\n         */\n\n        /**\n         * Constructs a new Address.\n         * @memberof Addresses\n         * @classdesc Represents an Address.\n         * @implements IAddress\n         * @constructor\n         * @param {Addresses.IAddress=} [p] Properties to set\n         */\n        function Address(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Address multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Address isCertified.\n         * @member {boolean|null|undefined} isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.isCertified = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Address _isCertified.\n         * @member {\"isCertified\"|undefined} _isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Object.defineProperty(Address.prototype, \"_isCertified\", {\n            get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.IAddress} m Address message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Address.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n                w.uint32(16).bool(m.isCertified);\n            return w;\n        };\n\n        /**\n         * Decodes an Address message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.Address\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.Address} Address\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Address.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                case 2:\n                    m.isCertified = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an Address message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.Address} Address\n         */\n        Address.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.Address)\n                return d;\n            var m = new $root.Addresses.Address();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            if (d.isCertified != null) {\n                m.isCertified = Boolean(d.isCertified);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an Address message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.Address} m Address\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Address.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n                d.isCertified = m.isCertified;\n                if (o.oneofs)\n                    d._isCertified = \"isCertified\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Address to JSON.\n         * @function toJSON\n         * @memberof Addresses.Address\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Address.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Address;\n    })();\n\n    Addresses.CertifiedRecord = (function() {\n\n        /**\n         * Properties of a CertifiedRecord.\n         * @memberof Addresses\n         * @interface ICertifiedRecord\n         * @property {number|null} [seq] CertifiedRecord seq\n         * @property {Uint8Array|null} [raw] CertifiedRecord raw\n         */\n\n        /**\n         * Constructs a new CertifiedRecord.\n         * @memberof Addresses\n         * @classdesc Represents a CertifiedRecord.\n         * @implements ICertifiedRecord\n         * @constructor\n         * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n         */\n        function CertifiedRecord(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CertifiedRecord seq.\n         * @member {number} seq\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CertifiedRecord raw.\n         * @member {Uint8Array} raw\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.raw = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CertifiedRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n                w.uint32(8).uint64(m.seq);\n            if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\"))\n                w.uint32(18).bytes(m.raw);\n            return w;\n        };\n\n        /**\n         * Decodes a CertifiedRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CertifiedRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seq = r.uint64();\n                    break;\n                case 2:\n                    m.raw = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         */\n        CertifiedRecord.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.CertifiedRecord)\n                return d;\n            var m = new $root.Addresses.CertifiedRecord();\n            if (d.seq != null) {\n                if ($util.Long)\n                    (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n                else if (typeof d.seq === \"string\")\n                    m.seq = parseInt(d.seq, 10);\n                else if (typeof d.seq === \"number\")\n                    m.seq = d.seq;\n                else if (typeof d.seq === \"object\")\n                    m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n            }\n            if (d.raw != null) {\n                if (typeof d.raw === \"string\")\n                    $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);\n                else if (d.raw.length)\n                    m.raw = d.raw;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.CertifiedRecord} m CertifiedRecord\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CertifiedRecord.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if ($util.Long) {\n                    var n = new $util.Long(0, 0, true);\n                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                } else\n                    d.seq = o.longs === String ? \"0\" : 0;\n                if (o.bytes === String)\n                    d.raw = \"\";\n                else {\n                    d.raw = [];\n                    if (o.bytes !== Array)\n                        d.raw = $util.newBuffer(d.raw);\n                }\n            }\n            if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n                if (typeof m.seq === \"number\")\n                    d.seq = o.longs === String ? String(m.seq) : m.seq;\n                else\n                    d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n            }\n            if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n                d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this CertifiedRecord to JSON.\n         * @function toJSON\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CertifiedRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CertifiedRecord;\n    })();\n\n    return Addresses;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Peer = $root.Peer = (() => {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\nexport const Address = $root.Address = (() => {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Envelope = $root.Envelope = (() => {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const PeerRecord = $root.PeerRecord = (() => {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nexport { $root as default };\n","import $protobuf from 'protobufjs/minimal.js'\nimport { Key } from 'interface-datastore/key'\nimport { Protocols } from './pb/proto-book.js'\nimport { Addresses } from './pb/address-book.js'\nimport { Peer } from './pb/peer.js'\nimport { Envelope } from './pb/envelope.js'\nimport { PeerRecord } from './pb/peer-record.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n// @ts-expect-error Explicitly disable long.js support\n$protobuf.util.Long = undefined\n$protobuf.configure()\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderSingleDatastoreKey (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a single datastore key')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n    const [, prefix, type, peerId, metadataKey] = keyStr.split('/')\n\n    if (prefix !== 'peers') {\n      continue\n    }\n\n    if (!['protos', 'addrs', 'metadata', 'keys'].includes(type)) {\n      continue\n    }\n\n    if (!peerId) {\n      continue\n    }\n\n    peers[peerId] = peers[peerId] || {\n      addresses: [],\n      protocols: [],\n      metadata: []\n    }\n\n    if (type === 'protos') {\n      const protos = Protocols.decode(value)\n\n      peers[peerId].protocols = protos.protocols.sort()\n    } else if (type === 'addrs') {\n      const addrs = Addresses.decode(value)\n\n      peers[peerId].addresses = addrs.addrs.sort((a, b) => {\n        return multiaddr(a.multiaddr).toString().localeCompare(multiaddr(b.multiaddr).toString())\n      })\n\n      if (addrs.certifiedRecord && addrs.certifiedRecord.raw) {\n        peers[peerId].peerRecordEnvelope = addrs.certifiedRecord.raw\n      }\n    } else if (type === 'metadata') {\n      peers[peerId].metadata.push({ key: metadataKey, value })\n    } else if (type === 'keys') {\n      peers[peerId].pubKey = value\n    }\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const peerId of Object.keys(peers)) {\n    const peer = peers[peerId]\n    peer.metadata = peer.metadata.sort((/** @type {{ key: string }} */ a, /** @type {{ key: string }} */ b) => a.key.localeCompare(b.key))\n\n    const data = Peer.encode(peer).finish()\n\n    await backends.datastore.put(new Key(`/peers/${peerId}`), data)\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under a single datastore key')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderMultipleDatastoreKeys (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a multiple datastore keys')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n\n    const [, , peerId] = keyStr.split('/')\n\n    peers[peerId] = Peer.decode(value)\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const [peerId, peer] of Object.entries(peers)) {\n    if (peer.protocols && peer.protocols.length > 0) {\n      await backends.datastore.put(new Key(`/peers/protos/${peerId}`), Protocols.encode({\n        protocols: peer.protocols\n      }).finish())\n    }\n\n    if (peer.addresses && peer.addresses.length > 0) {\n      const peerRecordEnvelope = peer.peerRecordEnvelope\n      let certifiedRecord\n\n      if (peerRecordEnvelope) {\n        const envelope = Envelope.decode(peerRecordEnvelope)\n        const record = PeerRecord.decode(envelope.payload)\n\n        certifiedRecord = {\n          raw: peerRecordEnvelope,\n          seq: record.seq\n        }\n      }\n\n      await backends.datastore.put(new Key(`/peers/addrs/${peerId}`), Addresses.encode({\n        addrs: peer.addresses,\n        certifiedRecord\n      }).finish())\n    }\n\n    if (peer.metadata && peer.metadata.length > 0) {\n      for (const { key, value } of peer.metadata) {\n        await backends.datastore.put(new Key(`/peers/metadata/${peerId}/${key}`), value)\n      }\n    }\n\n    if (peer.pubKey) {\n      await backends.datastore.put(new Key(`/peers/keys/${peerId}`), peer.pubKey)\n    }\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under multiple datastore keys')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 12,\n  description: 'Store each peerstore peer under a single datastore key',\n  migrate: storePeerUnderSingleDatastoreKey,\n  revert: storePeerUnderMultipleDatastoreKeys\n}\n","import { migration as migration8 } from './migration-8/index.js'\nimport { migration as migration9 } from './migration-9/index.js'\nimport { migration as migration10 } from './migration-10/index.js'\nimport { migration as migration11 } from './migration-11/index.js'\nimport { migration as migration12 } from './migration-12/index.js'\n\n/**\n * @type {import('../types').Migration}\n */\nconst emptyMigration = {\n  description: 'Empty migration.',\n  // @ts-ignore\n  migrate: () => {},\n  // @ts-ignore\n  revert: () => {},\n  empty: true\n}\n\nexport default [\n  Object.assign({ version: 1 }, emptyMigration),\n  Object.assign({ version: 2 }, emptyMigration),\n  Object.assign({ version: 3 }, emptyMigration),\n  Object.assign({ version: 4 }, emptyMigration),\n  Object.assign({ version: 5 }, emptyMigration),\n  Object.assign({ version: 6 }, emptyMigration),\n  Object.assign({ version: 7 }, emptyMigration),\n  migration8,\n  migration9,\n  migration10,\n  migration11,\n  migration12\n]\n","\n/**\n * Exception raised when trying to revert migration that is not possible\n * to revert.\n */\nexport class NonReversibleMigrationError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NonReversibleMigrationError'\n    this.code = NonReversibleMigrationError.code\n    this.message = message\n  }\n}\nNonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION'\n\n/**\n * Exception raised when repo is not initialized.\n */\nexport class NotInitializedRepoError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotInitializedRepoError'\n    this.code = NotInitializedRepoError.code\n    this.message = message\n  }\n}\nNotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO'\n\n/**\n * Exception raised when required parameter is not provided.\n */\nexport class RequiredParameterError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'RequiredParameterError'\n    this.code = RequiredParameterError.code\n    this.message = message\n  }\n}\nRequiredParameterError.code = 'ERR_REQUIRED_PARAMETER'\n\n/**\n * Exception raised when value is not valid.\n */\nexport class InvalidValueError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidValueError'\n    this.code = InvalidValueError.code\n    this.message = message\n  }\n}\nInvalidValueError.code = 'ERR_INVALID_VALUE'\n\n/**\n * Exception raised when config is not passed.\n */\nexport class MissingRepoOptionsError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'MissingRepoOptionsError'\n    this.code = MissingRepoOptionsError.code\n    this.message = message\n  }\n}\nMissingRepoOptionsError.code = 'ERR_MISSING_REPO_OPTIONS'\n","\nimport debug from 'debug'\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js'\nimport { MissingRepoOptionsError } from '../errors.js'\n\nconst log = debug('ipfs:repo:migrator:repo:init')\n\n/**\n * @param {import('../types').Backends} backends\n */\nexport async function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (/** @type {any} */ e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n","\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n","/* eslint complexity: [\"error\", 28] */\n\nimport defaultMigrations from './migrations/index.js'\nimport * as repoVersion from './repo/version.js'\nimport * as Errors from './errors.js'\nimport { wrapBackends } from './utils.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:migrator')\n\n/**\n * @typedef {import('./types').Migration} Migration\n * @typedef {import('./types').MigrationOptions} MigrationOptions\n * @typedef {import('./types').ProgressCallback} ProgressCallback\n * @typedef {import('./types').MigrationProgressCallback} MigrationProgressCallback\n */\n\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {Migration[]} [migrations] - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n */\nexport function getLatestMigrationVersion (migrations) {\n  migrations = migrations || defaultMigrations\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0\n  }\n\n  return migrations[migrations.length - 1].version\n}\n\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo should be migrated.\n * @param {MigrationOptions} [options] - Options for migration\n */\nexport async function migrate (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.')\n    return\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`)\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion)\n\n  let lock\n\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  try {\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break\n      }\n\n      if (migration.version <= currentVersion) {\n        continue\n      }\n\n      log(`Migrating version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.migrate(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1\n\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyMigratedVersion, backends)\n\n        throw new Error(`During migration to version ${migration.version} exception was raised: ${e.stack || e.message || e}`)\n      }\n\n      log(`Migrating to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion || getLatestMigrationVersion(migrations), backends)\n    }\n\n    log('Repo successfully migrated', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!')\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo will be reverted.\n * @param {MigrationOptions} [options] - Options for the reversion\n */\nexport async function revert (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.')\n    return\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`)\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true)\n\n  let lock\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  log(`Reverting from version ${currentVersion} to ${toVersion}`)\n\n  try {\n    const reversedMigrationArray = migrations.slice().reverse()\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break\n      }\n\n      if (migration.version > currentVersion) {\n        continue\n      }\n\n      log(`Reverting migration version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.revert(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyRevertedVersion = migration.version\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyRevertedVersion, backends)\n\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      log(`Reverting to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion, backends)\n    }\n\n    log(`All migrations successfully reverted to version ${toVersion}!`)\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {Migration[]} migrations\n * @param {number} fromVersion\n * @param {number} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n */\nfunction verifyAvailableMigrations (migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`)\n      }\n\n      migrationCounter++\n    }\n  }\n\n  if (migrationCounter !== (toVersion - fromVersion)) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`)\n  }\n}\n\nexport const getCurrentRepoVersion = repoVersion.getVersion\nexport const errors = Errors\nexport const migrations = defaultMigrations\n","/**\n * Error raised when there is lock already in place when repo is being opened.\n */\nexport class LockExistsError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'LockExistsError'\n    this.code = LockExistsError.code\n  }\n}\nLockExistsError.code = 'ERR_LOCK_EXISTS'\n\n/**\n * Error raised when requested item is not found.\n */\nexport class NotFoundError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotFoundError'\n    this.code = NotFoundError.code\n  }\n}\nNotFoundError.code = 'ERR_NOT_FOUND'\n\n/**\n * Error raised when version of the stored repo is not compatible with version of this package.\n */\nexport class InvalidRepoVersionError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidRepoVersionError'\n    this.code = InvalidRepoVersionError.code\n  }\n}\nInvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION'\n\nexport const ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED'\nexport const ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN'\nexport const ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED'\n","\nimport { NotFoundError } from '../errors.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Key} Key\n */\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nexport async function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw new NotFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(new NotFoundError())\n    }\n  })\n}\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nfunction findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport PQueue from 'p-queue'\nimport _get from 'just-safe-get'\nimport _set from 'just-safe-set'\nimport errCode from 'err-code'\nimport { NotFoundError } from './errors.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\n// @ts-ignore types are broken in p-queue@6.x.x - also, if we imported via esm\n// we can use the default, if via cjs we need to get the default via prop access\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\nconst configKey = new Key('config')\n\n/**\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {Datastore} store\n */\nexport function config (store) {\n  const setQueue = new Queue({ concurrency: 1 })\n\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     * @returns {Promise<Config>}\n     */\n    async getAll (options = {}) { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const encodedValue = await getWithFallback(configKey, store.get.bind(store), store.has.bind(store), store)\n\n      return JSON.parse(uint8ArrayToString(encodedValue))\n    },\n\n    /**\n     * Get the value for the passed configuration key from the repo.\n     *\n     * @param {string} key - the config key to get\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     */\n    async get (key, options = {}) {\n      if (key == null) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      const config = await this.getAll(options)\n      const value = _get(config, key)\n\n      if (value === undefined) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      return value\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {string} key - the config key to be written\n     * @param {any} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    set (key, value, options = {}) {\n      // @ts-ignore ts thinks key will only be a string, but it may not be\n      if (typeof key !== 'string' && !(key instanceof String)) {\n        throw errCode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY')\n      }\n\n      if (value === undefined || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: key,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Config} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    replace (value, options = {}) {\n      if (!value || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: undefined,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migration to v10 or above\n      return hasWithFallback(configKey, store.has.bind(store), store)\n    }\n  }\n\n  return configStore\n\n  /**\n   * @param {{ key: any; value: any; }} m\n   * @param {AbortSignal | undefined} signal\n   */\n  async function _maybeDoSet (m, signal) {\n    if (signal && signal.aborted) {\n      return\n    }\n\n    const key = m.key\n    const value = m.value\n    if (key) {\n      const config = await configStore.getAll()\n      if (typeof config === 'object' && config !== null) {\n        _set(config, key, value)\n      }\n      return _saveAll(config)\n    }\n    return _saveAll(value)\n  }\n\n  /**\n   * @param {unknown} config\n   */\n  function _saveAll (config) {\n    const buf = uint8ArrayFromString(JSON.stringify(config, null, 2))\n    return store.put(configKey, buf)\n  }\n}\n","\nimport { Key } from 'interface-datastore'\nimport sortKeys from 'sort-keys'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst specKey = new Key('datastore_spec')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function spec (store) {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists () {\n      return store.has(specKey)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get () {\n      const buf = await store.get(specKey)\n      return JSON.parse(uint8ArrayToString(buf))\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set (spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, { deep: true }))))\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst apiFile = new Key('api')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function apiAddr (store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<string>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     * TODO: fix find the proper type or remove this API\n     *\n     * @param {string} value - the api address to be written\n     */\n    set (value) {\n      return store.put(apiFile, uint8ArrayFromString(value.toString()))\n    },\n    /**\n     * Deletes api file\n     */\n    delete () {\n      return store.delete(apiFile)\n    }\n  }\n}\n","\nimport filter from 'it-filter'\nimport { pushable } from 'it-pushable'\nimport drain from 'it-drain'\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport { identity } from 'multiformats/hashes/identity'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createIdStore (store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      const extracted = extractContents(cid)\n      if (extracted.isIdentity) {\n        return Promise.resolve(extracted.digest)\n      }\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      for await (const cid of cids) {\n        yield this.get(cid, options)\n      }\n    },\n\n    async put (cid, buf, options) {\n      const { isIdentity } = extractContents(cid)\n\n      if (isIdentity) {\n        return\n      }\n\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      // in order to return all blocks. we're going to assemble a seperate iterable\n      // return rather than return the resolves of store.putMany using the same\n      // process used by blockstore.putMany\n      const output = pushable({\n        objectMode: true\n      })\n\n      // process.nextTick runs on the microtask queue, setImmediate runs on the next\n      // event loop iteration so is slower. Use process.nextTick if it is available.\n      const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : (globalThis.setImmediate || globalThis.setTimeout)\n\n      runner(async () => {\n        try {\n          await drain(store.putMany(async function * () {\n            for await (const { key, value } of pairs) {\n              if (!extractContents(key).isIdentity) {\n                yield { key, value }\n              }\n\n              // if non identity blocks successfully write, blocks are included in output\n              output.push({ key, value })\n            }\n          }()))\n\n          output.end()\n        } catch (/** @type {any} */ err) {\n          output.end(err)\n        }\n      })\n\n      yield * output\n    },\n\n    has (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve(true)\n      }\n      return store.has(cid, options)\n    },\n\n    delete (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve()\n      }\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(filter(cids, (cid) => !extractContents(cid).isIdentity), options)\n    },\n\n    batch () {\n      const batch = store.batch()\n\n      return {\n        put (cid, buf) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.put(cid, buf)\n        },\n        delete (cid) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.delete(cid)\n        },\n        commit: (options) => {\n          return batch.commit(options)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {CID} k\n * @returns {{ isIdentity: false } | { isIdentity: true, digest: Uint8Array}}\n */\nfunction extractContents (k) {\n  const cid = CID.asCID(k)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  if (cid.multihash.code !== identity.code) {\n    return {\n      isIdentity: false\n    }\n  }\n\n  return {\n    isIdentity: true,\n    digest: cid.multihash.digest\n  }\n}\n","\nimport { LockExistsError } from '../errors.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:lock:memory')\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nasync function lock (dir) {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nasync function locked (dir) {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n\nexport const MemoryLock = {\n  lock,\n  locked\n}\n","import { MemoryLock } from './locks/memory.js'\n\n/**\n * @type {Partial<import('./types').Options>}\n */\nexport default {\n  autoMigrate: true,\n  onMigrationProgress: () => {},\n  repoOwner: true,\n  repoLock: MemoryLock\n}\n","\n// Default configuration for the datastore spec in node.js\nexport default {\n  Spec: {\n    type: 'mount',\n    mounts: [\n      {\n        mountpoint: '/blocks',\n        type: 'measure',\n        prefix: 'flatfs.datastore',\n        child: {\n          type: 'flatfs',\n          path: 'blocks',\n          sync: true,\n          shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'\n        }\n      },\n      {\n        mountpoint: '/',\n        type: 'measure',\n        prefix: 'leveldb.datastore',\n        child: {\n          type: 'levelds',\n          path: 'datastore',\n          compression: 'none'\n        }\n      }\n    ]\n  }\n}\n","import { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats'\nimport * as raw from 'multiformats/codecs/raw'\nimport errCode from 'err-code'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as Digest from 'multiformats/hashes/digest'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\nexport function cidToKey (c) {\n  const cid = CID.asCID(c)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes)\n\n  return new Key('/' + encoded.slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\nexport function keyToCid (key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key))\n}\n\n/**\n * @param {Key | string} key\n */\nexport function keyToMultihash (key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`))\n}\n","import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n","export default class QuickLRU extends Map {\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\n\t\t}\n\n\t\t// TODO: Use private class fields when ESLint supports them.\n\t\tthis.maxSize = options.maxSize;\n\t\tthis.maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n\t\tthis.onEviction = options.onEviction;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t// TODO: Use private class methods when targeting Node.js 16.\n\t_emitEvictions(cache) {\n\t\tif (typeof this.onEviction !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, item] of cache) {\n\t\t\tthis.onEviction(key, item.value);\n\t\t}\n\t}\n\n\t_deleteIfExpired(key, item) {\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n\t\t\tif (typeof this.onEviction === 'function') {\n\t\t\t\tthis.onEviction(key, item.value);\n\t\t\t}\n\n\t\t\treturn this.delete(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t_getOrDeleteIfExpired(key, item) {\n\t\tconst deleted = this._deleteIfExpired(key, item);\n\t\tif (deleted === false) {\n\t\t\treturn item.value;\n\t\t}\n\t}\n\n\t_getItemValue(key, item) {\n\t\treturn item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n\t}\n\n\t_peek(key, cache) {\n\t\tconst item = cache.get(key);\n\n\t\treturn this._getItemValue(key, item);\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\t\t\tthis._emitEvictions(this.oldCache);\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\t_moveToRecent(key, item) {\n\t\tthis.oldCache.delete(key);\n\t\tthis._set(key, item);\n\t}\n\n\t* _entriesAscending() {\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\tconst item = this.cache.get(key);\n\n\t\t\treturn this._getItemValue(key, item);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst item = this.oldCache.get(key);\n\t\t\tif (this._deleteIfExpired(key, item) === false) {\n\t\t\t\tthis._moveToRecent(key, item);\n\t\t\t\treturn item.value;\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key, value, {maxAge = this.maxAge} = {}) {\n\t\tconst expiry =\n\t\t\ttypeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY ?\n\t\t\t\tDate.now() + maxAge :\n\t\t\t\tundefined;\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, {\n\t\t\t\tvalue,\n\t\t\t\texpiry\n\t\t\t});\n\t\t} else {\n\t\t\tthis._set(key, {value, expiry});\n\t\t}\n\t}\n\n\thas(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.cache.get(key));\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.oldCache.get(key));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this._peek(key, this.cache);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this._peek(key, this.oldCache);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\treturn this.oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\n\tresize(newSize) {\n\t\tif (!(newSize && newSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tconst items = [...this._entriesAscending()];\n\t\tconst removeCount = items.length - newSize;\n\t\tif (removeCount < 0) {\n\t\t\tthis.cache = new Map(items);\n\t\t\tthis.oldCache = new Map();\n\t\t\tthis._size = items.length;\n\t\t} else {\n\t\t\tif (removeCount > 0) {\n\t\t\t\tthis._emitEvictions(items.slice(0, removeCount));\n\t\t\t}\n\n\t\t\tthis.oldCache = new Map(items.slice(removeCount));\n\t\t\tthis.cache = new Map();\n\t\t\tthis._size = 0;\n\t\t}\n\n\t\tthis.maxSize = newSize;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesDescending() {\n\t\tlet items = [...this.cache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\titems = [...this.oldCache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesAscending() {\n\t\tfor (const [key, value] of this._entriesAscending()) {\n\t\t\tyield [key, value.value];\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (!this._size) {\n\t\t\treturn this.oldCache.size;\n\t\t}\n\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.oldCache.keys()) {\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this._size + oldCacheSize, this.maxSize);\n\t}\n\n\tentries() {\n\t\treturn this.entriesAscending();\n\t}\n\n\tforEach(callbackFunction, thisArgument = this) {\n\t\tfor (const [key, value] of this.entriesAscending()) {\n\t\t\tcallbackFunction.call(thisArgument, value, key, this);\n\t\t}\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn JSON.stringify([...this.entriesAscending()]);\n\t}\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport debug from 'debug'\nimport first from 'it-first'\nimport { createUnsafe } from 'multiformats/block'\nimport * as cborg from 'cborg'\nimport * as dagPb from '@ipld/dag-pb'\nimport {\n  cidToKey,\n  keyToMultihash\n} from './utils/blockstore.js'\nimport { walkDag } from './utils/walk-dag.js'\nimport { PinTypes } from './pin-types.js'\nimport QuickLRU from 'quick-lru'\n\n/**\n * @typedef {import('./types').PinType} PinType\n * @typedef {import('./types').PinQueryType} PinQueryType\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').PinOptions} PinOptions\n * @typedef {import('./types').AbortOptions} AbortOptions\n * @typedef {import('./types').Pins} Pins\n */\n\n/**\n * @typedef {object} PinInternal\n * @property {number} depth\n * @property {import('multiformats/cid').Version} [version]\n * @property {number} [codec]\n * @property {Record<string, any>} [metadata]\n */\n\n/**\n * @typedef {object} FetchCompleteDagOptions\n * @property {AbortSignal} [signal]\n * @property {number} [cidCacheMaxSize]\n */\n\nconst CID_CACHE_MAX_SIZE = 2048\n\n/**\n * @param {string} type\n */\nfunction invalidPinTypeErr (type) {\n  const errMsg = `Invalid type '${type}', must be one of {direct, indirect, recursive, all}`\n  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE')\n}\n\n/**\n * @implements {Pins}\n */\nexport class PinManager {\n  /**\n   * @param {object} config\n   * @param {import('interface-datastore').Datastore} config.pinstore\n   * @param {import('interface-blockstore').Blockstore} config.blockstore\n   * @param {import('./types').loadCodec} config.loadCodec\n   */\n  constructor ({ pinstore, blockstore, loadCodec }) {\n    this.pinstore = pinstore\n    this.blockstore = blockstore\n    this.loadCodec = loadCodec\n    this.log = debug('ipfs:repo:pin')\n    this.directPins = new Set()\n    this.recursivePins = new Set()\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & AbortOptions} [options]\n   */\n  async pinDirectly (cid, options = {}) {\n    await this.blockstore.get(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    return this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  unpin (cid, options) {\n    return this.pinstore.delete(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & FetchCompleteDagOptions & AbortOptions} [options]\n   */\n  async pinRecursively (cid, options = {}) {\n    await this.fetchCompleteDag(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    await this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * directKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === 0\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * recursiveKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === Infinity\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * indirectKeys (options) {\n    for await (const { cid } of this.recursiveKeys()) {\n      for await (const childCid of walkDag(cid, this.blockstore, this.loadCodec, options)) {\n        // recursive pins override indirect pins\n        const types = [\n          PinTypes.recursive\n        ]\n\n        const result = await this.isPinnedWithType(childCid, types)\n\n        if (result.pinned) {\n          continue\n        }\n\n        yield childCid\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinQueryType|PinQueryType[]} types\n   * @param {AbortOptions} [options]\n   */\n  async isPinnedWithType (cid, types, options) {\n    if (!Array.isArray(types)) {\n      types = [types]\n    }\n\n    const all = types.includes(PinTypes.all)\n    const direct = types.includes(PinTypes.direct)\n    const recursive = types.includes(PinTypes.recursive)\n    const indirect = types.includes(PinTypes.indirect)\n\n    if (recursive || direct || all) {\n      const result = await first(this.pinstore.query({\n        prefix: cidToKey(cid).toString(),\n        filters: [entry => {\n          if (all) {\n            return true\n          }\n\n          const pin = cborg.decode(entry.value)\n\n          return types.includes(pin.depth === 0 ? PinTypes.direct : PinTypes.recursive)\n        }],\n        limit: 1\n      }))\n\n      if (result) {\n        const pin = cborg.decode(result.value)\n\n        return {\n          cid,\n          pinned: true,\n          reason: pin.depth === 0 ? PinTypes.direct : PinTypes.recursive,\n          metadata: pin.metadata\n        }\n      }\n    }\n\n    const self = this\n\n    /**\n     * @param {CID} key\n     * @param {AsyncIterable<{ cid: CID, metadata: any }>} source\n     */\n    async function * findChild (key, source) {\n      for await (const { cid: parentCid } of source) {\n        for await (const childCid of walkDag(parentCid, self.blockstore, self.loadCodec)) {\n          if (childCid.equals(key)) {\n            yield parentCid\n            return\n          }\n        }\n      }\n    }\n\n    if (all || indirect) {\n      // indirect (default)\n      // check each recursive key to see if multihash is under it\n\n      const parentCid = await first(findChild(cid, this.recursiveKeys()))\n\n      if (parentCid) {\n        return {\n          cid,\n          pinned: true,\n          reason: PinTypes.indirect,\n          parent: parentCid\n        }\n      }\n    }\n\n    return {\n      cid,\n      pinned: false\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {FetchCompleteDagOptions} [options]\n   */\n  async fetchCompleteDag (cid, options = {}) {\n    const seen = new QuickLRU({ maxSize: options.cidCacheMaxSize ?? CID_CACHE_MAX_SIZE })\n\n    /**\n     * @param {CID} cid\n     * @param {AbortOptions} options\n     */\n    const walkDag = async (cid, options) => {\n      if (seen.has(cid.toString())) {\n        return\n      }\n\n      seen.set(cid.toString(), true)\n\n      const bytes = await this.blockstore.get(cid, options)\n      const codec = await this.loadCodec(cid.code)\n      const block = createUnsafe({ bytes, cid, codec })\n\n      await Promise.all(\n        [...block.links()].map(([, childCid]) => walkDag(childCid, options))\n      )\n    }\n\n    await walkDag(cid, options)\n  }\n\n  /**\n   * Throws an error if the pin type is invalid\n   *\n   * @param {any} type\n   * @returns {type is PinType}\n   */\n  static checkPinType (type) {\n    if (typeof type !== 'string' || !Object.keys(PinTypes).includes(type)) {\n      throw invalidPinTypeErr(type)\n    }\n    return true\n  }\n}\n","\nimport map from 'it-map'\nimport errCode from 'err-code'\nimport { PinTypes } from './pin-types.js'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pin-manager').Pins} Pins\n */\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createPinnedBlockstore (pins, store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      yield * store.getMany(cids, options)\n    },\n\n    async put (cid, buf, options) {\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      yield * store.putMany(pairs, options)\n    },\n\n    has (cid, options) {\n      return store.has(cid, options)\n    },\n\n    async delete (cid, options) {\n      await ensureNotPinned(cid, pins)\n\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins)\n\n        return cid\n      }), options)\n    },\n\n    batch () {\n      return store.batch()\n    }\n  }\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned (cid, pins) {\n  const { pinned, reason } = await pins.isPinnedWithType(cid, PinTypes.all)\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED')\n  }\n}\n","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","\nimport { CID } from 'multiformats/cid'\nimport debug from 'debug'\nimport { notFoundError } from 'datastore-core/errors'\nimport parallelBatch from 'it-parallel-batch'\nimport { pipe } from 'it-pipe'\nimport merge from 'it-merge'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { walkDag } from './utils/walk-dag.js'\n\nconst log = debug('ipfs:repo:gc')\nconst ERR_NOT_FOUND = notFoundError().code\n\n// Limit on the number of parallel block remove operations\nconst BLOCK_RM_CONCURRENCY = 256\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').loadCodec} loadCodec\n * @typedef {import('./types').GCErrorResult} GCErrorResult\n * @typedef {import('./types').GCSuccessResult} GCSuccessResult\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {import('./types').GCLock} config.gcLock\n * @param {import('./types').Pins} config.pins\n * @param {Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nexport function gc ({ gcLock, pins, blockstore, root, loadCodec }) {\n  /**\n   * @returns {AsyncGenerator<GCErrorResult | GCSuccessResult, void, unknown>}\n   */\n  async function * gc () {\n    const start = Date.now()\n    log('Creating set of marked blocks')\n\n    const release = await gcLock.writeLock()\n\n    try {\n      // Mark all blocks that are being used\n      const markedSet = await createMarkedSet({ pins, blockstore, root, loadCodec })\n      // Get all blocks keys from the blockstore\n      const blockKeys = blockstore.queryKeys({})\n\n      // Delete blocks that are not being used\n      // @ts-ignore ts cannot tell that we filter out null results\n      yield * deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys)\n\n      log(`Complete (${Date.now() - start}ms)`)\n    } finally {\n      release()\n    }\n  }\n\n  return gc\n}\n\n/**\n * Get Set of CIDs of blocks to keep\n *\n * @param {object} config\n * @param {import('./pin-manager').Pins} config.pins\n * @param {import('interface-blockstore').Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nasync function createMarkedSet ({ pins, blockstore, loadCodec, root }) {\n  const mfsSource = (async function * () {\n    let mh\n    try {\n      mh = await root.get(MFS_ROOT_KEY)\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        log('No blocks in MFS')\n        return\n      }\n\n      throw err\n    }\n\n    const rootCid = CID.decode(mh)\n    yield rootCid\n    yield * walkDag(rootCid, blockstore, loadCodec)\n  })()\n\n  const pinsSource = merge(\n    map(pins.recursiveKeys(), ({ cid }) => cid),\n    pins.indirectKeys(),\n    map(pins.directKeys(), ({ cid }) => cid),\n    mfsSource\n  )\n\n  const output = new Set()\n\n  for await (const cid of merge(pinsSource, mfsSource)) {\n    output.add(base32.encode(cid.multihash.bytes))\n  }\n\n  return output\n}\n\n/**\n * Delete all blocks that are not marked as in use\n *\n * @param {object} arg\n * @param {Blockstore} arg.blockstore\n * @param {Set<string>} markedSet\n * @param {AsyncIterable<CID>} blockKeys\n */\nasync function * deleteUnmarkedBlocks ({ blockstore }, markedSet, blockKeys) {\n  // Iterate through all blocks and find those that are not in the marked set\n  // blockKeys yields { key: Key() }\n  let blocksCount = 0\n  let removedBlocksCount = 0\n\n  /**\n   * @param {CID} cid\n   */\n  const removeBlock = async (cid) => {\n    return async function remove () {\n      blocksCount++\n\n      try {\n        const b32 = base32.encode(cid.multihash.bytes)\n\n        if (markedSet.has(b32)) {\n          return null\n        }\n\n        try {\n          await blockstore.delete(cid)\n          removedBlocksCount++\n        } catch (/** @type {any} */ err) {\n          return {\n            err: new Error(`Could not delete block with CID ${cid}: ${err.message}`)\n          }\n        }\n\n        return { cid }\n      } catch (/** @type {any} */ err) {\n        const msg = `Could delete block with CID ${cid}`\n        log(msg, err)\n        return { err: new Error(msg + `: ${err.message}`) }\n      }\n    }\n  }\n\n  yield * pipe(\n    parallelBatch(map(blockKeys, removeBlock), BLOCK_RM_CONCURRENCY),\n    // filter nulls (blocks that were retained)\n    source => filter(source, Boolean)\n  )\n\n  log(`Marked set has ${markedSet.size} unique blocks. Blockstore has ${blocksCount} blocks. ` +\n  `Deleted ${removedBlocksCount} blocks.`)\n}\n","import errCode from 'err-code'\n\n/**\n * @param {Error} [err]\n */\nexport function dbOpenFailedError (err) {\n  err = err || new Error('Cannot open database')\n  return errCode(err, 'ERR_DB_OPEN_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbDeleteFailedError (err) {\n  err = err || new Error('Delete failed')\n  return errCode(err, 'ERR_DB_DELETE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbWriteFailedError (err) {\n  err = err || new Error('Write failed')\n  return errCode(err, 'ERR_DB_WRITE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function notFoundError (err) {\n  err = err || new Error('Not Found')\n  return errCode(err, 'ERR_NOT_FOUND')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function abortedError (err) {\n  err = err || new Error('Aborted')\n  return errCode(err, 'ERR_ABORTED')\n}\n","import _get from 'just-safe-get'\nimport debug from 'debug'\nimport errCode from 'err-code'\nimport * as migrator from 'ipfs-repo-migrations'\nimport bytes from 'bytes'\nimport merge from 'merge-options'\nimport * as CONSTANTS from './constants.js'\nimport { version } from './version.js'\nimport { config } from './config.js'\nimport { spec } from './spec.js'\nimport { apiAddr } from './api-addr.js'\nimport { createIdStore } from './idstore.js'\nimport defaultOptions from './default-options.js'\nimport defaultDatastore from './default-datastore.js'\nimport * as ERRORS from './errors.js'\nimport { PinManager } from './pin-manager.js'\nimport { createPinnedBlockstore } from './pinned-blockstore.js'\n// @ts-ignore - no types\nimport mortice from 'mortice'\nimport { gc } from './gc.js'\n\nconst log = debug('ipfs:repo')\n\nconst noLimit = Number.MAX_SAFE_INTEGER\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate'\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor (path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path')\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader')\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options)\n    this.closed = true\n    this.path = path\n    this.root = backends.root\n    this.datastore = backends.datastore\n    this.keys = backends.keys\n\n    const blockstore = backends.blocks\n    const pinstore = backends.pins\n\n    this.pins = new PinManager({ pinstore, blockstore, loadCodec })\n\n    // this blockstore will not delete blocks that have been pinned\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore)\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdStore(pinnedBlockstore)\n\n    this.version = version(this.root)\n    this.config = config(this.root)\n    this.spec = spec(this.root)\n    this.apiAddr = apiAddr(this.root)\n\n    /** @type {GCLock} */\n    this.gcLock = mortice({\n      name: path,\n      singleProcess: this.options.repoOwner !== false\n    })\n\n    this.gc = gc({ gcLock: this.gcLock, pins: this.pins, blockstore: this.blocks, root: this.root, loadCodec })\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  async init (config) {\n    log('initializing at: %s', this.path)\n    await this._openRoot()\n    await this.config.replace(buildConfig(config))\n    await this.spec.set(buildDatastoreSpec(config))\n    await this.version.set(CONSTANTS.repoVersion)\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n  async isInitialized () {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot()\n      await this._checkInitialized()\n      await this.root.close()\n\n      return true\n    } catch (/** @type {any} */ err) {\n      // FIXME: do not use exceptions for flow control\n      return false\n    }\n  }\n\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n  async open () {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)\n    }\n    log('opening at: %s', this.path)\n\n    // check if the repo is already initialized\n    try {\n      await this._openRoot()\n      await this._checkInitialized()\n\n      this._lockfile = await this._openLock()\n      log('acquired repo.lock')\n\n      const isCompatible = await this.version.check(CONSTANTS.repoVersion)\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(CONSTANTS.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          })\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.')\n        }\n      }\n\n      log('creating datastore')\n      await this.datastore.open()\n\n      log('creating blocks')\n      await this.blocks.open()\n\n      log('creating keystore')\n      await this.keys.open()\n\n      log('creating pins')\n      await this.pins.pinstore.open()\n\n      this.closed = false\n      log('all opened')\n    } catch (/** @type {any} */ err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock()\n          this._lockfile = null\n        } catch (/** @type {any} */ err2) {\n          log('error removing lock', err2)\n        }\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n  async _openRoot () {\n    try {\n      await this.root.open()\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Already open') {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n  async _openLock () {\n    const lockfile = await this.options.repoLock.lock(this.path)\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION')\n    }\n\n    return lockfile\n  }\n\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n  _closeLock () {\n    return this._lockfile && this._lockfile.close()\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n  async _checkInitialized () {\n    log('init check')\n    let config\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ])\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        })\n      }\n\n      throw err\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      })\n    }\n  }\n\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)\n    }\n    log('closing at: %s', this.path)\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete()\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err\n      }\n    }\n\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map((store) => store && store.close()))\n\n    log('unlocking')\n    this.closed = true\n    await this._closeLock()\n  }\n\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n  exists () {\n    return this.version.exists()\n  }\n\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n  async stat () {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ])\n      const size = blocks.size + datastore + keys\n\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      }\n    }\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    })\n  }\n\n  /**\n   * @private\n   */\n  async _isAutoMigrationEnabled () {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate\n    }\n\n    // TODO we need to figure out the priority here, between repo options and config.\n    let autoMigrateConfig\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY)\n    } catch (/** @type {any} */ e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true // Config's default value is True\n      } else {\n        throw e\n      }\n    }\n\n    return autoMigrateConfig\n  }\n\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n  async _migrate (toVersion, backends) {\n    const currentRepoVersion = await this.version.get()\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`)\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    } else {\n      log(`migrating to version ${toVersion}`)\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _storageMaxStat () {\n    try {\n      const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))\n      return BigInt(bytes(max))\n    } catch (/** @type {any} */ err) {\n      return BigInt(noLimit)\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _blockStat () {\n    let count = BigInt(0)\n    let size = BigInt(0)\n\n    if (this.blocks) {\n      for await (const { key, value } of this.blocks.query({})) {\n        count += BigInt(1)\n        size += BigInt(value.byteLength)\n        size += BigInt(key.bytes.byteLength)\n      }\n    }\n\n    return { count, size }\n  }\n}\n\n/**\n * @param {Datastore} datastore\n */\nasync function getSize (datastore) {\n  let sum = BigInt(0)\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength)\n    sum += BigInt(block.key.uint8Array().byteLength)\n  }\n  return sum\n}\n\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nexport function createRepo (path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options)\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig (_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))\n\n  return _config\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec (_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  }\n\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map((mounting) => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  }\n}\n","import { createRepo as create } from 'ipfs-repo'\nimport { LevelDatastore } from 'datastore-level'\nimport { BlockstoreDatastoreAdapter } from 'blockstore-datastore-adapter'\nimport { MemoryLock } from 'ipfs-repo/locks/memory'\n\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {(...args: any[]) => void} print\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n * @param {number} [options.peerStoreCacheSize]\n */\nexport function createRepo (print, codecs, options) {\n  const repoPath = options.path || 'ipfs'\n\n  return create(repoPath, (codeOrName) => codecs.getCodec(codeOrName), {\n    root: new LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(\n      new LevelDatastore(`${repoPath}/blocks`, {\n        prefix: '',\n        version: 2\n      })\n    ),\n    datastore: new LevelDatastore(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new LevelDatastore(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new LevelDatastore(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: MemoryLock\n  })\n}\n","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","export class MessageCache {\n    /**\n     * Holds history of messages in timebounded history arrays\n     */\n    constructor(\n    /**\n     * The number of indices in the cache history used for gossiping. That means that a message\n     * won't get gossiped anymore when shift got called `gossip` many times after inserting the\n     * message in the cache.\n     */\n    gossip, historyCapacity, msgIdToStrFn) {\n        this.gossip = gossip;\n        this.msgs = new Map();\n        this.history = [];\n        /** Track with accounting of messages in the mcache that are not yet validated */\n        this.notValidatedCount = 0;\n        this.msgIdToStrFn = msgIdToStrFn;\n        for (let i = 0; i < historyCapacity; i++) {\n            this.history[i] = [];\n        }\n    }\n    get size() {\n        return this.msgs.size;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     * Returns true if the message is not known and is inserted in the cache\n     */\n    put(messageId, msg, validated = false) {\n        const { msgIdStr } = messageId;\n        // Don't add duplicate entries to the cache.\n        if (this.msgs.has(msgIdStr)) {\n            return false;\n        }\n        this.msgs.set(msgIdStr, {\n            message: msg,\n            validated,\n            originatingPeers: new Set(),\n            iwantCounts: new Map()\n        });\n        this.history[0].push({ ...messageId, topic: msg.topic });\n        if (!validated) {\n            this.notValidatedCount++;\n        }\n        return true;\n    }\n    observeDuplicate(msgId, fromPeerIdStr) {\n        const entry = this.msgs.get(msgId);\n        if (entry &&\n            // if the message is already validated, we don't need to store extra peers sending us\n            // duplicates as the message has already been forwarded\n            !entry.validated) {\n            entry.originatingPeers.add(fromPeerIdStr);\n        }\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     */\n    get(msgId) {\n        return this.msgs.get(this.msgIdToStrFn(msgId))?.message;\n    }\n    /**\n     * Increases the iwant count for the given message by one and returns the message together\n     * with the iwant if the message exists.\n     */\n    getWithIWantCount(msgIdStr, p) {\n        const msg = this.msgs.get(msgIdStr);\n        if (!msg) {\n            return null;\n        }\n        const count = (msg.iwantCounts.get(p) ?? 0) + 1;\n        msg.iwantCounts.set(p, count);\n        return { msg: msg.message, count };\n    }\n    /**\n     * Retrieves a list of message IDs for a set of topics\n     */\n    getGossipIDs(topics) {\n        const msgIdsByTopic = new Map();\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                const msg = this.msgs.get(entry.msgIdStr);\n                if (msg && msg.validated && topics.has(entry.topic)) {\n                    let msgIds = msgIdsByTopic.get(entry.topic);\n                    if (!msgIds) {\n                        msgIds = [];\n                        msgIdsByTopic.set(entry.topic, msgIds);\n                    }\n                    msgIds.push(entry.msgId);\n                }\n            });\n        }\n        return msgIdsByTopic;\n    }\n    /**\n     * Gets a message with msgId and tags it as validated.\n     * This function also returns the known peers that have sent us this message. This is used to\n     * prevent us sending redundant messages to peers who have already propagated it.\n     */\n    validate(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (!entry) {\n            return null;\n        }\n        if (!entry.validated) {\n            this.notValidatedCount--;\n        }\n        const { message, originatingPeers } = entry;\n        entry.validated = true;\n        // Clear the known peers list (after a message is validated, it is forwarded and we no\n        // longer need to store the originating peers).\n        entry.originatingPeers = new Set();\n        return { message, originatingPeers };\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     */\n    shift() {\n        const lastCacheEntries = this.history[this.history.length - 1];\n        lastCacheEntries.forEach((cacheEntry) => {\n            const entry = this.msgs.get(cacheEntry.msgIdStr);\n            if (entry) {\n                this.msgs.delete(cacheEntry.msgIdStr);\n                if (!entry.validated) {\n                    this.notValidatedCount--;\n                }\n            }\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n    remove(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (!entry) {\n            return null;\n        }\n        // Keep the message on the history vector, it will be dropped on a shift()\n        this.msgs.delete(msgId);\n        return entry;\n    }\n}\n//# sourceMappingURL=message-cache.js.map","import cjs from \"./rpc.cjs\"\n\nexport const {RPC} = cjs\n","export const second = 1000;\nexport const minute = 60 * second;\n// Protocol identifiers\nexport const FloodsubID = '/floodsub/1.0.0';\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */\nexport const GossipsubIDv10 = '/meshsub/1.0.0';\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */\nexport const GossipsubIDv11 = '/meshsub/1.1.0';\n// Overlay parameters\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */\nexport const GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */\nexport const GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */\nexport const GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */\nexport const GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */\nexport const GossipsubDout = 2;\n// Gossip parameters\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */\nexport const GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */\nexport const GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */\nexport const GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */\nexport const GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */\nexport const GossipsubGossipRetransmission = 3;\n// Heartbeat interval\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */\nexport const GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */\nexport const GossipsubHeartbeatInterval = second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */\nexport const GossipsubFanoutTTL = minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */\nexport const GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */\nexport const GossipsubPruneBackoff = minute;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */\nexport const GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */\nexport const GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */\nexport const GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */\nexport const GossipsubConnectionTimeout = 30 * second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */\nexport const GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */\nexport const GossipsubDirectConnectInitialDelay = second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */\nexport const GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */\nexport const GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */\nexport const GossipsubGraftFloodThreshold = 10 * second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */\nexport const GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */\nexport const GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */\nexport const GossipsubIWantFollowupTime = 3 * second;\n/**\n * Time in milliseconds to keep message ids in the seen cache\n */\nexport const GossipsubSeenTTL = 2 * minute;\nexport const TimeCacheDuration = 120 * 1000;\nexport const ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';\nexport const ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';\n/**\n * If peer score is better than this, we accept messages from this peer\n * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.\n **/\nexport const ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this\n * number of messages from that peer.\n */\nexport const ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from\n * this peer up to this time duration.\n */\nexport const ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;\n/**\n * The default MeshMessageDeliveriesWindow to be used in metrics.\n */\nexport const DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS = 1000;\n//# sourceMappingURL=constants.js.map","/**\n * Pseudo-randomly shuffles an array\n *\n * Mutates the input array\n */\nexport function shuffle(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const randInt = () => {\n        return Math.floor(Math.random() * Math.floor(arr.length));\n    };\n    for (let i = 0; i < arr.length; i++) {\n        const j = randInt();\n        const tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    return arr;\n}\n//# sourceMappingURL=shuffle.js.map","import { toString } from 'uint8arrays/to-string';\n/**\n * Browser friendly function to convert Uint8Array message id to base64 string.\n */\nexport function messageIdToString(msgId) {\n    return toString(msgId, 'base64');\n}\n//# sourceMappingURL=messageIdToString.js.map","import { TopicValidatorResult } from '@libp2p/interface-pubsub';\nexport var SignaturePolicy;\n(function (SignaturePolicy) {\n    /**\n     * On the producing side:\n     * - Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be present, reject otherwise.\n     * - Propagate only if the fields are valid and signature can be verified, reject otherwise.\n     */\n    SignaturePolicy[\"StrictSign\"] = \"StrictSign\";\n    /**\n     * On the producing side:\n     * - Build messages without the signature, key, from and seqno fields.\n     * - The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be absent, reject otherwise.\n     * - Propagate only if the fields are absent, reject otherwise.\n     * - A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n     */\n    SignaturePolicy[\"StrictNoSign\"] = \"StrictNoSign\";\n})(SignaturePolicy || (SignaturePolicy = {}));\nexport var PublishConfigType;\n(function (PublishConfigType) {\n    PublishConfigType[PublishConfigType[\"Signing\"] = 0] = \"Signing\";\n    PublishConfigType[PublishConfigType[\"Anonymous\"] = 1] = \"Anonymous\";\n})(PublishConfigType || (PublishConfigType = {}));\nexport var RejectReason;\n(function (RejectReason) {\n    /**\n     * The message failed the configured validation during decoding.\n     * SelfOrigin is considered a ValidationError\n     */\n    RejectReason[\"Error\"] = \"error\";\n    /**\n     * Custom validator fn reported status IGNORE.\n     */\n    RejectReason[\"Ignore\"] = \"ignore\";\n    /**\n     * Custom validator fn reported status REJECT.\n     */\n    RejectReason[\"Reject\"] = \"reject\";\n    /**\n     * The peer that sent the message OR the source from field is blacklisted.\n     * Causes messages to be ignored, not penalized, neither do score record creation.\n     */\n    RejectReason[\"Blacklisted\"] = \"blacklisted\";\n})(RejectReason || (RejectReason = {}));\nexport var ValidateError;\n(function (ValidateError) {\n    /// The message has an invalid signature,\n    ValidateError[\"InvalidSignature\"] = \"invalid_signature\";\n    /// The sequence number was the incorrect size\n    ValidateError[\"InvalidSeqno\"] = \"invalid_seqno\";\n    /// The PeerId was invalid\n    ValidateError[\"InvalidPeerId\"] = \"invalid_peerid\";\n    /// Signature existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SignaturePresent\"] = \"signature_present\";\n    /// Sequence number existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SeqnoPresent\"] = \"seqno_present\";\n    /// Message source existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"FromPresent\"] = \"from_present\";\n    /// The data transformation failed.\n    ValidateError[\"TransformFailed\"] = \"transform_failed\";\n})(ValidateError || (ValidateError = {}));\nexport var MessageStatus;\n(function (MessageStatus) {\n    MessageStatus[\"duplicate\"] = \"duplicate\";\n    MessageStatus[\"invalid\"] = \"invalid\";\n    MessageStatus[\"valid\"] = \"valid\";\n})(MessageStatus || (MessageStatus = {}));\n/**\n * Typesafe conversion of MessageAcceptance -> RejectReason. TS ensures all values covered\n */\nexport function rejectReasonFromAcceptance(acceptance) {\n    switch (acceptance) {\n        case TopicValidatorResult.Ignore:\n            return RejectReason.Ignore;\n        case TopicValidatorResult.Reject:\n            return RejectReason.Reject;\n    }\n}\n//# sourceMappingURL=types.js.map","export const ERR_INVALID_PEER_SCORE_PARAMS = 'ERR_INVALID_PEER_SCORE_PARAMS';\nexport const ERR_INVALID_PEER_SCORE_THRESHOLDS = 'ERR_INVALID_PEER_SCORE_THRESHOLDS';\n//# sourceMappingURL=constants.js.map","import { ERR_INVALID_PEER_SCORE_PARAMS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreParams = {\n    topics: {},\n    topicScoreCap: 10.0,\n    appSpecificScore: () => 0.0,\n    appSpecificWeight: 10.0,\n    IPColocationFactorWeight: -5.0,\n    IPColocationFactorThreshold: 10.0,\n    IPColocationFactorWhitelist: new Set(),\n    behaviourPenaltyWeight: -10.0,\n    behaviourPenaltyThreshold: 0.0,\n    behaviourPenaltyDecay: 0.2,\n    decayInterval: 1000.0,\n    decayToZero: 0.1,\n    retainScore: 3600 * 1000\n};\nexport const defaultTopicScoreParams = {\n    topicWeight: 0.5,\n    timeInMeshWeight: 1,\n    timeInMeshQuantum: 1,\n    timeInMeshCap: 3600,\n    firstMessageDeliveriesWeight: 1,\n    firstMessageDeliveriesDecay: 0.5,\n    firstMessageDeliveriesCap: 2000,\n    meshMessageDeliveriesWeight: -1,\n    meshMessageDeliveriesDecay: 0.5,\n    meshMessageDeliveriesCap: 100,\n    meshMessageDeliveriesThreshold: 20,\n    meshMessageDeliveriesWindow: 10,\n    meshMessageDeliveriesActivation: 5000,\n    meshFailurePenaltyWeight: -1,\n    meshFailurePenaltyDecay: 0.5,\n    invalidMessageDeliveriesWeight: -1,\n    invalidMessageDeliveriesDecay: 0.3\n};\nexport function createPeerScoreParams(p = {}) {\n    return {\n        ...defaultPeerScoreParams,\n        ...p,\n        topics: p.topics\n            ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams]) => {\n                topics[topic] = createTopicScoreParams(topicScoreParams);\n                return topics;\n            }, {})\n            : {}\n    };\n}\nexport function createTopicScoreParams(p = {}) {\n    return {\n        ...defaultTopicScoreParams,\n        ...p\n    };\n}\n// peer score parameter validation\nexport function validatePeerScoreParams(p) {\n    for (const [topic, params] of Object.entries(p.topics)) {\n        try {\n            validateTopicScoreParams(params);\n        }\n        catch (e) {\n            throw new CodeError(`invalid score parameters for topic ${topic}: ${e.message}`, ERR_INVALID_PEER_SCORE_PARAMS);\n        }\n    }\n    // check that the topic score is 0 or something positive\n    if (p.topicScoreCap < 0) {\n        throw new CodeError('invalid topic score cap; must be positive (or 0 for no cap)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check that we have an app specific score; the weight can be anything (but expected positive)\n    if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n        throw new CodeError('missing application specific score function', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the IP colocation factor\n    if (p.IPColocationFactorWeight > 0) {\n        throw new CodeError('invalid IPColocationFactorWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n        throw new CodeError('invalid IPColocationFactorThreshold; must be at least 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the behaviour penalty\n    if (p.behaviourPenaltyWeight > 0) {\n        throw new CodeError('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n        throw new CodeError('invalid BehaviourPenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the decay parameters\n    if (p.decayInterval < 1000) {\n        throw new CodeError('invalid DecayInterval; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n        throw new CodeError('invalid DecayToZero; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // no need to check the score retention; a value of 0 means that we don't retain scores\n}\nexport function validateTopicScoreParams(p) {\n    // make sure we have a sane topic weight\n    if (p.topicWeight < 0) {\n        throw new CodeError('invalid topic weight; must be >= 0', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P1\n    if (p.timeInMeshQuantum === 0) {\n        throw new CodeError('invalid TimeInMeshQuantum; must be non zero', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight < 0) {\n        throw new CodeError('invalid TimeInMeshWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n        throw new CodeError('invalid TimeInMeshQuantum; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n        throw new CodeError('invalid TimeInMeshCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P2\n    if (p.firstMessageDeliveriesWeight < 0) {\n        throw new CodeError('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 &&\n        (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {\n        throw new CodeError('invalid FirstMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n        throw new CodeError('invalid FirstMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3\n    if (p.meshMessageDeliveriesWeight > 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n        throw new CodeError('invalid MeshMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesThreshold; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWindow < 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesWindow; must be non-negative', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n        throw new CodeError('invalid MeshMessageDeliveriesActivation; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3b\n    if (p.meshFailurePenaltyWeight > 0) {\n        throw new CodeError('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n        throw new CodeError('invalid MeshFailurePenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P4\n    if (p.invalidMessageDeliveriesWeight > 0) {\n        throw new CodeError('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n        throw new CodeError('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n}\n//# sourceMappingURL=peer-score-params.js.map","import { ERR_INVALID_PEER_SCORE_THRESHOLDS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreThresholds = {\n    gossipThreshold: -10,\n    publishThreshold: -50,\n    graylistThreshold: -80,\n    acceptPXThreshold: 10,\n    opportunisticGraftThreshold: 20\n};\nexport function createPeerScoreThresholds(p = {}) {\n    return {\n        ...defaultPeerScoreThresholds,\n        ...p\n    };\n}\nexport function validatePeerScoreThresholds(p) {\n    if (p.gossipThreshold > 0) {\n        throw new CodeError('invalid gossip threshold; it must be <= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {\n        throw new CodeError('invalid publish threshold; it must be <= 0 and <= gossip threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {\n        throw new CodeError('invalid graylist threshold; it must be <= 0 and <= publish threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.acceptPXThreshold < 0) {\n        throw new CodeError('invalid accept PX threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.opportunisticGraftThreshold < 0) {\n        throw new CodeError('invalid opportunistic grafting threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n}\n//# sourceMappingURL=peer-score-thresholds.js.map","export function computeScore(peer, pstats, params, peerIPs) {\n    let score = 0;\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n        // the topic parameters\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScore = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;\n            if (p1 > topicParams.timeInMeshCap) {\n                p1 = topicParams.timeInMeshCap;\n            }\n            topicScore += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        topicScore += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive &&\n            tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            topicScore += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        topicScore += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += topicScore * topicParams.topicWeight;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n    }\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    score += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip) => {\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            score += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    if (pstats.behaviourPenalty > params.behaviourPenaltyThreshold) {\n        const excess = pstats.behaviourPenalty - params.behaviourPenaltyThreshold;\n        const p7 = excess * excess;\n        score += p7 * params.behaviourPenaltyWeight;\n    }\n    return score;\n}\n//# sourceMappingURL=compute-score.js.map","import { TimeCacheDuration } from '../constants.js';\nimport Denque from 'denque';\nexport var DeliveryRecordStatus;\n(function (DeliveryRecordStatus) {\n    /**\n     * we don't know (yet) if the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * we know the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n    /**\n     * we know the message is invalid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n    /**\n     * we were instructed by the validator to ignore the message\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus || (DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\nexport class MessageDeliveries {\n    constructor() {\n        this.records = new Map();\n        this.queue = new Denque();\n    }\n    ensureRecord(msgIdStr) {\n        let drec = this.records.get(msgIdStr);\n        if (drec) {\n            return drec;\n        }\n        // record doesn't exist yet\n        // create record\n        drec = {\n            status: DeliveryRecordStatus.unknown,\n            firstSeen: Date.now(),\n            validated: 0,\n            peers: new Set()\n        };\n        this.records.set(msgIdStr, drec);\n        // and add msgId to the queue\n        const entry = {\n            msgId: msgIdStr,\n            expire: Date.now() + TimeCacheDuration\n        };\n        this.queue.push(entry);\n        return drec;\n    }\n    gc() {\n        const now = Date.now();\n        // queue is sorted by expiry time\n        // remove expired messages, remove from queue until first un-expired message found\n        let head = this.queue.peekFront();\n        while (head && head.expire < now) {\n            this.records.delete(head.msgId);\n            this.queue.shift();\n            head = this.queue.peekFront();\n        }\n    }\n    clear() {\n        this.records.clear();\n        this.queue.clear();\n    }\n}\n//# sourceMappingURL=message-deliveries.js.map","/**\n * Exclude up to `ineed` items from a set if item meets condition `cond`\n */\nexport function removeItemsFromSet(superSet, ineed, cond = () => true) {\n    const subset = new Set();\n    if (ineed <= 0)\n        return subset;\n    for (const id of superSet) {\n        if (subset.size >= ineed)\n            break;\n        if (cond(id)) {\n            subset.add(id);\n            superSet.delete(id);\n        }\n    }\n    return subset;\n}\n/**\n * Exclude up to `ineed` items from a set\n */\nexport function removeFirstNItemsFromSet(superSet, ineed) {\n    return removeItemsFromSet(superSet, ineed, () => true);\n}\nexport class MapDef extends Map {\n    constructor(getDefault) {\n        super();\n        this.getDefault = getDefault;\n    }\n    getOrDefault(key) {\n        let value = super.get(key);\n        if (value === undefined) {\n            value = this.getDefault();\n            this.set(key, value);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=set.js.map","import { validatePeerScoreParams } from './peer-score-params.js';\nimport { computeScore } from './compute-score.js';\nimport { MessageDeliveries, DeliveryRecordStatus } from './message-deliveries.js';\nimport { logger } from '@libp2p/logger';\nimport { RejectReason } from '../types.js';\nimport { MapDef } from '../utils/set.js';\nconst log = logger('libp2p:gossipsub:score');\nexport class PeerScore {\n    constructor(params, metrics, opts) {\n        this.params = params;\n        this.metrics = metrics;\n        /**\n         * Per-peer stats for score calculation\n         */\n        this.peerStats = new Map();\n        /**\n         * IP colocation tracking; maps IP => set of peers.\n         */\n        this.peerIPs = new MapDef(() => new Set());\n        /**\n         * Cache score up to decayInterval if topic stats are unchanged.\n         */\n        this.scoreCache = new Map();\n        /**\n         * Recent message delivery timing/participants\n         */\n        this.deliveryRecords = new MessageDeliveries();\n        validatePeerScoreParams(params);\n        this.scoreCacheValidityMs = opts.scoreCacheValidityMs;\n        this.computeScore = opts.computeScore ?? computeScore;\n    }\n    get size() {\n        return this.peerStats.size;\n    }\n    /**\n     * Start PeerScore instance\n     */\n    start() {\n        if (this._backgroundInterval) {\n            log('Peer score already running');\n            return;\n        }\n        this._backgroundInterval = setInterval(() => this.background(), this.params.decayInterval);\n        log('started');\n    }\n    /**\n     * Stop PeerScore instance\n     */\n    stop() {\n        if (!this._backgroundInterval) {\n            log('Peer score already stopped');\n            return;\n        }\n        clearInterval(this._backgroundInterval);\n        delete this._backgroundInterval;\n        this.peerIPs.clear();\n        this.peerStats.clear();\n        this.deliveryRecords.clear();\n        log('stopped');\n    }\n    /**\n     * Periodic maintenance\n     */\n    background() {\n        this.refreshScores();\n        this.deliveryRecords.gc();\n    }\n    dumpPeerScoreStats() {\n        return Object.fromEntries(Array.from(this.peerStats.entries()).map(([peer, stats]) => [peer, stats]));\n    }\n    /**\n     * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.\n     */\n    refreshScores() {\n        const now = Date.now();\n        const decayToZero = this.params.decayToZero;\n        this.peerStats.forEach((pstats, id) => {\n            if (!pstats.connected) {\n                // has the retention period expired?\n                if (now > pstats.expire) {\n                    // yes, throw it away (but clean up the IP tracking first)\n                    this.removeIPsForPeer(id, pstats.knownIPs);\n                    this.peerStats.delete(id);\n                    this.scoreCache.delete(id);\n                }\n                // we don't decay retained scores, as the peer is not active.\n                // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,\n                // unless the retention period has elapsed.\n                // similarly, a well behaved peer does not lose its score by getting disconnected.\n                return;\n            }\n            Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n                const tparams = this.params.topics[topic];\n                if (tparams === undefined) {\n                    // we are not scoring this topic\n                    // should be unreachable, we only add scored topics to pstats\n                    return;\n                }\n                // decay counters\n                tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;\n                if (tstats.firstMessageDeliveries < decayToZero) {\n                    tstats.firstMessageDeliveries = 0;\n                }\n                tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;\n                if (tstats.meshMessageDeliveries < decayToZero) {\n                    tstats.meshMessageDeliveries = 0;\n                }\n                tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;\n                if (tstats.meshFailurePenalty < decayToZero) {\n                    tstats.meshFailurePenalty = 0;\n                }\n                tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;\n                if (tstats.invalidMessageDeliveries < decayToZero) {\n                    tstats.invalidMessageDeliveries = 0;\n                }\n                // update mesh time and activate mesh message delivery parameter if need be\n                if (tstats.inMesh) {\n                    tstats.meshTime = now - tstats.graftTime;\n                    if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {\n                        tstats.meshMessageDeliveriesActive = true;\n                    }\n                }\n            });\n            // decay P7 counter\n            pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;\n            if (pstats.behaviourPenalty < decayToZero) {\n                pstats.behaviourPenalty = 0;\n            }\n        });\n    }\n    /**\n     * Return the score for a peer\n     */\n    score(id) {\n        this.metrics?.scoreFnCalls.inc();\n        const pstats = this.peerStats.get(id);\n        if (!pstats) {\n            return 0;\n        }\n        const now = Date.now();\n        const cacheEntry = this.scoreCache.get(id);\n        // Found cached score within validity period\n        if (cacheEntry && cacheEntry.cacheUntil > now) {\n            return cacheEntry.score;\n        }\n        this.metrics?.scoreFnRuns.inc();\n        const score = this.computeScore(id, pstats, this.params, this.peerIPs);\n        const cacheUntil = now + this.scoreCacheValidityMs;\n        if (cacheEntry) {\n            this.metrics?.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));\n            cacheEntry.score = score;\n            cacheEntry.cacheUntil = cacheUntil;\n        }\n        else {\n            this.scoreCache.set(id, { score, cacheUntil });\n        }\n        return score;\n    }\n    /**\n     * Apply a behavioural penalty to a peer\n     */\n    addPenalty(id, penalty, penaltyLabel) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.behaviourPenalty += penalty;\n            this.metrics?.onScorePenalty(penaltyLabel);\n        }\n    }\n    addPeer(id) {\n        // create peer stats (not including topic stats for each topic to be scored)\n        // topic stats will be added as needed\n        const pstats = {\n            connected: true,\n            expire: 0,\n            topics: {},\n            knownIPs: new Set(),\n            behaviourPenalty: 0\n        };\n        this.peerStats.set(id, pstats);\n    }\n    /** Adds a new IP to a peer, if the peer is not known the update is ignored */\n    addIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.knownIPs.add(ip);\n        }\n        this.peerIPs.getOrDefault(ip).add(id);\n    }\n    /** Remove peer association with IP */\n    removeIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.knownIPs.delete(ip);\n        }\n        const peersWithIP = this.peerIPs.get(ip);\n        if (peersWithIP) {\n            peersWithIP.delete(id);\n            if (peersWithIP.size === 0) {\n                this.peerIPs.delete(ip);\n            }\n        }\n    }\n    removePeer(id) {\n        const pstats = this.peerStats.get(id);\n        if (!pstats) {\n            return;\n        }\n        // decide whether to retain the score; this currently only retains non-positive scores\n        // to dissuade attacks on the score function.\n        if (this.score(id) > 0) {\n            this.removeIPsForPeer(id, pstats.knownIPs);\n            this.peerStats.delete(id);\n            return;\n        }\n        // furthermore, when we decide to retain the score, the firstMessageDelivery counters are\n        // reset to 0 and mesh delivery penalties applied.\n        Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n            tstats.firstMessageDeliveries = 0;\n            const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n            if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                const deficit = threshold - tstats.meshMessageDeliveries;\n                tstats.meshFailurePenalty += deficit * deficit;\n            }\n            tstats.inMesh = false;\n            tstats.meshMessageDeliveriesActive = false;\n        });\n        pstats.connected = false;\n        pstats.expire = Date.now() + this.params.retainScore;\n    }\n    /** Handles scoring functionality as a peer GRAFTs to a topic. */\n    graft(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                // if we are scoring the topic, update the mesh status.\n                tstats.inMesh = true;\n                tstats.graftTime = Date.now();\n                tstats.meshTime = 0;\n                tstats.meshMessageDeliveriesActive = false;\n            }\n        }\n    }\n    /** Handles scoring functionality as a peer PRUNEs from a topic. */\n    prune(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                // sticky mesh delivery rate failure penalty\n                const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n                if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                    const deficit = threshold - tstats.meshMessageDeliveries;\n                    tstats.meshFailurePenalty += deficit * deficit;\n                }\n                tstats.meshMessageDeliveriesActive = false;\n                tstats.inMesh = false;\n                // TODO: Consider clearing score cache on important penalties\n                // this.scoreCache.delete(id)\n            }\n        }\n    }\n    validateMessage(msgIdStr) {\n        this.deliveryRecords.ensureRecord(msgIdStr);\n    }\n    deliverMessage(from, msgIdStr, topic) {\n        this.markFirstMessageDelivery(from, topic);\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        const now = Date.now();\n        // defensive check that this is the first delivery trace -- delivery status should be unknown\n        if (drec.status !== DeliveryRecordStatus.unknown) {\n            log('unexpected delivery: message from %s was first seen %s ago and has delivery status %s', from, now - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        // mark the message as valid and reward mesh peers that have already forwarded it to us\n        drec.status = DeliveryRecordStatus.valid;\n        drec.validated = now;\n        drec.peers.forEach((p) => {\n            // this check is to make sure a peer can't send us a message twice and get a double count\n            // if it is a first delivery.\n            if (p !== from.toString()) {\n                this.markDuplicateMessageDelivery(p, topic);\n            }\n        });\n    }\n    /**\n     * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.\n     */\n    rejectInvalidMessage(from, topic) {\n        this.markInvalidMessageDelivery(from, topic);\n    }\n    rejectMessage(from, msgIdStr, topic, reason) {\n        switch (reason) {\n            // these messages are not tracked, but the peer is penalized as they are invalid\n            case RejectReason.Error:\n                this.markInvalidMessageDelivery(from, topic);\n                return;\n            // we ignore those messages, so do nothing.\n            case RejectReason.Blacklisted:\n                return;\n            // the rest are handled after record creation\n        }\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        // defensive check that this is the first rejection -- delivery status should be unknown\n        if (drec.status !== DeliveryRecordStatus.unknown) {\n            log('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', from, Date.now() - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        if (reason === RejectReason.Ignore) {\n            // we were explicitly instructed by the validator to ignore the message but not penalize the peer\n            drec.status = DeliveryRecordStatus.ignored;\n            drec.peers.clear();\n            return;\n        }\n        // mark the message as invalid and penalize peers that have already forwarded it.\n        drec.status = DeliveryRecordStatus.invalid;\n        this.markInvalidMessageDelivery(from, topic);\n        drec.peers.forEach((p) => {\n            this.markInvalidMessageDelivery(p, topic);\n        });\n        // release the delivery time tracking map to free some memory early\n        drec.peers.clear();\n    }\n    duplicateMessage(from, msgIdStr, topic) {\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        if (drec.peers.has(from)) {\n            // we have already seen this duplicate\n            return;\n        }\n        switch (drec.status) {\n            case DeliveryRecordStatus.unknown:\n                // the message is being validated; track the peer delivery and wait for\n                // the Deliver/Reject/Ignore notification.\n                drec.peers.add(from);\n                break;\n            case DeliveryRecordStatus.valid:\n                // mark the peer delivery time to only count a duplicate delivery once.\n                drec.peers.add(from);\n                this.markDuplicateMessageDelivery(from, topic, drec.validated);\n                break;\n            case DeliveryRecordStatus.invalid:\n                // we no longer track delivery time\n                this.markInvalidMessageDelivery(from, topic);\n                break;\n            case DeliveryRecordStatus.ignored:\n                // the message was ignored; do nothing (we don't know if it was valid)\n                break;\n        }\n    }\n    /**\n     * Increments the \"invalid message deliveries\" counter for all scored topics the message is published in.\n     */\n    markInvalidMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                tstats.invalidMessageDeliveries += 1;\n            }\n        }\n    }\n    /**\n     * Increments the \"first message deliveries\" counter for all scored topics the message is published in,\n     * as well as the \"mesh message deliveries\" counter, if the peer is in the mesh for the topic.\n     * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()\n     */\n    markFirstMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                let cap = this.params.topics[topic].firstMessageDeliveriesCap;\n                tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);\n                if (tstats.inMesh) {\n                    cap = this.params.topics[topic].meshMessageDeliveriesCap;\n                    tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n                }\n            }\n        }\n    }\n    /**\n     * Increments the \"mesh message deliveries\" counter for messages we've seen before,\n     * as long the message was received within the P3 window.\n     */\n    markDuplicateMessageDelivery(from, topic, validatedTime) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const now = validatedTime !== undefined ? Date.now() : 0;\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats && tstats.inMesh) {\n                const tparams = this.params.topics[topic];\n                // check against the mesh delivery window -- if the validated time is passed as 0, then\n                // the message was received before we finished validation and thus falls within the mesh\n                // delivery window.\n                if (validatedTime !== undefined) {\n                    const deliveryDelayMs = now - validatedTime;\n                    const isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;\n                    this.metrics?.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);\n                    if (isLateDelivery) {\n                        return;\n                    }\n                }\n                const cap = tparams.meshMessageDeliveriesCap;\n                tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n            }\n        }\n    }\n    /**\n     * Removes an IP list from the tracking list for a peer.\n     */\n    removeIPsForPeer(id, ipsToRemove) {\n        for (const ipToRemove of ipsToRemove) {\n            const peerSet = this.peerIPs.get(ipToRemove);\n            if (peerSet) {\n                peerSet.delete(id);\n                if (peerSet.size === 0) {\n                    this.peerIPs.delete(ipToRemove);\n                }\n            }\n        }\n    }\n    /**\n     * Returns topic stats if they exist, otherwise if the supplied parameters score the\n     * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.\n     */\n    getPtopicStats(pstats, topic) {\n        let topicStats = pstats.topics[topic];\n        if (topicStats !== undefined) {\n            return topicStats;\n        }\n        if (this.params.topics[topic] !== undefined) {\n            topicStats = {\n                inMesh: false,\n                graftTime: 0,\n                meshTime: 0,\n                firstMessageDeliveries: 0,\n                meshMessageDeliveries: 0,\n                meshMessageDeliveriesActive: false,\n                meshFailurePenalty: 0,\n                invalidMessageDeliveries: 0\n            };\n            pstats.topics[topic] = topicStats;\n            return topicStats;\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=peer-score.js.map","import { RejectReason } from './types.js';\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\nexport class IWantTracer {\n    constructor(gossipsubIWantFollowupMs, msgIdToStrFn, metrics) {\n        this.gossipsubIWantFollowupMs = gossipsubIWantFollowupMs;\n        this.msgIdToStrFn = msgIdToStrFn;\n        this.metrics = metrics;\n        /**\n         * Promises to deliver a message\n         * Map per message id, per peer, promise expiration time\n         */\n        this.promises = new Map();\n        /**\n         * First request time by msgId. Used for metrics to track expire times.\n         * Necessary to know if peers are actually breaking promises or simply sending them a bit later\n         */\n        this.requestMsByMsg = new Map();\n        this.requestMsByMsgExpire = 10 * gossipsubIWantFollowupMs;\n    }\n    get size() {\n        return this.promises.size;\n    }\n    get requestMsByMsgSize() {\n        return this.requestMsByMsg.size;\n    }\n    /**\n     * Track a promise to deliver a message from a list of msgIds we are requesting\n     */\n    addPromise(from, msgIds) {\n        // pick msgId randomly from the list\n        const ix = Math.floor(Math.random() * msgIds.length);\n        const msgId = msgIds[ix];\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        let expireByPeer = this.promises.get(msgIdStr);\n        if (!expireByPeer) {\n            expireByPeer = new Map();\n            this.promises.set(msgIdStr, expireByPeer);\n        }\n        const now = Date.now();\n        // If a promise for this message id and peer already exists we don't update the expiry\n        if (!expireByPeer.has(from)) {\n            expireByPeer.set(from, now + this.gossipsubIWantFollowupMs);\n            if (this.metrics) {\n                this.metrics.iwantPromiseStarted.inc(1);\n                if (!this.requestMsByMsg.has(msgIdStr)) {\n                    this.requestMsByMsg.set(msgIdStr, now);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n     *\n     * This should be called not too often relative to the expire times, since it iterates over the whole data.\n     */\n    getBrokenPromises() {\n        const now = Date.now();\n        const result = new Map();\n        let brokenPromises = 0;\n        this.promises.forEach((expireByPeer, msgId) => {\n            expireByPeer.forEach((expire, p) => {\n                // the promise has been broken\n                if (expire < now) {\n                    // add 1 to result\n                    result.set(p, (result.get(p) ?? 0) + 1);\n                    // delete from tracked promises\n                    expireByPeer.delete(p);\n                    // for metrics\n                    brokenPromises++;\n                }\n            });\n            // clean up empty promises for a msgId\n            if (!expireByPeer.size) {\n                this.promises.delete(msgId);\n            }\n        });\n        this.metrics?.iwantPromiseBroken.inc(brokenPromises);\n        return result;\n    }\n    /**\n     * Someone delivered a message, stop tracking promises for it\n     */\n    deliverMessage(msgIdStr, isDuplicate = false) {\n        this.trackMessage(msgIdStr);\n        const expireByPeer = this.promises.get(msgIdStr);\n        // Expired promise, check requestMsByMsg\n        if (expireByPeer) {\n            this.promises.delete(msgIdStr);\n            if (this.metrics) {\n                this.metrics.iwantPromiseResolved.inc(1);\n                if (isDuplicate)\n                    this.metrics.iwantPromiseResolvedFromDuplicate.inc(1);\n                this.metrics.iwantPromiseResolvedPeers.inc(expireByPeer.size);\n            }\n        }\n    }\n    /**\n     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n     * unless its an obviously invalid message.\n     */\n    rejectMessage(msgIdStr, reason) {\n        this.trackMessage(msgIdStr);\n        // A message got rejected, so we can stop tracking promises and let the score penalty apply.\n        // With the expection of obvious invalid messages\n        switch (reason) {\n            case RejectReason.Error:\n                return;\n        }\n        this.promises.delete(msgIdStr);\n    }\n    clear() {\n        this.promises.clear();\n    }\n    prune() {\n        const maxMs = Date.now() - this.requestMsByMsgExpire;\n        let count = 0;\n        for (const [k, v] of this.requestMsByMsg.entries()) {\n            if (v < maxMs) {\n                // messages that stay too long in the requestMsByMsg map, delete\n                this.requestMsByMsg.delete(k);\n                count++;\n            }\n            else {\n                // recent messages, keep them\n                // sort by insertion order\n                break;\n            }\n        }\n        this.metrics?.iwantMessagePruned.inc(count);\n    }\n    trackMessage(msgIdStr) {\n        if (this.metrics) {\n            const requestMs = this.requestMsByMsg.get(msgIdStr);\n            if (requestMs !== undefined) {\n                this.metrics.iwantPromiseDeliveryTime.observe((Date.now() - requestMs) / 1000);\n                this.requestMsByMsg.delete(msgIdStr);\n            }\n        }\n    }\n}\n//# sourceMappingURL=tracer.js.map","/**\n * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js\n * for our own need, we don't use lodash throttle to improve performance.\n * This gives 4x - 5x performance gain compared to npm TimeCache\n */\nexport class SimpleTimeCache {\n    constructor(opts) {\n        this.entries = new Map();\n        this.validityMs = opts.validityMs;\n        // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js\n        // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs\n    }\n    get size() {\n        return this.entries.size;\n    }\n    /** Returns true if there was a key collision and the entry is dropped */\n    put(key, value) {\n        if (this.entries.has(key)) {\n            // Key collisions break insertion order in the entries cache, which break prune logic.\n            // prune relies on each iterated entry to have strictly ascending validUntilMs, else it\n            // won't prune expired entries and SimpleTimeCache will grow unexpectedly.\n            // As of Oct 2022 NodeJS v16, inserting the same key twice with different value does not\n            // change the key position in the iterator stream. A unit test asserts this behaviour.\n            return true;\n        }\n        this.entries.set(key, { value, validUntilMs: Date.now() + this.validityMs });\n        return false;\n    }\n    prune() {\n        const now = Date.now();\n        for (const [k, v] of this.entries.entries()) {\n            if (v.validUntilMs < now) {\n                this.entries.delete(k);\n            }\n            else {\n                // Entries are inserted with strictly ascending validUntilMs.\n                // Stop early to save iterations\n                break;\n            }\n        }\n    }\n    has(key) {\n        return this.entries.has(key);\n    }\n    get(key) {\n        const value = this.entries.get(key);\n        return value && value.validUntilMs >= Date.now() ? value.value : undefined;\n    }\n    clear() {\n        this.entries.clear();\n    }\n}\n//# sourceMappingURL=time-cache.js.map","import { RejectReason } from './types.js';\nexport var MessageSource;\n(function (MessageSource) {\n    MessageSource[\"forward\"] = \"forward\";\n    MessageSource[\"publish\"] = \"publish\";\n})(MessageSource || (MessageSource = {}));\nexport var InclusionReason;\n(function (InclusionReason) {\n    /** Peer was a fanaout peer. */\n    InclusionReason[\"Fanout\"] = \"fanout\";\n    /** Included from random selection. */\n    InclusionReason[\"Random\"] = \"random\";\n    /** Peer subscribed. */\n    InclusionReason[\"Subscribed\"] = \"subscribed\";\n    /** On heartbeat, peer was included to fill the outbound quota. */\n    InclusionReason[\"Outbound\"] = \"outbound\";\n    /** On heartbeat, not enough peers in mesh */\n    InclusionReason[\"NotEnough\"] = \"not_enough\";\n    /** On heartbeat opportunistic grafting due to low mesh score */\n    InclusionReason[\"Opportunistic\"] = \"opportunistic\";\n})(InclusionReason || (InclusionReason = {}));\n/// Reasons why a peer was removed from the mesh.\nexport var ChurnReason;\n(function (ChurnReason) {\n    /// Peer disconnected.\n    ChurnReason[\"Dc\"] = \"disconnected\";\n    /// Peer had a bad score.\n    ChurnReason[\"BadScore\"] = \"bad_score\";\n    /// Peer sent a PRUNE.\n    ChurnReason[\"Prune\"] = \"prune\";\n    /// Peer unsubscribed.\n    ChurnReason[\"Unsub\"] = \"unsubscribed\";\n    /// Too many peers.\n    ChurnReason[\"Excess\"] = \"excess\";\n})(ChurnReason || (ChurnReason = {}));\n/// Kinds of reasons a peer's score has been penalized\nexport var ScorePenalty;\n(function (ScorePenalty) {\n    /// A peer grafted before waiting the back-off time.\n    ScorePenalty[\"GraftBackoff\"] = \"graft_backoff\";\n    /// A Peer did not respond to an IWANT request in time.\n    ScorePenalty[\"BrokenPromise\"] = \"broken_promise\";\n    /// A Peer did not send enough messages as expected.\n    ScorePenalty[\"MessageDeficit\"] = \"message_deficit\";\n    /// Too many peers under one IP address.\n    ScorePenalty[\"IPColocation\"] = \"IP_colocation\";\n})(ScorePenalty || (ScorePenalty = {}));\nexport var IHaveIgnoreReason;\n(function (IHaveIgnoreReason) {\n    IHaveIgnoreReason[\"LowScore\"] = \"low_score\";\n    IHaveIgnoreReason[\"MaxIhave\"] = \"max_ihave\";\n    IHaveIgnoreReason[\"MaxIasked\"] = \"max_iasked\";\n})(IHaveIgnoreReason || (IHaveIgnoreReason = {}));\nexport var ScoreThreshold;\n(function (ScoreThreshold) {\n    ScoreThreshold[\"graylist\"] = \"graylist\";\n    ScoreThreshold[\"publish\"] = \"publish\";\n    ScoreThreshold[\"gossip\"] = \"gossip\";\n    ScoreThreshold[\"mesh\"] = \"mesh\";\n})(ScoreThreshold || (ScoreThreshold = {}));\n/**\n * A collection of metrics used throughout the Gossipsub behaviour.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getMetrics(register, topicStrToLabel, opts) {\n    // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.\n    return {\n        /* Metrics for static config */\n        protocolsEnabled: register.gauge({\n            name: 'gossipsub_protocol',\n            help: 'Status of enabled protocols',\n            labelNames: ['protocol']\n        }),\n        /* Metrics per known topic */\n        /** Status of our subscription to this topic. This metric allows analyzing other topic metrics\n         *  filtered by our current subscription status.\n         *  = rust-libp2p `topic_subscription_status` */\n        topicSubscriptionStatus: register.gauge({\n            name: 'gossipsub_topic_subscription_status',\n            help: 'Status of our subscription to this topic',\n            labelNames: ['topicStr']\n        }),\n        /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour\n         * regardless of our subscription status. */\n        topicPeersCount: register.gauge({\n            name: 'gossipsub_topic_peer_count',\n            help: 'Number of peers subscribed to each topic',\n            labelNames: ['topicStr']\n        }),\n        /* Metrics regarding mesh state */\n        /** Number of peers in our mesh. This metric should be updated with the count of peers for a\n         *  topic in the mesh regardless of inclusion and churn events.\n         *  = rust-libp2p `mesh_peer_counts` */\n        meshPeerCounts: register.gauge({\n            name: 'gossipsub_mesh_peer_count',\n            help: 'Number of peers in our mesh',\n            labelNames: ['topicStr']\n        }),\n        /** Number of times we include peers in a topic mesh for different reasons.\n         *  = rust-libp2p `mesh_peer_inclusion_events` */\n        meshPeerInclusionEvents: register.gauge({\n            name: 'gossipsub_mesh_peer_inclusion_events_total',\n            help: 'Number of times we include peers in a topic mesh for different reasons',\n            labelNames: ['topic', 'reason']\n        }),\n        /** Number of times we remove peers in a topic mesh for different reasons.\n         *  = rust-libp2p `mesh_peer_churn_events` */\n        meshPeerChurnEvents: register.gauge({\n            name: 'gossipsub_peer_churn_events_total',\n            help: 'Number of times we remove peers in a topic mesh for different reasons',\n            labelNames: ['topic', 'reason']\n        }),\n        /* General Metrics */\n        /** Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based\n         *  on which protocol they support. This metric keeps track of the number of peers that are\n         *  connected of each type. */\n        peersPerProtocol: register.gauge({\n            name: 'gossipsub_peers_per_protocol_count',\n            help: 'Peers connected for each topic',\n            labelNames: ['protocol']\n        }),\n        /** The time it takes to complete one iteration of the heartbeat. */\n        heartbeatDuration: register.histogram({\n            name: 'gossipsub_heartbeat_duration_seconds',\n            help: 'The time it takes to complete one iteration of the heartbeat',\n            // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled\n            buckets: [0.01, 0.1, 1]\n        }),\n        /** Heartbeat run took longer than heartbeat interval so next is skipped */\n        heartbeatSkipped: register.gauge({\n            name: 'gossipsub_heartbeat_skipped',\n            help: 'Heartbeat run took longer than heartbeat interval so next is skipped'\n        }),\n        /** Message validation results for each topic.\n         *  Invalid == Reject?\n         *  = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */\n        asyncValidationResult: register.gauge({\n            name: 'gossipsub_async_validation_result_total',\n            help: 'Message validation result for each topic',\n            labelNames: ['topic', 'acceptance']\n        }),\n        /** When the user validates a message, it tries to re propagate it to its mesh peers. If the\n         *  message expires from the memcache before it can be validated, we count this a cache miss\n         *  and it is an indicator that the memcache size should be increased.\n         *  = rust-libp2p `mcache_misses` */\n        asyncValidationMcacheHit: register.gauge({\n            name: 'gossipsub_async_validation_mcache_hit_total',\n            help: 'Async validation result reported by the user layer',\n            labelNames: ['hit']\n        }),\n        // RPC outgoing. Track byte length + data structure sizes\n        rpcRecvBytes: register.gauge({ name: 'gossipsub_rpc_recv_bytes_total', help: 'RPC recv' }),\n        rpcRecvCount: register.gauge({ name: 'gossipsub_rpc_recv_count_total', help: 'RPC recv' }),\n        rpcRecvSubscription: register.gauge({ name: 'gossipsub_rpc_recv_subscription_total', help: 'RPC recv' }),\n        rpcRecvMessage: register.gauge({ name: 'gossipsub_rpc_recv_message_total', help: 'RPC recv' }),\n        rpcRecvControl: register.gauge({ name: 'gossipsub_rpc_recv_control_total', help: 'RPC recv' }),\n        rpcRecvIHave: register.gauge({ name: 'gossipsub_rpc_recv_ihave_total', help: 'RPC recv' }),\n        rpcRecvIWant: register.gauge({ name: 'gossipsub_rpc_recv_iwant_total', help: 'RPC recv' }),\n        rpcRecvGraft: register.gauge({ name: 'gossipsub_rpc_recv_graft_total', help: 'RPC recv' }),\n        rpcRecvPrune: register.gauge({ name: 'gossipsub_rpc_recv_prune_total', help: 'RPC recv' }),\n        /** Total count of RPC dropped because acceptFrom() == false */\n        rpcRecvNotAccepted: register.gauge({\n            name: 'gossipsub_rpc_rcv_not_accepted_total',\n            help: 'Total count of RPC dropped because acceptFrom() == false'\n        }),\n        // RPC incoming. Track byte length + data structure sizes\n        rpcSentBytes: register.gauge({ name: 'gossipsub_rpc_sent_bytes_total', help: 'RPC sent' }),\n        rpcSentCount: register.gauge({ name: 'gossipsub_rpc_sent_count_total', help: 'RPC sent' }),\n        rpcSentSubscription: register.gauge({ name: 'gossipsub_rpc_sent_subscription_total', help: 'RPC sent' }),\n        rpcSentMessage: register.gauge({ name: 'gossipsub_rpc_sent_message_total', help: 'RPC sent' }),\n        rpcSentControl: register.gauge({ name: 'gossipsub_rpc_sent_control_total', help: 'RPC sent' }),\n        rpcSentIHave: register.gauge({ name: 'gossipsub_rpc_sent_ihave_total', help: 'RPC sent' }),\n        rpcSentIWant: register.gauge({ name: 'gossipsub_rpc_sent_iwant_total', help: 'RPC sent' }),\n        rpcSentGraft: register.gauge({ name: 'gossipsub_rpc_sent_graft_total', help: 'RPC sent' }),\n        rpcSentPrune: register.gauge({ name: 'gossipsub_rpc_sent_prune_total', help: 'RPC sent' }),\n        // publish message. Track peers sent to and bytes\n        /** Total count of msg published by topic */\n        msgPublishCount: register.gauge({\n            name: 'gossipsub_msg_publish_count_total',\n            help: 'Total count of msg published by topic',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers that we publish a msg to */\n        msgPublishPeers: register.gauge({\n            name: 'gossipsub_msg_publish_peers_total',\n            help: 'Total count of peers that we publish a msg to',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers (by group) that we publish a msg to */\n        // NOTE: Do not use 'group' label since it's a generic already used by Prometheus to group instances\n        msgPublishPeersByGroup: register.gauge({\n            name: 'gossipsub_msg_publish_peers_by_group',\n            help: 'Total count of peers (by group) that we publish a msg to',\n            labelNames: ['topic', 'peerGroup']\n        }),\n        /** Total count of msg publish data.length bytes */\n        msgPublishBytes: register.gauge({\n            name: 'gossipsub_msg_publish_bytes_total',\n            help: 'Total count of msg publish data.length bytes',\n            labelNames: ['topic']\n        }),\n        /** Total count of msg forwarded by topic */\n        msgForwardCount: register.gauge({\n            name: 'gossipsub_msg_forward_count_total',\n            help: 'Total count of msg forwarded by topic',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers that we forward a msg to */\n        msgForwardPeers: register.gauge({\n            name: 'gossipsub_msg_forward_peers_total',\n            help: 'Total count of peers that we forward a msg to',\n            labelNames: ['topic']\n        }),\n        /** Total count of recv msgs before any validation */\n        msgReceivedPreValidation: register.gauge({\n            name: 'gossipsub_msg_received_prevalidation_total',\n            help: 'Total count of recv msgs before any validation',\n            labelNames: ['topic']\n        }),\n        /** Tracks distribution of recv msgs by duplicate, invalid, valid */\n        msgReceivedStatus: register.gauge({\n            name: 'gossipsub_msg_received_status_total',\n            help: 'Tracks distribution of recv msgs by duplicate, invalid, valid',\n            labelNames: ['topic', 'status']\n        }),\n        /** Tracks specific reason of invalid */\n        msgReceivedInvalid: register.gauge({\n            name: 'gossipsub_msg_received_invalid_total',\n            help: 'Tracks specific reason of invalid',\n            labelNames: ['topic', 'error']\n        }),\n        /** Track duplicate message delivery time */\n        duplicateMsgDeliveryDelay: register.histogram({\n            name: 'gossisub_duplicate_msg_delivery_delay_seconds',\n            help: 'Time since the 1st duplicated message validated',\n            labelNames: ['topic'],\n            buckets: [\n                0.25 * opts.maxMeshMessageDeliveriesWindowSec,\n                0.5 * opts.maxMeshMessageDeliveriesWindowSec,\n                1 * opts.maxMeshMessageDeliveriesWindowSec,\n                2 * opts.maxMeshMessageDeliveriesWindowSec,\n                4 * opts.maxMeshMessageDeliveriesWindowSec\n            ]\n        }),\n        /** Total count of late msg delivery total by topic */\n        duplicateMsgLateDelivery: register.gauge({\n            name: 'gossisub_duplicate_msg_late_delivery_total',\n            help: 'Total count of late duplicate message delivery by topic, which triggers P3 penalty',\n            labelNames: ['topic']\n        }),\n        duplicateMsgIgnored: register.gauge({\n            name: 'gossisub_ignored_published_duplicate_msgs_total',\n            help: 'Total count of published duplicate message ignored by topic',\n            labelNames: ['topic']\n        }),\n        /* Metrics related to scoring */\n        /** Total times score() is called */\n        scoreFnCalls: register.gauge({\n            name: 'gossipsub_score_fn_calls_total',\n            help: 'Total times score() is called'\n        }),\n        /** Total times score() call actually computed computeScore(), no cache */\n        scoreFnRuns: register.gauge({\n            name: 'gossipsub_score_fn_runs_total',\n            help: 'Total times score() call actually computed computeScore(), no cache'\n        }),\n        scoreCachedDelta: register.histogram({\n            name: 'gossipsub_score_cache_delta',\n            help: 'Delta of score between cached values that expired',\n            buckets: [10, 100, 1000]\n        }),\n        /** Current count of peers by score threshold */\n        peersByScoreThreshold: register.gauge({\n            name: 'gossipsub_peers_by_score_threshold_count',\n            help: 'Current count of peers by score threshold',\n            labelNames: ['threshold']\n        }),\n        score: register.avgMinMax({\n            name: 'gossipsub_score',\n            help: 'Avg min max of gossip scores',\n            labelNames: ['topic', 'p']\n        }),\n        /** Separate score weights */\n        scoreWeights: register.avgMinMax({\n            name: 'gossipsub_score_weights',\n            help: 'Separate score weights',\n            labelNames: ['topic', 'p']\n        }),\n        /** Histogram of the scores for each mesh topic. */\n        // TODO: Not implemented\n        scorePerMesh: register.avgMinMax({\n            name: 'gossipsub_score_per_mesh',\n            help: 'Histogram of the scores for each mesh topic',\n            labelNames: ['topic']\n        }),\n        /** A counter of the kind of penalties being applied to peers. */\n        // TODO: Not fully implemented\n        scoringPenalties: register.gauge({\n            name: 'gossipsub_scoring_penalties_total',\n            help: 'A counter of the kind of penalties being applied to peers',\n            labelNames: ['penalty']\n        }),\n        behaviourPenalty: register.histogram({\n            name: 'gossipsub_peer_stat_behaviour_penalty',\n            help: 'Current peer stat behaviour_penalty at each scrape',\n            buckets: [\n                0.25 * opts.behaviourPenaltyThreshold,\n                0.5 * opts.behaviourPenaltyThreshold,\n                1 * opts.behaviourPenaltyThreshold,\n                2 * opts.behaviourPenaltyThreshold,\n                4 * opts.behaviourPenaltyThreshold\n            ]\n        }),\n        // TODO:\n        // - iasked per peer (on heartbeat)\n        // - when promise is resolved, track messages from promises\n        /** Total received IHAVE messages that we ignore for some reason */\n        ihaveRcvIgnored: register.gauge({\n            name: 'gossipsub_ihave_rcv_ignored_total',\n            help: 'Total received IHAVE messages that we ignore for some reason',\n            labelNames: ['reason']\n        }),\n        /** Total received IHAVE messages by topic */\n        ihaveRcvMsgids: register.gauge({\n            name: 'gossipsub_ihave_rcv_msgids_total',\n            help: 'Total received IHAVE messages by topic',\n            labelNames: ['topic']\n        }),\n        /** Total messages per topic we don't have. Not actual requests.\n         *  The number of times we have decided that an IWANT control message is required for this\n         *  topic. A very high metric might indicate an underperforming network.\n         *  = rust-libp2p `topic_iwant_msgs` */\n        ihaveRcvNotSeenMsgids: register.gauge({\n            name: 'gossipsub_ihave_rcv_not_seen_msgids_total',\n            help: 'Total messages per topic we do not have, not actual requests',\n            labelNames: ['topic']\n        }),\n        /** Total received IWANT messages by topic */\n        iwantRcvMsgids: register.gauge({\n            name: 'gossipsub_iwant_rcv_msgids_total',\n            help: 'Total received IWANT messages by topic',\n            labelNames: ['topic']\n        }),\n        /** Total requested messageIDs that we don't have */\n        iwantRcvDonthaveMsgids: register.gauge({\n            name: 'gossipsub_iwant_rcv_dont_have_msgids_total',\n            help: 'Total requested messageIDs that we do not have'\n        }),\n        iwantPromiseStarted: register.gauge({\n            name: 'gossipsub_iwant_promise_sent_total',\n            help: 'Total count of started IWANT promises'\n        }),\n        /** Total count of resolved IWANT promises */\n        iwantPromiseResolved: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_total',\n            help: 'Total count of resolved IWANT promises'\n        }),\n        /** Total count of resolved IWANT promises from duplicate messages */\n        iwantPromiseResolvedFromDuplicate: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_from_duplicate_total',\n            help: 'Total count of resolved IWANT promises from duplicate messages'\n        }),\n        /** Total count of peers we have asked IWANT promises that are resolved */\n        iwantPromiseResolvedPeers: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_peers',\n            help: 'Total count of peers we have asked IWANT promises that are resolved'\n        }),\n        iwantPromiseBroken: register.gauge({\n            name: 'gossipsub_iwant_promise_broken',\n            help: 'Total count of broken IWANT promises'\n        }),\n        iwantMessagePruned: register.gauge({\n            name: 'gossipsub_iwant_message_pruned',\n            help: 'Total count of pruned IWANT messages'\n        }),\n        /** Histogram of delivery time of resolved IWANT promises */\n        iwantPromiseDeliveryTime: register.histogram({\n            name: 'gossipsub_iwant_promise_delivery_seconds',\n            help: 'Histogram of delivery time of resolved IWANT promises',\n            buckets: [\n                0.5 * opts.gossipPromiseExpireSec,\n                1 * opts.gossipPromiseExpireSec,\n                2 * opts.gossipPromiseExpireSec,\n                4 * opts.gossipPromiseExpireSec\n            ]\n        }),\n        /* Data structure sizes */\n        /** Unbounded cache sizes */\n        cacheSize: register.gauge({\n            name: 'gossipsub_cache_size',\n            help: 'Unbounded cache sizes',\n            labelNames: ['cache']\n        }),\n        /** Current mcache msg count */\n        mcacheSize: register.gauge({\n            name: 'gossipsub_mcache_size',\n            help: 'Current mcache msg count'\n        }),\n        mcacheNotValidatedCount: register.gauge({\n            name: 'gossipsub_mcache_not_validated_count',\n            help: 'Current mcache msg count not validated'\n        }),\n        fastMsgIdCacheCollision: register.gauge({\n            name: 'gossipsub_fastmsgid_cache_collision_total',\n            help: 'Total count of key collisions on fastmsgid cache put'\n        }),\n        newConnectionCount: register.gauge({\n            name: 'gossipsub_new_connection_total',\n            help: 'Total new connection by status',\n            labelNames: ['status']\n        }),\n        topicStrToLabel: topicStrToLabel,\n        toTopic(topicStr) {\n            return this.topicStrToLabel.get(topicStr) ?? topicStr;\n        },\n        /** We joined a topic */\n        onJoin(topicStr) {\n            this.topicSubscriptionStatus.set({ topicStr }, 1);\n            this.meshPeerCounts.set({ topicStr }, 0); // Reset count\n        },\n        /** We left a topic */\n        onLeave(topicStr) {\n            this.topicSubscriptionStatus.set({ topicStr }, 0);\n            this.meshPeerCounts.set({ topicStr }, 0); // Reset count\n        },\n        /** Register the inclusion of peers in our mesh due to some reason. */\n        onAddToMesh(topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            this.meshPeerInclusionEvents.inc({ topic, reason }, count);\n        },\n        /** Register the removal of peers in our mesh due to some reason */\n        // - remove_peer_from_mesh()\n        // - heartbeat() Churn::BadScore\n        // - heartbeat() Churn::Excess\n        // - on_disconnect() Churn::Ds\n        onRemoveFromMesh(topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            this.meshPeerChurnEvents.inc({ topic, reason }, count);\n        },\n        onReportValidationMcacheHit(hit) {\n            this.asyncValidationMcacheHit.inc({ hit: hit ? 'hit' : 'miss' });\n        },\n        onReportValidation(topicStr, acceptance) {\n            const topic = this.toTopic(topicStr);\n            this.asyncValidationResult.inc({ topic: topic, acceptance });\n        },\n        /**\n         * - in handle_graft() Penalty::GraftBackoff\n         * - in apply_iwant_penalties() Penalty::BrokenPromise\n         * - in metric_score() P3 Penalty::MessageDeficit\n         * - in metric_score() P6 Penalty::IPColocation\n         */\n        onScorePenalty(penalty) {\n            // Can this be labeled by topic too?\n            this.scoringPenalties.inc({ penalty }, 1);\n        },\n        onIhaveRcv(topicStr, ihave, idonthave) {\n            const topic = this.toTopic(topicStr);\n            this.ihaveRcvMsgids.inc({ topic }, ihave);\n            this.ihaveRcvNotSeenMsgids.inc({ topic }, idonthave);\n        },\n        onIwantRcv(iwantByTopic, iwantDonthave) {\n            for (const [topicStr, iwant] of iwantByTopic) {\n                const topic = this.toTopic(topicStr);\n                this.iwantRcvMsgids.inc({ topic }, iwant);\n            }\n            this.iwantRcvDonthaveMsgids.inc(iwantDonthave);\n        },\n        onForwardMsg(topicStr, tosendCount) {\n            const topic = this.toTopic(topicStr);\n            this.msgForwardCount.inc({ topic }, 1);\n            this.msgForwardPeers.inc({ topic }, tosendCount);\n        },\n        onPublishMsg(topicStr, tosendGroupCount, tosendCount, dataLen) {\n            const topic = this.toTopic(topicStr);\n            this.msgPublishCount.inc({ topic }, 1);\n            this.msgPublishBytes.inc({ topic }, tosendCount * dataLen);\n            this.msgPublishPeers.inc({ topic }, tosendCount);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'direct' }, tosendGroupCount.direct);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'floodsub' }, tosendGroupCount.floodsub);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'mesh' }, tosendGroupCount.mesh);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'fanout' }, tosendGroupCount.fanout);\n        },\n        onMsgRecvPreValidation(topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedPreValidation.inc({ topic }, 1);\n        },\n        onMsgRecvResult(topicStr, status) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedStatus.inc({ topic, status });\n        },\n        onMsgRecvInvalid(topicStr, reason) {\n            const topic = this.toTopic(topicStr);\n            const error = reason.reason === RejectReason.Error ? reason.error : reason.reason;\n            this.msgReceivedInvalid.inc({ topic, error }, 1);\n        },\n        onDuplicateMsgDelivery(topicStr, deliveryDelayMs, isLateDelivery) {\n            this.duplicateMsgDeliveryDelay.observe(deliveryDelayMs / 1000);\n            if (isLateDelivery) {\n                const topic = this.toTopic(topicStr);\n                this.duplicateMsgLateDelivery.inc({ topic }, 1);\n            }\n        },\n        onPublishDuplicateMsg(topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.duplicateMsgIgnored.inc({ topic }, 1);\n        },\n        onRpcRecv(rpc, rpcBytes) {\n            this.rpcRecvBytes.inc(rpcBytes);\n            this.rpcRecvCount.inc(1);\n            if (rpc.subscriptions)\n                this.rpcRecvSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages)\n                this.rpcRecvMessage.inc(rpc.messages.length);\n            if (rpc.control) {\n                this.rpcRecvControl.inc(1);\n                if (rpc.control.ihave)\n                    this.rpcRecvIHave.inc(rpc.control.ihave.length);\n                if (rpc.control.iwant)\n                    this.rpcRecvIWant.inc(rpc.control.iwant.length);\n                if (rpc.control.graft)\n                    this.rpcRecvGraft.inc(rpc.control.graft.length);\n                if (rpc.control.prune)\n                    this.rpcRecvPrune.inc(rpc.control.prune.length);\n            }\n        },\n        onRpcSent(rpc, rpcBytes) {\n            this.rpcSentBytes.inc(rpcBytes);\n            this.rpcSentCount.inc(1);\n            if (rpc.subscriptions)\n                this.rpcSentSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages)\n                this.rpcSentMessage.inc(rpc.messages.length);\n            if (rpc.control) {\n                const ihave = rpc.control.ihave?.length ?? 0;\n                const iwant = rpc.control.iwant?.length ?? 0;\n                const graft = rpc.control.graft?.length ?? 0;\n                const prune = rpc.control.prune?.length ?? 0;\n                if (ihave > 0)\n                    this.rpcSentIHave.inc(ihave);\n                if (iwant > 0)\n                    this.rpcSentIWant.inc(iwant);\n                if (graft > 0)\n                    this.rpcSentGraft.inc(graft);\n                if (prune > 0)\n                    this.rpcSentPrune.inc(prune);\n                if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0)\n                    this.rpcSentControl.inc(1);\n            }\n        },\n        registerScores(scores, scoreThresholds) {\n            let graylist = 0;\n            let publish = 0;\n            let gossip = 0;\n            let mesh = 0;\n            for (const score of scores) {\n                if (score >= scoreThresholds.graylistThreshold)\n                    graylist++;\n                if (score >= scoreThresholds.publishThreshold)\n                    publish++;\n                if (score >= scoreThresholds.gossipThreshold)\n                    gossip++;\n                if (score >= 0)\n                    mesh++;\n            }\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.graylist }, graylist);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.publish }, publish);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.gossip }, gossip);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.mesh }, mesh);\n            // Register full score too\n            this.score.set(scores);\n        },\n        registerScoreWeights(sw) {\n            for (const [topic, wsTopic] of sw.byTopic) {\n                this.scoreWeights.set({ topic, p: 'p1' }, wsTopic.p1w);\n                this.scoreWeights.set({ topic, p: 'p2' }, wsTopic.p2w);\n                this.scoreWeights.set({ topic, p: 'p3' }, wsTopic.p3w);\n                this.scoreWeights.set({ topic, p: 'p3b' }, wsTopic.p3bw);\n                this.scoreWeights.set({ topic, p: 'p4' }, wsTopic.p4w);\n            }\n            this.scoreWeights.set({ p: 'p5' }, sw.p5w);\n            this.scoreWeights.set({ p: 'p6' }, sw.p6w);\n            this.scoreWeights.set({ p: 'p7' }, sw.p7w);\n        },\n        registerScorePerMesh(mesh, scoreByPeer) {\n            const peersPerTopicLabel = new Map();\n            mesh.forEach((peers, topicStr) => {\n                // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n                const topicLabel = this.topicStrToLabel.get(topicStr) ?? 'unknown';\n                let peersInMesh = peersPerTopicLabel.get(topicLabel);\n                if (!peersInMesh) {\n                    peersInMesh = new Set();\n                    peersPerTopicLabel.set(topicLabel, peersInMesh);\n                }\n                peers.forEach((p) => peersInMesh?.add(p));\n            });\n            for (const [topic, peers] of peersPerTopicLabel) {\n                const meshScores = [];\n                peers.forEach((peer) => {\n                    meshScores.push(scoreByPeer.get(peer) ?? 0);\n                });\n                this.scorePerMesh.set({ topic }, meshScores);\n            }\n        }\n    };\n}\n//# sourceMappingURL=metrics.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { randomBytes } from '@libp2p/crypto';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { RPC } from '../message/rpc.js';\nimport { PublishConfigType, ValidateError } from '../types.js';\nimport { StrictSign, StrictNoSign } from '@libp2p/interface-pubsub';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const SignPrefix = uint8ArrayFromString('libp2p-pubsub:');\nexport async function buildRawMessage(publishConfig, topic, originalData, transformedData) {\n    switch (publishConfig.type) {\n        case PublishConfigType.Signing: {\n            const rpcMsg = {\n                from: publishConfig.author.toBytes(),\n                data: transformedData,\n                seqno: randomBytes(8),\n                topic,\n                signature: undefined,\n                key: undefined // Exclude key field for signing\n            };\n            // Get the message in bytes, and prepend with the pubsub prefix\n            // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n            const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsg).finish()]);\n            rpcMsg.signature = await publishConfig.privateKey.sign(bytes);\n            rpcMsg.key = publishConfig.key;\n            const msg = {\n                type: 'signed',\n                from: publishConfig.author,\n                data: originalData,\n                sequenceNumber: BigInt(`0x${uint8ArrayToString(rpcMsg.seqno, 'base16')}`),\n                topic,\n                signature: rpcMsg.signature,\n                key: rpcMsg.key\n            };\n            return {\n                raw: rpcMsg,\n                msg: msg\n            };\n        }\n        case PublishConfigType.Anonymous: {\n            return {\n                raw: {\n                    from: undefined,\n                    data: transformedData,\n                    seqno: undefined,\n                    topic,\n                    signature: undefined,\n                    key: undefined\n                },\n                msg: {\n                    type: 'unsigned',\n                    data: originalData,\n                    topic\n                }\n            };\n        }\n    }\n}\nexport async function validateToRawMessage(signaturePolicy, msg) {\n    // If strict-sign, verify all\n    // If anonymous (no-sign), ensure no preven\n    switch (signaturePolicy) {\n        case StrictNoSign:\n            if (msg.signature != null)\n                return { valid: false, error: ValidateError.SignaturePresent };\n            if (msg.seqno != null)\n                return { valid: false, error: ValidateError.SeqnoPresent };\n            if (msg.key != null)\n                return { valid: false, error: ValidateError.FromPresent };\n            return { valid: true, message: { type: 'unsigned', topic: msg.topic, data: msg.data ?? new Uint8Array(0) } };\n        case StrictSign: {\n            // Verify seqno\n            if (msg.seqno == null)\n                return { valid: false, error: ValidateError.InvalidSeqno };\n            if (msg.seqno.length !== 8) {\n                return { valid: false, error: ValidateError.InvalidSeqno };\n            }\n            if (msg.signature == null)\n                return { valid: false, error: ValidateError.InvalidSignature };\n            if (msg.from == null)\n                return { valid: false, error: ValidateError.InvalidPeerId };\n            let fromPeerId;\n            try {\n                // TODO: Fix PeerId types\n                fromPeerId = peerIdFromBytes(msg.from);\n            }\n            catch (e) {\n                return { valid: false, error: ValidateError.InvalidPeerId };\n            }\n            // - check from defined\n            // - transform source to PeerId\n            // - parse signature\n            // - get .key, else from source\n            // - check key == source if present\n            // - verify sig\n            let publicKey;\n            if (msg.key) {\n                publicKey = unmarshalPublicKey(msg.key);\n                // TODO: Should `fromPeerId.pubKey` be optional?\n                if (fromPeerId.publicKey !== undefined && !uint8ArrayEquals(publicKey.bytes, fromPeerId.publicKey)) {\n                    return { valid: false, error: ValidateError.InvalidPeerId };\n                }\n            }\n            else {\n                if (fromPeerId.publicKey == null) {\n                    return { valid: false, error: ValidateError.InvalidPeerId };\n                }\n                publicKey = unmarshalPublicKey(fromPeerId.publicKey);\n            }\n            const rpcMsgPreSign = {\n                from: msg.from,\n                data: msg.data,\n                seqno: msg.seqno,\n                topic: msg.topic,\n                signature: undefined,\n                key: undefined // Exclude key field for signing\n            };\n            // Get the message in bytes, and prepend with the pubsub prefix\n            // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n            const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsgPreSign).finish()]);\n            if (!(await publicKey.verify(bytes, msg.signature))) {\n                return { valid: false, error: ValidateError.InvalidSignature };\n            }\n            return {\n                valid: true,\n                message: {\n                    type: 'signed',\n                    from: fromPeerId,\n                    data: msg.data ?? new Uint8Array(0),\n                    sequenceNumber: BigInt(`0x${uint8ArrayToString(msg.seqno, 'base16')}`),\n                    topic: msg.topic,\n                    signature: msg.signature,\n                    key: msg.key ?? marshalPublicKey(publicKey)\n                }\n            };\n        }\n    }\n}\n//# sourceMappingURL=buildRawMessage.js.map","import { sha256 } from 'multiformats/hashes/sha2';\nimport { msgId } from '@libp2p/pubsub/utils';\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport function msgIdFnStrictSign(msg) {\n    if (msg.type !== 'signed') {\n        throw new Error('expected signed message type');\n    }\n    // Should never happen\n    if (msg.sequenceNumber == null)\n        throw Error('missing seqno field');\n    // TODO: Should use .from here or key?\n    return msgId(msg.from.toBytes(), msg.sequenceNumber);\n}\n/**\n * Generate a message id, based on message `data`\n */\nexport async function msgIdFnStrictNoSign(msg) {\n    return await sha256.encode(msg.data);\n}\n//# sourceMappingURL=msgIdFn.js.map","export function computeScoreWeights(peer, pstats, params, peerIPs, topicStrToLabel) {\n    let score = 0;\n    const byTopic = new Map();\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n        // the topic parameters\n        // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n        const topicLabel = topicStrToLabel.get(topic) ?? 'unknown';\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScores = byTopic.get(topicLabel);\n        if (!topicScores) {\n            topicScores = {\n                p1w: 0,\n                p2w: 0,\n                p3w: 0,\n                p3bw: 0,\n                p4w: 0\n            };\n            byTopic.set(topicLabel, topicScores);\n        }\n        let p1w = 0;\n        let p2w = 0;\n        let p3w = 0;\n        let p3bw = 0;\n        let p4w = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            const p1 = Math.max(tstats.meshTime / topicParams.timeInMeshQuantum, topicParams.timeInMeshCap);\n            p1w += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        p2w += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive &&\n            tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            p3w += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        p3bw += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        p4w += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += (p1w + p2w + p3w + p3bw + p4w) * topicParams.topicWeight;\n        topicScores.p1w += p1w;\n        topicScores.p2w += p2w;\n        topicScores.p3w += p3w;\n        topicScores.p3bw += p3bw;\n        topicScores.p4w += p4w;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n        // Proportionally apply cap to all individual contributions\n        const capF = params.topicScoreCap / score;\n        for (const ws of byTopic.values()) {\n            ws.p1w *= capF;\n            ws.p2w *= capF;\n            ws.p3w *= capF;\n            ws.p3bw *= capF;\n            ws.p4w *= capF;\n        }\n    }\n    let p5w = 0;\n    let p6w = 0;\n    let p7w = 0;\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    p5w += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip) => {\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            p6w += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    const p7 = pstats.behaviourPenalty * pstats.behaviourPenalty;\n    p7w += p7 * params.behaviourPenaltyWeight;\n    score += p5w + p6w + p7w;\n    return {\n        byTopic,\n        p5w,\n        p6w,\n        p7w,\n        score\n    };\n}\nexport function computeAllPeersScoreWeights(peerIdStrs, peerStats, params, peerIPs, topicStrToLabel) {\n    const sw = {\n        byTopic: new Map(),\n        p5w: [],\n        p6w: [],\n        p7w: [],\n        score: []\n    };\n    for (const peerIdStr of peerIdStrs) {\n        const pstats = peerStats.get(peerIdStr);\n        if (pstats) {\n            const swPeer = computeScoreWeights(peerIdStr, pstats, params, peerIPs, topicStrToLabel);\n            for (const [topic, swPeerTopic] of swPeer.byTopic) {\n                let swTopic = sw.byTopic.get(topic);\n                if (!swTopic) {\n                    swTopic = {\n                        p1w: [],\n                        p2w: [],\n                        p3w: [],\n                        p3bw: [],\n                        p4w: []\n                    };\n                    sw.byTopic.set(topic, swTopic);\n                }\n                swTopic.p1w.push(swPeerTopic.p1w);\n                swTopic.p2w.push(swPeerTopic.p2w);\n                swTopic.p3w.push(swPeerTopic.p3w);\n                swTopic.p3bw.push(swPeerTopic.p3bw);\n                swTopic.p4w.push(swPeerTopic.p4w);\n            }\n            sw.p5w.push(swPeer.p5w);\n            sw.p6w.push(swPeer.p6w);\n            sw.p7w.push(swPeer.p7w);\n            sw.score.push(swPeer.score);\n        }\n        else {\n            sw.p5w.push(0);\n            sw.p6w.push(0);\n            sw.p7w.push(0);\n            sw.score.push(0);\n        }\n    }\n    return sw;\n}\n//# sourceMappingURL=scoreMetrics.js.map","import { LongBits } from 'longbits';\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\nconst N8 = Math.pow(2, 56);\nconst N9 = Math.pow(2, 63);\nexport const unsigned = {\n    encodingLength(value) {\n        if (value < N1) {\n            return 1;\n        }\n        if (value < N2) {\n            return 2;\n        }\n        if (value < N3) {\n            return 3;\n        }\n        if (value < N4) {\n            return 4;\n        }\n        if (value < N5) {\n            return 5;\n        }\n        if (value < N6) {\n            return 6;\n        }\n        if (value < N7) {\n            return 7;\n        }\n        if (value < N8) {\n            return 8;\n        }\n        if (value < N9) {\n            return 9;\n        }\n        return 10;\n    },\n    encode(value, buf, offset = 0) {\n        if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError('Could not encode varint');\n        }\n        if (buf == null) {\n            buf = allocUnsafe(unsigned.encodingLength(value));\n        }\n        LongBits.fromNumber(value).toBytes(buf, offset);\n        return buf;\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(true);\n    }\n};\nexport const signed = {\n    encodingLength(value) {\n        if (value < 0) {\n            return 10; // 10 bytes per spec - https://developers.google.com/protocol-buffers/docs/encoding#signed-ints\n        }\n        return unsigned.encodingLength(value);\n    },\n    encode(value, buf, offset) {\n        if (buf == null) {\n            buf = allocUnsafe(signed.encodingLength(value));\n        }\n        if (value < 0) {\n            LongBits.fromNumber(value).toBytes(buf, offset);\n            return buf;\n        }\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(false);\n    }\n};\nexport const zigzag = {\n    encodingLength(value) {\n        return unsigned.encodingLength(value >= 0 ? value * 2 : value * -2 - 1);\n    },\n    // @ts-expect-error\n    encode(value, buf, offset) {\n        value = value >= 0 ? value * 2 : (value * -2) - 1;\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        const value = unsigned.decode(buf, offset);\n        return (value & 1) !== 0 ? (value + 1) / -2 : value / 2;\n    }\n};\n//# sourceMappingURL=index.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport { allocUnsafe } from './alloc.js';\nconst defaultEncoder = (length) => {\n    const lengthLength = unsigned.encodingLength(length);\n    const lengthBuf = allocUnsafe(lengthLength);\n    unsigned.encode(length, lengthBuf);\n    defaultEncoder.bytes = lengthLength;\n    return lengthBuf;\n};\ndefaultEncoder.bytes = 0;\nexport function encode(options) {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    const encoder = async function* (source) {\n        for await (const chunk of source) {\n            // length + data\n            const length = encodeLength(chunk.byteLength);\n            // yield only Uint8Arrays\n            if (length instanceof Uint8Array) {\n                yield length;\n            }\n            else {\n                yield* length;\n            }\n            // yield only Uint8Arrays\n            if (chunk instanceof Uint8Array) {\n                yield chunk;\n            }\n            else {\n                yield* chunk;\n            }\n        }\n    };\n    return encoder;\n}\nencode.single = (chunk, options) => {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);\n};\n//# sourceMappingURL=encode.js.map","export function alloc(len) {\n    return new Uint8Array(len);\n}\nexport function allocUnsafe(len) {\n    if (globalThis?.Buffer?.allocUnsafe != null) {\n        return globalThis.Buffer.allocUnsafe(len);\n    }\n    return new Uint8Array(len);\n}\n//# sourceMappingURL=alloc.js.map","/* eslint max-depth: [\"error\", 6] */\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport errCode from 'err-code';\n// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"LENGTH\"] = 0] = \"LENGTH\";\n    ReadMode[ReadMode[\"DATA\"] = 1] = \"DATA\";\n})(ReadMode || (ReadMode = {}));\nconst defaultDecoder = (buf) => {\n    const length = unsigned.decode(buf);\n    defaultDecoder.bytes = unsigned.encodingLength(length);\n    return length;\n};\ndefaultDecoder.bytes = 0;\nexport function decode(options) {\n    const decoder = async function* (source) {\n        const buffer = new Uint8ArrayList();\n        let mode = ReadMode.LENGTH;\n        let dataLength = -1;\n        const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;\n        const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;\n        const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;\n        for await (const buf of source) {\n            buffer.append(buf);\n            while (buffer.byteLength > 0) {\n                if (mode === ReadMode.LENGTH) {\n                    // read length, ignore errors for short reads\n                    try {\n                        dataLength = lengthDecoder(buffer);\n                        if (dataLength < 0) {\n                            throw errCode(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');\n                        }\n                        if (dataLength > maxDataLength) {\n                            throw errCode(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');\n                        }\n                        const dataLengthLength = lengthDecoder.bytes;\n                        buffer.consume(dataLengthLength);\n                        if (options?.onLength != null) {\n                            options.onLength(dataLength);\n                        }\n                        mode = ReadMode.DATA;\n                    }\n                    catch (err) {\n                        if (err instanceof RangeError) {\n                            if (buffer.byteLength > maxLengthLength) {\n                                throw errCode(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');\n                            }\n                            break;\n                        }\n                        throw err;\n                    }\n                }\n                if (mode === ReadMode.DATA) {\n                    if (buffer.byteLength < dataLength) {\n                        // not enough data, wait for more\n                        break;\n                    }\n                    const data = buffer.sublist(0, dataLength);\n                    buffer.consume(dataLength);\n                    if (options?.onData != null) {\n                        options.onData(data);\n                    }\n                    yield data;\n                    mode = ReadMode.LENGTH;\n                }\n            }\n        }\n        if (buffer.byteLength > 0) {\n            throw errCode(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n        }\n    };\n    return decoder;\n}\n/**\n * @param {*} reader\n * @param {import('./types').DecoderOptions} [options]\n * @returns\n */\ndecode.fromReader = (reader, options) => {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = (async function* () {\n        while (true) {\n            try {\n                const { done, value } = await reader.next(byteLength);\n                if (done === true) {\n                    return;\n                }\n                if (value != null) {\n                    yield value;\n                }\n            }\n            catch (err) {\n                if (err.code === 'ERR_UNDER_READ') {\n                    return { done: true, value: null };\n                }\n                throw err;\n            }\n            finally {\n                // Reset the byteLength so we continue to check for varints\n                byteLength = 1;\n            }\n        }\n    }());\n    /**\n     * Once the length has been parsed, read chunk for that length\n     */\n    const onLength = (l) => { byteLength = l; };\n    return decode({\n        ...(options ?? {}),\n        onLength\n    })(varByteSource);\n};\n//# sourceMappingURL=decode.js.map","import { abortableSource } from 'abortable-iterator';\nimport { pipe } from 'it-pipe';\nimport { pushable } from 'it-pushable';\nimport { encode, decode } from 'it-length-prefixed';\nexport class OutboundStream {\n    constructor(rawStream, errCallback, opts) {\n        this.rawStream = rawStream;\n        this.pushable = pushable({ objectMode: false });\n        this.closeController = new AbortController();\n        this.maxBufferSize = opts.maxBufferSize ?? Infinity;\n        pipe(abortableSource(this.pushable, this.closeController.signal, { returnOnAbort: true }), encode(), this.rawStream).catch(errCallback);\n    }\n    get protocol() {\n        // TODO remove this non-nullish assertion after https://github.com/libp2p/js-libp2p-interfaces/pull/265 is incorporated\n        return this.rawStream.stat.protocol;\n    }\n    push(data) {\n        if (this.pushable.readableLength > this.maxBufferSize) {\n            throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);\n        }\n        this.pushable.push(data);\n    }\n    close() {\n        this.closeController.abort();\n        // similar to pushable.end() but clear the internal buffer\n        this.pushable.return();\n        this.rawStream.close();\n    }\n}\nexport class InboundStream {\n    constructor(rawStream, opts = {}) {\n        this.rawStream = rawStream;\n        this.closeController = new AbortController();\n        this.source = abortableSource(pipe(this.rawStream, decode(opts)), this.closeController.signal, {\n            returnOnAbort: true\n        });\n    }\n    close() {\n        this.closeController.abort();\n        this.rawStream.close();\n    }\n}\n//# sourceMappingURL=stream.js.map","import protobuf from 'protobufjs/minimal.js';\nexport const defaultDecodeRpcLimits = {\n    maxSubscriptions: Infinity,\n    maxMessages: Infinity,\n    maxIhaveMessageIDs: Infinity,\n    maxIwantMessageIDs: Infinity,\n    maxControlMessages: Infinity,\n    maxPeerInfos: Infinity\n};\n/**\n * Copied code from src/message/rpc.cjs but with decode limits to prevent OOM attacks\n */\nexport function decodeRpc(bytes, opts) {\n    // Mutate to use the option as stateful counter. Must limit the total count of messageIDs across all IWANT, IHAVE\n    // else one count put 100 messageIDs into each 100 IWANT and \"get around\" the limit\n    opts = { ...opts };\n    const r = protobuf.Reader.create(bytes);\n    const l = bytes.length;\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.subscriptions && m.subscriptions.length))\n                    m.subscriptions = [];\n                if (m.subscriptions.length < opts.maxSubscriptions)\n                    m.subscriptions.push(decodeSubOpts(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 2:\n                if (!(m.messages && m.messages.length))\n                    m.messages = [];\n                if (m.messages.length < opts.maxMessages)\n                    m.messages.push(decodeMessage(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                m.control = decodeControlMessage(r, r.uint32(), opts);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeSubOpts(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.subscribe = r.bool();\n                break;\n            case 2:\n                m.topic = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeMessage(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.from = r.bytes();\n                break;\n            case 2:\n                m.data = r.bytes();\n                break;\n            case 3:\n                m.seqno = r.bytes();\n                break;\n            case 4:\n                m.topic = r.string();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            case 6:\n                m.key = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    if (!m.topic)\n        throw Error(\"missing required 'topic'\");\n    return m;\n}\nfunction decodeControlMessage(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.ihave && m.ihave.length))\n                    m.ihave = [];\n                if (m.ihave.length < opts.maxControlMessages)\n                    m.ihave.push(decodeControlIHave(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 2:\n                if (!(m.iwant && m.iwant.length))\n                    m.iwant = [];\n                if (m.iwant.length < opts.maxControlMessages)\n                    m.iwant.push(decodeControlIWant(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                if (!(m.graft && m.graft.length))\n                    m.graft = [];\n                if (m.graft.length < opts.maxControlMessages)\n                    m.graft.push(decodeControlGraft(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 4:\n                if (!(m.prune && m.prune.length))\n                    m.prune = [];\n                if (m.prune.length < opts.maxControlMessages)\n                    m.prune.push(decodeControlPrune(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlIHave(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            case 2:\n                if (!(m.messageIDs && m.messageIDs.length))\n                    m.messageIDs = [];\n                if (opts.maxIhaveMessageIDs-- > 0)\n                    m.messageIDs.push(r.bytes());\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlIWant(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.messageIDs && m.messageIDs.length))\n                    m.messageIDs = [];\n                if (opts.maxIwantMessageIDs-- > 0)\n                    m.messageIDs.push(r.bytes());\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlGraft(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlPrune(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            case 2:\n                if (!(m.peers && m.peers.length))\n                    m.peers = [];\n                if (opts.maxPeerInfos-- > 0)\n                    m.peers.push(decodePeerInfo(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                m.backoff = r.uint64();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodePeerInfo(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.peerID = r.bytes();\n                break;\n            case 2:\n                m.signedPeerRecord = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\n//# sourceMappingURL=decodeRpc.js.map","import { convertToString } from '@multiformats/multiaddr/convert';\n// Protocols https://github.com/multiformats/multiaddr/blob/master/protocols.csv\n// code  size  name\n// 4     32    ip4\n// 41    128   ip6\nvar Protocol;\n(function (Protocol) {\n    Protocol[Protocol[\"ip4\"] = 4] = \"ip4\";\n    Protocol[Protocol[\"ip6\"] = 41] = \"ip6\";\n})(Protocol || (Protocol = {}));\nexport function multiaddrToIPStr(multiaddr) {\n    for (const tuple of multiaddr.tuples()) {\n        switch (tuple[0]) {\n            case Protocol.ip4:\n            case Protocol.ip6:\n                return convertToString(tuple[0], tuple[1]);\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=multiaddr.js.map","import { pipe } from 'it-pipe';\nimport { RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromBytes, peerIdFromString } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { MessageCache } from './message-cache.js';\nimport { RPC } from './message/rpc.js';\nimport * as constants from './constants.js';\nimport { shuffle, messageIdToString } from './utils/index.js';\nimport { PeerScore, createPeerScoreParams, createPeerScoreThresholds } from './score/index.js';\nimport { IWantTracer } from './tracer.js';\nimport { SimpleTimeCache } from './utils/time-cache.js';\nimport { ACCEPT_FROM_WHITELIST_DURATION_MS, ACCEPT_FROM_WHITELIST_MAX_MESSAGES, ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE } from './constants.js';\nimport { ChurnReason, getMetrics, IHaveIgnoreReason, InclusionReason, ScorePenalty } from './metrics.js';\nimport { ValidateError, MessageStatus, RejectReason, rejectReasonFromAcceptance } from './types.js';\nimport { buildRawMessage, validateToRawMessage } from './utils/buildRawMessage.js';\nimport { msgIdFnStrictNoSign, msgIdFnStrictSign } from './utils/msgIdFn.js';\nimport { computeAllPeersScoreWeights } from './score/scoreMetrics.js';\nimport { getPublishConfigFromPeerId } from './utils/publishConfig.js';\nimport { StrictNoSign, StrictSign, TopicValidatorResult } from '@libp2p/interface-pubsub';\nimport { removeFirstNItemsFromSet, removeItemsFromSet } from './utils/set.js';\nimport { pushable } from 'it-pushable';\nimport { InboundStream, OutboundStream } from './stream.js';\nimport { decodeRpc, defaultDecodeRpcLimits } from './message/decodeRpc.js';\nimport { multiaddrToIPStr } from './utils/multiaddr.js';\nexport const multicodec = constants.GossipsubIDv11;\nvar GossipStatusCode;\n(function (GossipStatusCode) {\n    GossipStatusCode[GossipStatusCode[\"started\"] = 0] = \"started\";\n    GossipStatusCode[GossipStatusCode[\"stopped\"] = 1] = \"stopped\";\n})(GossipStatusCode || (GossipStatusCode = {}));\nexport class GossipSub extends EventEmitter {\n    constructor(components, options = {}) {\n        super();\n        this.multicodecs = [constants.GossipsubIDv11, constants.GossipsubIDv10];\n        // State\n        this.peers = new Set();\n        this.streamsInbound = new Map();\n        this.streamsOutbound = new Map();\n        /** Ensures outbound streams are created sequentially */\n        this.outboundInflightQueue = pushable({ objectMode: true });\n        /** Direct peers */\n        this.direct = new Set();\n        /** Floodsub peers */\n        this.floodsubPeers = new Set();\n        /**\n         * Map of peer id and AcceptRequestWhileListEntry\n         */\n        this.acceptFromWhitelist = new Map();\n        /**\n         * Map of topics to which peers are subscribed to\n         */\n        this.topics = new Map();\n        /**\n         * List of our subscriptions\n         */\n        this.subscriptions = new Set();\n        /**\n         * Map of topic meshes\n         * topic => peer id set\n         */\n        this.mesh = new Map();\n        /**\n         * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership\n         * topic => peer id set\n         */\n        this.fanout = new Map();\n        /**\n         * Map of last publish time for fanout topics\n         * topic => last publish time\n         */\n        this.fanoutLastpub = new Map();\n        /**\n         * Map of pending messages to gossip\n         * peer id => control messages\n         */\n        this.gossip = new Map();\n        /**\n         * Map of control messages\n         * peer id => control message\n         */\n        this.control = new Map();\n        /**\n         * Number of IHAVEs received from peer in the last heartbeat\n         */\n        this.peerhave = new Map();\n        /** Number of messages we have asked from peer in the last heartbeat */\n        this.iasked = new Map();\n        /** Prune backoff map */\n        this.backoff = new Map();\n        /**\n         * Connection direction cache, marks peers with outbound connections\n         * peer id => direction\n         */\n        this.outbound = new Map();\n        /**\n         * Custom validator function per topic.\n         * Must return or resolve quickly (< 100ms) to prevent causing penalties for late messages.\n         * If you need to apply validation that may require longer times use `asyncValidation` option and callback the\n         * validation result through `Gossipsub.reportValidationResult`\n         */\n        this.topicValidators = new Map();\n        /**\n         * Number of heartbeats since the beginning of time\n         * This allows us to amortize some resource cleanup -- eg: backoff cleanup\n         */\n        this.heartbeatTicks = 0;\n        this.directPeerInitial = null;\n        this.status = { code: GossipStatusCode.stopped };\n        this.heartbeatTimer = null;\n        this.runHeartbeat = () => {\n            const timer = this.metrics?.heartbeatDuration.startTimer();\n            this.heartbeat()\n                .catch((err) => {\n                this.log('Error running heartbeat', err);\n            })\n                .finally(() => {\n                if (timer != null) {\n                    timer();\n                }\n                // Schedule the next run if still in started status\n                if (this.status.code === GossipStatusCode.started) {\n                    // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.\n                    clearTimeout(this.status.heartbeatTimeout);\n                    // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.\n                    // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.\n                    let msToNextHeartbeat = this.opts.heartbeatInterval - ((Date.now() - this.status.hearbeatStartMs) % this.opts.heartbeatInterval);\n                    // If too close to next heartbeat, skip one\n                    if (msToNextHeartbeat < this.opts.heartbeatInterval * 0.25) {\n                        msToNextHeartbeat += this.opts.heartbeatInterval;\n                        this.metrics?.heartbeatSkipped.inc();\n                    }\n                    this.status.heartbeatTimeout = setTimeout(this.runHeartbeat, msToNextHeartbeat);\n                }\n            });\n        };\n        const opts = {\n            fallbackToFloodsub: true,\n            floodPublish: true,\n            doPX: false,\n            directPeers: [],\n            D: constants.GossipsubD,\n            Dlo: constants.GossipsubDlo,\n            Dhi: constants.GossipsubDhi,\n            Dscore: constants.GossipsubDscore,\n            Dout: constants.GossipsubDout,\n            Dlazy: constants.GossipsubDlazy,\n            heartbeatInterval: constants.GossipsubHeartbeatInterval,\n            fanoutTTL: constants.GossipsubFanoutTTL,\n            mcacheLength: constants.GossipsubHistoryLength,\n            mcacheGossip: constants.GossipsubHistoryGossip,\n            seenTTL: constants.GossipsubSeenTTL,\n            gossipsubIWantFollowupMs: constants.GossipsubIWantFollowupTime,\n            prunePeers: constants.GossipsubPrunePeers,\n            pruneBackoff: constants.GossipsubPruneBackoff,\n            graftFloodThreshold: constants.GossipsubGraftFloodThreshold,\n            opportunisticGraftPeers: constants.GossipsubOpportunisticGraftPeers,\n            opportunisticGraftTicks: constants.GossipsubOpportunisticGraftTicks,\n            directConnectTicks: constants.GossipsubDirectConnectTicks,\n            ...options,\n            scoreParams: createPeerScoreParams(options.scoreParams),\n            scoreThresholds: createPeerScoreThresholds(options.scoreThresholds)\n        };\n        this.components = components;\n        this.decodeRpcLimits = opts.decodeRpcLimits ?? defaultDecodeRpcLimits;\n        this.globalSignaturePolicy = opts.globalSignaturePolicy ?? StrictSign;\n        // Also wants to get notified of peers connected using floodsub\n        if (opts.fallbackToFloodsub) {\n            this.multicodecs.push(constants.FloodsubID);\n        }\n        // From pubsub\n        this.log = logger(opts.debugName ?? 'libp2p:gossipsub');\n        // Gossipsub\n        this.opts = opts;\n        this.direct = new Set(opts.directPeers.map((p) => p.id.toString()));\n        this.seenCache = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        this.publishedMessageIds = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        if (options.msgIdFn) {\n            // Use custom function\n            this.msgIdFn = options.msgIdFn;\n        }\n        else {\n            switch (this.globalSignaturePolicy) {\n                case StrictSign:\n                    this.msgIdFn = msgIdFnStrictSign;\n                    break;\n                case StrictNoSign:\n                    this.msgIdFn = msgIdFnStrictNoSign;\n                    break;\n            }\n        }\n        if (options.fastMsgIdFn) {\n            this.fastMsgIdFn = options.fastMsgIdFn;\n            this.fastMsgIdCache = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        }\n        // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.\n        this.msgIdToStrFn = options.msgIdToStrFn ?? messageIdToString;\n        this.mcache = options.messageCache || new MessageCache(opts.mcacheGossip, opts.mcacheLength, this.msgIdToStrFn);\n        if (options.dataTransform) {\n            this.dataTransform = options.dataTransform;\n        }\n        if (options.metricsRegister) {\n            if (!options.metricsTopicStrToLabel) {\n                throw Error('Must set metricsTopicStrToLabel with metrics');\n            }\n            // in theory, each topic has its own meshMessageDeliveriesWindow param\n            // however in lodestar, we configure it mostly the same so just pick the max of positive ones\n            // (some topics have meshMessageDeliveriesWindow as 0)\n            const maxMeshMessageDeliveriesWindowMs = Math.max(...Object.values(opts.scoreParams.topics).map((topicParam) => topicParam.meshMessageDeliveriesWindow), constants.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS);\n            const metrics = getMetrics(options.metricsRegister, options.metricsTopicStrToLabel, {\n                gossipPromiseExpireSec: this.opts.gossipsubIWantFollowupMs / 1000,\n                behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,\n                maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000\n            });\n            metrics.mcacheSize.addCollect(() => this.onScrapeMetrics(metrics));\n            for (const protocol of this.multicodecs) {\n                metrics.protocolsEnabled.set({ protocol }, 1);\n            }\n            this.metrics = metrics;\n        }\n        else {\n            this.metrics = null;\n        }\n        this.gossipTracer = new IWantTracer(this.opts.gossipsubIWantFollowupMs, this.msgIdToStrFn, this.metrics);\n        /**\n         * libp2p\n         */\n        this.score = new PeerScore(this.opts.scoreParams, this.metrics, {\n            scoreCacheValidityMs: opts.heartbeatInterval\n        });\n        this.maxInboundStreams = options.maxInboundStreams;\n        this.maxOutboundStreams = options.maxOutboundStreams;\n        this.allowedTopics = opts.allowedTopics ? new Set(opts.allowedTopics) : null;\n    }\n    getPeers() {\n        return [...this.peers.keys()].map((str) => peerIdFromString(str));\n    }\n    isStarted() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    // LIFECYCLE METHODS\n    /**\n     * Mounts the gossipsub protocol onto the libp2p node and sends our\n     * our subscriptions to every peer connected\n     */\n    async start() {\n        // From pubsub\n        if (this.isStarted()) {\n            return;\n        }\n        this.log('starting');\n        this.publishConfig = await getPublishConfigFromPeerId(this.globalSignaturePolicy, this.components.peerId);\n        // Create the outbound inflight queue\n        // This ensures that outbound stream creation happens sequentially\n        this.outboundInflightQueue = pushable({ objectMode: true });\n        pipe(this.outboundInflightQueue, async (source) => {\n            for await (const { peerId, connection } of source) {\n                await this.createOutboundStream(peerId, connection);\n            }\n        }).catch((e) => this.log.error('outbound inflight queue error', e));\n        // set direct peer addresses in the address book\n        await Promise.all(this.opts.directPeers.map(async (p) => {\n            await this.components.peerStore.addressBook.add(p.id, p.addrs);\n        }));\n        const registrar = this.components.registrar;\n        // Incoming streams\n        // Called after a peer dials us\n        await Promise.all(this.multicodecs.map((multicodec) => registrar.handle(multicodec, this.onIncomingStream.bind(this), {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams\n        })));\n        // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022\n        //\n        // ## Setup:\n        // Gossipsub requests libp2p to callback, TBD\n        //\n        // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols\n        // The handler callback is registered in libp2p Upgrader.protocols map.\n        //\n        // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):\n        // - Adds encryption (NOISE in our case)\n        // - Multiplex stream\n        // - Create a muxer and register that for each new stream call Upgrader.protocols handler\n        //\n        // ## Topology\n        // - new instance of Topology (unlinked to libp2p) with handlers\n        // - registar.register(topology)\n        // register protocol with topology\n        // Topology callbacks called on connection manager changes\n        const topology = createTopology({\n            onConnect: this.onPeerConnected.bind(this),\n            onDisconnect: this.onPeerDisconnected.bind(this)\n        });\n        const registrarTopologyIds = await Promise.all(this.multicodecs.map((multicodec) => registrar.register(multicodec, topology)));\n        // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`\n        const heartbeatTimeout = setTimeout(this.runHeartbeat, constants.GossipsubHeartbeatInitialDelay);\n        // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`\n        this.status = {\n            code: GossipStatusCode.started,\n            registrarTopologyIds,\n            heartbeatTimeout: heartbeatTimeout,\n            hearbeatStartMs: Date.now() + constants.GossipsubHeartbeatInitialDelay\n        };\n        this.score.start();\n        // connect to direct peers\n        this.directPeerInitial = setTimeout(() => {\n            Promise.resolve()\n                .then(async () => {\n                await Promise.all(Array.from(this.direct).map(async (id) => await this.connect(id)));\n            })\n                .catch((err) => {\n                this.log(err);\n            });\n        }, constants.GossipsubDirectConnectInitialDelay);\n        this.log('started');\n    }\n    /**\n     * Unmounts the gossipsub protocol and shuts down every connection\n     */\n    async stop() {\n        this.log('stopping');\n        // From pubsub\n        if (this.status.code !== GossipStatusCode.started) {\n            return;\n        }\n        const { registrarTopologyIds } = this.status;\n        this.status = { code: GossipStatusCode.stopped };\n        // unregister protocol and handlers\n        const registrar = this.components.registrar;\n        registrarTopologyIds.forEach((id) => registrar.unregister(id));\n        this.outboundInflightQueue.end();\n        for (const outboundStream of this.streamsOutbound.values()) {\n            outboundStream.close();\n        }\n        this.streamsOutbound.clear();\n        for (const inboundStream of this.streamsInbound.values()) {\n            inboundStream.close();\n        }\n        this.streamsInbound.clear();\n        this.peers.clear();\n        this.subscriptions.clear();\n        // Gossipsub\n        if (this.heartbeatTimer) {\n            this.heartbeatTimer.cancel();\n            this.heartbeatTimer = null;\n        }\n        this.score.stop();\n        this.mesh.clear();\n        this.fanout.clear();\n        this.fanoutLastpub.clear();\n        this.gossip.clear();\n        this.control.clear();\n        this.peerhave.clear();\n        this.iasked.clear();\n        this.backoff.clear();\n        this.outbound.clear();\n        this.gossipTracer.clear();\n        this.seenCache.clear();\n        if (this.fastMsgIdCache)\n            this.fastMsgIdCache.clear();\n        if (this.directPeerInitial)\n            clearTimeout(this.directPeerInitial);\n        this.log('stopped');\n    }\n    /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */\n    dumpPeerScoreStats() {\n        return this.score.dumpPeerScoreStats();\n    }\n    /**\n     * On an inbound stream opened\n     */\n    onIncomingStream({ stream, connection }) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const peerId = connection.remotePeer;\n        // add peer to router\n        this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n        // create inbound stream\n        this.createInboundStream(peerId, stream);\n        // attempt to create outbound stream\n        this.outboundInflightQueue.push({ peerId, connection });\n    }\n    /**\n     * Registrar notifies an established connection with pubsub protocol\n     */\n    onPeerConnected(peerId, connection) {\n        this.metrics?.newConnectionCount.inc({ status: connection.stat.status });\n        // libp2p may emit a closed connection and never issue peer:disconnect event\n        // see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/398\n        if (!this.isStarted() || connection.stat.status !== 'OPEN') {\n            return;\n        }\n        this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n        this.outboundInflightQueue.push({ peerId, connection });\n    }\n    /**\n     * Registrar notifies a closing connection with pubsub protocol\n     */\n    onPeerDisconnected(peerId) {\n        this.log('connection ended %p', peerId);\n        this.removePeer(peerId);\n    }\n    async createOutboundStream(peerId, connection) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for inbound streams\n        // If an outbound stream already exists, don't create a new stream\n        if (this.streamsOutbound.has(id)) {\n            return;\n        }\n        try {\n            const stream = new OutboundStream(await connection.newStream(this.multicodecs), (e) => this.log.error('outbound pipe error', e), { maxBufferSize: this.opts.maxOutboundBufferSize });\n            this.log('create outbound stream %p', peerId);\n            this.streamsOutbound.set(id, stream);\n            const protocol = stream.protocol;\n            if (protocol === constants.FloodsubID) {\n                this.floodsubPeers.add(id);\n            }\n            this.metrics?.peersPerProtocol.inc({ protocol }, 1);\n            // Immediately send own subscriptions via the newly attached stream\n            if (this.subscriptions.size > 0) {\n                this.log('send subscriptions to', id);\n                this.sendSubscriptions(id, Array.from(this.subscriptions), true);\n            }\n        }\n        catch (e) {\n            this.log.error('createOutboundStream error', e);\n        }\n    }\n    async createInboundStream(peerId, stream) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for outbound streams\n        // If a peer initiates a new inbound connection\n        // we assume that one is the new canonical inbound stream\n        const priorInboundStream = this.streamsInbound.get(id);\n        if (priorInboundStream !== undefined) {\n            this.log('replacing existing inbound steam %s', id);\n            priorInboundStream.close();\n        }\n        this.log('create inbound stream %s', id);\n        const inboundStream = new InboundStream(stream, { maxDataLength: this.opts.maxInboundDataLength });\n        this.streamsInbound.set(id, inboundStream);\n        this.pipePeerReadStream(peerId, inboundStream.source).catch((err) => this.log(err));\n    }\n    /**\n     * Add a peer to the router\n     */\n    addPeer(peerId, direction, addr) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            this.log('new peer %p', peerId);\n            this.peers.add(id);\n            // Add to peer scoring\n            this.score.addPeer(id);\n            const currentIP = multiaddrToIPStr(addr);\n            if (currentIP !== null) {\n                this.score.addIP(id, currentIP);\n            }\n            else {\n                this.log('Added peer has no IP in current address %s %s', id, addr.toString());\n            }\n            // track the connection direction. Don't allow to unset outbound\n            if (!this.outbound.has(id)) {\n                this.outbound.set(id, direction === 'outbound');\n            }\n        }\n    }\n    /**\n     * Removes a peer from the router\n     */\n    removePeer(peerId) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // delete peer\n        this.log('delete peer %p', peerId);\n        this.peers.delete(id);\n        const outboundStream = this.streamsOutbound.get(id);\n        const inboundStream = this.streamsInbound.get(id);\n        if (outboundStream) {\n            this.metrics?.peersPerProtocol.inc({ protocol: outboundStream.protocol }, -1);\n        }\n        // close streams\n        outboundStream?.close();\n        inboundStream?.close();\n        // remove streams\n        this.streamsOutbound.delete(id);\n        this.streamsInbound.delete(id);\n        // remove peer from topics map\n        for (const peers of this.topics.values()) {\n            peers.delete(id);\n        }\n        // Remove this peer from the mesh\n        for (const [topicStr, peers] of this.mesh) {\n            if (peers.delete(id) === true) {\n                this.metrics?.onRemoveFromMesh(topicStr, ChurnReason.Dc, 1);\n            }\n        }\n        // Remove this peer from the fanout\n        for (const peers of this.fanout.values()) {\n            peers.delete(id);\n        }\n        // Remove from floodsubPeers\n        this.floodsubPeers.delete(id);\n        // Remove from gossip mapping\n        this.gossip.delete(id);\n        // Remove from control mapping\n        this.control.delete(id);\n        // Remove from backoff mapping\n        this.outbound.delete(id);\n        // Remove from peer scoring\n        this.score.removePeer(id);\n        this.acceptFromWhitelist.delete(id);\n    }\n    // API METHODS\n    get started() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    /**\n     * Get a the peer-ids in a topic mesh\n     */\n    getMeshPeers(topic) {\n        const peersInTopic = this.mesh.get(topic);\n        return peersInTopic ? Array.from(peersInTopic) : [];\n    }\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     */\n    getSubscribers(topic) {\n        const peersInTopic = this.topics.get(topic);\n        return (peersInTopic ? Array.from(peersInTopic) : []).map((str) => peerIdFromString(str));\n    }\n    /**\n     * Get the list of topics which the peer is subscribed to.\n     */\n    getTopics() {\n        return Array.from(this.subscriptions);\n    }\n    // TODO: Reviewing Pubsub API\n    // MESSAGE METHODS\n    /**\n     * Responsible for processing each RPC message received by other peers.\n     */\n    async pipePeerReadStream(peerId, stream) {\n        try {\n            await pipe(stream, async (source) => {\n                for await (const data of source) {\n                    try {\n                        // TODO: Check max gossip message size, before decodeRpc()\n                        const rpcBytes = data.subarray();\n                        // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.\n                        // TODO: What should we do if the entire RPC is invalid?\n                        const rpc = decodeRpc(rpcBytes, this.decodeRpcLimits);\n                        this.metrics?.onRpcRecv(rpc, rpcBytes.length);\n                        // Since processRpc may be overridden entirely in unsafe ways,\n                        // the simplest/safest option here is to wrap in a function and capture all errors\n                        // to prevent a top-level unhandled exception\n                        // This processing of rpc messages should happen without awaiting full validation/execution of prior messages\n                        if (this.opts.awaitRpcHandler) {\n                            await this.handleReceivedRpc(peerId, rpc);\n                        }\n                        else {\n                            this.handleReceivedRpc(peerId, rpc).catch((err) => this.log(err));\n                        }\n                    }\n                    catch (e) {\n                        this.log(e);\n                    }\n                }\n            });\n        }\n        catch (err) {\n            this.handlePeerReadStreamError(err, peerId);\n        }\n    }\n    /**\n     * Handle error when read stream pipe throws, less of the functional use but more\n     * to for testing purposes to spy on the error handling\n     * */\n    handlePeerReadStreamError(err, peerId) {\n        this.log.error(err);\n        this.onPeerDisconnected(peerId);\n    }\n    /**\n     * Handles an rpc request from a peer\n     */\n    async handleReceivedRpc(from, rpc) {\n        // Check if peer is graylisted in which case we ignore the event\n        if (!this.acceptFrom(from.toString())) {\n            this.log('received message from unacceptable peer %p', from);\n            this.metrics?.rpcRecvNotAccepted.inc();\n            return;\n        }\n        this.log('rpc from %p', from);\n        // Handle received subscriptions\n        if (rpc.subscriptions && rpc.subscriptions.length > 0) {\n            // update peer subscriptions\n            const subscriptions = [];\n            rpc.subscriptions.forEach((subOpt) => {\n                const topic = subOpt.topic;\n                const subscribe = subOpt.subscribe === true;\n                if (topic != null) {\n                    if (this.allowedTopics && !this.allowedTopics.has(topic)) {\n                        // Not allowed: subscription data-structures are not bounded by topic count\n                        // TODO: Should apply behaviour penalties?\n                        return;\n                    }\n                    this.handleReceivedSubscription(from, topic, subscribe);\n                    subscriptions.push({ topic, subscribe });\n                }\n            });\n            this.dispatchEvent(new CustomEvent('subscription-change', {\n                detail: { peerId: from, subscriptions }\n            }));\n        }\n        // Handle messages\n        // TODO: (up to limit)\n        if (rpc.messages) {\n            for (const message of rpc.messages) {\n                if (this.allowedTopics && !this.allowedTopics.has(message.topic)) {\n                    // Not allowed: message cache data-structures are not bounded by topic count\n                    // TODO: Should apply behaviour penalties?\n                    continue;\n                }\n                const handleReceivedMessagePromise = this.handleReceivedMessage(from, message)\n                    // Should never throw, but handle just in case\n                    .catch((err) => this.log(err));\n                if (this.opts.awaitRpcMessageHandler) {\n                    await handleReceivedMessagePromise;\n                }\n            }\n        }\n        // Handle control messages\n        if (rpc.control) {\n            await this.handleControlMessage(from.toString(), rpc.control);\n        }\n    }\n    /**\n     * Handles a subscription change from a peer\n     */\n    handleReceivedSubscription(from, topic, subscribe) {\n        this.log('subscription update from %p topic %s', from, topic);\n        let topicSet = this.topics.get(topic);\n        if (topicSet == null) {\n            topicSet = new Set();\n            this.topics.set(topic, topicSet);\n        }\n        if (subscribe) {\n            // subscribe peer to new topic\n            topicSet.add(from.toString());\n        }\n        else {\n            // unsubscribe from existing topic\n            topicSet.delete(from.toString());\n        }\n        // TODO: rust-libp2p has A LOT more logic here\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n    async handleReceivedMessage(from, rpcMsg) {\n        this.metrics?.onMsgRecvPreValidation(rpcMsg.topic);\n        const validationResult = await this.validateReceivedMessage(from, rpcMsg);\n        this.metrics?.onMsgRecvResult(rpcMsg.topic, validationResult.code);\n        switch (validationResult.code) {\n            case MessageStatus.duplicate:\n                // Report the duplicate\n                this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);\n                // due to the collision of fastMsgIdFn, 2 different messages may end up the same fastMsgId\n                // so we need to also mark the duplicate message as delivered or the promise is not resolved\n                // and peer gets penalized. See https://github.com/ChainSafe/js-libp2p-gossipsub/pull/385\n                this.gossipTracer.deliverMessage(validationResult.msgIdStr, true);\n                this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());\n                return;\n            case MessageStatus.invalid:\n                // invalid messages received\n                // metrics.register_invalid_message(&raw_message.topic)\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                if (validationResult.msgIdStr) {\n                    const msgIdStr = validationResult.msgIdStr;\n                    this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);\n                    this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);\n                }\n                else {\n                    this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);\n                }\n                this.metrics?.onMsgRecvInvalid(rpcMsg.topic, validationResult);\n                return;\n            case MessageStatus.valid:\n                // Tells score that message arrived (but is maybe not fully validated yet).\n                // Consider the message as delivered for gossip promises.\n                this.score.validateMessage(validationResult.messageId.msgIdStr);\n                this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);\n                // Add the message to our memcache\n                // if no validation is required, mark the message as validated\n                this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);\n                // Dispatch the message to the user if we are subscribed to the topic\n                if (this.subscriptions.has(rpcMsg.topic)) {\n                    const isFromSelf = this.components.peerId.equals(from);\n                    if (!isFromSelf || this.opts.emitSelf) {\n                        super.dispatchEvent(new CustomEvent('gossipsub:message', {\n                            detail: {\n                                propagationSource: from,\n                                msgId: validationResult.messageId.msgIdStr,\n                                msg: validationResult.msg\n                            }\n                        }));\n                        // TODO: Add option to switch between emit per topic or all messages in one\n                        super.dispatchEvent(new CustomEvent('message', { detail: validationResult.msg }));\n                    }\n                }\n                // Forward the message to mesh peers, if no validation is required\n                // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward\n                if (!this.opts.asyncValidation) {\n                    // TODO: in rust-libp2p\n                    // .forward_msg(&msg_id, raw_message, Some(propagation_source))\n                    this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());\n                }\n        }\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n    async validateReceivedMessage(propagationSource, rpcMsg) {\n        // Fast message ID stuff\n        const fastMsgIdStr = this.fastMsgIdFn?.(rpcMsg);\n        const msgIdCached = fastMsgIdStr !== undefined ? this.fastMsgIdCache?.get(fastMsgIdStr) : undefined;\n        if (msgIdCached) {\n            // This message has been seen previously. Ignore it\n            return { code: MessageStatus.duplicate, msgIdStr: msgIdCached };\n        }\n        // Perform basic validation on message and convert to RawGossipsubMessage for fastMsgIdFn()\n        const validationResult = await validateToRawMessage(this.globalSignaturePolicy, rpcMsg);\n        if (!validationResult.valid) {\n            return { code: MessageStatus.invalid, reason: RejectReason.Error, error: validationResult.error };\n        }\n        const msg = validationResult.message;\n        // Try and perform the data transform to the message. If it fails, consider it invalid.\n        try {\n            if (this.dataTransform) {\n                msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);\n            }\n        }\n        catch (e) {\n            this.log('Invalid message, transform failed', e);\n            return { code: MessageStatus.invalid, reason: RejectReason.Error, error: ValidateError.TransformFailed };\n        }\n        // TODO: Check if message is from a blacklisted source or propagation origin\n        // - Reject any message from a blacklisted peer\n        // - Also reject any message that originated from a blacklisted peer\n        // - reject messages claiming to be from ourselves but not locally published\n        // Calculate the message id on the transformed data.\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        const messageId = { msgId, msgIdStr };\n        // Add the message to the duplicate caches\n        if (fastMsgIdStr !== undefined && this.fastMsgIdCache) {\n            const collision = this.fastMsgIdCache.put(fastMsgIdStr, msgIdStr);\n            if (collision) {\n                this.metrics?.fastMsgIdCacheCollision.inc();\n            }\n        }\n        if (this.seenCache.has(msgIdStr)) {\n            return { code: MessageStatus.duplicate, msgIdStr };\n        }\n        else {\n            this.seenCache.put(msgIdStr);\n        }\n        // (Optional) Provide custom validation here with dynamic validators per topic\n        // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores\n        // to not penalize peers for long validation times.\n        const topicValidator = this.topicValidators.get(rpcMsg.topic);\n        if (topicValidator != null) {\n            let acceptance;\n            // Use try {} catch {} in case topicValidator() is synchronous\n            try {\n                acceptance = await topicValidator(propagationSource, msg);\n            }\n            catch (e) {\n                const errCode = e.code;\n                if (errCode === constants.ERR_TOPIC_VALIDATOR_IGNORE)\n                    acceptance = TopicValidatorResult.Ignore;\n                if (errCode === constants.ERR_TOPIC_VALIDATOR_REJECT)\n                    acceptance = TopicValidatorResult.Reject;\n                else\n                    acceptance = TopicValidatorResult.Ignore;\n            }\n            if (acceptance !== TopicValidatorResult.Accept) {\n                return { code: MessageStatus.invalid, reason: rejectReasonFromAcceptance(acceptance), msgIdStr };\n            }\n        }\n        return { code: MessageStatus.valid, messageId, msg };\n    }\n    /**\n     * Return score of a peer.\n     */\n    getScore(peerId) {\n        return this.score.score(peerId);\n    }\n    /**\n     * Send an rpc object to a peer with subscriptions\n     */\n    sendSubscriptions(toPeer, topics, subscribe) {\n        this.sendRpc(toPeer, {\n            subscriptions: topics.map((topic) => ({ topic, subscribe }))\n        });\n    }\n    /**\n     * Handles an rpc control message from a peer\n     */\n    async handleControlMessage(id, controlMsg) {\n        if (controlMsg === undefined) {\n            return;\n        }\n        const iwant = controlMsg.ihave ? this.handleIHave(id, controlMsg.ihave) : [];\n        const ihave = controlMsg.iwant ? this.handleIWant(id, controlMsg.iwant) : [];\n        const prune = controlMsg.graft ? await this.handleGraft(id, controlMsg.graft) : [];\n        controlMsg.prune && (await this.handlePrune(id, controlMsg.prune));\n        if (!iwant.length && !ihave.length && !prune.length) {\n            return;\n        }\n        this.sendRpc(id, { messages: ihave, control: { iwant, prune } });\n    }\n    /**\n     * Whether to accept a message from a peer\n     */\n    acceptFrom(id) {\n        if (this.direct.has(id)) {\n            return true;\n        }\n        const now = Date.now();\n        const entry = this.acceptFromWhitelist.get(id);\n        if (entry && entry.messagesAccepted < ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {\n            entry.messagesAccepted += 1;\n            return true;\n        }\n        const score = this.score.score(id);\n        if (score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {\n            // peer is unlikely to be able to drop its score to `graylistThreshold`\n            // after 128 messages or 1s\n            this.acceptFromWhitelist.set(id, {\n                messagesAccepted: 0,\n                acceptUntil: now + ACCEPT_FROM_WHITELIST_DURATION_MS\n            });\n        }\n        else {\n            this.acceptFromWhitelist.delete(id);\n        }\n        return score >= this.opts.scoreThresholds.graylistThreshold;\n    }\n    /**\n     * Handles IHAVE messages\n     */\n    handleIHave(id, ihave) {\n        if (!ihave.length) {\n            return [];\n        }\n        // we ignore IHAVE gossip from any peer whose score is below the gossips threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.LowScore });\n            return [];\n        }\n        // IHAVE flood protection\n        const peerhave = (this.peerhave.get(id) ?? 0) + 1;\n        this.peerhave.set(id, peerhave);\n        if (peerhave > constants.GossipsubMaxIHaveMessages) {\n            this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIhave });\n            return [];\n        }\n        const iasked = this.iasked.get(id) ?? 0;\n        if (iasked >= constants.GossipsubMaxIHaveLength) {\n            this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIasked });\n            return [];\n        }\n        // string msgId => msgId\n        const iwant = new Map();\n        ihave.forEach(({ topicID, messageIDs }) => {\n            if (!topicID || !messageIDs || !this.mesh.has(topicID)) {\n                return;\n            }\n            let idonthave = 0;\n            messageIDs.forEach((msgId) => {\n                const msgIdStr = this.msgIdToStrFn(msgId);\n                if (!this.seenCache.has(msgIdStr)) {\n                    iwant.set(msgIdStr, msgId);\n                    idonthave++;\n                }\n            });\n            this.metrics?.onIhaveRcv(topicID, messageIDs.length, idonthave);\n        });\n        if (!iwant.size) {\n            return [];\n        }\n        let iask = iwant.size;\n        if (iask + iasked > constants.GossipsubMaxIHaveLength) {\n            iask = constants.GossipsubMaxIHaveLength - iasked;\n        }\n        this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);\n        let iwantList = Array.from(iwant.values());\n        // ask in random order\n        shuffle(iwantList);\n        // truncate to the messages we are actually asking for and update the iasked counter\n        iwantList = iwantList.slice(0, iask);\n        this.iasked.set(id, iasked + iask);\n        this.gossipTracer.addPromise(id, iwantList);\n        return [\n            {\n                messageIDs: iwantList\n            }\n        ];\n    }\n    /**\n     * Handles IWANT messages\n     * Returns messages to send back to peer\n     */\n    handleIWant(id, iwant) {\n        if (!iwant.length) {\n            return [];\n        }\n        // we don't respond to IWANT requests from any per whose score is below the gossip threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);\n            return [];\n        }\n        const ihave = new Map();\n        const iwantByTopic = new Map();\n        let iwantDonthave = 0;\n        iwant.forEach(({ messageIDs }) => {\n            messageIDs &&\n                messageIDs.forEach((msgId) => {\n                    const msgIdStr = this.msgIdToStrFn(msgId);\n                    const entry = this.mcache.getWithIWantCount(msgIdStr, id);\n                    if (entry == null) {\n                        iwantDonthave++;\n                        return;\n                    }\n                    iwantByTopic.set(entry.msg.topic, 1 + (iwantByTopic.get(entry.msg.topic) ?? 0));\n                    if (entry.count > constants.GossipsubGossipRetransmission) {\n                        this.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);\n                        return;\n                    }\n                    ihave.set(msgIdStr, entry.msg);\n                });\n        });\n        this.metrics?.onIwantRcv(iwantByTopic, iwantDonthave);\n        if (!ihave.size) {\n            this.log('IWANT: Could not provide any wanted messages to %s', id);\n            return [];\n        }\n        this.log('IWANT: Sending %d messages to %s', ihave.size, id);\n        return Array.from(ihave.values());\n    }\n    /**\n     * Handles Graft messages\n     */\n    async handleGraft(id, graft) {\n        const prune = [];\n        const score = this.score.score(id);\n        const now = Date.now();\n        let doPX = this.opts.doPX;\n        graft.forEach(({ topicID }) => {\n            if (!topicID) {\n                return;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (!peersInMesh) {\n                // don't do PX when there is an unknown topic to avoid leaking our peers\n                doPX = false;\n                // spam hardening: ignore GRAFTs for unknown topics\n                return;\n            }\n            // check if peer is already in the mesh; if so do nothing\n            if (peersInMesh.has(id)) {\n                return;\n            }\n            // we don't GRAFT to/from direct peers; complain loudly if this happens\n            if (this.direct.has(id)) {\n                this.log('GRAFT: ignoring request from direct peer %s', id);\n                // this is possibly a bug from a non-reciprical configuration; send a PRUNE\n                prune.push(topicID);\n                // but don't px\n                doPX = false;\n                return;\n            }\n            // make sure we are not backing off that peer\n            const expire = this.backoff.get(topicID)?.get(id);\n            if (typeof expire === 'number' && now < expire) {\n                this.log('GRAFT: ignoring backed off peer %s', id);\n                // add behavioral penalty\n                this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                // no PX\n                doPX = false;\n                // check the flood cutoff -- is the GRAFT coming too fast?\n                const floodCutoff = expire + this.opts.graftFloodThreshold - this.opts.pruneBackoff;\n                if (now < floodCutoff) {\n                    // extra penalty\n                    this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                }\n                // refresh the backoff\n                this.addBackoff(id, topicID);\n                prune.push(topicID);\n                return;\n            }\n            // check the score\n            if (score < 0) {\n                // we don't GRAFT peers with negative score\n                this.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);\n                // we do send them PRUNE however, because it's a matter of protocol correctness\n                prune.push(topicID);\n                // but we won't PX to them\n                doPX = false;\n                // add/refresh backoff so that we don't reGRAFT too early even if the score decays\n                this.addBackoff(id, topicID);\n                return;\n            }\n            // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts\n            // from peers with outbound connections; this is a defensive check to restrict potential\n            // mesh takeover attacks combined with love bombing\n            if (peersInMesh.size >= this.opts.Dhi && !this.outbound.get(id)) {\n                prune.push(topicID);\n                this.addBackoff(id, topicID);\n                return;\n            }\n            this.log('GRAFT: Add mesh link from %s in %s', id, topicID);\n            this.score.graft(id, topicID);\n            peersInMesh.add(id);\n            this.metrics?.onAddToMesh(topicID, InclusionReason.Subscribed, 1);\n        });\n        if (!prune.length) {\n            return [];\n        }\n        return await Promise.all(prune.map((topic) => this.makePrune(id, topic, doPX)));\n    }\n    /**\n     * Handles Prune messages\n     */\n    async handlePrune(id, prune) {\n        const score = this.score.score(id);\n        for (const { topicID, backoff, peers } of prune) {\n            if (topicID == null) {\n                continue;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (!peersInMesh) {\n                return;\n            }\n            this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);\n            this.score.prune(id, topicID);\n            if (peersInMesh.has(id)) {\n                peersInMesh.delete(id);\n                this.metrics?.onRemoveFromMesh(topicID, ChurnReason.Unsub, 1);\n            }\n            // is there a backoff specified by the peer? if so obey it\n            if (typeof backoff === 'number' && backoff > 0) {\n                this.doAddBackoff(id, topicID, backoff * 1000);\n            }\n            else {\n                this.addBackoff(id, topicID);\n            }\n            // PX\n            if (peers && peers.length) {\n                // we ignore PX from peers with insufficient scores\n                if (score < this.opts.scoreThresholds.acceptPXThreshold) {\n                    this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);\n                    continue;\n                }\n                await this.pxConnect(peers);\n            }\n        }\n    }\n    /**\n     * Add standard backoff log for a peer in a topic\n     */\n    addBackoff(id, topic) {\n        this.doAddBackoff(id, topic, this.opts.pruneBackoff);\n    }\n    /**\n     * Add backoff expiry interval for a peer in a topic\n     *\n     * @param id\n     * @param topic\n     * @param interval - backoff duration in milliseconds\n     */\n    doAddBackoff(id, topic, interval) {\n        let backoff = this.backoff.get(topic);\n        if (!backoff) {\n            backoff = new Map();\n            this.backoff.set(topic, backoff);\n        }\n        const expire = Date.now() + interval;\n        const existingExpire = backoff.get(id) ?? 0;\n        if (existingExpire < expire) {\n            backoff.set(id, expire);\n        }\n    }\n    /**\n     * Apply penalties from broken IHAVE/IWANT promises\n     */\n    applyIwantPenalties() {\n        this.gossipTracer.getBrokenPromises().forEach((count, p) => {\n            this.log(\"peer %s didn't follow up in %d IWANT requests; adding penalty\", p, count);\n            this.score.addPenalty(p, count, ScorePenalty.BrokenPromise);\n        });\n    }\n    /**\n     * Clear expired backoff expiries\n     */\n    clearBackoff() {\n        // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much\n        if (this.heartbeatTicks % constants.GossipsubPruneBackoffTicks !== 0) {\n            return;\n        }\n        const now = Date.now();\n        this.backoff.forEach((backoff, topic) => {\n            backoff.forEach((expire, id) => {\n                if (expire < now) {\n                    backoff.delete(id);\n                }\n            });\n            if (backoff.size === 0) {\n                this.backoff.delete(topic);\n            }\n        });\n    }\n    /**\n     * Maybe reconnect to direct peers\n     */\n    async directConnect() {\n        const toconnect = [];\n        this.direct.forEach((id) => {\n            if (!this.streamsOutbound.has(id)) {\n                toconnect.push(id);\n            }\n        });\n        await Promise.all(toconnect.map(async (id) => await this.connect(id)));\n    }\n    /**\n     * Maybe attempt connection given signed peer records\n     */\n    async pxConnect(peers) {\n        if (peers.length > this.opts.prunePeers) {\n            shuffle(peers);\n            peers = peers.slice(0, this.opts.prunePeers);\n        }\n        const toconnect = [];\n        await Promise.all(peers.map(async (pi) => {\n            if (!pi.peerID) {\n                return;\n            }\n            const p = peerIdFromBytes(pi.peerID).toString();\n            if (this.peers.has(p)) {\n                return;\n            }\n            if (!pi.signedPeerRecord) {\n                toconnect.push(p);\n                return;\n            }\n            // The peer sent us a signed record\n            // This is not a record from the peer who sent the record, but another peer who is connected with it\n            // Ensure that it is valid\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(pi.signedPeerRecord, 'libp2p-peer-record');\n                const eid = envelope.peerId;\n                if (!envelope.peerId.equals(p)) {\n                    this.log(\"bogus peer record obtained through px: peer ID %p doesn't match expected peer %p\", eid, p);\n                    return;\n                }\n                if (!(await this.components.peerStore.addressBook.consumePeerRecord(envelope))) {\n                    this.log('bogus peer record obtained through px: could not add peer record to address book');\n                    return;\n                }\n                toconnect.push(p);\n            }\n            catch (e) {\n                this.log('bogus peer record obtained through px: invalid signature or not a peer record');\n            }\n        }));\n        if (!toconnect.length) {\n            return;\n        }\n        await Promise.all(toconnect.map(async (id) => await this.connect(id)));\n    }\n    /**\n     * Connect to a peer using the gossipsub protocol\n     */\n    async connect(id) {\n        this.log('Initiating connection with %s', id);\n        const peerId = peerIdFromString(id);\n        const connection = await this.components.connectionManager.openConnection(peerId);\n        for (const multicodec of this.multicodecs) {\n            for (const topology of this.components.registrar.getTopologies(multicodec)) {\n                topology.onConnect(peerId, connection);\n            }\n        }\n    }\n    /**\n     * Subscribes to a topic\n     */\n    subscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Pubsub has not started');\n        }\n        if (!this.subscriptions.has(topic)) {\n            this.subscriptions.add(topic);\n            for (const peerId of this.peers.keys()) {\n                this.sendSubscriptions(peerId, [topic], true);\n            }\n        }\n        this.join(topic);\n    }\n    /**\n     * Unsubscribe to a topic\n     */\n    unsubscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Pubsub is not started');\n        }\n        const wasSubscribed = this.subscriptions.delete(topic);\n        this.log('unsubscribe from %s - am subscribed %s', topic, wasSubscribed);\n        if (wasSubscribed) {\n            for (const peerId of this.peers.keys()) {\n                this.sendSubscriptions(peerId, [topic], false);\n            }\n        }\n        this.leave(topic);\n    }\n    /**\n     * Join topic\n     */\n    join(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Gossipsub has not started');\n        }\n        // if we are already in the mesh, return\n        if (this.mesh.has(topic)) {\n            return;\n        }\n        this.log('JOIN %s', topic);\n        this.metrics?.onJoin(topic);\n        const toAdd = new Set();\n        // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,\n        // removing the fanout entry.\n        const fanoutPeers = this.fanout.get(topic);\n        if (fanoutPeers) {\n            // Remove fanout entry and the last published time\n            this.fanout.delete(topic);\n            this.fanoutLastpub.delete(topic);\n            // remove explicit peers, peers with negative scores, and backoffed peers\n            fanoutPeers.forEach((id) => {\n                // TODO:rust-libp2p checks `self.backoffs.is_backoff_with_slack()`\n                if (!this.direct.has(id) && this.score.score(id) >= 0) {\n                    toAdd.add(id);\n                }\n            });\n            this.metrics?.onAddToMesh(topic, InclusionReason.Fanout, toAdd.size);\n        }\n        // check if we need to get more peers, which we randomly select\n        if (toAdd.size < this.opts.D) {\n            const fanoutCount = toAdd.size;\n            const newPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => \n            // filter direct peers and peers with negative score\n            !toAdd.has(id) && !this.direct.has(id) && this.score.score(id) >= 0);\n            newPeers.forEach((peer) => {\n                toAdd.add(peer);\n            });\n            this.metrics?.onAddToMesh(topic, InclusionReason.Random, toAdd.size - fanoutCount);\n        }\n        this.mesh.set(topic, toAdd);\n        toAdd.forEach((id) => {\n            this.log('JOIN: Add mesh link to %s in %s', id, topic);\n            this.sendGraft(id, topic);\n            // rust-libp2p\n            // - peer_score.graft()\n            // - Self::control_pool_add()\n            // - peer_added_to_mesh()\n        });\n    }\n    /**\n     * Leave topic\n     */\n    leave(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Gossipsub has not started');\n        }\n        this.log('LEAVE %s', topic);\n        this.metrics?.onLeave(topic);\n        // Send PRUNE to mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers) {\n            Promise.all(Array.from(meshPeers).map(async (id) => {\n                this.log('LEAVE: Remove mesh link to %s in %s', id, topic);\n                return await this.sendPrune(id, topic);\n            })).catch((err) => {\n                this.log('Error sending prunes to mesh peers', err);\n            });\n            this.mesh.delete(topic);\n        }\n    }\n    selectPeersToForward(topic, propagationSource, excludePeers) {\n        const tosend = new Set();\n        // Add explicit peers\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic) {\n            this.direct.forEach((peer) => {\n                if (peersInTopic.has(peer) && propagationSource !== peer && !excludePeers?.has(peer)) {\n                    tosend.add(peer);\n                }\n            });\n            // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not\n            // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693\n            // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361\n            this.floodsubPeers.forEach((peer) => {\n                if (peersInTopic.has(peer) &&\n                    propagationSource !== peer &&\n                    !excludePeers?.has(peer) &&\n                    this.score.score(peer) >= this.opts.scoreThresholds.publishThreshold) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        // add mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers && meshPeers.size > 0) {\n            meshPeers.forEach((peer) => {\n                if (propagationSource !== peer && !excludePeers?.has(peer)) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        return tosend;\n    }\n    selectPeersToPublish(topic) {\n        const tosend = new Set();\n        const tosendCount = {\n            direct: 0,\n            floodsub: 0,\n            mesh: 0,\n            fanout: 0\n        };\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic) {\n            // flood-publish behavior\n            // send to direct peers and _all_ peers meeting the publishThreshold\n            if (this.opts.floodPublish) {\n                peersInTopic.forEach((id) => {\n                    if (this.direct.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    }\n                    else if (this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n            }\n            else {\n                // non-flood-publish behavior\n                // send to direct peers, subscribed floodsub peers\n                // and some mesh peers above publishThreshold\n                // direct peers (if subscribed)\n                this.direct.forEach((id) => {\n                    if (peersInTopic.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    }\n                });\n                // floodsub peers\n                // Note: if there are no floodsub peers, we save a loop through peersInTopic Map\n                this.floodsubPeers.forEach((id) => {\n                    if (peersInTopic.has(id) && this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n                // Gossipsub peers handling\n                const meshPeers = this.mesh.get(topic);\n                if (meshPeers && meshPeers.size > 0) {\n                    meshPeers.forEach((peer) => {\n                        tosend.add(peer);\n                        tosendCount.mesh++;\n                    });\n                }\n                // We are not in the mesh for topic, use fanout peers\n                else {\n                    const fanoutPeers = this.fanout.get(topic);\n                    if (fanoutPeers && fanoutPeers.size > 0) {\n                        fanoutPeers.forEach((peer) => {\n                            tosend.add(peer);\n                            tosendCount.fanout++;\n                        });\n                    }\n                    // We have no fanout peers, select mesh_n of them and add them to the fanout\n                    else {\n                        // If we are not in the fanout, then pick peers in topic above the publishThreshold\n                        const newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => {\n                            return this.score.score(id) >= this.opts.scoreThresholds.publishThreshold;\n                        });\n                        if (newFanoutPeers.size > 0) {\n                            // eslint-disable-line max-depth\n                            this.fanout.set(topic, newFanoutPeers);\n                            newFanoutPeers.forEach((peer) => {\n                                // eslint-disable-line max-depth\n                                tosend.add(peer);\n                                tosendCount.fanout++;\n                            });\n                        }\n                    }\n                    // We are publishing to fanout peers - update the time we published\n                    this.fanoutLastpub.set(topic, Date.now());\n                }\n            }\n        }\n        return { tosend, tosendCount };\n    }\n    /**\n     * Forwards a message from our peers.\n     *\n     * For messages published by us (the app layer), this class uses `publish`\n     */\n    forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {\n        // message is fully validated inform peer_score\n        if (propagationSource) {\n            this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);\n        }\n        const tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);\n        // Note: Don't throw if tosend is empty, we can have a mesh with a single peer\n        // forward the message to peers\n        tosend.forEach((id) => {\n            // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n            this.sendRpc(id, { messages: [rawMsg] });\n        });\n        this.metrics?.onForwardMsg(rawMsg.topic, tosend.size);\n    }\n    /**\n     * App layer publishes a message to peers, return number of peers this message is published to\n     * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.\n     *\n     * For messages not from us, this class uses `forwardMessage`.\n     */\n    async publish(topic, data, opts) {\n        const transformedData = this.dataTransform ? this.dataTransform.outboundTransform(topic, data) : data;\n        if (this.publishConfig == null) {\n            throw Error('PublishError.Uninitialized');\n        }\n        // Prepare raw message with user's publishConfig\n        const { raw: rawMsg, msg } = await buildRawMessage(this.publishConfig, topic, data, transformedData);\n        // calculate the message id from the un-transformed data\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const ignoreDuplicatePublishError = opts?.ignoreDuplicatePublishError ?? this.opts.ignoreDuplicatePublishError;\n        if (this.seenCache.has(msgIdStr)) {\n            // This message has already been seen. We don't re-publish messages that have already\n            // been published on the network.\n            if (ignoreDuplicatePublishError) {\n                this.metrics?.onPublishDuplicateMsg(topic);\n                return { recipients: [] };\n            }\n            throw Error('PublishError.Duplicate');\n        }\n        const { tosend, tosendCount } = this.selectPeersToPublish(topic);\n        const willSendToSelf = this.opts.emitSelf === true && this.subscriptions.has(topic);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const allowPublishToZeroPeers = opts?.allowPublishToZeroPeers ?? this.opts.allowPublishToZeroPeers;\n        if (tosend.size === 0 && !allowPublishToZeroPeers && !willSendToSelf) {\n            throw Error('PublishError.InsufficientPeers');\n        }\n        // If the message isn't a duplicate and we have sent it to some peers add it to the\n        // duplicate cache and memcache.\n        this.seenCache.put(msgIdStr);\n        // all published messages are valid\n        this.mcache.put({ msgId, msgIdStr }, rawMsg, true);\n        // If the message is anonymous or has a random author add it to the published message ids cache.\n        this.publishedMessageIds.put(msgIdStr);\n        // Send to set of peers aggregated from direct, mesh, fanout\n        for (const id of tosend) {\n            // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n            const sent = this.sendRpc(id, { messages: [rawMsg] });\n            // did not actually send the message\n            if (!sent) {\n                tosend.delete(id);\n            }\n        }\n        this.metrics?.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0);\n        // Dispatch the message to the user if we are subscribed to the topic\n        if (willSendToSelf) {\n            tosend.add(this.components.peerId.toString());\n            super.dispatchEvent(new CustomEvent('gossipsub:message', {\n                detail: {\n                    propagationSource: this.components.peerId,\n                    msgId: msgIdStr,\n                    msg\n                }\n            }));\n            // TODO: Add option to switch between emit per topic or all messages in one\n            super.dispatchEvent(new CustomEvent('message', { detail: msg }));\n        }\n        return {\n            recipients: Array.from(tosend.values()).map((str) => peerIdFromString(str))\n        };\n    }\n    /**\n     * This function should be called when `asyncValidation` is `true` after\n     * the message got validated by the caller. Messages are stored in the `mcache` and\n     * validation is expected to be fast enough that the messages should still exist in the cache.\n     * There are three possible validation outcomes and the outcome is given in acceptance.\n     *\n     * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the\n     * network. The `propagation_source` parameter indicates who the message was received by and\n     * will not be forwarded back to that peer.\n     *\n     * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache\n     * and the P₄ penalty will be applied to the `propagationSource`.\n     *\n     * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache\n     * but no P₄ penalty will be applied.\n     *\n     * This function will return true if the message was found in the cache and false if was not\n     * in the cache anymore.\n     *\n     * This should only be called once per message.\n     */\n    reportMessageValidationResult(msgId, propagationSource, acceptance) {\n        if (acceptance === TopicValidatorResult.Accept) {\n            const cacheEntry = this.mcache.validate(msgId);\n            this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n            if (cacheEntry != null) {\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // message is fully validated inform peer_score\n                this.score.deliverMessage(propagationSource.toString(), msgId, rawMsg.topic);\n                this.forwardMessage(msgId, cacheEntry.message, propagationSource.toString(), originatingPeers);\n                this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n            }\n            // else, Message not in cache. Ignoring forwarding\n        }\n        // Not valid\n        else {\n            const cacheEntry = this.mcache.remove(msgId);\n            this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n            if (cacheEntry) {\n                const rejectReason = rejectReasonFromAcceptance(acceptance);\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                this.score.rejectMessage(propagationSource.toString(), msgId, rawMsg.topic, rejectReason);\n                for (const peer of originatingPeers) {\n                    this.score.rejectMessage(peer, msgId, rawMsg.topic, rejectReason);\n                }\n                this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n            }\n            // else, Message not in cache. Ignoring forwarding\n        }\n    }\n    /**\n     * Sends a GRAFT message to a peer\n     */\n    sendGraft(id, topic) {\n        const graft = [\n            {\n                topicID: topic\n            }\n        ];\n        this.sendRpc(id, { control: { graft } });\n    }\n    /**\n     * Sends a PRUNE message to a peer\n     */\n    async sendPrune(id, topic) {\n        const prune = [await this.makePrune(id, topic, this.opts.doPX)];\n        this.sendRpc(id, { control: { prune } });\n    }\n    /**\n     * Send an rpc object to a peer\n     */\n    sendRpc(id, rpc) {\n        const outboundStream = this.streamsOutbound.get(id);\n        if (!outboundStream) {\n            this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);\n            return false;\n        }\n        // piggyback control message retries\n        const ctrl = this.control.get(id);\n        if (ctrl) {\n            this.piggybackControl(id, rpc, ctrl);\n            this.control.delete(id);\n        }\n        // piggyback gossip\n        const ihave = this.gossip.get(id);\n        if (ihave) {\n            this.piggybackGossip(id, rpc, ihave);\n            this.gossip.delete(id);\n        }\n        const rpcBytes = RPC.encode(rpc).finish();\n        try {\n            outboundStream.push(rpcBytes);\n        }\n        catch (e) {\n            this.log.error(`Cannot send rpc to ${id}`, e);\n            // if the peer had control messages or gossip, re-attach\n            if (ctrl) {\n                this.control.set(id, ctrl);\n            }\n            if (ihave) {\n                this.gossip.set(id, ihave);\n            }\n            return false;\n        }\n        this.metrics?.onRpcSent(rpc, rpcBytes.length);\n        return true;\n    }\n    /** Mutates `outRpc` adding graft and prune control messages */\n    piggybackControl(id, outRpc, ctrl) {\n        if (ctrl.graft) {\n            if (!outRpc.control)\n                outRpc.control = {};\n            if (!outRpc.control.graft)\n                outRpc.control.graft = [];\n            for (const graft of ctrl.graft) {\n                if (graft.topicID && this.mesh.get(graft.topicID)?.has(id)) {\n                    outRpc.control.graft.push(graft);\n                }\n            }\n        }\n        if (ctrl.prune) {\n            if (!outRpc.control)\n                outRpc.control = {};\n            if (!outRpc.control.prune)\n                outRpc.control.prune = [];\n            for (const prune of ctrl.prune) {\n                if (prune.topicID && !this.mesh.get(prune.topicID)?.has(id)) {\n                    outRpc.control.prune.push(prune);\n                }\n            }\n        }\n    }\n    /** Mutates `outRpc` adding ihave control messages */\n    piggybackGossip(id, outRpc, ihave) {\n        if (!outRpc.control)\n            outRpc.control = {};\n        outRpc.control.ihave = ihave;\n    }\n    /**\n     * Send graft and prune messages\n     *\n     * @param tograft - peer id => topic[]\n     * @param toprune - peer id => topic[]\n     */\n    async sendGraftPrune(tograft, toprune, noPX) {\n        const doPX = this.opts.doPX;\n        for (const [id, topics] of tograft) {\n            const graft = topics.map((topicID) => ({ topicID }));\n            let prune = [];\n            // If a peer also has prunes, process them now\n            const pruning = toprune.get(id);\n            if (pruning) {\n                prune = await Promise.all(pruning.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n                toprune.delete(id);\n            }\n            this.sendRpc(id, { control: { graft, prune } });\n        }\n        for (const [id, topics] of toprune) {\n            const prune = await Promise.all(topics.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n            this.sendRpc(id, { control: { prune } });\n        }\n    }\n    /**\n     * Emits gossip - Send IHAVE messages to a random set of gossip peers\n     */\n    emitGossip(peersToGossipByTopic) {\n        const gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));\n        for (const [topic, peersToGossip] of peersToGossipByTopic) {\n            this.doEmitGossip(topic, peersToGossip, gossipIDsByTopic.get(topic) ?? []);\n        }\n    }\n    /**\n     * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy\n     * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers\n     * We also exclude direct peers, as there is no reason to emit gossip to them\n     * @param topic\n     * @param candidateToGossip - peers to gossip\n     * @param messageIDs - message ids to gossip\n     */\n    doEmitGossip(topic, candidateToGossip, messageIDs) {\n        if (!messageIDs.length) {\n            return;\n        }\n        // shuffle to emit in random order\n        shuffle(messageIDs);\n        // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list\n        if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n            // we do the truncation (with shuffling) per peer below\n            this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);\n        }\n        if (!candidateToGossip.size)\n            return;\n        let target = this.opts.Dlazy;\n        const factor = constants.GossipsubGossipFactor * candidateToGossip.size;\n        let peersToGossip = candidateToGossip;\n        if (factor > target) {\n            target = factor;\n        }\n        if (target > peersToGossip.size) {\n            target = peersToGossip.size;\n        }\n        else {\n            // only shuffle if needed\n            peersToGossip = shuffle(Array.from(peersToGossip)).slice(0, target);\n        }\n        // Emit the IHAVE gossip to the selected peers up to the target\n        peersToGossip.forEach((id) => {\n            let peerMessageIDs = messageIDs;\n            if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n                // shuffle and slice message IDs per peer so that we emit a different set for each peer\n                // we have enough reduncancy in the system that this will significantly increase the message\n                // coverage when we do truncate\n                peerMessageIDs = shuffle(peerMessageIDs.slice()).slice(0, constants.GossipsubMaxIHaveLength);\n            }\n            this.pushGossip(id, {\n                topicID: topic,\n                messageIDs: peerMessageIDs\n            });\n        });\n    }\n    /**\n     * Flush gossip and control messages\n     */\n    flush() {\n        // send gossip first, which will also piggyback control\n        for (const [peer, ihave] of this.gossip.entries()) {\n            this.gossip.delete(peer);\n            this.sendRpc(peer, { control: { ihave } });\n        }\n        // send the remaining control messages\n        for (const [peer, control] of this.control.entries()) {\n            this.control.delete(peer);\n            this.sendRpc(peer, { control: { graft: control.graft, prune: control.prune } });\n        }\n    }\n    /**\n     * Adds new IHAVE messages to pending gossip\n     */\n    pushGossip(id, controlIHaveMsgs) {\n        this.log('Add gossip to %s', id);\n        const gossip = this.gossip.get(id) || [];\n        this.gossip.set(id, gossip.concat(controlIHaveMsgs));\n    }\n    /**\n     * Make a PRUNE control message for a peer in a topic\n     */\n    async makePrune(id, topic, doPX) {\n        this.score.prune(id, topic);\n        if (this.streamsOutbound.get(id).protocol === constants.GossipsubIDv10) {\n            // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway\n            return {\n                topicID: topic,\n                peers: []\n            };\n        }\n        // backoff is measured in seconds\n        // GossipsubPruneBackoff is measured in milliseconds\n        // The protobuf has it as a uint64\n        const backoff = this.opts.pruneBackoff / 1000;\n        if (!doPX) {\n            return {\n                topicID: topic,\n                peers: [],\n                backoff: backoff\n            };\n        }\n        // select peers for Peer eXchange\n        const peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, (xid) => {\n            return xid !== id && this.score.score(xid) >= 0;\n        });\n        const px = await Promise.all(Array.from(peers).map(async (peerId) => {\n            // see if we have a signed record to send back; if we don't, just send\n            // the peer ID and let the pruned peer find them in the DHT -- we can't trust\n            // unsigned address records through PX anyways\n            // Finding signed records in the DHT is not supported at the time of writing in js-libp2p\n            const id = peerIdFromString(peerId);\n            return {\n                peerID: id.toBytes(),\n                signedPeerRecord: await this.components.peerStore.addressBook.getRawEnvelope(id)\n            };\n        }));\n        return {\n            topicID: topic,\n            peers: px,\n            backoff: backoff\n        };\n    }\n    /**\n     * Maintains the mesh and fanout maps in gossipsub.\n     */\n    async heartbeat() {\n        const { D, Dlo, Dhi, Dscore, Dout, fanoutTTL } = this.opts;\n        this.heartbeatTicks++;\n        // cache scores throught the heartbeat\n        const scores = new Map();\n        const getScore = (id) => {\n            let s = scores.get(id);\n            if (s === undefined) {\n                s = this.score.score(id);\n                scores.set(id, s);\n            }\n            return s;\n        };\n        // peer id => topic[]\n        const tograft = new Map();\n        // peer id => topic[]\n        const toprune = new Map();\n        // peer id => don't px\n        const noPX = new Map();\n        // clean up expired backoffs\n        this.clearBackoff();\n        // clean up peerhave/iasked counters\n        this.peerhave.clear();\n        this.metrics?.cacheSize.set({ cache: 'iasked' }, this.iasked.size);\n        this.iasked.clear();\n        // apply IWANT request penalties\n        this.applyIwantPenalties();\n        // ensure direct peers are connected\n        if (this.heartbeatTicks % this.opts.directConnectTicks === 0) {\n            // we only do this every few ticks to allow pending connections to complete and account for restarts/downtime\n            await this.directConnect();\n        }\n        // EXTRA: Prune caches\n        this.fastMsgIdCache?.prune();\n        this.seenCache.prune();\n        this.gossipTracer.prune();\n        this.publishedMessageIds.prune();\n        /**\n         * Instead of calling getRandomGossipPeers multiple times to:\n         *   + get more mesh peers\n         *   + more outbound peers\n         *   + oppportunistic grafting\n         *   + emitGossip\n         *\n         * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance\n         */\n        const peersToGossipByTopic = new Map();\n        // maintain the mesh for topics we have joined\n        this.mesh.forEach((peers, topic) => {\n            const peersInTopic = this.topics.get(topic);\n            const candidateMeshPeers = new Set();\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic) {\n                const shuffledPeers = shuffle(Array.from(peersInTopic));\n                const backoff = this.backoff.get(topic);\n                for (const id of shuffledPeers) {\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams &&\n                        this.multicodecs.includes(peerStreams.protocol) &&\n                        !peers.has(id) &&\n                        !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if ((!backoff || !backoff.has(id)) && score >= 0)\n                            candidateMeshPeers.add(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold)\n                            peersToGossip.add(id);\n                    }\n                }\n            }\n            // prune/graft helper functions (defined per topic)\n            const prunePeer = (id, reason) => {\n                this.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);\n                // no need to update peer score here as we do it in makePrune\n                // add prune backoff record\n                this.addBackoff(id, topic);\n                // remove peer from mesh\n                peers.delete(id);\n                // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold\n                if (getScore(id) >= this.opts.scoreThresholds.gossipThreshold)\n                    peersToGossip.add(id);\n                this.metrics?.onRemoveFromMesh(topic, reason, 1);\n                // add to toprune\n                const topics = toprune.get(id);\n                if (!topics) {\n                    toprune.set(id, [topic]);\n                }\n                else {\n                    topics.push(topic);\n                }\n            };\n            const graftPeer = (id, reason) => {\n                this.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);\n                // update peer score\n                this.score.graft(id, topic);\n                // add peer to mesh\n                peers.add(id);\n                // when we add a new mesh peer, we don't want to gossip messages to it\n                peersToGossip.delete(id);\n                this.metrics?.onAddToMesh(topic, reason, 1);\n                // add to tograft\n                const topics = tograft.get(id);\n                if (!topics) {\n                    tograft.set(id, [topic]);\n                }\n                else {\n                    topics.push(topic);\n                }\n            };\n            // drop all peers with negative score, without PX\n            peers.forEach((id) => {\n                const score = getScore(id);\n                // Record the score\n                if (score < 0) {\n                    this.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);\n                    prunePeer(id, ChurnReason.BadScore);\n                    noPX.set(id, true);\n                }\n            });\n            // do we have enough peers?\n            if (peers.size < Dlo) {\n                const ineed = D - peers.size;\n                // slice up to first `ineed` items and remove them from candidateMeshPeers\n                // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`\n                const newMeshPeers = removeFirstNItemsFromSet(candidateMeshPeers, ineed);\n                newMeshPeers.forEach((p) => {\n                    graftPeer(p, InclusionReason.NotEnough);\n                });\n            }\n            // do we have to many peers?\n            if (peers.size > Dhi) {\n                let peersArray = Array.from(peers);\n                // sort by score\n                peersArray.sort((a, b) => getScore(b) - getScore(a));\n                // We keep the first D_score peers by score and the remaining up to D randomly\n                // under the constraint that we keep D_out peers in the mesh (if we have that many)\n                peersArray = peersArray.slice(0, Dscore).concat(shuffle(peersArray.slice(Dscore)));\n                // count the outbound peers we are keeping\n                let outbound = 0;\n                peersArray.slice(0, D).forEach((p) => {\n                    if (this.outbound.get(p)) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, bubble up some outbound peers from the random selection\n                if (outbound < Dout) {\n                    const rotate = (i) => {\n                        // rotate the peersArray to the right and put the ith peer in the front\n                        const p = peersArray[i];\n                        for (let j = i; j > 0; j--) {\n                            peersArray[j] = peersArray[j - 1];\n                        }\n                        peersArray[0] = p;\n                    };\n                    // first bubble up all outbound peers already in the selection to the front\n                    if (outbound > 0) {\n                        let ihave = outbound;\n                        for (let i = 1; i < D && ihave > 0; i++) {\n                            if (this.outbound.get(peersArray[i])) {\n                                rotate(i);\n                                ihave--;\n                            }\n                        }\n                    }\n                    // now bubble up enough outbound peers outside the selection to the front\n                    let ineed = D - outbound;\n                    for (let i = D; i < peersArray.length && ineed > 0; i++) {\n                        if (this.outbound.get(peersArray[i])) {\n                            rotate(i);\n                            ineed--;\n                        }\n                    }\n                }\n                // prune the excess peers\n                peersArray.slice(D).forEach((p) => {\n                    prunePeer(p, ChurnReason.Excess);\n                });\n            }\n            // do we have enough outbound peers?\n            if (peers.size >= Dlo) {\n                // count the outbound peers we have\n                let outbound = 0;\n                peers.forEach((p) => {\n                    if (this.outbound.get(p)) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, select some peers with outbound connections and graft them\n                if (outbound < Dout) {\n                    const ineed = Dout - outbound;\n                    const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => this.outbound.get(id) === true);\n                    newMeshPeers.forEach((p) => {\n                        graftPeer(p, InclusionReason.Outbound);\n                    });\n                }\n            }\n            // should we try to improve the mesh with opportunistic grafting?\n            if (this.heartbeatTicks % this.opts.opportunisticGraftTicks === 0 && peers.size > 1) {\n                // Opportunistic grafting works as follows: we check the median score of peers in the\n                // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at\n                // random with score over the median.\n                // The intention is to (slowly) improve an underperforming mesh by introducing good\n                // scoring peers that may have been gossiping at us. This allows us to get out of sticky\n                // situations where we are stuck with poor peers and also recover from churn of good peers.\n                // now compute the median peer score in the mesh\n                const peersList = Array.from(peers).sort((a, b) => getScore(a) - getScore(b));\n                const medianIndex = Math.floor(peers.size / 2);\n                const medianScore = getScore(peersList[medianIndex]);\n                // if the median score is below the threshold, select a better peer (if any) and GRAFT\n                if (medianScore < this.opts.scoreThresholds.opportunisticGraftThreshold) {\n                    const ineed = this.opts.opportunisticGraftPeers;\n                    const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => getScore(id) > medianScore);\n                    for (const id of newMeshPeers) {\n                        this.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);\n                        graftPeer(id, InclusionReason.Opportunistic);\n                    }\n                }\n            }\n        });\n        // expire fanout for topics we haven't published to in a while\n        const now = Date.now();\n        this.fanoutLastpub.forEach((lastpb, topic) => {\n            if (lastpb + fanoutTTL < now) {\n                this.fanout.delete(topic);\n                this.fanoutLastpub.delete(topic);\n            }\n        });\n        // maintain our fanout for topics we are publishing but we have not joined\n        this.fanout.forEach((fanoutPeers, topic) => {\n            // checks whether our peers are still in the topic and have a score above the publish threshold\n            const topicPeers = this.topics.get(topic);\n            fanoutPeers.forEach((id) => {\n                if (!topicPeers.has(id) || getScore(id) < this.opts.scoreThresholds.publishThreshold) {\n                    fanoutPeers.delete(id);\n                }\n            });\n            const peersInTopic = this.topics.get(topic);\n            const candidateFanoutPeers = [];\n            // the fanout map contains topics to which we are not subscribed.\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic) {\n                const shuffledPeers = shuffle(Array.from(peersInTopic));\n                for (const id of shuffledPeers) {\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams &&\n                        this.multicodecs.includes(peerStreams.protocol) &&\n                        !fanoutPeers.has(id) &&\n                        !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if (score >= this.opts.scoreThresholds.publishThreshold)\n                            candidateFanoutPeers.push(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold)\n                            peersToGossip.add(id);\n                    }\n                }\n            }\n            // do we need more peers?\n            if (fanoutPeers.size < D) {\n                const ineed = D - fanoutPeers.size;\n                candidateFanoutPeers.slice(0, ineed).forEach((id) => {\n                    fanoutPeers.add(id);\n                    peersToGossip?.delete(id);\n                });\n            }\n        });\n        this.emitGossip(peersToGossipByTopic);\n        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n        await this.sendGraftPrune(tograft, toprune, noPX);\n        // flush pending gossip that wasn't piggybacked above\n        this.flush();\n        // advance the message history window\n        this.mcache.shift();\n        this.dispatchEvent(new CustomEvent('gossipsub:heartbeat'));\n    }\n    /**\n     * Given a topic, returns up to count peers subscribed to that topic\n     * that pass an optional filter function\n     *\n     * @param topic\n     * @param count\n     * @param filter - a function to filter acceptable peers\n     */\n    getRandomGossipPeers(topic, count, filter = () => true) {\n        const peersInTopic = this.topics.get(topic);\n        if (!peersInTopic) {\n            return new Set();\n        }\n        // Adds all peers using our protocol\n        // that also pass the filter function\n        let peers = [];\n        peersInTopic.forEach((id) => {\n            const peerStreams = this.streamsOutbound.get(id);\n            if (!peerStreams) {\n                return;\n            }\n            if (this.multicodecs.includes(peerStreams.protocol) && filter(id)) {\n                peers.push(id);\n            }\n        });\n        // Pseudo-randomly shuffles peers\n        peers = shuffle(peers);\n        if (count > 0 && peers.length > count) {\n            peers = peers.slice(0, count);\n        }\n        return new Set(peers);\n    }\n    onScrapeMetrics(metrics) {\n        /* Data structure sizes */\n        metrics.mcacheSize.set(this.mcache.size);\n        metrics.mcacheNotValidatedCount.set(this.mcache.notValidatedCount);\n        // Arbitrary size\n        metrics.cacheSize.set({ cache: 'direct' }, this.direct.size);\n        metrics.cacheSize.set({ cache: 'seenCache' }, this.seenCache.size);\n        metrics.cacheSize.set({ cache: 'fastMsgIdCache' }, this.fastMsgIdCache?.size ?? 0);\n        metrics.cacheSize.set({ cache: 'publishedMessageIds' }, this.publishedMessageIds.size);\n        metrics.cacheSize.set({ cache: 'mcache' }, this.mcache.size);\n        metrics.cacheSize.set({ cache: 'score' }, this.score.size);\n        metrics.cacheSize.set({ cache: 'gossipTracer.promises' }, this.gossipTracer.size);\n        metrics.cacheSize.set({ cache: 'gossipTracer.requests' }, this.gossipTracer.requestMsByMsgSize);\n        // Bounded by topic\n        metrics.cacheSize.set({ cache: 'topics' }, this.topics.size);\n        metrics.cacheSize.set({ cache: 'subscriptions' }, this.subscriptions.size);\n        metrics.cacheSize.set({ cache: 'mesh' }, this.mesh.size);\n        metrics.cacheSize.set({ cache: 'fanout' }, this.fanout.size);\n        // Bounded by peer\n        metrics.cacheSize.set({ cache: 'peers' }, this.peers.size);\n        metrics.cacheSize.set({ cache: 'streamsOutbound' }, this.streamsOutbound.size);\n        metrics.cacheSize.set({ cache: 'streamsInbound' }, this.streamsInbound.size);\n        metrics.cacheSize.set({ cache: 'acceptFromWhitelist' }, this.acceptFromWhitelist.size);\n        metrics.cacheSize.set({ cache: 'gossip' }, this.gossip.size);\n        metrics.cacheSize.set({ cache: 'control' }, this.control.size);\n        metrics.cacheSize.set({ cache: 'peerhave' }, this.peerhave.size);\n        metrics.cacheSize.set({ cache: 'outbound' }, this.outbound.size);\n        // 2D nested data structure\n        let backoffSize = 0;\n        for (const backoff of this.backoff.values()) {\n            backoffSize += backoff.size;\n        }\n        metrics.cacheSize.set({ cache: 'backoff' }, backoffSize);\n        // Peer counts\n        for (const [topicStr, peers] of this.topics) {\n            metrics.topicPeersCount.set({ topicStr }, peers.size);\n        }\n        for (const [topicStr, peers] of this.mesh) {\n            metrics.meshPeerCounts.set({ topicStr }, peers.size);\n        }\n        // Peer scores\n        const scores = [];\n        const scoreByPeer = new Map();\n        metrics.behaviourPenalty.reset();\n        for (const peerIdStr of this.peers.keys()) {\n            const score = this.score.score(peerIdStr);\n            scores.push(score);\n            scoreByPeer.set(peerIdStr, score);\n            metrics.behaviourPenalty.observe(this.score.peerStats.get(peerIdStr)?.behaviourPenalty ?? 0);\n        }\n        metrics.registerScores(scores, this.opts.scoreThresholds);\n        // Breakdown score per mesh topicLabel\n        metrics.registerScorePerMesh(this.mesh, scoreByPeer);\n        // Breakdown on each score weight\n        const sw = computeAllPeersScoreWeights(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);\n        metrics.registerScoreWeights(sw);\n    }\n}\nGossipSub.multicodec = constants.GossipsubIDv11;\nexport function gossipsub(init = {}) {\n    return (components) => new GossipSub(components, init);\n}\n//# sourceMappingURL=index.js.map","import { unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { StrictSign, StrictNoSign } from '@libp2p/interface-pubsub';\nimport { PublishConfigType } from '../types.js';\n/**\n * Prepare a PublishConfig object from a PeerId.\n */\nexport async function getPublishConfigFromPeerId(signaturePolicy, peerId) {\n    switch (signaturePolicy) {\n        case StrictSign: {\n            if (!peerId) {\n                throw Error('Must provide PeerId');\n            }\n            if (peerId.privateKey == null) {\n                throw Error('Cannot sign message, no private key present');\n            }\n            if (peerId.publicKey == null) {\n                throw Error('Cannot sign message, no public key present');\n            }\n            // Transform privateKey once at initialization time instead of once per message\n            const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n            return {\n                type: PublishConfigType.Signing,\n                author: peerId,\n                key: peerId.publicKey,\n                privateKey\n            };\n        }\n        case StrictNoSign:\n            return {\n                type: PublishConfigType.Anonymous\n            };\n        default:\n            throw new Error(`Unknown signature policy \"${signaturePolicy}\"`);\n    }\n}\n//# sourceMappingURL=publishConfig.js.map","import { gossipsub } from '@chainsafe/libp2p-gossipsub'\n\n/** @typedef {import('@libp2p/interface-pubsub').PubSub} PubSub */\n\n/** @type {() => Record<string, (components: any) => PubSub>}>} */\nexport const routers = () => ({\n  gossipsub: gossipsub({\n    fallbackToFloodsub: true,\n    emitSelf: true,\n    maxInboundStreams: 64,\n    maxOutboundStreams: 128\n  })\n})\n","\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n","\n/* eslint-env browser */\n\nimport { Client } from './core.js'\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n","import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createUnwant = configure(api => {\n  /**\n   * @type {BitswapAPI[\"unwant\"]}\n   */\n  async function unwant (cid, options = {}) {\n    const res = await api.post('bitswap/unwant', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return unwant\n})\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\nimport { createUnwant } from './unwant.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    unwant: createUnwant(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n","import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return add\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return clear\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createReset = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return reset\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return rm\n})\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    clear: createClear(config),\n    list: createList(config),\n    reset: createReset(config),\n    rm: createRm(config)\n  }\n}\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createApply = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n","\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('config/profile/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return data.map((/** @type {Record<string, any>} */ profile) => objectToCamel(profile))\n  }\n  return list\n})\n","import { createApply } from './apply.js'\nimport { createList } from './list.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config),\n    list: createList(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n","import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n","\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interface-peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n","import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createNet = configure(api => {\n  /**\n   * @type {DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createSys = configure(api => {\n  /**\n   * @type {DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n","import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createChmod = configure(api => {\n  /**\n   * @type {FilesAPI[\"chmod\"]}\n   */\n  async function chmod (path, mode, options = {}) {\n    const res = await api.post('files/chmod', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        mode,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return chmod\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n","import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMv = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createTouch = configure(api => {\n  /**\n   * @type {FilesAPI[\"touch\"]}\n   */\n  async function touch (path, options = {}) {\n    const res = await api.post('files/touch', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return touch\n})\n","import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n","import { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createTouch } from './touch.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    chmod: createChmod(config),\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    touch: createTouch(config),\n    write: createWrite(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {KeyAPI[\"export\"]}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options) {\n    const opts = options ?? { type: 'Ed25519' }\n\n    const res = await api.post('key/gen', {\n      signal: opts.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...opts\n      }),\n      headers: opts.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createInfo = configure(api => {\n  /**\n   * @type {KeyAPI[\"info\"]}\n   */\n  const info = async (name, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return info\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    info: createInfo(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createTail = configure(api => {\n  /**\n   * @type {LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n","import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createCancel = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createData = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createNew = configure(api => {\n  /**\n   * @type {ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n","import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n","import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n","import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n","import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n","/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n","import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n","import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n","import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n","import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n","\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n","\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n","import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createGc = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\nexport const createBw = configure(api => {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n","import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(all(normaliseInput(input), options))\n    }\n    return add\n  })(options)\n}\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createDns = configure(api => {\n  /**\n   * @type {RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n","import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n","import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createMount = configure(api => {\n  /**\n   * @type {RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n","import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStart = configure(api => {\n  /**\n   * @type {RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStop = configure(api => {\n  /**\n   * @type {RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n","export var messages;\n(function (messages) {\n    messages[\"NOT_STARTED_YET\"] = \"The libp2p node is not started yet\";\n    messages[\"DHT_DISABLED\"] = \"DHT is not available\";\n    messages[\"PUBSUB_DISABLED\"] = \"PubSub is not available\";\n    messages[\"CONN_ENCRYPTION_REQUIRED\"] = \"At least one connection encryption module is required\";\n    messages[\"ERR_TRANSPORTS_REQUIRED\"] = \"At least one transport module is required\";\n    messages[\"ERR_PROTECTOR_REQUIRED\"] = \"Private network is enforced, but no protector was provided\";\n    messages[\"NOT_FOUND\"] = \"Not found\";\n})(messages || (messages = {}));\nexport var codes;\n(function (codes) {\n    codes[\"DHT_DISABLED\"] = \"ERR_DHT_DISABLED\";\n    codes[\"ERR_PUBSUB_DISABLED\"] = \"ERR_PUBSUB_DISABLED\";\n    codes[\"PUBSUB_NOT_STARTED\"] = \"ERR_PUBSUB_NOT_STARTED\";\n    codes[\"DHT_NOT_STARTED\"] = \"ERR_DHT_NOT_STARTED\";\n    codes[\"CONN_ENCRYPTION_REQUIRED\"] = \"ERR_CONN_ENCRYPTION_REQUIRED\";\n    codes[\"ERR_TRANSPORTS_REQUIRED\"] = \"ERR_TRANSPORTS_REQUIRED\";\n    codes[\"ERR_PROTECTOR_REQUIRED\"] = \"ERR_PROTECTOR_REQUIRED\";\n    codes[\"ERR_PEER_DIAL_INTERCEPTED\"] = \"ERR_PEER_DIAL_INTERCEPTED\";\n    codes[\"ERR_CONNECTION_INTERCEPTED\"] = \"ERR_CONNECTION_INTERCEPTED\";\n    codes[\"ERR_INVALID_PROTOCOLS_FOR_STREAM\"] = \"ERR_INVALID_PROTOCOLS_FOR_STREAM\";\n    codes[\"ERR_CONNECTION_ENDED\"] = \"ERR_CONNECTION_ENDED\";\n    codes[\"ERR_CONNECTION_FAILED\"] = \"ERR_CONNECTION_FAILED\";\n    codes[\"ERR_NODE_NOT_STARTED\"] = \"ERR_NODE_NOT_STARTED\";\n    codes[\"ERR_ALREADY_ABORTED\"] = \"ERR_ALREADY_ABORTED\";\n    codes[\"ERR_TOO_MANY_ADDRESSES\"] = \"ERR_TOO_MANY_ADDRESSES\";\n    codes[\"ERR_NO_VALID_ADDRESSES\"] = \"ERR_NO_VALID_ADDRESSES\";\n    codes[\"ERR_RELAYED_DIAL\"] = \"ERR_RELAYED_DIAL\";\n    codes[\"ERR_DIALED_SELF\"] = \"ERR_DIALED_SELF\";\n    codes[\"ERR_DISCOVERED_SELF\"] = \"ERR_DISCOVERED_SELF\";\n    codes[\"ERR_DUPLICATE_TRANSPORT\"] = \"ERR_DUPLICATE_TRANSPORT\";\n    codes[\"ERR_ENCRYPTION_FAILED\"] = \"ERR_ENCRYPTION_FAILED\";\n    codes[\"ERR_HOP_REQUEST_FAILED\"] = \"ERR_HOP_REQUEST_FAILED\";\n    codes[\"ERR_INVALID_KEY\"] = \"ERR_INVALID_KEY\";\n    codes[\"ERR_INVALID_MESSAGE\"] = \"ERR_INVALID_MESSAGE\";\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_INVALID_PEER\"] = \"ERR_INVALID_PEER\";\n    codes[\"ERR_MUXER_UNAVAILABLE\"] = \"ERR_MUXER_UNAVAILABLE\";\n    codes[\"ERR_NOT_FOUND\"] = \"ERR_NOT_FOUND\";\n    codes[\"ERR_TIMEOUT\"] = \"ERR_TIMEOUT\";\n    codes[\"ERR_TRANSPORT_UNAVAILABLE\"] = \"ERR_TRANSPORT_UNAVAILABLE\";\n    codes[\"ERR_TRANSPORT_DIAL_FAILED\"] = \"ERR_TRANSPORT_DIAL_FAILED\";\n    codes[\"ERR_UNSUPPORTED_PROTOCOL\"] = \"ERR_UNSUPPORTED_PROTOCOL\";\n    codes[\"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\"] = \"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\";\n    codes[\"ERR_INVALID_MULTIADDR\"] = \"ERR_INVALID_MULTIADDR\";\n    codes[\"ERR_SIGNATURE_NOT_VALID\"] = \"ERR_SIGNATURE_NOT_VALID\";\n    codes[\"ERR_FIND_SELF\"] = \"ERR_FIND_SELF\";\n    codes[\"ERR_NO_ROUTERS_AVAILABLE\"] = \"ERR_NO_ROUTERS_AVAILABLE\";\n    codes[\"ERR_CONNECTION_NOT_MULTIPLEXED\"] = \"ERR_CONNECTION_NOT_MULTIPLEXED\";\n    codes[\"ERR_NO_DIAL_TOKENS\"] = \"ERR_NO_DIAL_TOKENS\";\n    codes[\"ERR_KEYCHAIN_REQUIRED\"] = \"ERR_KEYCHAIN_REQUIRED\";\n    codes[\"ERR_INVALID_CMS\"] = \"ERR_INVALID_CMS\";\n    codes[\"ERR_MISSING_KEYS\"] = \"ERR_MISSING_KEYS\";\n    codes[\"ERR_NO_KEY\"] = \"ERR_NO_KEY\";\n    codes[\"ERR_INVALID_KEY_NAME\"] = \"ERR_INVALID_KEY_NAME\";\n    codes[\"ERR_INVALID_KEY_TYPE\"] = \"ERR_INVALID_KEY_TYPE\";\n    codes[\"ERR_KEY_ALREADY_EXISTS\"] = \"ERR_KEY_ALREADY_EXISTS\";\n    codes[\"ERR_INVALID_KEY_SIZE\"] = \"ERR_INVALID_KEY_SIZE\";\n    codes[\"ERR_KEY_NOT_FOUND\"] = \"ERR_KEY_NOT_FOUND\";\n    codes[\"ERR_OLD_KEY_NAME_INVALID\"] = \"ERR_OLD_KEY_NAME_INVALID\";\n    codes[\"ERR_NEW_KEY_NAME_INVALID\"] = \"ERR_NEW_KEY_NAME_INVALID\";\n    codes[\"ERR_PASSWORD_REQUIRED\"] = \"ERR_PASSWORD_REQUIRED\";\n    codes[\"ERR_PEM_REQUIRED\"] = \"ERR_PEM_REQUIRED\";\n    codes[\"ERR_CANNOT_READ_KEY\"] = \"ERR_CANNOT_READ_KEY\";\n    codes[\"ERR_MISSING_PRIVATE_KEY\"] = \"ERR_MISSING_PRIVATE_KEY\";\n    codes[\"ERR_MISSING_PUBLIC_KEY\"] = \"ERR_MISSING_PUBLIC_KEY\";\n    codes[\"ERR_INVALID_OLD_PASS_TYPE\"] = \"ERR_INVALID_OLD_PASS_TYPE\";\n    codes[\"ERR_INVALID_NEW_PASS_TYPE\"] = \"ERR_INVALID_NEW_PASS_TYPE\";\n    codes[\"ERR_INVALID_PASS_LENGTH\"] = \"ERR_INVALID_PASS_LENGTH\";\n    codes[\"ERR_NOT_IMPLEMENTED\"] = \"ERR_NOT_IMPLEMENTED\";\n    codes[\"ERR_WRONG_PING_ACK\"] = \"ERR_WRONG_PING_ACK\";\n    codes[\"ERR_INVALID_RECORD\"] = \"ERR_INVALID_RECORD\";\n    codes[\"ERR_ALREADY_SUCCEEDED\"] = \"ERR_ALREADY_SUCCEEDED\";\n    codes[\"ERR_NO_HANDLER_FOR_PROTOCOL\"] = \"ERR_NO_HANDLER_FOR_PROTOCOL\";\n    codes[\"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_CONNECTION_DENIED\"] = \"ERR_CONNECTION_DENIED\";\n})(codes || (codes = {}));\n//# sourceMappingURL=errors.js.map","import { BaseDatastore } from './base.js'\nimport { Key } from 'interface-datastore/key'\nimport * as Errors from './errors.js'\n\n/**\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryDatastore\n * @implements {Datastore}\n */\nexport class MemoryDatastore extends BaseDatastore {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[key.toString()] = val\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[key.toString()]\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[key.toString()] !== undefined\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[key.toString()]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: new Key(key), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => new Key(key))\n  }\n}\n","import errCode from 'err-code';\nimport filter from 'it-filter';\nimport map from 'it-map';\n/**\n * Store the multiaddrs from every peer in the passed peer store\n */\nexport async function* storeAddresses(source, peerStore) {\n    yield* map(source, async (peer) => {\n        // ensure we have the addresses for a given peer\n        await peerStore.addressBook.add(peer.id, peer.multiaddrs);\n        return peer;\n    });\n}\n/**\n * Filter peers by unique peer id\n */\nexport function uniquePeers(source) {\n    /** @type Set<string> */\n    const seen = new Set();\n    return filter(source, (peer) => {\n        // dedupe by peer id\n        if (seen.has(peer.id.toString())) {\n            return false;\n        }\n        seen.add(peer.id.toString());\n        return true;\n    });\n}\n/**\n * Require at least `min` peers to be yielded from `source`\n */\nexport async function* requirePeers(source, min = 1) {\n    let seen = 0;\n    for await (const peer of source) {\n        seen++;\n        yield peer;\n    }\n    if (seen < min) {\n        throw errCode(new Error('not found'), 'NOT_FOUND');\n    }\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes, messages } from './errors.js';\nimport { storeAddresses, uniquePeers, requirePeers } from './content-routing/utils.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport merge from 'it-merge';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport { setDelayedInterval, clearDelayedInterval\n// @ts-expect-error module with no types\n } from 'set-delayed-interval';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:peer-routing');\nexport class DefaultPeerRouting {\n    constructor(components, init) {\n        this.components = components;\n        this.routers = init.routers ?? [];\n        this.refreshManagerInit = init.refreshManager ?? {};\n        this.started = false;\n        this._findClosestPeersTask = this._findClosestPeersTask.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start peer routing service.\n     */\n    async start() {\n        if (this.started || this.routers.length === 0 || this.timeoutId != null || this.refreshManagerInit.enabled === false) {\n            return;\n        }\n        this.timeoutId = setDelayedInterval(this._findClosestPeersTask, this.refreshManagerInit.interval, this.refreshManagerInit.bootDelay);\n        this.started = true;\n    }\n    /**\n     * Recurrent task to find closest peers and add their addresses to the Address Book.\n     */\n    async _findClosestPeersTask() {\n        if (this.abortController != null) {\n            // we are already running the query\n            return;\n        }\n        try {\n            this.abortController = new TimeoutController(this.refreshManagerInit.timeout ?? 10e3);\n            // this controller may be used while dialing lots of peers so prevent MaxListenersExceededWarning\n            // appearing in the console\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, this.abortController.signal);\n            }\n            catch { }\n            // nb getClosestPeers adds the addresses to the address book\n            await drain(this.getClosestPeers(this.components.peerId.toBytes(), { signal: this.abortController.signal }));\n        }\n        catch (err) {\n            log.error(err);\n        }\n        finally {\n            this.abortController?.clear();\n            this.abortController = undefined;\n        }\n    }\n    /**\n     * Stop peer routing service.\n     */\n    async stop() {\n        clearDelayedInterval(this.timeoutId);\n        // abort query if it is in-flight\n        this.abortController?.abort();\n        this.started = false;\n    }\n    /**\n     * Iterates over all peer routers in parallel to find the given peer\n     */\n    async findPeer(id, options) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No peer routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        if (id.toString() === this.components.peerId.toString()) {\n            throw errCode(new Error('Should not try to find self'), codes.ERR_FIND_SELF);\n        }\n        const output = await pipe(merge(...this.routers.map(router => (async function* () {\n            try {\n                yield await router.findPeer(id, options);\n            }\n            catch (err) {\n                log.error(err);\n            }\n        })())), (source) => filter(source, Boolean), (source) => storeAddresses(source, this.components.peerStore), async (source) => await first(source));\n        if (output != null) {\n            return output;\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */\n    async *getClosestPeers(key, options) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No peer routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        yield* pipe(merge(...this.routers.map(router => router.getClosestPeers(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));\n    }\n}\n//# sourceMappingURL=peer-routing.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nimport { storeAddresses, uniquePeers, requirePeers } from './utils.js';\nimport drain from 'it-drain';\nimport merge from 'it-merge';\nimport { pipe } from 'it-pipe';\nexport class CompoundContentRouting {\n    constructor(components, init) {\n        this.routers = init.routers ?? [];\n        this.started = false;\n        this.components = components;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    /**\n     * Iterates over all content routers in parallel to find providers of the given key\n     */\n    async *findProviders(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No content this.routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        yield* pipe(merge(...this.routers.map(router => router.findProviders(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));\n    }\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key\n     */\n    async provide(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No content routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        await Promise.all(this.routers.map(async (router) => await router.provide(key, options)));\n    }\n    /**\n     * Store the given key/value pair in the available content routings\n     */\n    async put(key, value, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        const dht = this.components.dht;\n        if (dht != null) {\n            await drain(dht.put(key, value, options));\n        }\n    }\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     */\n    async get(key, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        const dht = this.components.dht;\n        if (dht != null) {\n            for await (const event of dht.get(key, options)) {\n                if (event.name === 'VALUE') {\n                    return event.value;\n                }\n            }\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n    async *getMany(key, nVals, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        if (nVals == null || nVals === 0) {\n            return;\n        }\n        let gotValues = 0;\n        const dht = this.components.dht;\n        if (dht != null) {\n            for await (const event of dht.get(key, options)) {\n                if (event.name === 'VALUE') {\n                    yield { from: event.from, val: event.value };\n                    gotValues++;\n                    if (gotValues === nVals) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (gotValues === 0) {\n            throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst defaultAddressFilter = (addrs) => addrs;\nexport class DefaultAddressManager extends EventEmitter {\n    /**\n     * Responsible for managing the peer addresses.\n     * Peers can specify their listen and announce addresses.\n     * The listen addresses will be used by the libp2p transports to listen for new connections,\n     * while the announce addresses will be used for the peer addresses' to other peers in the network.\n     */\n    constructor(components, init) {\n        super();\n        const { listen = [], announce = [] } = init;\n        this.components = components;\n        this.listen = listen.map(ma => ma.toString());\n        this.announce = new Set(announce.map(ma => ma.toString()));\n        this.observed = new Set();\n        this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n    }\n    /**\n     * Get peer listen multiaddrs\n     */\n    getListenAddrs() {\n        return Array.from(this.listen).map((a) => multiaddr(a));\n    }\n    /**\n     * Get peer announcing multiaddrs\n     */\n    getAnnounceAddrs() {\n        return Array.from(this.announce).map((a) => multiaddr(a));\n    }\n    /**\n     * Get observed multiaddrs\n     */\n    getObservedAddrs() {\n        return Array.from(this.observed).map((a) => multiaddr(a));\n    }\n    /**\n     * Add peer observed addresses\n     * Signal that we have confidence an observed multiaddr is publicly dialable -\n     * this will make it appear in the output of getAddresses()\n     */\n    confirmObservedAddr(addr) {\n    }\n    /**\n     * Signal that we do not have confidence an observed multiaddr is publicly dialable -\n     * this will remove it from the output of getObservedAddrs()\n     */\n    removeObservedAddr(addr) {\n    }\n    /**\n     * Add peer observed addresses\n     */\n    addObservedAddr(addr) {\n        let ma = multiaddr(addr);\n        const remotePeer = ma.getPeerId();\n        // strip our peer id if it has been passed\n        if (remotePeer != null) {\n            const remotePeerId = peerIdFromString(remotePeer);\n            // use same encoding for comparison\n            if (remotePeerId.equals(this.components.peerId)) {\n                ma = ma.decapsulate(multiaddr(`/p2p/${this.components.peerId.toString()}`));\n            }\n        }\n        const addrString = ma.toString();\n        // do not trigger the change:addresses event if we already know about this address\n        if (this.observed.has(addrString)) {\n            return;\n        }\n        this.observed.add(addrString);\n        this.dispatchEvent(new CustomEvent('change:addresses'));\n    }\n    getAddresses() {\n        let addrs = this.getAnnounceAddrs().map(ma => ma.toString());\n        if (addrs.length === 0) {\n            // no configured announce addrs, add configured listen addresses\n            addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());\n        }\n        addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString()));\n        // dedupe multiaddrs\n        const addrSet = new Set(addrs);\n        // Create advertising list\n        return this.announceFilter(Array.from(addrSet)\n            .map(str => multiaddr(str)))\n            .map(ma => {\n            // do not append our peer id to a path multiaddr as it will become invalid\n            if (ma.protos().pop()?.path === true) {\n                return ma;\n            }\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma;\n            }\n            return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nexport class VisibilityChangeEmitter extends EventEmitter {\n    constructor() {\n        super();\n        this.hidden = 'hidden';\n        this.visibilityChange = 'visibilityChange';\n        if (globalThis.document != null) {\n            this._initializeVisibilityVarNames();\n            this._addVisibilityChangeListener();\n        }\n    }\n    /**\n     * document.hidden and document.visibilityChange are the two variables we need to check for;\n     * Since these variables are named differently in different browsers, this function sets\n     * the appropriate name based on the browser being used. Once executed, tha actual names of\n     * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n     * respectively\n     *\n     * @private\n     */\n    _initializeVisibilityVarNames() {\n        let hidden = 'hidden';\n        let visibilityChange = 'visibilitychange';\n        if (typeof globalThis.document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n            hidden = 'hidden';\n            visibilityChange = 'visibilitychange';\n            // @ts-expect-error mozHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.mozHidden !== 'undefined') {\n            hidden = 'mozHidden';\n            visibilityChange = 'mozvisibilitychange';\n            // @ts-expect-error msHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.msHidden !== 'undefined') {\n            hidden = 'msHidden';\n            visibilityChange = 'msvisibilitychange';\n            // @ts-expect-error webkitHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n            hidden = 'webkitHidden';\n            visibilityChange = 'webkitvisibilitychange';\n        }\n        this.hidden = hidden;\n        this.visibilityChange = visibilityChange;\n    }\n    /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     *\n     * @private\n     */\n    _addVisibilityChangeListener() {\n        // @ts-expect-error cannot index document object with string key\n        if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n            log('Checking page visibility requires a browser that supports the Page Visibility API.');\n        }\n        else {\n            // Handle page visibility change\n            globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false);\n        }\n    }\n    /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     */\n    isVisible() {\n        // @ts-expect-error cannot index document object with string key\n        if (this.hidden === undefined || document[this.hidden] === undefined) {\n            return undefined;\n        }\n        // @ts-expect-error cannot index document object with string key\n        return document[this.hidden] == null;\n    }\n    /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n    _handleVisibilityChange() {\n        // @ts-expect-error cannot index document object with string key\n        const visible = globalThis.document[this.hidden] === false;\n        log(visible ? 'Page Visible' : 'Page Hidden');\n        // Emit the event\n        this.dispatchEvent(new CustomEvent('visibilityChange', {\n            detail: visible\n        }));\n    }\n}\n//# sourceMappingURL=visibility-change-emitter.js.map","/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { VisibilityChangeEmitter } from './visibility-change-emitter.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection-manager:latency-monitor');\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * @extends {EventEmitter}\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\nexport class LatencyMonitor extends EventEmitter {\n    constructor(init = {}) {\n        super();\n        const { latencyCheckIntervalMs, dataEmitIntervalMs, asyncTestFn, latencyRandomPercentage } = init;\n        // 0 isn't valid here, so its ok to use ||\n        this.latencyCheckIntervalMs = latencyCheckIntervalMs ?? 500; // 0.5s\n        this.latencyRandomPercentage = latencyRandomPercentage ?? 10;\n        this.latencyCheckMultiply = 2 * (this.latencyRandomPercentage / 100.0) * this.latencyCheckIntervalMs;\n        this.latencyCheckSubtract = this.latencyCheckMultiply / 2;\n        this.dataEmitIntervalMs = (dataEmitIntervalMs === null || dataEmitIntervalMs === 0)\n            ? undefined\n            : dataEmitIntervalMs ?? 5 * 1000; // 5s\n        log('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', this.latencyCheckIntervalMs, this.dataEmitIntervalMs);\n        if (this.dataEmitIntervalMs != null) {\n            log('Expecting ~%s events per summary', this.latencyCheckIntervalMs / this.dataEmitIntervalMs);\n        }\n        else {\n            log('Not emitting summaries');\n        }\n        this.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency\n        // If process: use high resolution timer\n        if (globalThis.process?.hrtime != null) {\n            log('Using process.hrtime for timing');\n            this.now = globalThis.process.hrtime; // eslint-disable-line no-undef\n            this.getDeltaMS = (startTime) => {\n                const hrtime = this.now(startTime);\n                return (hrtime[0] * 1000) + (hrtime[1] / 1000000);\n            };\n            // Let's try for a timer that only monotonically increases\n        }\n        else if (typeof window !== 'undefined' && window.performance?.now != null) {\n            log('Using performance.now for timing');\n            this.now = window.performance.now.bind(window.performance);\n            this.getDeltaMS = (startTime) => Math.round(this.now() - startTime);\n        }\n        else {\n            log('Using Date.now for timing');\n            this.now = Date.now;\n            this.getDeltaMS = (startTime) => this.now() - startTime;\n        }\n        this.latencyData = this.initLatencyData();\n    }\n    start() {\n        // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n        // so we fall back to another library\n        // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n        if (isBrowser()) {\n            this.visibilityChangeEmitter = new VisibilityChangeEmitter();\n            this.visibilityChangeEmitter.addEventListener('visibilityChange', (evt) => {\n                const { detail: pageInFocus } = evt;\n                if (pageInFocus) {\n                    this._startTimers();\n                }\n                else {\n                    this._emitSummary();\n                    this._stopTimers();\n                }\n            });\n        }\n        if (this.visibilityChangeEmitter?.isVisible() === true) {\n            this._startTimers();\n        }\n    }\n    stop() {\n        this._stopTimers();\n    }\n    /**\n     * Start internal timers\n     *\n     * @private\n     */\n    _startTimers() {\n        // Timer already started, ignore this\n        if (this.checkLatencyID != null) {\n            return;\n        }\n        this.checkLatency();\n        if (this.dataEmitIntervalMs != null) {\n            this.emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs);\n            if (typeof this.emitIntervalID.unref === 'function') {\n                this.emitIntervalID.unref(); // Doesn't block exit\n            }\n        }\n    }\n    /**\n     * Stop internal timers\n     *\n     * @private\n     */\n    _stopTimers() {\n        if (this.checkLatencyID != null) {\n            clearTimeout(this.checkLatencyID);\n            this.checkLatencyID = undefined;\n        }\n        if (this.emitIntervalID != null) {\n            clearInterval(this.emitIntervalID);\n            this.emitIntervalID = undefined;\n        }\n    }\n    /**\n     * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n     *\n     * @private\n     */\n    _emitSummary() {\n        const summary = this.getSummary();\n        if (summary.events > 0) {\n            this.dispatchEvent(new CustomEvent('data', {\n                detail: summary\n            }));\n        }\n    }\n    /**\n     * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n     * it will not count for this time period\n     */\n    getSummary() {\n        // We might want to adjust for the number of expected events\n        // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n        // Then this fires - looks like no latency!!\n        const latency = {\n            events: this.latencyData.events,\n            minMs: this.latencyData.minMs,\n            maxMs: this.latencyData.maxMs,\n            avgMs: this.latencyData.events > 0\n                ? this.latencyData.totalMs / this.latencyData.events\n                : Number.POSITIVE_INFINITY,\n            lengthMs: this.getDeltaMS(this.latencyData.startTime)\n        };\n        this.latencyData = this.initLatencyData(); // Clear\n        log.trace('Summary: %O', latency);\n        return latency;\n    }\n    /**\n     * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n     * it will simply report on event loop latency.\n     */\n    checkLatency() {\n        // Randomness is needed to avoid alignment by accident to regular things in the event loop\n        const randomness = (Math.random() * this.latencyCheckMultiply) - this.latencyCheckSubtract;\n        // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n        const localData = {\n            deltaOffset: Math.ceil(this.latencyCheckIntervalMs + randomness),\n            startTime: this.now()\n        };\n        const cb = () => {\n            // We are already stopped, ignore this datapoint\n            if (this.checkLatencyID == null) {\n                return;\n            }\n            const deltaMS = this.getDeltaMS(localData.startTime) - localData.deltaOffset;\n            this.checkLatency(); // Start again ASAP\n            // Add the data point. If this gets complex, refactor it\n            this.latencyData.events++;\n            this.latencyData.minMs = Math.min(this.latencyData.minMs, deltaMS);\n            this.latencyData.maxMs = Math.max(this.latencyData.maxMs, deltaMS);\n            this.latencyData.totalMs += deltaMS;\n            log.trace('MS: %s Data: %O', deltaMS, this.latencyData);\n        };\n        log.trace('localData: %O', localData);\n        this.checkLatencyID = setTimeout(() => {\n            // This gets rid of including event loop\n            if (this.asyncTestFn != null) {\n                // Clear timing related things\n                localData.deltaOffset = 0;\n                localData.startTime = this.now();\n                this.asyncTestFn(cb);\n            }\n            else {\n                // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n                // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n                localData.deltaOffset -= 1;\n                // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n                // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n                cb();\n            }\n        }, localData.deltaOffset);\n        if (typeof this.checkLatencyID.unref === 'function') {\n            this.checkLatencyID.unref(); // Doesn't block exit\n        }\n    }\n    initLatencyData() {\n        return {\n            startTime: this.now(),\n            minMs: Number.POSITIVE_INFINITY,\n            maxMs: Number.NEGATIVE_INFINITY,\n            events: 0,\n            totalMs: 0\n        };\n    }\n}\nfunction isBrowser() {\n    return typeof globalThis.window !== 'undefined';\n}\n//# sourceMappingURL=latency-monitor.js.map","/**\n * Calls the passed map function on every entry of the passed iterable iterator\n */\nexport function mapIterable(iter, map) {\n    const iterator = {\n        [Symbol.iterator]: () => {\n            return iterator;\n        },\n        next: () => {\n            const next = iter.next();\n            const val = next.value;\n            if (next.done === true || val == null) {\n                const result = {\n                    done: true,\n                    value: undefined\n                };\n                return result;\n            }\n            return {\n                done: false,\n                value: map(val)\n            };\n        }\n    };\n    return iterator;\n}\n//# sourceMappingURL=util.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as map keys because map keys are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerMap } from '@libp2p/peer-collections'\n *\n * const map = peerMap<string>()\n * map.set(peerId, 'value')\n * ```\n */\nexport class PeerMap {\n    constructor(map) {\n        this.map = new Map();\n        if (map != null) {\n            for (const [key, value] of map.entries()) {\n                this.map.set(key.toString(), value);\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    clear() {\n        this.map.clear();\n    }\n    delete(peer) {\n        this.map.delete(peer.toString());\n    }\n    entries() {\n        return mapIterable(this.map.entries(), (val) => {\n            return [peerIdFromString(val[0]), val[1]];\n        });\n    }\n    forEach(fn) {\n        this.map.forEach((value, key) => {\n            fn(value, peerIdFromString(key), this);\n        });\n    }\n    get(peer) {\n        return this.map.get(peer.toString());\n    }\n    has(peer) {\n        return this.map.has(peer.toString());\n    }\n    set(peer, value) {\n        this.map.set(peer.toString(), value);\n    }\n    keys() {\n        return mapIterable(this.map.keys(), (val) => {\n            return peerIdFromString(val);\n        });\n    }\n    values() {\n        return this.map.values();\n    }\n    get size() {\n        return this.map.size;\n    }\n}\n//# sourceMappingURL=map.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nexport class PeerSet {\n    constructor(set) {\n        this.set = new Set();\n        if (set != null) {\n            for (const key of set) {\n                this.set.add(key.toString());\n            }\n        }\n    }\n    get size() {\n        return this.set.size;\n    }\n    [Symbol.iterator]() {\n        return this.values();\n    }\n    add(peer) {\n        this.set.add(peer.toString());\n    }\n    clear() {\n        this.set.clear();\n    }\n    delete(peer) {\n        this.set.delete(peer.toString());\n    }\n    entries() {\n        return mapIterable(this.set.entries(), (val) => {\n            const peerId = peerIdFromString(val[0]);\n            return [peerId, peerId];\n        });\n    }\n    forEach(predicate) {\n        this.set.forEach((str) => {\n            const id = peerIdFromString(str);\n            predicate(id, id, this);\n        });\n    }\n    has(peer) {\n        return this.set.has(peer.toString());\n    }\n    values() {\n        return mapIterable(this.set.values(), (val) => {\n            return peerIdFromString(val);\n        });\n    }\n    intersection(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            if (this.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    difference(other) {\n        const output = new PeerSet();\n        for (const peerId of this) {\n            if (!other.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    union(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            output.add(peerId);\n        }\n        for (const peerId of this) {\n            output.add(peerId);\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=set.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as list entries because list entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerList } from '@libp2p/peer-collections'\n *\n * const list = peerList()\n * list.push(peerId)\n * ```\n */\nexport class PeerList {\n    constructor(list) {\n        this.list = [];\n        if (list != null) {\n            for (const value of list) {\n                this.list.push(value.toString());\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return mapIterable(this.list.entries(), (val) => {\n            return peerIdFromString(val[1]);\n        });\n    }\n    concat(list) {\n        const output = new PeerList(this);\n        for (const value of list) {\n            output.push(value);\n        }\n        return output;\n    }\n    entries() {\n        return mapIterable(this.list.entries(), (val) => {\n            return [val[0], peerIdFromString(val[1])];\n        });\n    }\n    every(predicate) {\n        return this.list.every((str, index) => {\n            return predicate(peerIdFromString(str), index, this);\n        });\n    }\n    filter(predicate) {\n        const output = new PeerList();\n        this.list.forEach((str, index) => {\n            const peerId = peerIdFromString(str);\n            if (predicate(peerId, index, this)) {\n                output.push(peerId);\n            }\n        });\n        return output;\n    }\n    find(predicate) {\n        const str = this.list.find((str, index) => {\n            return predicate(peerIdFromString(str), index, this);\n        });\n        if (str == null) {\n            return undefined;\n        }\n        return peerIdFromString(str);\n    }\n    findIndex(predicate) {\n        return this.list.findIndex((str, index) => {\n            return predicate(peerIdFromString(str), index, this);\n        });\n    }\n    forEach(predicate) {\n        this.list.forEach((str, index) => {\n            predicate(peerIdFromString(str), index, this);\n        });\n    }\n    includes(peerId) {\n        return this.list.includes(peerId.toString());\n    }\n    indexOf(peerId) {\n        return this.list.indexOf(peerId.toString());\n    }\n    pop() {\n        const str = this.list.pop();\n        if (str == null) {\n            return undefined;\n        }\n        return peerIdFromString(str);\n    }\n    push(...peerIds) {\n        for (const peerId of peerIds) {\n            this.list.push(peerId.toString());\n        }\n    }\n    shift() {\n        const str = this.list.shift();\n        if (str == null) {\n            return undefined;\n        }\n        return peerIdFromString(str);\n    }\n    unshift(...peerIds) {\n        let len = this.list.length;\n        for (let i = peerIds.length - 1; i > -1; i--) {\n            len = this.list.unshift(peerIds[i].toString());\n        }\n        return len;\n    }\n    get length() {\n        return this.list.length;\n    }\n}\n//# sourceMappingURL=list.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr\n */\nexport function getPeerAddress(peer) {\n    if (isPeerId(peer)) {\n        return {\n            peerId: peer\n        };\n    }\n    if (isMultiaddr(peer)) {\n        const peerId = peer.getPeerId();\n        return {\n            multiaddr: peer,\n            peerId: peerId == null ? undefined : peerIdFromString(peerId)\n        };\n    }\n    throw errCode(new Error(`${peer} is not a PeerId or a Multiaddr`), // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    codes.ERR_INVALID_MULTIADDR);\n}\n//# sourceMappingURL=get-peer.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport mergeOptions from 'merge-options';\nimport { LatencyMonitor } from './latency-monitor.js';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { codes } from '../errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nimport { setMaxListeners } from 'events';\nimport * as STATUS from '@libp2p/interface-connection/status';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { PeerMap } from '@libp2p/peer-collections';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { KEEP_ALIVE } from '@libp2p/interface-peer-store/tags';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { getPeerAddress } from '../get-peer.js';\nconst log = logger('libp2p:connection-manager');\nconst defaultOptions = {\n    maxConnections: Infinity,\n    minConnections: 0,\n    maxEventLoopDelay: Infinity,\n    pollInterval: 2000,\n    autoDialInterval: 10000,\n    inboundConnectionThreshold: 5,\n    maxIncomingPendingConnections: 10\n};\nconst STARTUP_RECONNECT_TIMEOUT = 60000;\n/**\n * Responsible for managing known connections.\n */\nexport class DefaultConnectionManager extends EventEmitter {\n    constructor(components, init) {\n        super();\n        this.opts = mergeOptions.call({ ignoreUndefined: true }, defaultOptions, init);\n        if (this.opts.maxConnections < this.opts.minConnections) {\n            throw errCode(new Error('Connection Manager maxConnections must be greater than minConnections'), codes.ERR_INVALID_PARAMETERS);\n        }\n        log('options: %o', this.opts);\n        this.components = components;\n        /**\n         * Map of connections per peer\n         */\n        this.connections = new Map();\n        this.started = false;\n        if (init.maxEventLoopDelay != null && init.maxEventLoopDelay > 0 && init.maxEventLoopDelay !== Infinity) {\n            this.latencyMonitor = new LatencyMonitor({\n                latencyCheckIntervalMs: init.pollInterval,\n                dataEmitIntervalMs: init.pollInterval\n            });\n        }\n        try {\n            // This emitter gets listened to a lot\n            setMaxListeners?.(Infinity, this);\n        }\n        catch { }\n        this.onConnect = this.onConnect.bind(this);\n        this.onDisconnect = this.onDisconnect.bind(this);\n        this.startupReconnectTimeout = init.startupReconnectTimeout ?? STARTUP_RECONNECT_TIMEOUT;\n        this.dialTimeout = init.dialTimeout ?? 30000;\n        this.allow = (init.allow ?? []).map(ma => multiaddr(ma));\n        this.deny = (init.deny ?? []).map(ma => multiaddr(ma));\n        this.inboundConnectionRateLimiter = new RateLimiterMemory({\n            points: this.opts.inboundConnectionThreshold,\n            duration: 1\n        });\n        this.incomingPendingConnections = 0;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Starts the Connection Manager. If Metrics are not enabled on libp2p\n     * only event loop and connection limits will be monitored.\n     */\n    async start() {\n        // track inbound/outbound connections\n        this.components.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n            calculate: () => {\n                const metric = {\n                    inbound: 0,\n                    outbound: 0\n                };\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        if (conn.stat.direction === 'inbound') {\n                            metric.inbound++;\n                        }\n                        else {\n                            metric.outbound++;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track total number of streams per protocol\n        this.components.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n            label: 'protocol',\n            calculate: () => {\n                const metric = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        for (const stream of conn.streams) {\n                            const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n                            metric[key] = (metric[key] ?? 0) + 1;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track 90th percentile of streams per protocol\n        this.components.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n            label: 'protocol',\n            calculate: () => {\n                const allStreams = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        const streams = {};\n                        for (const stream of conn.streams) {\n                            const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n                            streams[key] = (streams[key] ?? 0) + 1;\n                        }\n                        for (const [protocol, count] of Object.entries(streams)) {\n                            allStreams[protocol] = allStreams[protocol] ?? [];\n                            allStreams[protocol].push(count);\n                        }\n                    }\n                }\n                const metric = {};\n                for (let [protocol, counts] of Object.entries(allStreams)) {\n                    counts = counts.sort((a, b) => a - b);\n                    const index = Math.floor(counts.length * 0.9);\n                    metric[protocol] = counts[index];\n                }\n                return metric;\n            }\n        });\n        // latency monitor\n        this.latencyMonitor?.start();\n        this._onLatencyMeasure = this._onLatencyMeasure.bind(this);\n        this.latencyMonitor?.addEventListener('data', this._onLatencyMeasure);\n        this.started = true;\n        log('started');\n    }\n    async afterStart() {\n        this.components.upgrader.addEventListener('connection', this.onConnect);\n        this.components.upgrader.addEventListener('connectionEnd', this.onDisconnect);\n        // re-connect to any peers with the KEEP_ALIVE tag\n        void Promise.resolve()\n            .then(async () => {\n            const keepAlivePeers = [];\n            for (const peer of await this.components.peerStore.all()) {\n                const tags = await this.components.peerStore.getTags(peer.id);\n                const hasKeepAlive = tags.filter(tag => tag.name === KEEP_ALIVE).length > 0;\n                if (hasKeepAlive) {\n                    keepAlivePeers.push(peer.id);\n                }\n            }\n            this.connectOnStartupController?.clear();\n            this.connectOnStartupController = new TimeoutController(this.startupReconnectTimeout);\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, this.connectOnStartupController.signal);\n            }\n            catch { }\n            await Promise.all(keepAlivePeers.map(async (peer) => {\n                await this.openConnection(peer, {\n                    signal: this.connectOnStartupController?.signal\n                })\n                    .catch(err => {\n                    log.error(err);\n                });\n            }));\n        })\n            .catch(err => {\n            log.error(err);\n        })\n            .finally(() => {\n            this.connectOnStartupController?.clear();\n        });\n    }\n    async beforeStop() {\n        // if we are still dialing KEEP_ALIVE peers, abort those dials\n        this.connectOnStartupController?.abort();\n        this.components.upgrader.removeEventListener('connection', this.onConnect);\n        this.components.upgrader.removeEventListener('connectionEnd', this.onDisconnect);\n    }\n    /**\n     * Stops the Connection Manager\n     */\n    async stop() {\n        this.latencyMonitor?.removeEventListener('data', this._onLatencyMeasure);\n        this.latencyMonitor?.stop();\n        this.started = false;\n        await this._close();\n        log('stopped');\n    }\n    /**\n     * Cleans up the connections\n     */\n    async _close() {\n        // Close all connections we're tracking\n        const tasks = [];\n        for (const connectionList of this.connections.values()) {\n            for (const connection of connectionList) {\n                tasks.push((async () => {\n                    try {\n                        await connection.close();\n                    }\n                    catch (err) {\n                        log.error(err);\n                    }\n                })());\n            }\n        }\n        log('closing %d connections', tasks.length);\n        await Promise.all(tasks);\n        this.connections.clear();\n    }\n    onConnect(evt) {\n        void this._onConnect(evt).catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Tracks the incoming connection and check the connection limit\n     */\n    async _onConnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            await connection.close();\n            return;\n        }\n        const peerId = connection.remotePeer;\n        const peerIdStr = peerId.toString();\n        const storedConns = this.connections.get(peerIdStr);\n        if (storedConns != null) {\n            storedConns.push(connection);\n        }\n        else {\n            this.connections.set(peerIdStr, [connection]);\n        }\n        if (peerId.publicKey != null) {\n            await this.components.peerStore.keyBook.set(peerId, peerId.publicKey);\n        }\n        const numConnections = this.getConnections().length;\n        const toPrune = numConnections - this.opts.maxConnections;\n        await this._checkMaxLimit('maxConnections', numConnections, toPrune);\n        this.dispatchEvent(new CustomEvent('peer:connect', { detail: connection }));\n    }\n    /**\n     * Removes the connection from tracking\n     */\n    onDisconnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            return;\n        }\n        const peerId = connection.remotePeer.toString();\n        let storedConn = this.connections.get(peerId);\n        if (storedConn != null && storedConn.length > 1) {\n            storedConn = storedConn.filter((conn) => conn.id !== connection.id);\n            this.connections.set(peerId, storedConn);\n        }\n        else if (storedConn != null) {\n            this.connections.delete(peerId);\n            this.dispatchEvent(new CustomEvent('peer:disconnect', { detail: connection }));\n        }\n    }\n    getConnections(peerId) {\n        if (peerId != null) {\n            return this.connections.get(peerId.toString()) ?? [];\n        }\n        let conns = [];\n        for (const c of this.connections.values()) {\n            conns = conns.concat(c);\n        }\n        return conns;\n    }\n    async openConnection(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddr } = getPeerAddress(peerIdOrMultiaddr);\n        if (peerId == null && multiaddr == null) {\n            throw errCode(new TypeError('Can only open connections to PeerIds or Multiaddrs'), codes.ERR_INVALID_PARAMETERS);\n        }\n        if (peerId != null) {\n            log('dial to', peerId);\n            const existingConnections = this.getConnections(peerId);\n            if (existingConnections.length > 0) {\n                log('had an existing connection to %p', peerId);\n                return existingConnections[0];\n            }\n        }\n        let timeoutController;\n        if (options?.signal == null) {\n            timeoutController = new TimeoutController(this.dialTimeout);\n            options.signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            const connection = await this.components.dialer.dial(peerIdOrMultiaddr, options);\n            let peerConnections = this.connections.get(connection.remotePeer.toString());\n            if (peerConnections == null) {\n                peerConnections = [];\n                this.connections.set(connection.remotePeer.toString(), peerConnections);\n            }\n            // we get notified of connections via the Upgrader emitting \"connection\"\n            // events, double check we aren't already tracking this connection before\n            // storing it\n            let trackedConnection = false;\n            for (const conn of peerConnections) {\n                if (conn.id === connection.id) {\n                    trackedConnection = true;\n                }\n            }\n            if (!trackedConnection) {\n                peerConnections.push(connection);\n            }\n            return connection;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n        }\n    }\n    async closeConnections(peerId) {\n        const connections = this.connections.get(peerId.toString()) ?? [];\n        await Promise.all(connections.map(async (connection) => {\n            return await connection.close();\n        }));\n    }\n    /**\n     * Get all open connections with a peer\n     */\n    getAll(peerId) {\n        if (!isPeerId(peerId)) {\n            throw errCode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const id = peerId.toString();\n        const connections = this.connections.get(id);\n        // Return all open connections\n        if (connections != null) {\n            return connections.filter(connection => connection.stat.status === STATUS.OPEN);\n        }\n        return [];\n    }\n    /**\n     * If the event loop is slow, maybe close a connection\n     */\n    _onLatencyMeasure(evt) {\n        const { detail: summary } = evt;\n        this._checkMaxLimit('maxEventLoopDelay', summary.avgMs, 1)\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * If the `value` of `name` has exceeded its limit, maybe close a connection\n     */\n    async _checkMaxLimit(name, value, toPrune = 1) {\n        const limit = this.opts[name];\n        if (limit == null) {\n            log.trace('limit %s was not set so it cannot be applied', name);\n            return;\n        }\n        log.trace('checking limit of %s. current value: %d of %d', name, value, limit);\n        if (value > limit) {\n            log('%s: limit exceeded: %p, %d/%d, pruning %d connection(s)', this.components.peerId, name, value, limit, toPrune);\n            await this._pruneConnections(toPrune);\n        }\n    }\n    /**\n     * If we have more connections than our maximum, select some excess connections\n     * to prune based on peer value\n     */\n    async _pruneConnections(toPrune) {\n        const connections = this.getConnections();\n        const peerValues = new PeerMap();\n        // work out peer values\n        for (const connection of connections) {\n            const remotePeer = connection.remotePeer;\n            if (peerValues.has(remotePeer)) {\n                continue;\n            }\n            const tags = await this.components.peerStore.getTags(remotePeer);\n            // sum all tag values\n            peerValues.set(remotePeer, tags.reduce((acc, curr) => {\n                return acc + curr.value;\n            }, 0));\n        }\n        // sort by value, lowest to highest\n        const sortedConnections = connections.sort((a, b) => {\n            const peerAValue = peerValues.get(a.remotePeer) ?? 0;\n            const peerBValue = peerValues.get(b.remotePeer) ?? 0;\n            if (peerAValue > peerBValue) {\n                return 1;\n            }\n            if (peerAValue < peerBValue) {\n                return -1;\n            }\n            // if the peers have an equal tag value then we want to close short-lived connections first\n            const connectionALifespan = a.stat.timeline.open;\n            const connectionBLifespan = b.stat.timeline.open;\n            if (connectionALifespan < connectionBLifespan) {\n                return 1;\n            }\n            if (connectionALifespan > connectionBLifespan) {\n                return -1;\n            }\n            return 0;\n        });\n        // close some connections\n        const toClose = [];\n        for (const connection of sortedConnections) {\n            log('too many connections open - closing a connection to %p', connection.remotePeer);\n            toClose.push(connection);\n            if (toClose.length === toPrune) {\n                break;\n            }\n        }\n        // close connections\n        await Promise.all(toClose.map(async (connection) => {\n            try {\n                await connection.close();\n            }\n            catch (err) {\n                log.error(err);\n            }\n            // TODO: should not need to invoke this manually\n            this.onDisconnect(new CustomEvent('connectionEnd', {\n                detail: connection\n            }));\n        }));\n    }\n    async acceptIncomingConnection(maConn) {\n        // check deny list\n        const denyConnection = this.deny.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (denyConnection) {\n            log('connection from %s refused - connection remote address was in deny list', maConn.remoteAddr);\n            return false;\n        }\n        // check allow list\n        const allowConnection = this.allow.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (allowConnection) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        // check pending connections\n        if (this.incomingPendingConnections === this.opts.maxIncomingPendingConnections) {\n            log('connection from %s refused - incomingPendingConnections exceeded by peer %s', maConn.remoteAddr);\n            return false;\n        }\n        if (maConn.remoteAddr.isThinWaistAddress()) {\n            const host = maConn.remoteAddr.nodeAddress().address;\n            try {\n                await this.inboundConnectionRateLimiter.consume(host, 1);\n            }\n            catch {\n                log('connection from %s refused - inboundConnectionThreshold exceeded by host %s', host, maConn.remoteAddr);\n                return false;\n            }\n        }\n        if (this.getConnections().length < this.opts.maxConnections) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        log('connection from %s refused - maxConnections exceeded', maConn.remoteAddr);\n        return false;\n    }\n    afterUpgradeInbound() {\n        this.incomingPendingConnections--;\n    }\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport mergeOptions from 'merge-options';\n// @ts-expect-error retimer does not have types\nimport retimer from 'retimer';\nimport all from 'it-all';\nimport { pipe } from 'it-pipe';\nimport filter from 'it-filter';\nimport sort from 'it-sort';\nconst log = logger('libp2p:connection-manager:auto-dialler');\nconst defaultOptions = {\n    enabled: true,\n    minConnections: 0,\n    autoDialInterval: 10000\n};\nexport class AutoDialler {\n    /**\n     * Proactively tries to connect to known peers stored in the PeerStore.\n     * It will keep the number of connections below the upper limit and sort\n     * the peers to connect based on wether we know their keys and protocols.\n     */\n    constructor(components, init) {\n        this.components = components;\n        this.options = mergeOptions.call({ ignoreUndefined: true }, defaultOptions, init);\n        this.running = false;\n        this._autoDial = this._autoDial.bind(this);\n        log('options: %j', this.options);\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Starts the auto dialer\n     */\n    async start() {\n        if (!this.options.enabled) {\n            log('not enabled');\n            return;\n        }\n        this.running = true;\n        void this._autoDial().catch(err => {\n            log.error('could start autodial', err);\n        });\n        log('started');\n    }\n    /**\n     * Stops the auto dialler\n     */\n    async stop() {\n        if (!this.options.enabled) {\n            log('not enabled');\n            return;\n        }\n        this.running = false;\n        if (this.autoDialTimeout != null) {\n            this.autoDialTimeout.clear();\n        }\n        log('stopped');\n    }\n    async _autoDial() {\n        if (this.autoDialTimeout != null) {\n            this.autoDialTimeout.clear();\n        }\n        const minConnections = this.options.minConnections;\n        // Already has enough connections\n        if (this.components.connectionManager.getConnections().length >= minConnections) {\n            this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n            return;\n        }\n        // Sort peers on whether we know protocols or public keys for them\n        const allPeers = await this.components.peerStore.all();\n        const peers = await pipe(\n        // shuffle the peers\n        allPeers.sort(() => Math.random() > 0.5 ? 1 : -1), (source) => filter(source, (peer) => !peer.id.equals(this.components.peerId)), (source) => sort(source, (a, b) => {\n            if (b.protocols.length > a.protocols.length) {\n                return 1;\n            }\n            else if (b.id.publicKey != null && a.id.publicKey == null) {\n                return 1;\n            }\n            return -1;\n        }), async (source) => await all(source));\n        for (let i = 0; this.running && i < peers.length && this.components.connectionManager.getConnections().length < minConnections; i++) {\n            // Connection Manager was stopped during async dial\n            if (!this.running) {\n                return;\n            }\n            const peer = peers[i];\n            if (this.components.connectionManager.getConnections(peer.id).length === 0) {\n                log('connecting to a peerStore stored peer %p', peer.id);\n                try {\n                    await this.components.connectionManager.openConnection(peer.id);\n                }\n                catch (err) {\n                    log.error('could not connect to peerStore stored peer', err);\n                }\n            }\n        }\n        // Connection Manager was stopped\n        if (!this.running) {\n            return;\n        }\n        this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n    }\n}\n//# sourceMappingURL=auto-dialler.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var CircuitRelay;\n(function (CircuitRelay) {\n    let Status;\n    (function (Status) {\n        Status[\"SUCCESS\"] = \"SUCCESS\";\n        Status[\"HOP_SRC_ADDR_TOO_LONG\"] = \"HOP_SRC_ADDR_TOO_LONG\";\n        Status[\"HOP_DST_ADDR_TOO_LONG\"] = \"HOP_DST_ADDR_TOO_LONG\";\n        Status[\"HOP_SRC_MULTIADDR_INVALID\"] = \"HOP_SRC_MULTIADDR_INVALID\";\n        Status[\"HOP_DST_MULTIADDR_INVALID\"] = \"HOP_DST_MULTIADDR_INVALID\";\n        Status[\"HOP_NO_CONN_TO_DST\"] = \"HOP_NO_CONN_TO_DST\";\n        Status[\"HOP_CANT_DIAL_DST\"] = \"HOP_CANT_DIAL_DST\";\n        Status[\"HOP_CANT_OPEN_DST_STREAM\"] = \"HOP_CANT_OPEN_DST_STREAM\";\n        Status[\"HOP_CANT_SPEAK_RELAY\"] = \"HOP_CANT_SPEAK_RELAY\";\n        Status[\"HOP_CANT_RELAY_TO_SELF\"] = \"HOP_CANT_RELAY_TO_SELF\";\n        Status[\"STOP_SRC_ADDR_TOO_LONG\"] = \"STOP_SRC_ADDR_TOO_LONG\";\n        Status[\"STOP_DST_ADDR_TOO_LONG\"] = \"STOP_DST_ADDR_TOO_LONG\";\n        Status[\"STOP_SRC_MULTIADDR_INVALID\"] = \"STOP_SRC_MULTIADDR_INVALID\";\n        Status[\"STOP_DST_MULTIADDR_INVALID\"] = \"STOP_DST_MULTIADDR_INVALID\";\n        Status[\"STOP_RELAY_REFUSED\"] = \"STOP_RELAY_REFUSED\";\n        Status[\"MALFORMED_MESSAGE\"] = \"MALFORMED_MESSAGE\";\n    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n    let __StatusValues;\n    (function (__StatusValues) {\n        __StatusValues[__StatusValues[\"SUCCESS\"] = 100] = \"SUCCESS\";\n        __StatusValues[__StatusValues[\"HOP_SRC_ADDR_TOO_LONG\"] = 220] = \"HOP_SRC_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"HOP_DST_ADDR_TOO_LONG\"] = 221] = \"HOP_DST_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"HOP_SRC_MULTIADDR_INVALID\"] = 250] = \"HOP_SRC_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"HOP_DST_MULTIADDR_INVALID\"] = 251] = \"HOP_DST_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"HOP_NO_CONN_TO_DST\"] = 260] = \"HOP_NO_CONN_TO_DST\";\n        __StatusValues[__StatusValues[\"HOP_CANT_DIAL_DST\"] = 261] = \"HOP_CANT_DIAL_DST\";\n        __StatusValues[__StatusValues[\"HOP_CANT_OPEN_DST_STREAM\"] = 262] = \"HOP_CANT_OPEN_DST_STREAM\";\n        __StatusValues[__StatusValues[\"HOP_CANT_SPEAK_RELAY\"] = 270] = \"HOP_CANT_SPEAK_RELAY\";\n        __StatusValues[__StatusValues[\"HOP_CANT_RELAY_TO_SELF\"] = 280] = \"HOP_CANT_RELAY_TO_SELF\";\n        __StatusValues[__StatusValues[\"STOP_SRC_ADDR_TOO_LONG\"] = 320] = \"STOP_SRC_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"STOP_DST_ADDR_TOO_LONG\"] = 321] = \"STOP_DST_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"STOP_SRC_MULTIADDR_INVALID\"] = 350] = \"STOP_SRC_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"STOP_DST_MULTIADDR_INVALID\"] = 351] = \"STOP_DST_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"STOP_RELAY_REFUSED\"] = 390] = \"STOP_RELAY_REFUSED\";\n        __StatusValues[__StatusValues[\"MALFORMED_MESSAGE\"] = 400] = \"MALFORMED_MESSAGE\";\n    })(__StatusValues || (__StatusValues = {}));\n    (function (Status) {\n        Status.codec = () => {\n            return enumeration(__StatusValues);\n        };\n    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n    let Type;\n    (function (Type) {\n        Type[\"HOP\"] = \"HOP\";\n        Type[\"STOP\"] = \"STOP\";\n        Type[\"STATUS\"] = \"STATUS\";\n        Type[\"CAN_HOP\"] = \"CAN_HOP\";\n    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"HOP\"] = 1] = \"HOP\";\n        __TypeValues[__TypeValues[\"STOP\"] = 2] = \"STOP\";\n        __TypeValues[__TypeValues[\"STATUS\"] = 3] = \"STATUS\";\n        __TypeValues[__TypeValues[\"CAN_HOP\"] = 4] = \"CAN_HOP\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return enumeration(__TypeValues);\n        };\n    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n    let Peer;\n    (function (Peer) {\n        let _codec;\n        Peer.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (opts.writeDefaults === true || (obj.id != null && obj.id.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.id);\n                    }\n                    if (obj.addrs != null) {\n                        for (const value of obj.addrs) {\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        id: new Uint8Array(0),\n                        addrs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.id = reader.bytes();\n                                break;\n                            case 2:\n                                obj.addrs.push(reader.bytes());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer.encode = (obj) => {\n            return encodeMessage(obj, Peer.codec());\n        };\n        Peer.decode = (buf) => {\n            return decodeMessage(buf, Peer.codec());\n        };\n    })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));\n    let _codec;\n    CircuitRelay.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    CircuitRelay.Type.codec().encode(obj.type, w);\n                }\n                if (obj.srcPeer != null) {\n                    w.uint32(18);\n                    CircuitRelay.Peer.codec().encode(obj.srcPeer, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (obj.dstPeer != null) {\n                    w.uint32(26);\n                    CircuitRelay.Peer.codec().encode(obj.dstPeer, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (obj.code != null) {\n                    w.uint32(32);\n                    CircuitRelay.Status.codec().encode(obj.code, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = CircuitRelay.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            obj.code = CircuitRelay.Status.codec().decode(reader);\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    CircuitRelay.encode = (obj) => {\n        return encodeMessage(obj, CircuitRelay.codec());\n    };\n    CircuitRelay.decode = (buf) => {\n        return decodeMessage(buf, CircuitRelay.codec());\n    };\n})(CircuitRelay || (CircuitRelay = {}));\n//# sourceMappingURL=index.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function enumeration(v) {\n    function findValue(val) {\n        // Use the reverse mapping to look up the enum key for the stored value\n        // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n        if (v[val.toString()] == null) {\n            throw new Error('Invalid enum value');\n        }\n        return v[val];\n    }\n    const encode = function enumEncode(val, writer) {\n        const enumValue = findValue(val);\n        writer.int32(enumValue);\n    };\n    const decode = function enumDecode(reader) {\n        const val = reader.int32();\n        return findValue(val);\n    };\n    // @ts-expect-error yeah yeah\n    return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);\n}\n//# sourceMappingURL=enum.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","export const RELAY_CODEC = '/libp2p/circuit/relay/0.1.0';\n//# sourceMappingURL=multicodec.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay } from '../pb/index.js';\n/**\n * Write a response\n */\nfunction writeResponse(streamHandler, status) {\n    streamHandler.write({\n        type: CircuitRelay.Type.STATUS,\n        code: status\n    });\n}\n/**\n * Validate incomming HOP/STOP message\n */\nexport function validateAddrs(msg, streamHandler) {\n    try {\n        if (msg.dstPeer?.addrs != null) {\n            msg.dstPeer.addrs.forEach((addr) => {\n                return multiaddr(addr);\n            });\n        }\n    }\n    catch (err) {\n        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n            ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID\n            : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);\n        throw err;\n    }\n    try {\n        if (msg.srcPeer?.addrs != null) {\n            msg.srcPeer.addrs.forEach((addr) => {\n                return multiaddr(addr);\n            });\n        }\n    }\n    catch (err) {\n        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n            ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID\n            : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);\n        throw err;\n    }\n}\n//# sourceMappingURL=utils.js.map","import { LongBits } from 'longbits';\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\nconst N8 = Math.pow(2, 56);\nconst N9 = Math.pow(2, 63);\nexport const unsigned = {\n    encodingLength(value) {\n        if (value < N1) {\n            return 1;\n        }\n        if (value < N2) {\n            return 2;\n        }\n        if (value < N3) {\n            return 3;\n        }\n        if (value < N4) {\n            return 4;\n        }\n        if (value < N5) {\n            return 5;\n        }\n        if (value < N6) {\n            return 6;\n        }\n        if (value < N7) {\n            return 7;\n        }\n        if (value < N8) {\n            return 8;\n        }\n        if (value < N9) {\n            return 9;\n        }\n        return 10;\n    },\n    encode(value, buf, offset = 0) {\n        if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError('Could not encode varint');\n        }\n        if (buf == null) {\n            buf = allocUnsafe(unsigned.encodingLength(value));\n        }\n        LongBits.fromNumber(value).toBytes(buf, offset);\n        return buf;\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(true);\n    }\n};\nexport const signed = {\n    encodingLength(value) {\n        if (value < 0) {\n            return 10; // 10 bytes per spec - https://developers.google.com/protocol-buffers/docs/encoding#signed-ints\n        }\n        return unsigned.encodingLength(value);\n    },\n    encode(value, buf, offset) {\n        if (buf == null) {\n            buf = allocUnsafe(signed.encodingLength(value));\n        }\n        if (value < 0) {\n            LongBits.fromNumber(value).toBytes(buf, offset);\n            return buf;\n        }\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(false);\n    }\n};\nexport const zigzag = {\n    encodingLength(value) {\n        return unsigned.encodingLength(value >= 0 ? value * 2 : value * -2 - 1);\n    },\n    // @ts-expect-error\n    encode(value, buf, offset) {\n        value = value >= 0 ? value * 2 : (value * -2) - 1;\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        const value = unsigned.decode(buf, offset);\n        return (value & 1) !== 0 ? (value + 1) / -2 : value / 2;\n    }\n};\n//# sourceMappingURL=index.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport { allocUnsafe } from './alloc.js';\nconst defaultEncoder = (length) => {\n    const lengthLength = unsigned.encodingLength(length);\n    const lengthBuf = allocUnsafe(lengthLength);\n    unsigned.encode(length, lengthBuf);\n    defaultEncoder.bytes = lengthLength;\n    return lengthBuf;\n};\ndefaultEncoder.bytes = 0;\nexport function encode(options) {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    const encoder = async function* (source) {\n        for await (const chunk of source) {\n            // length + data\n            const length = encodeLength(chunk.byteLength);\n            // yield only Uint8Arrays\n            if (length instanceof Uint8Array) {\n                yield length;\n            }\n            else {\n                yield* length;\n            }\n            // yield only Uint8Arrays\n            if (chunk instanceof Uint8Array) {\n                yield chunk;\n            }\n            else {\n                yield* chunk;\n            }\n        }\n    };\n    return encoder;\n}\nencode.single = (chunk, options) => {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);\n};\n//# sourceMappingURL=encode.js.map","export function alloc(len) {\n    return new Uint8Array(len);\n}\nexport function allocUnsafe(len) {\n    if (globalThis?.Buffer?.allocUnsafe != null) {\n        return globalThis.Buffer.allocUnsafe(len);\n    }\n    return new Uint8Array(len);\n}\n//# sourceMappingURL=alloc.js.map","/* eslint max-depth: [\"error\", 6] */\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport errCode from 'err-code';\n// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"LENGTH\"] = 0] = \"LENGTH\";\n    ReadMode[ReadMode[\"DATA\"] = 1] = \"DATA\";\n})(ReadMode || (ReadMode = {}));\nconst defaultDecoder = (buf) => {\n    const length = unsigned.decode(buf);\n    defaultDecoder.bytes = unsigned.encodingLength(length);\n    return length;\n};\ndefaultDecoder.bytes = 0;\nexport function decode(options) {\n    const decoder = async function* (source) {\n        const buffer = new Uint8ArrayList();\n        let mode = ReadMode.LENGTH;\n        let dataLength = -1;\n        const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;\n        const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;\n        const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;\n        for await (const buf of source) {\n            buffer.append(buf);\n            while (buffer.byteLength > 0) {\n                if (mode === ReadMode.LENGTH) {\n                    // read length, ignore errors for short reads\n                    try {\n                        dataLength = lengthDecoder(buffer);\n                        if (dataLength < 0) {\n                            throw errCode(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');\n                        }\n                        if (dataLength > maxDataLength) {\n                            throw errCode(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');\n                        }\n                        const dataLengthLength = lengthDecoder.bytes;\n                        buffer.consume(dataLengthLength);\n                        if (options?.onLength != null) {\n                            options.onLength(dataLength);\n                        }\n                        mode = ReadMode.DATA;\n                    }\n                    catch (err) {\n                        if (err instanceof RangeError) {\n                            if (buffer.byteLength > maxLengthLength) {\n                                throw errCode(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');\n                            }\n                            break;\n                        }\n                        throw err;\n                    }\n                }\n                if (mode === ReadMode.DATA) {\n                    if (buffer.byteLength < dataLength) {\n                        // not enough data, wait for more\n                        break;\n                    }\n                    const data = buffer.sublist(0, dataLength);\n                    buffer.consume(dataLength);\n                    if (options?.onData != null) {\n                        options.onData(data);\n                    }\n                    yield data;\n                    mode = ReadMode.LENGTH;\n                }\n            }\n        }\n        if (buffer.byteLength > 0) {\n            throw errCode(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n        }\n    };\n    return decoder;\n}\n/**\n * @param {*} reader\n * @param {import('./types').DecoderOptions} [options]\n * @returns\n */\ndecode.fromReader = (reader, options) => {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = (async function* () {\n        while (true) {\n            try {\n                const { done, value } = await reader.next(byteLength);\n                if (done === true) {\n                    return;\n                }\n                if (value != null) {\n                    yield value;\n                }\n            }\n            catch (err) {\n                if (err.code === 'ERR_UNDER_READ') {\n                    return { done: true, value: null };\n                }\n                throw err;\n            }\n            finally {\n                // Reset the byteLength so we continue to check for varints\n                byteLength = 1;\n            }\n        }\n    }());\n    /**\n     * Once the length has been parsed, read chunk for that length\n     */\n    const onLength = (l) => { byteLength = l; };\n    return decode({\n        ...(options ?? {}),\n        onLength\n    })(varByteSource);\n};\n//# sourceMappingURL=decode.js.map","import { reader } from 'it-reader';\nimport { pushable } from 'it-pushable';\nimport defer from 'p-defer';\n// Convert a duplex stream into a reader and writer and rest stream\nexport function handshake(stream) {\n    const writer = pushable(); // Write bytes on demand to the sink\n    const source = reader(stream.source); // Read bytes on demand from the source\n    // Waits for a source to be passed to the rest stream's sink\n    const sourcePromise = defer();\n    let sinkErr;\n    const sinkPromise = stream.sink((async function* () {\n        yield* writer;\n        const source = await sourcePromise.promise;\n        yield* source;\n    })());\n    sinkPromise.catch(err => {\n        sinkErr = err;\n    });\n    const rest = {\n        sink: async (source) => {\n            if (sinkErr != null) {\n                return await Promise.reject(sinkErr);\n            }\n            sourcePromise.resolve(source);\n            return await sinkPromise;\n        },\n        source\n    };\n    return {\n        reader: source,\n        writer,\n        stream: rest,\n        rest: () => writer.end(),\n        write: writer.push,\n        read: async () => {\n            const res = await source.next();\n            if (res.value != null) {\n                return res.value;\n            }\n        }\n    };\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport * as lp from 'it-length-prefixed';\nimport { handshake } from 'it-handshake';\nimport { CircuitRelay } from '../pb/index.js';\nconst log = logger('libp2p:circuit:stream-handler');\nexport class StreamHandler {\n    constructor(options) {\n        const { stream, maxLength = 4096 } = options;\n        this.stream = stream;\n        this.shake = handshake(this.stream);\n        this.decoder = lp.decode.fromReader(this.shake.reader, { maxDataLength: maxLength });\n    }\n    /**\n     * Read and decode message\n     */\n    async read() {\n        // @ts-expect-error FIXME is a source, needs to be a generator\n        const msg = await this.decoder.next();\n        if (msg.value != null) {\n            const value = CircuitRelay.decode(msg.value);\n            log('read message type', value.type);\n            return value;\n        }\n        log('read received no value, closing stream');\n        // End the stream, we didn't get data\n        this.close();\n    }\n    /**\n     * Encode and write array of buffers\n     */\n    write(msg) {\n        log('write message type %s', msg.type);\n        this.shake.write(lp.encode.single(CircuitRelay.encode(msg)));\n    }\n    /**\n     * Return the handshake rest stream and invalidate handler\n     */\n    rest() {\n        this.shake.rest();\n        return this.shake.stream;\n    }\n    /**\n     * @param {CircuitRelay} msg - An unencoded CircuitRelay protobuf message\n     */\n    end(msg) {\n        this.write(msg);\n        this.close();\n    }\n    /**\n     * Close the stream\n     */\n    close() {\n        log('closing the stream');\n        void this.rest().sink([]).catch(err => {\n            log.error(err);\n        });\n    }\n}\n//# sourceMappingURL=stream-handler.js.map","import { logger } from '@libp2p/logger';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { validateAddrs } from './utils.js';\nconst log = logger('libp2p:circuit:stop');\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop(options) {\n    const { connection, request, streamHandler } = options;\n    // Validate the STOP request has the required input\n    try {\n        validateAddrs(request, streamHandler);\n    }\n    catch (err) {\n        log.error('invalid stop request via peer %p %o', connection.remotePeer, err);\n        return;\n    }\n    // The request is valid\n    log('stop request is valid');\n    streamHandler.write({\n        type: CircuitPB.Type.STATUS,\n        code: CircuitPB.Status.SUCCESS\n    });\n    return streamHandler.rest();\n}\n/**\n * Creates a STOP request\n */\nexport async function stop(options) {\n    const { connection, request, signal } = options;\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    log('starting stop request to %p', connection.remotePeer);\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write(request);\n    const response = await streamHandler.read();\n    if (response == null) {\n        streamHandler.close();\n        return;\n    }\n    if (response.code === CircuitPB.Status.SUCCESS) {\n        log('stop request to %p was successful', connection.remotePeer);\n        return streamHandler.rest();\n    }\n    log('stop request failed with code %d', response.code);\n    streamHandler.close();\n}\n//# sourceMappingURL=stop.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { validateAddrs } from './utils.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { pipe } from 'it-pipe';\nimport { codes as Errors } from '../../errors.js';\nimport { stop } from './stop.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nconst log = logger('libp2p:circuit:hop');\nexport async function handleHop(hopRequest) {\n    const { connection, request, streamHandler, circuit, connectionManager } = hopRequest;\n    // Ensure hop is enabled\n    if (!circuit.hopEnabled()) {\n        log('HOP request received but we are not acting as a relay');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n        });\n    }\n    // Validate the HOP request has the required input\n    try {\n        validateAddrs(request, streamHandler);\n    }\n    catch (err) {\n        log.error('invalid hop request via peer %p %o', connection.remotePeer, err);\n        return;\n    }\n    if (request.dstPeer == null) {\n        log('HOP request received but we do not receive a dstPeer');\n        return;\n    }\n    // Get the connection to the destination (stop) peer\n    const destinationPeer = peerIdFromBytes(request.dstPeer.id);\n    const destinationConnections = connectionManager.getConnections(destinationPeer);\n    if (destinationConnections.length === 0 && !circuit.hopActive()) {\n        log('HOP request received but we are not connected to the destination peer');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n        });\n    }\n    // TODO: Handle being an active relay\n    if (destinationConnections.length === 0) {\n        log('did not have connection to remote peer');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n        });\n    }\n    // Handle the incoming HOP request by performing a STOP request\n    const stopRequest = {\n        type: CircuitPB.Type.STOP,\n        dstPeer: request.dstPeer,\n        srcPeer: request.srcPeer\n    };\n    let destinationStream;\n    try {\n        log('performing STOP request');\n        const result = await stop({\n            connection: destinationConnections[0],\n            request: stopRequest\n        });\n        if (result == null) {\n            throw new Error('Could not stop');\n        }\n        destinationStream = result;\n    }\n    catch (err) {\n        log.error(err);\n        return;\n    }\n    log('hop request from %p is valid', connection.remotePeer);\n    streamHandler.write({\n        type: CircuitPB.Type.STATUS,\n        code: CircuitPB.Status.SUCCESS\n    });\n    const sourceStream = streamHandler.rest();\n    log('creating related connections');\n    // Short circuit the two streams to create the relayed connection\n    return await pipe(sourceStream, destinationStream, sourceStream);\n}\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n */\nexport async function hop(options) {\n    const { connection, request, signal } = options;\n    // Create a new stream to the relay\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    // Send the HOP request\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write(request);\n    const response = await streamHandler.read();\n    if (response == null) {\n        throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED);\n    }\n    if (response.code === CircuitPB.Status.SUCCESS) {\n        log('hop request was successful');\n        return streamHandler.rest();\n    }\n    log('hop request failed with code %d, closing stream', response.code);\n    streamHandler.close();\n    throw errCode(new Error(`HOP request failed with code \"${response.code ?? 'unknown'}\"`), Errors.ERR_HOP_REQUEST_FAILED);\n}\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities\n */\nexport async function canHop(options) {\n    const { connection, signal } = options;\n    // Create a new stream to the relay\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    // Send the HOP request\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write({\n        type: CircuitPB.Type.CAN_HOP\n    });\n    const response = await streamHandler.read();\n    await streamHandler.close();\n    if (response == null || response.code !== CircuitPB.Status.SUCCESS) {\n        return false;\n    }\n    return true;\n}\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n */\nexport function handleCanHop(options) {\n    const { connection, streamHandler, circuit } = options;\n    const canHop = circuit.hopEnabled();\n    log('can hop (%s) request from %p', canHop, connection.remotePeer);\n    streamHandler.end({\n        type: CircuitPB.Type.STATUS,\n        code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    });\n}\n//# sourceMappingURL=hop.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as mafmt from '@multiformats/mafmt';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay as CircuitPB } from './pb/index.js';\nimport { codes } from '../errors.js';\nimport { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn';\nimport { RELAY_CODEC } from './multicodec.js';\nimport { createListener } from './listener.js';\nimport { handleCanHop, handleHop, hop } from './circuit/hop.js';\nimport { handleStop } from './circuit/stop.js';\nimport { StreamHandler } from './circuit/stream-handler.js';\nimport { symbol } from '@libp2p/interface-transport';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:circuit');\nexport class Circuit {\n    constructor(components, init) {\n        this._init = init;\n        this.components = components;\n        this._started = false;\n    }\n    isStarted() {\n        return this._started;\n    }\n    async start() {\n        if (this._started) {\n            return;\n        }\n        this._started = true;\n        await this.components.registrar.handle(RELAY_CODEC, (data) => {\n            void this._onProtocol(data).catch(err => {\n                log.error(err);\n            });\n        }, { ...this._init })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    async stop() {\n        await this.components.registrar.unhandle(RELAY_CODEC);\n    }\n    hopEnabled() {\n        return true;\n    }\n    hopActive() {\n        return true;\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return 'libp2p/circuit-relay-v1';\n    }\n    async _onProtocol(data) {\n        const { connection, stream } = data;\n        const controller = new TimeoutController(this._init.hop.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, controller.signal);\n        }\n        catch { }\n        try {\n            const source = abortableDuplex(stream, controller.signal);\n            const streamHandler = new StreamHandler({\n                stream: {\n                    ...stream,\n                    ...source\n                }\n            });\n            const request = await streamHandler.read();\n            if (request == null) {\n                log('request was invalid, could not read from stream');\n                streamHandler.write({\n                    type: CircuitPB.Type.STATUS,\n                    code: CircuitPB.Status.MALFORMED_MESSAGE\n                });\n                streamHandler.close();\n                return;\n            }\n            let virtualConnection;\n            switch (request.type) {\n                case CircuitPB.Type.CAN_HOP: {\n                    log('received CAN_HOP request from %p', connection.remotePeer);\n                    await handleCanHop({ circuit: this, connection, streamHandler });\n                    break;\n                }\n                case CircuitPB.Type.HOP: {\n                    log('received HOP request from %p', connection.remotePeer);\n                    await handleHop({\n                        connection,\n                        request,\n                        streamHandler,\n                        circuit: this,\n                        connectionManager: this.components.connectionManager\n                    });\n                    break;\n                }\n                case CircuitPB.Type.STOP: {\n                    log('received STOP request from %p', connection.remotePeer);\n                    virtualConnection = await handleStop({\n                        connection,\n                        request,\n                        streamHandler\n                    });\n                    break;\n                }\n                default: {\n                    log('Request of type %s not supported', request.type);\n                    streamHandler.write({\n                        type: CircuitPB.Type.STATUS,\n                        code: CircuitPB.Status.MALFORMED_MESSAGE\n                    });\n                    streamHandler.close();\n                    return;\n                }\n            }\n            if (virtualConnection != null) {\n                const remoteAddr = connection.remoteAddr\n                    .encapsulate('/p2p-circuit')\n                    .encapsulate(multiaddr(request.dstPeer?.addrs[0]));\n                const localAddr = multiaddr(request.srcPeer?.addrs[0]);\n                const maConn = streamToMaConnection({\n                    stream: virtualConnection,\n                    remoteAddr,\n                    localAddr\n                });\n                const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n                log('new %s connection %s', type, maConn.remoteAddr);\n                const conn = await this.components.upgrader.upgradeInbound(maConn);\n                log('%s connection %s upgraded', type, maConn.remoteAddr);\n                if (this.handler != null) {\n                    this.handler(conn);\n                }\n            }\n        }\n        finally {\n            controller.clear();\n        }\n    }\n    /**\n     * Dial a peer over a relay\n     */\n    async dial(ma, options = {}) {\n        // Check the multiaddr to see if it contains a relay and a destination peer\n        const addrs = ma.toString().split('/p2p-circuit');\n        const relayAddr = multiaddr(addrs[0]);\n        const destinationAddr = multiaddr(addrs[addrs.length - 1]);\n        const relayId = relayAddr.getPeerId();\n        const destinationId = destinationAddr.getPeerId();\n        if (relayId == null || destinationId == null) {\n            const errMsg = 'Circuit relay dial failed as addresses did not have peer id';\n            log.error(errMsg);\n            throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);\n        }\n        const relayPeer = peerIdFromString(relayId);\n        const destinationPeer = peerIdFromString(destinationId);\n        let disconnectOnFailure = false;\n        const relayConnections = this.components.connectionManager.getConnections(relayPeer);\n        let relayConnection = relayConnections[0];\n        if (relayConnection == null) {\n            await this.components.peerStore.addressBook.add(relayPeer, [relayAddr]);\n            relayConnection = await this.components.connectionManager.openConnection(relayPeer, options);\n            disconnectOnFailure = true;\n        }\n        try {\n            const virtualConnection = await hop({\n                ...options,\n                connection: relayConnection,\n                request: {\n                    type: CircuitPB.Type.HOP,\n                    srcPeer: {\n                        id: this.components.peerId.toBytes(),\n                        addrs: this.components.addressManager.getAddresses().map(addr => addr.bytes)\n                    },\n                    dstPeer: {\n                        id: destinationPeer.toBytes(),\n                        addrs: [multiaddr(destinationAddr).bytes]\n                    }\n                }\n            });\n            const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.components.peerId.toString()}`);\n            const maConn = streamToMaConnection({\n                stream: virtualConnection,\n                remoteAddr: ma,\n                localAddr\n            });\n            log('new outbound connection %s', maConn.remoteAddr);\n            return await this.components.upgrader.upgradeOutbound(maConn);\n        }\n        catch (err) {\n            log.error('Circuit relay dial failed', err);\n            disconnectOnFailure && await relayConnection.close();\n            throw err;\n        }\n    }\n    /**\n     * Create a listener\n     */\n    createListener(options) {\n        // Called on successful HOP and STOP requests\n        this.handler = options.handler;\n        return createListener({\n            connectionManager: this.components.connectionManager,\n            peerStore: this.components.peerStore\n        });\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]}\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter((ma) => {\n            return mafmt.Circuit.matches(ma);\n        });\n    }\n}\n//# sourceMappingURL=transport.js.map","import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { multiaddr } from '@multiformats/multiaddr';\nexport function createListener(options) {\n    const listeningAddrs = new Map();\n    /**\n     * Add swarm handler and listen for incoming connections\n     */\n    async function listen(addr) {\n        const addrString = addr.toString().split('/p2p-circuit').find(a => a !== '');\n        const ma = multiaddr(addrString);\n        const relayPeerStr = ma.getPeerId();\n        if (relayPeerStr == null) {\n            throw new Error('Could not determine relay peer from multiaddr');\n        }\n        const relayPeerId = peerIdFromString(relayPeerStr);\n        await options.peerStore.addressBook.add(relayPeerId, [ma]);\n        const relayConn = await options.connectionManager.openConnection(relayPeerId);\n        const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');\n        listeningAddrs.set(relayConn.remotePeer.toString(), relayedAddr);\n        listener.dispatchEvent(new CustomEvent('listening'));\n    }\n    /**\n     * Get fixed up multiaddrs\n     *\n     * NOTE: This method will grab the peers multiaddrs and expand them such that:\n     *\n     * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n     * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n     * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n     * `QmPeer` is this peers id\n     * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n     * addr, such when dialing over a relay with this address, it will create the circuit using\n     * the encapsulated transport address. This is useful when for example, a peer should only\n     * be dialed over TCP rather than any other transport\n     *\n     * @returns {Multiaddr[]}\n     */\n    function getAddrs() {\n        const addrs = [];\n        for (const addr of listeningAddrs.values()) {\n            addrs.push(addr);\n        }\n        return addrs;\n    }\n    const listener = Object.assign(new EventEmitter(), {\n        close: async () => await Promise.resolve(),\n        listen,\n        getAddrs\n    });\n    // Remove listeningAddrs when a peer disconnects\n    options.connectionManager.addEventListener('peer:disconnect', (evt) => {\n        const { detail: connection } = evt;\n        const deleted = listeningAddrs.delete(connection.remotePeer.toString());\n        if (deleted) {\n            // Announce listen addresses change\n            listener.dispatchEvent(new CustomEvent('close'));\n        }\n    });\n    return listener;\n}\n//# sourceMappingURL=listener.js.map","import { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\n/**\n * Convert a namespace string into a cid\n */\nexport async function namespaceToCid(namespace) {\n    const bytes = new TextEncoder().encode(namespace);\n    const hash = await sha256.digest(bytes);\n    return CID.createV0(hash);\n}\n//# sourceMappingURL=utils.js.map","const minute = 60 * 1000;\n/**\n * Delay before HOP relay service is advertised on the network\n */\nexport const ADVERTISE_BOOT_DELAY = 15 * minute;\n/**\n * Delay Between HOP relay service advertisements on the network\n */\nexport const ADVERTISE_TTL = 30 * minute;\n/**\n * Multicodec code\n */\nexport const CIRCUIT_PROTO_CODE = 290;\n/**\n * PeerStore metadaBook key for HOP relay service\n */\nexport const HOP_METADATA_KEY = 'hop_relay';\n/**\n * PeerStore metadaBook value for HOP relay service\n */\nexport const HOP_METADATA_VALUE = 'true';\n/**\n * Relay HOP relay service namespace for discovery\n */\nexport const RELAY_RENDEZVOUS_NS = '/libp2p/relay';\n//# sourceMappingURL=constants.js.map","import { logger } from '@libp2p/logger';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { RELAY_CODEC } from './multicodec.js';\nimport { canHop } from './circuit/hop.js';\nimport { namespaceToCid } from './utils.js';\nimport { CIRCUIT_PROTO_CODE, HOP_METADATA_KEY, HOP_METADATA_VALUE, RELAY_RENDEZVOUS_NS } from './constants.js';\nimport sort from 'it-sort';\nimport all from 'it-all';\nimport { pipe } from 'it-pipe';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nconst log = logger('libp2p:auto-relay');\nconst noop = () => { };\nexport class AutoRelay {\n    constructor(components, init) {\n        this.components = components;\n        this.addressSorter = init.addressSorter ?? publicAddressesFirst;\n        this.maxListeners = init.maxListeners ?? 1;\n        this.listenRelays = new Set();\n        this.onError = init.onError ?? noop;\n        this._onProtocolChange = this._onProtocolChange.bind(this);\n        this._onPeerDisconnected = this._onPeerDisconnected.bind(this);\n        this.components.peerStore.addEventListener('change:protocols', (evt) => {\n            void this._onProtocolChange(evt).catch(err => {\n                log.error(err);\n            });\n        });\n        this.components.connectionManager.addEventListener('peer:disconnect', this._onPeerDisconnected);\n    }\n    /**\n     * Check if a peer supports the relay protocol.\n     * If the protocol is not supported, check if it was supported before and remove it as a listen relay.\n     * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if\n     * inside the threshold.\n     */\n    async _onProtocolChange(evt) {\n        const { peerId, protocols } = evt.detail;\n        const id = peerId.toString();\n        // Check if it has the protocol\n        const hasProtocol = protocols.find(protocol => protocol === RELAY_CODEC);\n        // If no protocol, check if we were keeping the peer before as a listenRelay\n        if (hasProtocol == null) {\n            if (this.listenRelays.has(id)) {\n                await this._removeListenRelay(id);\n            }\n            return;\n        }\n        if (this.listenRelays.has(id)) {\n            return;\n        }\n        // If protocol, check if can hop, store info in the metadataBook and listen on it\n        try {\n            const connections = this.components.connectionManager.getConnections(peerId);\n            if (connections.length === 0) {\n                return;\n            }\n            const connection = connections[0];\n            // Do not hop on a relayed connection\n            if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {\n                log(`relayed connection to ${id} will not be used to hop on`);\n                return;\n            }\n            const supportsHop = await canHop({ connection });\n            if (supportsHop) {\n                await this.components.peerStore.metadataBook.setValue(peerId, HOP_METADATA_KEY, uint8ArrayFromString(HOP_METADATA_VALUE));\n                await this._addListenRelay(connection, id);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    /**\n     * Peer disconnects\n     */\n    _onPeerDisconnected(evt) {\n        const connection = evt.detail;\n        const peerId = connection.remotePeer;\n        const id = peerId.toString();\n        // Not listening on this relay\n        if (!this.listenRelays.has(id)) {\n            return;\n        }\n        this._removeListenRelay(id).catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Attempt to listen on the given relay connection\n     */\n    async _addListenRelay(connection, id) {\n        try {\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n            // Get peer known addresses and sort them with public addresses first\n            const remoteAddrs = await pipe(await this.components.peerStore.addressBook.get(connection.remotePeer), (source) => sort(source, this.addressSorter), async (source) => await all(source));\n            // Attempt to listen on relay\n            const result = await Promise.all(remoteAddrs.map(async (addr) => {\n                try {\n                    let multiaddr = addr.multiaddr;\n                    if (multiaddr.getPeerId() == null) {\n                        multiaddr = multiaddr.encapsulate(`/p2p/${connection.remotePeer.toString()}`);\n                    }\n                    multiaddr = multiaddr.encapsulate('/p2p-circuit');\n                    // Announce multiaddrs will update on listen success by TransportManager event being triggered\n                    await this.components.transportManager.listen([multiaddr]);\n                    return true;\n                }\n                catch (err) {\n                    log.error('error listening on circuit address', err);\n                    this.onError(err);\n                }\n                return false;\n            }));\n            if (result.includes(true)) {\n                this.listenRelays.add(id);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n            this.listenRelays.delete(id);\n        }\n    }\n    /**\n     * Remove listen relay\n     */\n    async _removeListenRelay(id) {\n        if (this.listenRelays.delete(id)) {\n            // TODO: this should be responsibility of the connMgr\n            await this._listenOnAvailableHopRelays([id]);\n        }\n    }\n    /**\n     * Try to listen on available hop relay connections.\n     * The following order will happen while we do not have enough relays.\n     * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.\n     * 2. Dial and try to listen on the peers we know that support hop but are not connected.\n     * 3. Search the network.\n     */\n    async _listenOnAvailableHopRelays(peersToIgnore = []) {\n        // TODO: The peer redial issue on disconnect should be handled by connection gating\n        // Check if already listening on enough relays\n        if (this.listenRelays.size >= this.maxListeners) {\n            return;\n        }\n        const knownHopsToDial = [];\n        const peers = await this.components.peerStore.all();\n        // Check if we have known hop peers to use and attempt to listen on the already connected\n        for (const { id, metadata } of peers) {\n            const idStr = id.toString();\n            // Continue to next if listening on this or peer to ignore\n            if (this.listenRelays.has(idStr)) {\n                continue;\n            }\n            if (peersToIgnore.includes(idStr)) {\n                continue;\n            }\n            const supportsHop = metadata.get(HOP_METADATA_KEY);\n            // Continue to next if it does not support Hop\n            if ((supportsHop == null) || uint8ArrayToString(supportsHop) !== HOP_METADATA_VALUE) {\n                continue;\n            }\n            const connections = this.components.connectionManager.getConnections(id);\n            // If not connected, store for possible later use.\n            if (connections.length === 0) {\n                knownHopsToDial.push(id);\n                continue;\n            }\n            await this._addListenRelay(connections[0], idStr);\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n        }\n        // Try to listen on known peers that are not connected\n        for (const peerId of knownHopsToDial) {\n            await this._tryToListenOnRelay(peerId);\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n        }\n        // Try to find relays to hop on the network\n        try {\n            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n            for await (const provider of this.components.contentRouting.findProviders(cid)) {\n                if (provider.multiaddrs.length === 0) {\n                    continue;\n                }\n                const peerId = provider.id;\n                if (peerId.equals(this.components.peerId)) {\n                    // Skip the provider if it's us as dialing will fail\n                    continue;\n                }\n                await this.components.peerStore.addressBook.add(peerId, provider.multiaddrs);\n                await this._tryToListenOnRelay(peerId);\n                // Check if already listening on enough relays\n                if (this.listenRelays.size >= this.maxListeners) {\n                    return;\n                }\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    async _tryToListenOnRelay(peerId) {\n        try {\n            const connection = await this.components.connectionManager.openConnection(peerId);\n            await this._addListenRelay(connection, peerId.toString());\n        }\n        catch (err) {\n            log.error('Could not use %p as relay', peerId, err);\n            this.onError(err, `could not connect and listen on known hop relay ${peerId.toString()}`);\n        }\n    }\n}\n//# sourceMappingURL=auto-relay.js.map","import { logger } from '@libp2p/logger';\nimport { codes } from '../errors.js';\nimport { setDelayedInterval, clearDelayedInterval\n// @ts-expect-error set-delayed-interval does not export types\n } from 'set-delayed-interval';\nimport { AutoRelay } from './auto-relay.js';\nimport { namespaceToCid } from './utils.js';\nimport { RELAY_RENDEZVOUS_NS } from './constants.js';\nconst log = logger('libp2p:relay');\nexport class Relay {\n    /**\n     * Creates an instance of Relay\n     */\n    constructor(components, init) {\n        this.components = components;\n        // Create autoRelay if enabled\n        this.autoRelay = init.autoRelay?.enabled !== false\n            ? new AutoRelay(components, {\n                addressSorter: init.addressSorter,\n                ...init.autoRelay\n            })\n            : undefined;\n        this.started = false;\n        this.init = init;\n        this._advertiseService = this._advertiseService.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start Relay service\n     */\n    async start() {\n        // Advertise service if HOP enabled\n        if (this.init.hop.enabled !== false && this.init.advertise.enabled !== false) {\n            this.timeout = setDelayedInterval(this._advertiseService, this.init.advertise.ttl, this.init.advertise.bootDelay);\n        }\n        this.started = true;\n    }\n    /**\n     * Stop Relay service\n     */\n    async stop() {\n        if (this.timeout != null) {\n            clearDelayedInterval(this.timeout);\n        }\n        this.started = false;\n    }\n    /**\n     * Advertise hop relay service in the network.\n     */\n    async _advertiseService() {\n        try {\n            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n            await this.components.contentRouting.provide(cid);\n        }\n        catch (err) {\n            if (err.code === codes.ERR_NO_ROUTERS_AVAILABLE) {\n                log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err);\n                // Stop the advertise\n                await this.stop();\n            }\n            else {\n                log.error(err);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import 'node-forge/lib/x509.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nconst pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n */\nexport const certificateForKey = (key, privateKey) => {\n    const publicKey = pki.rsa.setPublicKey(privateKey.n, privateKey.e);\n    const cert = pki.createCertificate();\n    cert.publicKey = publicKey;\n    cert.serialNumber = '01';\n    cert.validity.notBefore = new Date();\n    cert.validity.notAfter = new Date();\n    cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    const attrs = [{\n            name: 'organizationName',\n            value: 'ipfs'\n        }, {\n            shortName: 'OU',\n            value: 'keystore'\n        }, {\n            name: 'commonName',\n            value: key.id\n        }];\n    cert.setSubject(attrs);\n    cert.setIssuer(attrs);\n    cert.setExtensions([{\n            name: 'basicConstraints',\n            cA: true\n        }, {\n            name: 'keyUsage',\n            keyCertSign: true,\n            digitalSignature: true,\n            nonRepudiation: true,\n            keyEncipherment: true,\n            dataEncipherment: true\n        }, {\n            name: 'extKeyUsage',\n            serverAuth: true,\n            clientAuth: true,\n            codeSigning: true,\n            emailProtection: true,\n            timeStamping: true\n        }, {\n            name: 'nsCertType',\n            client: true,\n            server: true,\n            email: true,\n            objsign: true,\n            sslCA: true,\n            emailCA: true,\n            objCA: true\n        }]);\n    // self-sign certificate\n    cert.sign(privateKey);\n    return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nexport async function findAsync(array, asyncCompare) {\n    const promises = array.map(asyncCompare);\n    const results = await Promise.all(promises);\n    const index = results.findIndex(result => result);\n    return array[index];\n}\n//# sourceMappingURL=util.js.map","import 'node-forge/lib/pkcs7.js';\nimport 'node-forge/lib/pbe.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { certificateForKey, findAsync } from './util.js';\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { codes } from '../errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:keychain:cms');\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nexport class CMS {\n    /**\n     * Creates a new instance with a keychain\n     */\n    constructor(keychain, dek) {\n        if (keychain == null) {\n            throw errCode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED);\n        }\n        this.keychain = keychain;\n        privates.set(this, { dek });\n    }\n    /**\n     * Creates some protected data.\n     *\n     * The output Uint8Array contains the PKCS #7 message in DER.\n     */\n    async encrypt(name, plain) {\n        if (!(plain instanceof Uint8Array)) {\n            throw errCode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const key = await this.keychain.findKeyByName(name);\n        const pem = await this.keychain.getPrivateKey(name);\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n        const certificate = await certificateForKey(key, privateKey);\n        // create a p7 enveloped message\n        const p7 = forge.pkcs7.createEnvelopedData();\n        p7.addRecipient(certificate);\n        p7.content = forge.util.createBuffer(plain);\n        p7.encrypt();\n        // convert message to DER\n        const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n        return uint8ArrayFromString(der, 'ascii');\n    }\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     */\n    async decrypt(cmsData) {\n        if (!(cmsData instanceof Uint8Array)) {\n            throw errCode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS);\n        }\n        let cms;\n        try {\n            const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n            const obj = forge.asn1.fromDer(buf);\n            cms = forge.pkcs7.messageFromAsn1(obj);\n        }\n        catch (err) {\n            log.error(err);\n            throw errCode(new Error('Invalid CMS'), codes.ERR_INVALID_CMS);\n        }\n        // Find a recipient whose key we hold. We only deal with recipient certs\n        // issued by ipfs (O=ipfs).\n        const recipients = cms.recipients\n            // @ts-expect-error cms types not defined\n            .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n            // @ts-expect-error cms types not defined\n            .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n            // @ts-expect-error cms types not defined\n            .map(r => {\n            return {\n                recipient: r,\n                // @ts-expect-error cms types not defined\n                keyId: r.issuer.find(a => a.shortName === 'CN').value\n            };\n        });\n        const r = await findAsync(recipients, async (recipient) => {\n            try {\n                const key = await this.keychain.findKeyById(recipient.keyId);\n                if (key != null) {\n                    return true;\n                }\n            }\n            catch (err) {\n                return false;\n            }\n            return false;\n        });\n        if (r == null) {\n            // @ts-expect-error cms types not defined\n            const missingKeys = recipients.map(r => r.keyId);\n            throw errCode(new Error(`Decryption needs one of the key(s): ${missingKeys.join(', ')}`), codes.ERR_MISSING_KEYS, {\n                missingKeys\n            });\n        }\n        const key = await this.keychain.findKeyById(r.keyId);\n        if (key == null) {\n            throw errCode(new Error('No key available to decrypto'), codes.ERR_NO_KEY);\n        }\n        const pem = await this.keychain.getPrivateKey(key.name);\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n        cms.decrypt(r.recipient, privateKey);\n        return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n    }\n}\n//# sourceMappingURL=cms.js.map","/* eslint max-nested-callbacks: [\"error\", 5] */\nimport { logger } from '@libp2p/logger';\nimport sanitize from 'sanitize-filename';\nimport mergeOptions from 'merge-options';\nimport { Key } from 'interface-datastore/key';\nimport { CMS } from './cms.js';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { generateKeyPair, importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { pbkdf2, randomBytes } from '@libp2p/crypto';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nconst log = logger('libp2p:keychain');\nconst keyPrefix = '/pkcs8/';\nconst infoPrefix = '/info/';\nconst privates = new WeakMap();\n// NIST SP 800-132\nconst NIST = {\n    minKeyLength: 112 / 8,\n    minSaltLength: 128 / 8,\n    minIterationCount: 1000\n};\nconst defaultOptions = {\n    // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n    dek: {\n        keyLength: 512 / 8,\n        iterationCount: 10000,\n        salt: 'you should override this value with a crypto secure random number',\n        hash: 'sha2-512'\n    }\n};\nfunction validateKeyName(name) {\n    if (name == null) {\n        return false;\n    }\n    if (typeof name !== 'string') {\n        return false;\n    }\n    return name === sanitize(name.trim()) && name.length > 0;\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay() {\n    const min = 200;\n    const max = 1000;\n    const delay = Math.random() * (max - min) + min;\n    await new Promise(resolve => setTimeout(resolve, delay));\n}\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName(name) {\n    return new Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName(name) {\n    return new Key(infoPrefix + name);\n}\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport class KeyChain {\n    /**\n     * Creates a new instance of a key chain\n     */\n    constructor(components, init) {\n        this.components = components;\n        this.init = mergeOptions(defaultOptions, init);\n        // Enforce NIST SP 800-132\n        if (this.init.pass != null && this.init.pass?.length < 20) {\n            throw new Error('pass must be least 20 characters');\n        }\n        if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n            throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);\n        }\n        if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n            throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);\n        }\n        if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n            throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);\n        }\n        const dek = this.init.pass != null && this.init.dek?.salt != null\n            ? pbkdf2(this.init.pass, this.init.dek?.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        const dsname = DsInfoName('self');\n        if (!(await this.components.datastore.has(dsname))) {\n            await this.importPeer('self', this.components.peerId);\n        }\n        this.started = true;\n    }\n    stop() {\n        this.started = false;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data\n     * using the Cryptographic Message Syntax (CMS).\n     *\n     * CMS describes an encapsulation syntax for data protection. It\n     * is used to digitally sign, digest, authenticate, or encrypt\n     * arbitrary message content\n     */\n    get cms() {\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        return new CMS(this, dek);\n    }\n    /**\n     * Generates the options for a keychain.  A random salt is produced.\n     *\n     * @returns {object}\n     */\n    static generateOptions() {\n        const options = Object.assign({}, defaultOptions);\n        const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n        options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64');\n        return options;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data.\n     * The default options for a keychain.\n     *\n     * @returns {object}\n     */\n    static get options() {\n        return defaultOptions;\n    }\n    /**\n     * Create a new key.\n     *\n     * @param {string} name - The local key name; cannot already exist.\n     * @param {string} type - One of the key types; 'rsa'.\n     * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n     */\n    async createKey(name, type, size = 2048) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error('Invalid key name'), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (typeof type !== 'string') {\n            await randomDelay();\n            throw errCode(new Error('Invalid key type'), codes.ERR_INVALID_KEY_TYPE);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error('Key name already exists'), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        switch (type.toLowerCase()) {\n            case 'rsa':\n                if (!Number.isSafeInteger(size) || size < 2048) {\n                    await randomDelay();\n                    throw errCode(new Error('Invalid RSA key size'), codes.ERR_INVALID_KEY_SIZE);\n                }\n                break;\n            default:\n                break;\n        }\n        let keyInfo;\n        try {\n            const keypair = await generateKeyPair(type, size);\n            const kid = await keypair.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await keypair.export(dek);\n            keyInfo = {\n                name: name,\n                id: kid\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, uint8ArrayFromString(pem));\n            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        return keyInfo;\n    }\n    /**\n     * List all the keys.\n     *\n     * @returns {Promise<KeyInfo[]>}\n     */\n    async listKeys() {\n        const query = {\n            prefix: infoPrefix\n        };\n        const info = [];\n        for await (const value of this.components.datastore.query(query)) {\n            info.push(JSON.parse(uint8ArrayToString(value.value)));\n        }\n        return info;\n    }\n    /**\n     * Find a key by it's id\n     */\n    async findKeyById(id) {\n        try {\n            const keys = await this.listKeys();\n            return keys.find((k) => k.id === id);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Find a key by it's name.\n     *\n     * @param {string} name - The local key name.\n     * @returns {Promise<KeyInfo>}\n     */\n    async findKeyByName(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsInfoName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            return JSON.parse(uint8ArrayToString(res));\n        }\n        catch (err) {\n            await randomDelay();\n            log.error(err);\n            throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Remove an existing key.\n     *\n     * @param {string} name - The local key name; must already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async removeKey(name) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsName(name);\n        const keyInfo = await this.findKeyByName(name);\n        const batch = this.components.datastore.batch();\n        batch.delete(dsname);\n        batch.delete(DsInfoName(name));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Rename a key\n     *\n     * @param {string} oldName - The old local key name; must already exist.\n     * @param {string} newName - The new local key name; must not already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async renameKey(oldName, newName) {\n        if (!validateKeyName(oldName) || oldName === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid old key name '${oldName}'`), codes.ERR_OLD_KEY_NAME_INVALID);\n        }\n        if (!validateKeyName(newName) || newName === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid new key name '${newName}'`), codes.ERR_NEW_KEY_NAME_INVALID);\n        }\n        const oldDsname = DsName(oldName);\n        const newDsname = DsName(newName);\n        const oldInfoName = DsInfoName(oldName);\n        const newInfoName = DsInfoName(newName);\n        const exists = await this.components.datastore.has(newDsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error(`Key '${newName}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        try {\n            const pem = await this.components.datastore.get(oldDsname);\n            const res = await this.components.datastore.get(oldInfoName);\n            const keyInfo = JSON.parse(uint8ArrayToString(res));\n            keyInfo.name = newName;\n            const batch = this.components.datastore.batch();\n            batch.put(newDsname, pem);\n            batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)));\n            batch.delete(oldDsname);\n            batch.delete(oldInfoName);\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PEM encrypted PKCS #8 string\n     */\n    async exportKey(name, password) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (password == null) {\n            await randomDelay();\n            throw errCode(new Error('Password is required'), codes.ERR_PASSWORD_REQUIRED);\n        }\n        const dsname = DsName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            const pem = uint8ArrayToString(res);\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const privateKey = await importKey(pem, dek);\n            return await privateKey.export(password);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PeerId\n     */\n    async exportPeerId(name) {\n        const password = 'temporary-password';\n        const pem = await this.exportKey(name, password);\n        const privateKey = await importKey(pem, password);\n        return await peerIdFromKeys(privateKey.public.bytes, privateKey.bytes);\n    }\n    /**\n     * Import a new key from a PEM encoded PKCS #8 string\n     *\n     * @param {string} name - The local key name; must not already exist.\n     * @param {string} pem - The PEM encoded PKCS #8 string\n     * @param {string} password - The password.\n     * @returns {Promise<KeyInfo>}\n     */\n    async importKey(name, pem, password) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (pem == null) {\n            await randomDelay();\n            throw errCode(new Error('PEM encoded key is required'), codes.ERR_PEM_REQUIRED);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        let privateKey;\n        try {\n            privateKey = await importKey(pem, password);\n        }\n        catch (err) {\n            await randomDelay();\n            throw errCode(new Error('Cannot read the key, most likely the password is wrong'), codes.ERR_CANNOT_READ_KEY);\n        }\n        let kid;\n        try {\n            kid = await privateKey.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            pem = await privateKey.export(dek);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        const keyInfo = {\n            name: name,\n            id: kid\n        };\n        const batch = this.components.datastore.batch();\n        batch.put(dsname, uint8ArrayFromString(pem));\n        batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Import a peer key\n     */\n    async importPeer(name, peer) {\n        try {\n            if (!validateKeyName(name)) {\n                throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n            }\n            if (peer == null) {\n                throw errCode(new Error('PeerId is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            if (peer.privateKey == null) {\n                throw errCode(new Error('PeerId.privKey is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            const privateKey = await unmarshalPrivateKey(peer.privateKey);\n            const dsname = DsName(name);\n            const exists = await this.components.datastore.has(dsname);\n            if (exists) {\n                await randomDelay();\n                throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n            }\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await privateKey.export(dek);\n            const keyInfo = {\n                name: name,\n                id: peer.toString()\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, uint8ArrayFromString(pem));\n            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Gets the private key as PEM encoded PKCS #8 string\n     */\n    async getPrivateKey(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        try {\n            const dsname = DsName(name);\n            const res = await this.components.datastore.get(dsname);\n            return uint8ArrayToString(res);\n        }\n        catch (err) {\n            await randomDelay();\n            log.error(err);\n            throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Rotate keychain password and re-encrypt all associated keys\n     */\n    async rotateKeychainPass(oldPass, newPass) {\n        if (typeof oldPass !== 'string') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid old pass type '${typeof oldPass}'`), codes.ERR_INVALID_OLD_PASS_TYPE);\n        }\n        if (typeof newPass !== 'string') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid new pass type '${typeof newPass}'`), codes.ERR_INVALID_NEW_PASS_TYPE);\n        }\n        if (newPass.length < 20) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid pass length ${newPass.length}`), codes.ERR_INVALID_PASS_LENGTH);\n        }\n        log('recreating keychain');\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const oldDek = cached.dek;\n        this.init.pass = newPass;\n        const newDek = newPass != null && this.init.dek?.salt != null\n            ? pbkdf2(newPass, this.init.dek.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek: newDek });\n        const keys = await this.listKeys();\n        for (const key of keys) {\n            const res = await this.components.datastore.get(DsName(key.name));\n            const pem = uint8ArrayToString(res);\n            const privateKey = await importKey(pem, oldDek);\n            const password = newDek.toString();\n            const keyAsPEM = await privateKey.export(password);\n            // Update stored key\n            const batch = this.components.datastore.batch();\n            const keyInfo = {\n                name: key.name,\n                id: key.id\n            };\n            batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM));\n            batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        log('keychain reconstructed');\n    }\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport pSettle from 'p-settle';\nimport { codes } from './errors.js';\nimport errCode from 'err-code';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { trackedMap } from '@libp2p/tracked-map';\nconst log = logger('libp2p:transports');\nexport class DefaultTransportManager extends EventEmitter {\n    constructor(components, init = {}) {\n        super();\n        this.components = components;\n        this.started = false;\n        this.transports = new Map();\n        this.listeners = trackedMap({\n            name: 'libp2p_transport_manager_listeners',\n            metrics: this.components.metrics\n        });\n        this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL;\n    }\n    /**\n     * Adds a `Transport` to the manager\n     */\n    add(transport) {\n        const tag = transport[Symbol.toStringTag];\n        if (tag == null) {\n            throw errCode(new Error('Transport must have a valid tag'), codes.ERR_INVALID_KEY);\n        }\n        if (this.transports.has(tag)) {\n            throw errCode(new Error('There is already a transport with this tag'), codes.ERR_DUPLICATE_TRANSPORT);\n        }\n        log('adding transport %s', tag);\n        this.transports.set(tag, transport);\n        if (!this.listeners.has(tag)) {\n            this.listeners.set(tag, []);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        // Listen on the provided transports for the provided addresses\n        const addrs = this.components.addressManager.getListenAddrs();\n        await this.listen(addrs);\n        this.started = true;\n    }\n    /**\n     * Stops all listeners\n     */\n    async stop() {\n        const tasks = [];\n        for (const [key, listeners] of this.listeners) {\n            log('closing listeners for %s', key);\n            while (listeners.length > 0) {\n                const listener = listeners.pop();\n                if (listener == null) {\n                    continue;\n                }\n                tasks.push(listener.close());\n            }\n        }\n        await Promise.all(tasks);\n        log('all listeners closed');\n        for (const key of this.listeners.keys()) {\n            this.listeners.set(key, []);\n        }\n        this.started = false;\n    }\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     */\n    async dial(ma, options) {\n        const transport = this.transportForMultiaddr(ma);\n        if (transport == null) {\n            throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n        }\n        try {\n            return await transport.dial(ma, {\n                ...options,\n                upgrader: this.components.upgrader\n            });\n        }\n        catch (err) {\n            if (err.code == null) {\n                err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Returns all Multiaddr's the listeners are using\n     */\n    getAddrs() {\n        let addrs = [];\n        for (const listeners of this.listeners.values()) {\n            for (const listener of listeners) {\n                addrs = [...addrs, ...listener.getAddrs()];\n            }\n        }\n        return addrs;\n    }\n    /**\n     * Returns all the transports instances\n     */\n    getTransports() {\n        return Array.of(...this.transports.values());\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     */\n    transportForMultiaddr(ma) {\n        for (const transport of this.transports.values()) {\n            const addrs = transport.filter([ma]);\n            if (addrs.length > 0) {\n                return transport;\n            }\n        }\n    }\n    /**\n     * Starts listeners for each listen Multiaddr\n     */\n    async listen(addrs) {\n        if (addrs == null || addrs.length === 0) {\n            log('no addresses were provided for listening, this node is dial only');\n            return;\n        }\n        const couldNotListen = [];\n        for (const [key, transport] of this.transports.entries()) {\n            const supportedAddrs = transport.filter(addrs);\n            const tasks = [];\n            // For each supported multiaddr, create a listener\n            for (const addr of supportedAddrs) {\n                log('creating listener for %s on %s', key, addr);\n                const listener = transport.createListener({\n                    upgrader: this.components.upgrader\n                });\n                let listeners = this.listeners.get(key);\n                if (listeners == null) {\n                    listeners = [];\n                    this.listeners.set(key, listeners);\n                }\n                listeners.push(listener);\n                // Track listen/close events\n                listener.addEventListener('listening', () => {\n                    this.dispatchEvent(new CustomEvent('listener:listening', {\n                        detail: listener\n                    }));\n                });\n                listener.addEventListener('close', () => {\n                    this.dispatchEvent(new CustomEvent('listener:close', {\n                        detail: listener\n                    }));\n                });\n                // We need to attempt to listen on everything\n                tasks.push(listener.listen(addr));\n            }\n            // Keep track of transports we had no addresses for\n            if (tasks.length === 0) {\n                couldNotListen.push(key);\n                continue;\n            }\n            const results = await pSettle(tasks);\n            // If we are listening on at least 1 address, succeed.\n            // TODO: we should look at adding a retry (`p-retry`) here to better support\n            // listening on remote addresses as they may be offline. We could then potentially\n            // just wait for any (`p-any`) listener to succeed on each transport before returning\n            const isListening = results.find(r => r.isFulfilled);\n            if ((isListening == null) && this.faultTolerance !== FaultTolerance.NO_FATAL) {\n                throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n            }\n        }\n        // If no transports were able to listen, throw an error. This likely\n        // means we were given addresses we do not have transports for\n        if (couldNotListen.length === this.transports.size) {\n            const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`;\n            if (this.faultTolerance === FaultTolerance.FATAL_ALL) {\n                throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n            }\n            log(`libp2p in dial mode only: ${message}`);\n        }\n    }\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     */\n    async remove(key) {\n        log('removing %s', key);\n        // Close any running listeners\n        for (const listener of this.listeners.get(key) ?? []) {\n            await listener.close();\n        }\n        this.transports.delete(key);\n        this.listeners.delete(key);\n    }\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */\n    async removeAll() {\n        const tasks = [];\n        for (const key of this.transports.keys()) {\n            tasks.push(this.remove(key));\n        }\n        await Promise.all(tasks);\n    }\n}\n//# sourceMappingURL=transport-manager.js.map","export const PROTOCOL_ID = '/multistream/1.0.0';\n// Conforming to go-libp2p\n// See https://github.com/multiformats/go-multistream/blob/master/multistream.go#L297\nexport const MAX_PROTOCOL_LENGTH = 1024;\n//# sourceMappingURL=constants.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport * as lp from 'it-length-prefixed';\nimport { pipe } from 'it-pipe';\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport first from 'it-first';\nimport { abortableSource } from 'abortable-iterator';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { MAX_PROTOCOL_LENGTH } from './constants.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:mss');\nconst NewLine = uint8ArrayFromString('\\n');\nexport function encode(buffer) {\n    const list = new Uint8ArrayList(buffer, NewLine);\n    return lp.encode.single(list);\n}\n/**\n * `write` encodes and writes a single buffer\n */\nexport function write(writer, buffer, options = {}) {\n    const encoded = encode(buffer);\n    if (options.writeBytes === true) {\n        writer.push(encoded.subarray());\n    }\n    else {\n        writer.push(encoded);\n    }\n}\n/**\n * `writeAll` behaves like `write`, except it encodes an array of items as a single write\n */\nexport function writeAll(writer, buffers, options = {}) {\n    const list = new Uint8ArrayList();\n    for (const buf of buffers) {\n        list.append(encode(buf));\n    }\n    if (options.writeBytes === true) {\n        writer.push(list.subarray());\n    }\n    else {\n        writer.push(list);\n    }\n}\nexport async function read(reader, options) {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = {\n        [Symbol.asyncIterator]: () => varByteSource,\n        next: async () => await reader.next(byteLength)\n    };\n    let input = varByteSource;\n    // If we have been passed an abort signal, wrap the input source in an abortable\n    // iterator that will throw if the operation is aborted\n    if (options?.signal != null) {\n        input = abortableSource(varByteSource, options.signal);\n    }\n    // Once the length has been parsed, read chunk for that length\n    const onLength = (l) => {\n        byteLength = l;\n    };\n    const buf = await pipe(input, lp.decode({ onLength, maxDataLength: MAX_PROTOCOL_LENGTH }), async (source) => await first(source));\n    if (buf == null || buf.length === 0) {\n        throw errCode(new Error('no buffer returned'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');\n    }\n    if (buf.get(buf.byteLength - 1) !== NewLine[0]) {\n        log.error('Invalid mss message - missing newline - %s', buf.subarray());\n        throw errCode(new Error('missing newline'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');\n    }\n    return buf.sublist(0, -1); // Remove newline\n}\nexport async function readString(reader, options) {\n    const buf = await read(reader, options);\n    return uint8ArrayToString(buf.subarray());\n}\n//# sourceMappingURL=multistream.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as multistream from './multistream.js';\nimport { handshake } from 'it-handshake';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { PROTOCOL_ID } from './index.js';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nimport { reader } from 'it-reader';\nconst log = logger('libp2p:mss:select');\nexport async function select(stream, protocols, options = {}) {\n    protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n    const { reader, writer, rest, stream: shakeStream } = handshake(stream);\n    const protocol = protocols.shift();\n    if (protocol == null) {\n        throw new Error('At least one protocol must be specified');\n    }\n    log('select: write [\"%s\", \"%s\"]', PROTOCOL_ID, protocol);\n    const p1 = uint8ArrayFromString(PROTOCOL_ID);\n    const p2 = uint8ArrayFromString(protocol);\n    multistream.writeAll(writer, [p1, p2], options);\n    let response = await multistream.readString(reader, options);\n    log('select: read \"%s\"', response);\n    // Read the protocol response if we got the protocolId in return\n    if (response === PROTOCOL_ID) {\n        response = await multistream.readString(reader, options);\n        log('select: read \"%s\"', response);\n    }\n    // We're done\n    if (response === protocol) {\n        rest();\n        return { stream: shakeStream, protocol };\n    }\n    // We haven't gotten a valid ack, try the other protocols\n    for (const protocol of protocols) {\n        log('select: write \"%s\"', protocol);\n        multistream.write(writer, uint8ArrayFromString(protocol), options);\n        const response = await multistream.readString(reader, options);\n        log('select: read \"%s\" for \"%s\"', response, protocol);\n        if (response === protocol) {\n            rest(); // End our writer so others can start writing to stream\n            return { stream: shakeStream, protocol };\n        }\n    }\n    rest();\n    throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n}\nexport function lazySelect(stream, protocol) {\n    // This is a signal to write the multistream headers if the consumer tries to\n    // read from the source\n    const negotiateTrigger = pushable();\n    let negotiated = false;\n    return {\n        stream: {\n            sink: async (source) => await stream.sink((async function* () {\n                let first = true;\n                for await (const chunk of merge(source, negotiateTrigger)) {\n                    if (first) {\n                        first = false;\n                        negotiated = true;\n                        negotiateTrigger.end();\n                        const p1 = uint8ArrayFromString(PROTOCOL_ID);\n                        const p2 = uint8ArrayFromString(protocol);\n                        const list = new Uint8ArrayList(multistream.encode(p1), multistream.encode(p2));\n                        if (chunk.length > 0)\n                            list.append(chunk);\n                        yield* list;\n                    }\n                    else {\n                        yield chunk;\n                    }\n                }\n            })()),\n            source: (async function* () {\n                if (!negotiated)\n                    negotiateTrigger.push(new Uint8Array());\n                const byteReader = reader(stream.source);\n                let response = await multistream.readString(byteReader);\n                if (response === PROTOCOL_ID) {\n                    response = await multistream.readString(byteReader);\n                }\n                if (response !== protocol) {\n                    throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n                }\n                for await (const chunk of byteReader) {\n                    yield* chunk;\n                }\n            })()\n        },\n        protocol\n    };\n}\n//# sourceMappingURL=select.js.map","import { logger } from '@libp2p/logger';\nimport * as multistream from './multistream.js';\nimport { handshake } from 'it-handshake';\nimport { PROTOCOL_ID } from './constants.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { Uint8ArrayList } from 'uint8arraylist';\nconst log = logger('libp2p:mss:handle');\nexport async function handle(stream, protocols, options) {\n    protocols = Array.isArray(protocols) ? protocols : [protocols];\n    const { writer, reader, rest, stream: shakeStream } = handshake(stream);\n    while (true) {\n        const protocol = await multistream.readString(reader, options);\n        log('read \"%s\"', protocol);\n        if (protocol === PROTOCOL_ID) {\n            log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n            multistream.write(writer, uint8ArrayFromString(PROTOCOL_ID), options);\n            continue;\n        }\n        if (protocols.includes(protocol)) {\n            multistream.write(writer, uint8ArrayFromString(protocol), options);\n            log('respond with \"%s\" for \"%s\"', protocol, protocol);\n            rest();\n            return { stream: shakeStream, protocol };\n        }\n        if (protocol === 'ls') {\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n            multistream.write(writer, new Uint8ArrayList(...protocols.map(p => multistream.encode(uint8ArrayFromString(p)))), options);\n            // multistream.writeAll(writer, protocols.map(p => uint8ArrayFromString(p)))\n            log('respond with \"%s\" for %s', protocols, protocol);\n            continue;\n        }\n        multistream.write(writer, uint8ArrayFromString('na'), options);\n        log('respond with \"na\" for \"%s\"', protocol);\n    }\n}\n//# sourceMappingURL=handle.js.map","import errCode from 'err-code';\nimport { OPEN, CLOSING, CLOSED } from '@libp2p/interface-connection/status';\nimport { symbol } from '@libp2p/interface-connection';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection');\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nexport class ConnectionImpl {\n    /**\n     * An implementation of the js-libp2p connection.\n     * Any libp2p transport should use an upgrader to return this connection.\n     */\n    constructor(init) {\n        const { remoteAddr, remotePeer, newStream, close, getStreams, stat } = init;\n        this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`;\n        this.remoteAddr = remoteAddr;\n        this.remotePeer = remotePeer;\n        this.stat = {\n            ...stat,\n            status: OPEN\n        };\n        this._newStream = newStream;\n        this._close = close;\n        this._getStreams = getStreams;\n        this.tags = [];\n        this._closing = false;\n    }\n    get [Symbol.toStringTag]() {\n        return 'Connection';\n    }\n    get [symbol]() {\n        return true;\n    }\n    /**\n     * Get all the streams of the muxer\n     */\n    get streams() {\n        return this._getStreams();\n    }\n    /**\n     * Create a new stream from this connection\n     */\n    async newStream(protocols, options) {\n        if (this.stat.status === CLOSING) {\n            throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');\n        }\n        if (this.stat.status === CLOSED) {\n            throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');\n        }\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        const stream = await this._newStream(protocols, options);\n        stream.stat.direction = 'outbound';\n        return stream;\n    }\n    /**\n     * Add a stream when it is opened to the registry\n     */\n    addStream(stream) {\n        stream.stat.direction = 'inbound';\n    }\n    /**\n     * Remove stream registry after it is closed\n     */\n    removeStream(id) {\n    }\n    /**\n     * Close the connection\n     */\n    async close() {\n        if (this.stat.status === CLOSED || this._closing) {\n            return;\n        }\n        this.stat.status = CLOSING;\n        // close all streams - this can throw if we're not multiplexed\n        try {\n            this.streams.forEach(s => s.close());\n        }\n        catch (err) {\n            log.error(err);\n        }\n        // Close raw connection\n        this._closing = true;\n        await this._close();\n        this._closing = false;\n        this.stat.timeline.close = Date.now();\n        this.stat.status = CLOSED;\n    }\n}\nexport function createConnection(init) {\n    return new ConnectionImpl(init);\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isTopology } from '@libp2p/interface-registrar';\nimport merge from 'merge-options';\nconst log = logger('libp2p:registrar');\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nexport class DefaultRegistrar {\n    constructor(components) {\n        this.topologies = new Map();\n        this.handlers = new Map();\n        this.components = components;\n        this._onDisconnect = this._onDisconnect.bind(this);\n        this._onProtocolChange = this._onProtocolChange.bind(this);\n        this._onConnect = this._onConnect.bind(this);\n        this.components.connectionManager.addEventListener('peer:disconnect', this._onDisconnect);\n        this.components.connectionManager.addEventListener('peer:connect', this._onConnect);\n        // happens after identify\n        this.components.peerStore.addEventListener('change:protocols', this._onProtocolChange);\n    }\n    getProtocols() {\n        return Array.from(new Set([\n            ...this.topologies.keys(),\n            ...this.handlers.keys()\n        ])).sort();\n    }\n    getHandler(protocol) {\n        const handler = this.handlers.get(protocol);\n        if (handler == null) {\n            throw errCode(new Error(`No handler registered for protocol ${protocol}`), codes.ERR_NO_HANDLER_FOR_PROTOCOL);\n        }\n        return handler;\n    }\n    getTopologies(protocol) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            return [];\n        }\n        return [\n            ...topologies.values()\n        ];\n    }\n    /**\n     * Registers the `handler` for each protocol\n     */\n    async handle(protocol, handler, opts) {\n        if (this.handlers.has(protocol)) {\n            throw errCode(new Error(`Handler already registered for protocol ${protocol}`), codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);\n        }\n        const options = merge.bind({ ignoreUndefined: true })({\n            maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n            maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n        }, opts);\n        this.handlers.set(protocol, {\n            handler,\n            options\n        });\n        // Add new protocols to self protocols in the Protobook\n        await this.components.peerStore.protoBook.add(this.components.peerId, [protocol]);\n    }\n    /**\n     * Removes the handler for each protocol. The protocol\n     * will no longer be supported on streams.\n     */\n    async unhandle(protocols) {\n        const protocolList = Array.isArray(protocols) ? protocols : [protocols];\n        protocolList.forEach(protocol => {\n            this.handlers.delete(protocol);\n        });\n        // Remove protocols from self protocols in the Protobook\n        await this.components.peerStore.protoBook.remove(this.components.peerId, protocolList);\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     */\n    async register(protocol, topology) {\n        if (!isTopology(topology)) {\n            log.error('topology must be an instance of interfaces/topology');\n            throw errCode(new Error('topology must be an instance of interfaces/topology'), codes.ERR_INVALID_PARAMETERS);\n        }\n        // Create topology\n        const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;\n        let topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            topologies = new Map();\n            this.topologies.set(protocol, topologies);\n        }\n        topologies.set(id, topology);\n        // Set registrar\n        await topology.setRegistrar(this);\n        return id;\n    }\n    /**\n     * Unregister topology\n     */\n    unregister(id) {\n        for (const [protocol, topologies] of this.topologies.entries()) {\n            if (topologies.has(id)) {\n                topologies.delete(id);\n                if (topologies.size === 0) {\n                    this.topologies.delete(protocol);\n                }\n            }\n        }\n    }\n    /**\n     * Remove a disconnected peer from the record\n     */\n    _onDisconnect(evt) {\n        const connection = evt.detail;\n        void this.components.peerStore.protoBook.get(connection.remotePeer)\n            .then(peerProtocols => {\n            for (const protocol of peerProtocols) {\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    // no topologies are interested in this protocol\n                    continue;\n                }\n                for (const topology of topologies.values()) {\n                    topology.onDisconnect(connection.remotePeer);\n                }\n            }\n        })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * On peer connected if we already have their protocols. Usually used for reconnects\n     * as change:protocols event won't be emitted due to identical protocols.\n     */\n    _onConnect(evt) {\n        const connection = evt.detail;\n        void this.components.peerStore.protoBook.get(connection.remotePeer)\n            .then(peerProtocols => {\n            for (const protocol of peerProtocols) {\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    // no topologies are interested in this protocol\n                    continue;\n                }\n                for (const topology of topologies.values()) {\n                    topology.onConnect(connection.remotePeer, connection);\n                }\n            }\n        })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Check if a new peer support the multicodecs for this topology\n     */\n    _onProtocolChange(evt) {\n        const { peerId, protocols, oldProtocols } = evt.detail;\n        const removed = oldProtocols.filter(protocol => !protocols.includes(protocol));\n        const added = protocols.filter(protocol => !oldProtocols.includes(protocol));\n        for (const protocol of removed) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                topology.onDisconnect(peerId);\n            }\n        }\n        for (const protocol of added) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                const connection = this.components.connectionManager.getConnections(peerId)[0];\n                if (connection == null) {\n                    continue;\n                }\n                topology.onConnect(peerId, connection);\n            }\n        }\n    }\n}\n//# sourceMappingURL=registrar.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as mss from '@libp2p/multistream-select';\nimport { codes } from './errors.js';\nimport { createConnection } from './connection/index.js';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { DEFAULT_MAX_INBOUND_STREAMS, DEFAULT_MAX_OUTBOUND_STREAMS } from './registrar.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:upgrader');\nfunction findIncomingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxInboundStreams;\n    }\n    catch (err) {\n        if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return DEFAULT_MAX_INBOUND_STREAMS;\n}\nfunction findOutgoingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxOutboundStreams;\n    }\n    catch (err) {\n        if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return DEFAULT_MAX_OUTBOUND_STREAMS;\n}\nfunction countStreams(protocol, direction, connection) {\n    let streamCount = 0;\n    connection.streams.forEach(stream => {\n        if (stream.stat.direction === direction && stream.stat.protocol === protocol) {\n            streamCount++;\n        }\n    });\n    return streamCount;\n}\nexport class DefaultUpgrader extends EventEmitter {\n    constructor(components, init) {\n        super();\n        this.components = components;\n        this.connectionEncryption = new Map();\n        init.connectionEncryption.forEach(encrypter => {\n            this.connectionEncryption.set(encrypter.protocol, encrypter);\n        });\n        this.muxers = new Map();\n        init.muxers.forEach(muxer => {\n            this.muxers.set(muxer.protocol, muxer);\n        });\n        this.inboundUpgradeTimeout = init.inboundUpgradeTimeout;\n    }\n    /**\n     * Upgrades an inbound connection\n     */\n    async upgradeInbound(maConn, opts) {\n        const accept = await this.components.connectionManager.acceptIncomingConnection(maConn);\n        if (!accept) {\n            throw errCode(new Error('connection denied'), codes.ERR_CONNECTION_DENIED);\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let muxerFactory;\n        let cryptoProtocol;\n        const timeoutController = new TimeoutController(this.inboundUpgradeTimeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        try {\n            const abortableStream = abortableDuplex(maConn, timeoutController.signal);\n            maConn.source = abortableStream.source;\n            maConn.sink = abortableStream.sink;\n            if (await this.components.connectionGater.denyInboundConnection(maConn)) {\n                throw errCode(new Error('The multiaddr connection is blocked by gater.acceptConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            this.components.metrics?.trackMultiaddrConnection(maConn);\n            log('starting the inbound connection upgrade');\n            // Protect\n            let protectedConn = maConn;\n            if (opts?.skipProtection !== true) {\n                const protector = this.components.connectionProtector;\n                if (protector != null) {\n                    log('protecting the inbound connection');\n                    protectedConn = await protector.protect(maConn);\n                }\n            }\n            try {\n                // Encrypt the connection\n                encryptedConn = protectedConn;\n                if (opts?.skipEncryption !== true) {\n                    ({\n                        conn: encryptedConn,\n                        remotePeer,\n                        protocol: cryptoProtocol\n                    } = await this._encryptInbound(protectedConn));\n                    if (await this.components.connectionGater.denyInboundEncryptedConnection(remotePeer, {\n                        ...protectedConn,\n                        ...encryptedConn\n                    })) {\n                        throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n                    }\n                }\n                else {\n                    const idStr = maConn.remoteAddr.getPeerId();\n                    if (idStr == null) {\n                        throw errCode(new Error('inbound connection that skipped encryption must have a peer id'), codes.ERR_INVALID_MULTIADDR);\n                    }\n                    const remotePeerId = peerIdFromString(idStr);\n                    cryptoProtocol = 'native';\n                    remotePeer = remotePeerId;\n                }\n                upgradedConn = encryptedConn;\n                if (opts?.muxerFactory != null) {\n                    muxerFactory = opts.muxerFactory;\n                }\n                else if (this.muxers.size > 0) {\n                    // Multiplex the connection\n                    const multiplexed = await this._multiplexInbound({\n                        ...protectedConn,\n                        ...encryptedConn\n                    }, this.muxers);\n                    muxerFactory = multiplexed.muxerFactory;\n                    upgradedConn = multiplexed.stream;\n                }\n            }\n            catch (err) {\n                log.error('Failed to upgrade inbound connection', err);\n                throw err;\n            }\n            if (await this.components.connectionGater.denyInboundUpgradedConnection(remotePeer, {\n                ...protectedConn,\n                ...encryptedConn\n            })) {\n                throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            log('Successfully upgraded inbound connection');\n            return this._createConnection({\n                cryptoProtocol,\n                direction: 'inbound',\n                maConn,\n                upgradedConn,\n                muxerFactory,\n                remotePeer\n            });\n        }\n        finally {\n            this.components.connectionManager.afterUpgradeInbound();\n            timeoutController.clear();\n        }\n    }\n    /**\n     * Upgrades an outbound connection\n     */\n    async upgradeOutbound(maConn, opts) {\n        const idStr = maConn.remoteAddr.getPeerId();\n        let remotePeerId;\n        if (idStr != null) {\n            remotePeerId = peerIdFromString(idStr);\n            if (await this.components.connectionGater.denyOutboundConnection(remotePeerId, maConn)) {\n                throw errCode(new Error('The multiaddr connection is blocked by connectionGater.denyOutboundConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let cryptoProtocol;\n        let muxerFactory;\n        this.components.metrics?.trackMultiaddrConnection(maConn);\n        log('Starting the outbound connection upgrade');\n        // If the transport natively supports encryption, skip connection\n        // protector and encryption\n        // Protect\n        let protectedConn = maConn;\n        if (opts?.skipProtection !== true) {\n            const protector = this.components.connectionProtector;\n            if (protector != null) {\n                protectedConn = await protector.protect(maConn);\n            }\n        }\n        try {\n            // Encrypt the connection\n            encryptedConn = protectedConn;\n            if (opts?.skipEncryption !== true) {\n                ({\n                    conn: encryptedConn,\n                    remotePeer,\n                    protocol: cryptoProtocol\n                } = await this._encryptOutbound(protectedConn, remotePeerId));\n                if (await this.components.connectionGater.denyOutboundEncryptedConnection(remotePeer, {\n                    ...protectedConn,\n                    ...encryptedConn\n                })) {\n                    throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n                }\n            }\n            else {\n                if (remotePeerId == null) {\n                    throw errCode(new Error('Encryption was skipped but no peer id was passed'), codes.ERR_INVALID_PEER);\n                }\n                cryptoProtocol = 'native';\n                remotePeer = remotePeerId;\n            }\n            upgradedConn = encryptedConn;\n            if (opts?.muxerFactory != null) {\n                muxerFactory = opts.muxerFactory;\n            }\n            else if (this.muxers.size > 0) {\n                // Multiplex the connection\n                const multiplexed = await this._multiplexOutbound({\n                    ...protectedConn,\n                    ...encryptedConn\n                }, this.muxers);\n                muxerFactory = multiplexed.muxerFactory;\n                upgradedConn = multiplexed.stream;\n            }\n        }\n        catch (err) {\n            log.error('Failed to upgrade outbound connection', err);\n            await maConn.close(err);\n            throw err;\n        }\n        if (await this.components.connectionGater.denyOutboundUpgradedConnection(remotePeer, {\n            ...protectedConn,\n            ...encryptedConn\n        })) {\n            throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n        }\n        log('Successfully upgraded outbound connection');\n        return this._createConnection({\n            cryptoProtocol,\n            direction: 'outbound',\n            maConn,\n            upgradedConn,\n            muxerFactory,\n            remotePeer\n        });\n    }\n    /**\n     * A convenience method for generating a new `Connection`\n     */\n    _createConnection(opts) {\n        const { cryptoProtocol, direction, maConn, upgradedConn, remotePeer, muxerFactory } = opts;\n        let muxer;\n        let newStream;\n        let connection; // eslint-disable-line prefer-const\n        if (muxerFactory != null) {\n            // Create the muxer\n            muxer = muxerFactory.createStreamMuxer({\n                direction,\n                // Run anytime a remote stream is created\n                onIncomingStream: muxedStream => {\n                    if (connection == null) {\n                        return;\n                    }\n                    void Promise.resolve()\n                        .then(async () => {\n                        const protocols = this.components.registrar.getProtocols();\n                        const { stream, protocol } = await mss.handle(muxedStream, protocols);\n                        log('%s: incoming stream opened on %s', direction, protocol);\n                        if (connection == null) {\n                            return;\n                        }\n                        const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar);\n                        const streamCount = countStreams(protocol, 'inbound', connection);\n                        if (streamCount === incomingLimit) {\n                            muxedStream.abort(errCode(new Error(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`), codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS));\n                            return;\n                        }\n                        // after the handshake the returned stream can have early data so override\n                        // the souce/sink\n                        muxedStream.source = stream.source;\n                        muxedStream.sink = stream.sink;\n                        muxedStream.stat.protocol = protocol;\n                        // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                        // the peerstore should ensure that the peer is registered with that protocol\n                        this.components.peerStore.protoBook.add(remotePeer, [protocol]).catch(err => log.error(err));\n                        connection.addStream(muxedStream);\n                        this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                        this._onStream({ connection, stream: muxedStream, protocol });\n                    })\n                        .catch(err => {\n                        log.error(err);\n                        if (muxedStream.stat.timeline.close == null) {\n                            muxedStream.close();\n                        }\n                    });\n                },\n                // Run anytime a stream closes\n                onStreamEnd: muxedStream => {\n                    connection?.removeStream(muxedStream.id);\n                }\n            });\n            newStream = async (protocols, options = {}) => {\n                if (muxer == null) {\n                    throw errCode(new Error('Stream is not multiplexed'), codes.ERR_MUXER_UNAVAILABLE);\n                }\n                log('%s: starting new stream on %s', direction, protocols);\n                const muxedStream = await muxer.newStream();\n                let controller;\n                try {\n                    if (options.signal == null) {\n                        log('No abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols);\n                        controller = new TimeoutController(30000);\n                        options.signal = controller.signal;\n                        try {\n                            // fails on node < 15.4\n                            setMaxListeners?.(Infinity, controller.signal);\n                        }\n                        catch { }\n                    }\n                    const { stream, protocol } = await mss.select(muxedStream, protocols, options);\n                    const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar);\n                    const streamCount = countStreams(protocol, 'outbound', connection);\n                    if (streamCount === outgoingLimit) {\n                        const err = errCode(new Error(`Too many outbound protocol streams for protocol \"${protocol}\" - limit ${outgoingLimit}`), codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);\n                        muxedStream.abort(err);\n                        throw err;\n                    }\n                    // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                    // the peerstore should ensure that the peer is registered with that protocol\n                    this.components.peerStore.protoBook.add(remotePeer, [protocol]).catch(err => log.error(err));\n                    // after the handshake the returned stream can have early data so override\n                    // the souce/sink\n                    muxedStream.source = stream.source;\n                    muxedStream.sink = stream.sink;\n                    muxedStream.stat.protocol = protocol;\n                    this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                    return muxedStream;\n                }\n                catch (err) {\n                    log.error('could not create new stream', err);\n                    if (muxedStream.stat.timeline.close == null) {\n                        muxedStream.close();\n                    }\n                    if (err.code != null) {\n                        throw err;\n                    }\n                    throw errCode(err, codes.ERR_UNSUPPORTED_PROTOCOL);\n                }\n                finally {\n                    if (controller != null) {\n                        controller.clear();\n                    }\n                }\n            };\n            // Pipe all data through the muxer\n            void Promise.all([\n                muxer.sink(upgradedConn.source),\n                upgradedConn.sink(muxer.source)\n            ]).catch(err => {\n                log.error(err);\n            });\n        }\n        const _timeline = maConn.timeline;\n        maConn.timeline = new Proxy(_timeline, {\n            set: (...args) => {\n                if (connection != null && args[1] === 'close' && args[2] != null && _timeline.close == null) {\n                    // Wait for close to finish before notifying of the closure\n                    (async () => {\n                        try {\n                            if (connection.stat.status === 'OPEN') {\n                                await connection.close();\n                            }\n                        }\n                        catch (err) {\n                            log.error(err);\n                        }\n                        finally {\n                            this.dispatchEvent(new CustomEvent('connectionEnd', {\n                                detail: connection\n                            }));\n                        }\n                    })().catch(err => {\n                        log.error(err);\n                    });\n                }\n                return Reflect.set(...args);\n            }\n        });\n        maConn.timeline.upgraded = Date.now();\n        const errConnectionNotMultiplexed = () => {\n            throw errCode(new Error('connection is not multiplexed'), codes.ERR_CONNECTION_NOT_MULTIPLEXED);\n        };\n        // Create the connection\n        connection = createConnection({\n            remoteAddr: maConn.remoteAddr,\n            remotePeer: remotePeer,\n            stat: {\n                status: 'OPEN',\n                direction,\n                timeline: maConn.timeline,\n                multiplexer: muxer?.protocol,\n                encryption: cryptoProtocol\n            },\n            newStream: newStream ?? errConnectionNotMultiplexed,\n            getStreams: () => muxer != null ? muxer.streams : errConnectionNotMultiplexed(),\n            close: async () => {\n                await maConn.close();\n                // Ensure remaining streams are closed\n                if (muxer != null) {\n                    muxer.close();\n                }\n            }\n        });\n        this.dispatchEvent(new CustomEvent('connection', {\n            detail: connection\n        }));\n        return connection;\n    }\n    /**\n     * Routes incoming streams to the correct handler\n     */\n    _onStream(opts) {\n        const { connection, stream, protocol } = opts;\n        const { handler } = this.components.registrar.getHandler(protocol);\n        handler({ connection, stream });\n    }\n    /**\n     * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n     */\n    async _encryptInbound(connection) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        log('handling inbound crypto protocol selection', protocols);\n        try {\n            const { stream, protocol } = await mss.handle(connection, protocols, {\n                writeBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            log('encrypting inbound connection...');\n            return {\n                ...await encrypter.secureInbound(this.components.peerId, stream),\n                protocol\n            };\n        }\n        catch (err) {\n            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Attempts to encrypt the given `connection` with the provided connection encrypters.\n     * The first `ConnectionEncrypter` module to succeed will be used\n     */\n    async _encryptOutbound(connection, remotePeerId) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        log('selecting outbound crypto protocol', protocols);\n        try {\n            const { stream, protocol } = await mss.select(connection, protocols, {\n                writeBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            log('encrypting outbound connection to %p', remotePeerId);\n            return {\n                ...await encrypter.secureOutbound(this.components.peerId, stream, remotePeerId),\n                protocol\n            };\n        }\n        catch (err) {\n            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Selects one of the given muxers via multistream-select. That\n     * muxer will be used for all future streams on the connection.\n     */\n    async _multiplexOutbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        log('outbound selecting muxer %s', protocols);\n        try {\n            const { stream, protocol } = await mss.select(connection, protocols, {\n                writeBytes: true\n            });\n            log('%s selected as muxer protocol', protocol);\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            log.error('error multiplexing outbound stream', err);\n            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n    /**\n     * Registers support for one of the given muxers via multistream-select. The\n     * selected muxer will be used for all future streams on the connection.\n     */\n    async _multiplexInbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        log('inbound handling muxers %s', protocols);\n        try {\n            const { stream, protocol } = await mss.handle(connection, protocols, {\n                writeBytes: true\n            });\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            log.error('error multiplexing inbound stream', err);\n            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n}\n//# sourceMappingURL=upgrader.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Identify;\n(function (Identify) {\n    let _codec;\n    Identify.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.protocolVersion != null) {\n                    w.uint32(42);\n                    w.string(obj.protocolVersion);\n                }\n                if (obj.agentVersion != null) {\n                    w.uint32(50);\n                    w.string(obj.agentVersion);\n                }\n                if (obj.publicKey != null) {\n                    w.uint32(10);\n                    w.bytes(obj.publicKey);\n                }\n                if (obj.listenAddrs != null) {\n                    for (const value of obj.listenAddrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.observedAddr != null) {\n                    w.uint32(34);\n                    w.bytes(obj.observedAddr);\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(26);\n                        w.string(value);\n                    }\n                }\n                if (obj.signedPeerRecord != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signedPeerRecord);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    listenAddrs: [],\n                    protocols: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 5:\n                            obj.protocolVersion = reader.string();\n                            break;\n                        case 6:\n                            obj.agentVersion = reader.string();\n                            break;\n                        case 1:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.listenAddrs.push(reader.bytes());\n                            break;\n                        case 4:\n                            obj.observedAddr = reader.bytes();\n                            break;\n                        case 3:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 8:\n                            obj.signedPeerRecord = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Identify.encode = (obj) => {\n        return encodeMessage(obj, Identify.codec());\n    };\n    Identify.decode = (buf) => {\n        return decodeMessage(buf, Identify.codec());\n    };\n})(Identify || (Identify = {}));\n//# sourceMappingURL=message.js.map","export const version = '0.0.0';\nexport const name = 'libp2p';\n//# sourceMappingURL=version.js.map","import { version } from '../version.js';\nexport const PROTOCOL_VERSION = 'ipfs/0.1.0'; // deprecated\nexport const AGENT_VERSION = `js-libp2p/${version}`;\nexport const MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0'; // deprecated\nexport const MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0'; // deprecated\nexport const IDENTIFY_PROTOCOL_VERSION = '0.1.0';\nexport const MULTICODEC_IDENTIFY_PROTOCOL_NAME = 'id';\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = 'id/push';\nexport const MULTICODEC_IDENTIFY_PROTOCOL_VERSION = '1.0.0';\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = '1.0.0';\n//# sourceMappingURL=consts.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as lp from 'it-length-prefixed';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { multiaddr, protocols } from '@multiformats/multiaddr';\nimport { Identify } from './pb/message.js';\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record';\nimport { MULTICODEC_IDENTIFY, MULTICODEC_IDENTIFY_PUSH, IDENTIFY_PROTOCOL_VERSION, MULTICODEC_IDENTIFY_PROTOCOL_NAME, MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME, MULTICODEC_IDENTIFY_PROTOCOL_VERSION, MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION } from './consts.js';\nimport { codes } from '../errors.js';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:identify');\n// https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L52\nconst MAX_IDENTIFY_MESSAGE_SIZE = 1024 * 8;\nexport class IdentifyService {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.init = init;\n        this.identifyProtocolStr = `/${init.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`;\n        this.identifyPushProtocolStr = `/${init.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`;\n        // Store self host metadata\n        this.host = {\n            protocolVersion: `${init.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,\n            ...init.host\n        };\n        // When a new connection happens, trigger identify\n        this.components.connectionManager.addEventListener('peer:connect', (evt) => {\n            const connection = evt.detail;\n            this.identify(connection).catch(log.error);\n        });\n        // When self multiaddrs change, trigger identify-push\n        this.components.peerStore.addEventListener('change:multiaddrs', (evt) => {\n            const { peerId } = evt.detail;\n            if (this.components.peerId.equals(peerId)) {\n                void this.pushToPeerStore().catch(err => log.error(err));\n            }\n        });\n        // When self protocols change, trigger identify-push\n        this.components.peerStore.addEventListener('change:protocols', (evt) => {\n            const { peerId } = evt.detail;\n            if (this.components.peerId.equals(peerId)) {\n                void this.pushToPeerStore().catch(err => log.error(err));\n            }\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        await this.components.peerStore.metadataBook.setValue(this.components.peerId, 'AgentVersion', uint8ArrayFromString(this.host.agentVersion));\n        await this.components.peerStore.metadataBook.setValue(this.components.peerId, 'ProtocolVersion', uint8ArrayFromString(this.host.protocolVersion));\n        await this.components.registrar.handle(this.identifyProtocolStr, (data) => {\n            void this._handleIdentify(data).catch(err => {\n                log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        await this.components.registrar.handle(this.identifyPushProtocolStr, (data) => {\n            void this._handlePush(data).catch(err => {\n                log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.init.maxPushIncomingStreams,\n            maxOutboundStreams: this.init.maxPushOutgoingStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.identifyProtocolStr);\n        await this.components.registrar.unhandle(this.identifyPushProtocolStr);\n        this.started = false;\n    }\n    /**\n     * Send an Identify Push update to the list of connections\n     */\n    async push(connections) {\n        const signedPeerRecord = await this.components.peerStore.addressBook.getRawEnvelope(this.components.peerId);\n        const listenAddrs = this.components.addressManager.getAddresses().map((ma) => ma.bytes);\n        const protocols = await this.components.peerStore.protoBook.get(this.components.peerId);\n        const pushes = connections.map(async (connection) => {\n            let stream;\n            const timeoutController = new TimeoutController(this.init.timeout);\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n            try {\n                stream = await connection.newStream([this.identifyPushProtocolStr], {\n                    signal: timeoutController.signal\n                });\n                // make stream abortable\n                const source = abortableDuplex(stream, timeoutController.signal);\n                await source.sink(pipe([Identify.encode({\n                        listenAddrs,\n                        signedPeerRecord,\n                        protocols\n                    })], lp.encode()));\n            }\n            catch (err) {\n                // Just log errors\n                log.error('could not push identify update to peer', err);\n            }\n            finally {\n                if (stream != null) {\n                    stream.close();\n                }\n                timeoutController.clear();\n            }\n        });\n        await Promise.all(pushes);\n    }\n    /**\n     * Calls `push` on all peer connections\n     */\n    async pushToPeerStore() {\n        // Do not try to push if we are not running\n        if (!this.isStarted()) {\n            return;\n        }\n        const connections = [];\n        for (const conn of this.components.connectionManager.getConnections()) {\n            const peerId = conn.remotePeer;\n            const peer = await this.components.peerStore.get(peerId);\n            if (!peer.protocols.includes(this.identifyPushProtocolStr)) {\n                continue;\n            }\n            connections.push(conn);\n        }\n        await this.push(connections);\n    }\n    async _identify(connection, options = {}) {\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream([this.identifyProtocolStr], {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            const data = await pipe([], source, lp.decode({\n                maxDataLength: this.init.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }), async (source) => await first(source));\n            if (data == null) {\n                throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED);\n            }\n            try {\n                return Identify.decode(data);\n            }\n            catch (err) {\n                throw errCode(err, codes.ERR_INVALID_MESSAGE);\n            }\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Requests the `Identify` message from peer associated with the given `connection`.\n     * If the identified peer does not match the `PeerId` associated with the connection,\n     * an error will be thrown.\n     */\n    async identify(connection, options = {}) {\n        const message = await this._identify(connection, options);\n        const { publicKey, listenAddrs, protocols, observedAddr, signedPeerRecord, agentVersion, protocolVersion } = message;\n        if (publicKey == null) {\n            throw errCode(new Error('public key was missing from identify message'), codes.ERR_MISSING_PUBLIC_KEY);\n        }\n        const id = await peerIdFromKeys(publicKey);\n        if (!connection.remotePeer.equals(id)) {\n            throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n        }\n        if (this.components.peerId.equals(id)) {\n            throw errCode(new Error('identified peer is our own peer id?'), codes.ERR_INVALID_PEER);\n        }\n        // Get the observedAddr if there is one\n        const cleanObservedAddr = IdentifyService.getCleanMultiaddr(observedAddr);\n        if (signedPeerRecord != null) {\n            log('received signed peer record from %p', id);\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);\n                if (!envelope.peerId.equals(id)) {\n                    throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n                }\n                if (await this.components.peerStore.addressBook.consumePeerRecord(envelope)) {\n                    await this.components.peerStore.protoBook.set(id, protocols);\n                    if (agentVersion != null) {\n                        await this.components.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(agentVersion));\n                    }\n                    if (protocolVersion != null) {\n                        await this.components.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(protocolVersion));\n                    }\n                    log('identify completed for peer %p and protocols %o', id, protocols);\n                    return;\n                }\n            }\n            catch (err) {\n                log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n            }\n        }\n        else {\n            log('no signed peer record received from %p', id);\n        }\n        log('falling back to legacy addresses from %p', id);\n        // LEGACY: Update peers data in PeerStore\n        try {\n            await this.components.peerStore.addressBook.set(id, listenAddrs.map((addr) => multiaddr(addr)));\n        }\n        catch (err) {\n            log.error('received invalid addrs', err);\n        }\n        await this.components.peerStore.protoBook.set(id, protocols);\n        if (agentVersion != null) {\n            await this.components.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(agentVersion));\n        }\n        if (protocolVersion != null) {\n            await this.components.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(protocolVersion));\n        }\n        log('identify completed for peer %p and protocols %o', id, protocols);\n        // TODO: Add and score our observed addr\n        log('received observed address of %s', cleanObservedAddr?.toString());\n        // this.components.addressManager.addObservedAddr(observedAddr)\n    }\n    /**\n     * Sends the `Identify` response with the Signed Peer Record\n     * to the requesting peer over the given `connection`\n     */\n    async _handleIdentify(data) {\n        const { connection, stream } = data;\n        const timeoutController = new TimeoutController(this.init.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        try {\n            const publicKey = this.components.peerId.publicKey ?? new Uint8Array(0);\n            const peerData = await this.components.peerStore.get(this.components.peerId);\n            const multiaddrs = this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code));\n            let signedPeerRecord = peerData.peerRecordEnvelope;\n            if (multiaddrs.length > 0 && signedPeerRecord == null) {\n                const peerRecord = new PeerRecord({\n                    peerId: this.components.peerId,\n                    multiaddrs\n                });\n                const envelope = await RecordEnvelope.seal(peerRecord, this.components.peerId);\n                await this.components.peerStore.addressBook.consumePeerRecord(envelope);\n                signedPeerRecord = envelope.marshal().subarray();\n            }\n            const message = Identify.encode({\n                protocolVersion: this.host.protocolVersion,\n                agentVersion: this.host.agentVersion,\n                publicKey,\n                listenAddrs: multiaddrs.map(addr => addr.bytes),\n                signedPeerRecord,\n                observedAddr: connection.remoteAddr.bytes,\n                protocols: peerData.protocols\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, timeoutController.signal);\n            const msgWithLenPrefix = pipe([message], lp.encode());\n            await source.sink(msgWithLenPrefix);\n        }\n        catch (err) {\n            log.error('could not respond to identify request', err);\n        }\n        finally {\n            stream.close();\n            timeoutController.clear();\n        }\n    }\n    /**\n     * Reads the Identify Push message from the given `connection`\n     */\n    async _handlePush(data) {\n        const { connection, stream } = data;\n        const timeoutController = new TimeoutController(this.init.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        let message;\n        try {\n            // make stream abortable\n            const source = abortableDuplex(stream, timeoutController.signal);\n            const data = await pipe([], source, lp.decode({\n                maxDataLength: this.init.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }), async (source) => await first(source));\n            if (data != null) {\n                message = Identify.decode(data);\n            }\n        }\n        catch (err) {\n            return log.error('received invalid message', err);\n        }\n        finally {\n            stream.close();\n            timeoutController.clear();\n        }\n        if (message == null) {\n            return log.error('received invalid message');\n        }\n        const id = connection.remotePeer;\n        if (this.components.peerId.equals(id)) {\n            log('received push from ourselves?');\n            return;\n        }\n        log('received push from %p', id);\n        if (message.signedPeerRecord != null) {\n            log('received signedPeerRecord in push');\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);\n                if (await this.components.peerStore.addressBook.consumePeerRecord(envelope)) {\n                    log('consumed signedPeerRecord sent in push');\n                    await this.components.peerStore.protoBook.set(id, message.protocols);\n                    return;\n                }\n                else {\n                    log('failed to consume signedPeerRecord sent in push');\n                }\n            }\n            catch (err) {\n                log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n            }\n        }\n        else {\n            log('did not receive signedPeerRecord in push');\n        }\n        // LEGACY: Update peers data in PeerStore\n        try {\n            await this.components.peerStore.addressBook.set(id, message.listenAddrs.map((addr) => multiaddr(addr)));\n        }\n        catch (err) {\n            log.error('received invalid addrs', err);\n        }\n        // Update the protocols\n        try {\n            await this.components.peerStore.protoBook.set(id, message.protocols);\n        }\n        catch (err) {\n            log.error('received invalid protocols', err);\n        }\n        log('handled push from %p', id);\n    }\n    /**\n     * Takes the `addr` and converts it to a Multiaddr if possible\n     */\n    static getCleanMultiaddr(addr) {\n        if (addr != null && addr.length > 0) {\n            try {\n                return multiaddr(addr);\n            }\n            catch {\n            }\n        }\n    }\n}\n/**\n * The protocols the IdentifyService supports\n */\nexport const multicodecs = {\n    IDENTIFY: MULTICODEC_IDENTIFY,\n    IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH\n};\nexport const Message = { Identify };\n//# sourceMappingURL=index.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { encodeMessage, decodeMessage, message, enumeration } from 'protons-runtime';\nexport var FetchRequest;\n(function (FetchRequest) {\n    let _codec;\n    FetchRequest.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || obj.identifier !== '') {\n                    w.uint32(10);\n                    w.string(obj.identifier);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    identifier: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.identifier = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    FetchRequest.encode = (obj) => {\n        return encodeMessage(obj, FetchRequest.codec());\n    };\n    FetchRequest.decode = (buf) => {\n        return decodeMessage(buf, FetchRequest.codec());\n    };\n})(FetchRequest || (FetchRequest = {}));\nexport var FetchResponse;\n(function (FetchResponse) {\n    let StatusCode;\n    (function (StatusCode) {\n        StatusCode[\"OK\"] = \"OK\";\n        StatusCode[\"NOT_FOUND\"] = \"NOT_FOUND\";\n        StatusCode[\"ERROR\"] = \"ERROR\";\n    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));\n    let __StatusCodeValues;\n    (function (__StatusCodeValues) {\n        __StatusCodeValues[__StatusCodeValues[\"OK\"] = 0] = \"OK\";\n        __StatusCodeValues[__StatusCodeValues[\"NOT_FOUND\"] = 1] = \"NOT_FOUND\";\n        __StatusCodeValues[__StatusCodeValues[\"ERROR\"] = 2] = \"ERROR\";\n    })(__StatusCodeValues || (__StatusCodeValues = {}));\n    (function (StatusCode) {\n        StatusCode.codec = () => {\n            return enumeration(__StatusCodeValues);\n        };\n    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));\n    let _codec;\n    FetchResponse.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || (obj.status != null && __StatusCodeValues[obj.status] !== 0)) {\n                    w.uint32(8);\n                    FetchResponse.StatusCode.codec().encode(obj.status, w);\n                }\n                if (opts.writeDefaults === true || (obj.data != null && obj.data.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    status: StatusCode.OK,\n                    data: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.status = FetchResponse.StatusCode.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    FetchResponse.encode = (obj) => {\n        return encodeMessage(obj, FetchResponse.codec());\n    };\n    FetchResponse.decode = (buf) => {\n        return decodeMessage(buf, FetchResponse.codec());\n    };\n})(FetchResponse || (FetchResponse = {}));\n//# sourceMappingURL=proto.js.map","// https://github.com/libp2p/specs/tree/master/fetch#wire-protocol\nexport const PROTOCOL_VERSION = '0.0.1';\nexport const PROTOCOL_NAME = 'fetch';\n//# sourceMappingURL=constants.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport * as lp from 'it-length-prefixed';\nimport { FetchRequest, FetchResponse } from './pb/proto.js';\nimport { PROTOCOL_NAME, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nimport { fromString as uint8arrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8arrayToString } from 'uint8arrays/to-string';\nconst log = logger('libp2p:fetch');\n/**\n * A simple libp2p protocol for requesting a value corresponding to a key from a peer.\n * Developers can register one or more lookup function for retrieving the value corresponding to\n * a given key.  Each lookup function must act on a distinct part of the overall key space, defined\n * by a fixed prefix that all keys that should be routed to that lookup function will start with.\n */\nexport class FetchService {\n    constructor(components, init) {\n        this.started = false;\n        this.components = components;\n        this.protocol = `/${init.protocolPrefix ?? 'libp2p'}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n        this.lookupFunctions = new Map(); // Maps key prefix to value lookup function\n        this.handleMessage = this.handleMessage.bind(this);\n        this.init = init;\n    }\n    async start() {\n        await this.components.registrar.handle(this.protocol, (data) => {\n            void this.handleMessage(data)\n                .catch(err => {\n                log.error(err);\n            })\n                .finally(() => {\n                data.stream.close();\n            });\n        }, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Sends a request to fetch the value associated with the given key from the given peer\n     */\n    async fetch(peer, key, options = {}) {\n        log('dialing %s to %p', this.protocol, peer);\n        const connection = await this.components.connectionManager.openConnection(peer, options);\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            log('using default timeout of %d ms', this.init.timeout);\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream(this.protocol, {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            log('fetch %s', key);\n            const result = await pipe([FetchRequest.encode({ identifier: key })], lp.encode(), source, lp.decode(), async function (source) {\n                const buf = await first(source);\n                if (buf == null) {\n                    throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n                }\n                const response = FetchResponse.decode(buf);\n                switch (response.status) {\n                    case (FetchResponse.StatusCode.OK): {\n                        log('received status for %s ok', key);\n                        return response.data;\n                    }\n                    case (FetchResponse.StatusCode.NOT_FOUND): {\n                        log('received status for %s not found', key);\n                        return null;\n                    }\n                    case (FetchResponse.StatusCode.ERROR): {\n                        log('received status for %s error', key);\n                        const errmsg = uint8arrayToString(response.data);\n                        throw errCode(new Error('Error in fetch protocol response: ' + errmsg), codes.ERR_INVALID_PARAMETERS);\n                    }\n                    default: {\n                        log('received status for %s unknown', key);\n                        throw errCode(new Error('Unknown response status'), codes.ERR_INVALID_MESSAGE);\n                    }\n                }\n            });\n            return result ?? null;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Invoked when a fetch request is received.  Reads the request message off the given stream and\n     * responds based on looking up the key in the request via the lookup callback that corresponds\n     * to the key's prefix.\n     */\n    async handleMessage(data) {\n        const { stream } = data;\n        const self = this;\n        await pipe(stream, lp.decode(), async function* (source) {\n            const buf = await first(source);\n            if (buf == null) {\n                throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n            }\n            // for await (const buf of source) {\n            const request = FetchRequest.decode(buf);\n            let response;\n            const lookup = self._getLookupFunction(request.identifier);\n            if (lookup != null) {\n                log('look up data with identifier %s', request.identifier);\n                const data = await lookup(request.identifier);\n                if (data != null) {\n                    log('sending status for %s ok', request.identifier);\n                    response = { status: FetchResponse.StatusCode.OK, data };\n                }\n                else {\n                    log('sending status for %s not found', request.identifier);\n                    response = { status: FetchResponse.StatusCode.NOT_FOUND, data: new Uint8Array(0) };\n                }\n            }\n            else {\n                log('sending status for %s error', request.identifier);\n                const errmsg = uint8arrayFromString(`No lookup function registered for key: ${request.identifier}`);\n                response = { status: FetchResponse.StatusCode.ERROR, data: errmsg };\n            }\n            yield FetchResponse.encode(response);\n        }, lp.encode(), stream);\n    }\n    /**\n     * Given a key, finds the appropriate function for looking up its corresponding value, based on\n     * the key's prefix.\n     */\n    _getLookupFunction(key) {\n        for (const prefix of this.lookupFunctions.keys()) {\n            if (key.startsWith(prefix)) {\n                return this.lookupFunctions.get(prefix);\n            }\n        }\n    }\n    /**\n     * Registers a new lookup callback that can map keys to values, for a given set of keys that\n     * share the same prefix\n     *\n     * @example\n     *\n     * ```js\n     * // ...\n     * libp2p.fetchService.registerLookupFunction('/prefix', (key) => { ... })\n     * ```\n     */\n    registerLookupFunction(prefix, lookup) {\n        if (this.lookupFunctions.has(prefix)) {\n            throw errCode(new Error(\"Fetch protocol handler for key prefix '\" + prefix + \"' already registered\"), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        this.lookupFunctions.set(prefix, lookup);\n    }\n    /**\n     * Registers a new lookup callback that can map keys to values, for a given set of keys that\n     * share the same prefix.\n     *\n     * @example\n     *\n     * ```js\n     * // ...\n     * libp2p.fetchService.unregisterLookupFunction('/prefix')\n     * ```\n     */\n    unregisterLookupFunction(prefix, lookup) {\n        if (lookup != null) {\n            const existingLookup = this.lookupFunctions.get(prefix);\n            if (existingLookup !== lookup) {\n                return;\n            }\n        }\n        this.lookupFunctions.delete(prefix);\n    }\n}\n//# sourceMappingURL=index.js.map","export const PROTOCOL = '/ipfs/ping/1.0.0';\nexport const PING_LENGTH = 32;\nexport const PROTOCOL_VERSION = '1.0.0';\nexport const PROTOCOL_NAME = 'ping';\n//# sourceMappingURL=constants.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { randomBytes } from '@libp2p/crypto';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:ping');\nexport class PingService {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.protocol = `/${init.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n        this.init = init;\n    }\n    async start() {\n        await this.components.registrar.handle(this.protocol, this.handleMessage, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * A handler to register with Libp2p to process ping messages\n     */\n    handleMessage(data) {\n        const { stream } = data;\n        void pipe(stream, stream)\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Ping a given peer and wait for its response, getting the operation latency.\n     *\n     * @param {PeerId|Multiaddr} peer\n     * @returns {Promise<number>}\n     */\n    async ping(peer, options = {}) {\n        log('dialing %s to %p', this.protocol, peer);\n        const start = Date.now();\n        const data = randomBytes(PING_LENGTH);\n        const connection = await this.components.connectionManager.openConnection(peer, options);\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream([this.protocol], {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            const result = await pipe([data], source, async (source) => await first(source));\n            const end = Date.now();\n            if (result == null || !uint8ArrayEquals(data, result.subarray())) {\n                throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK);\n            }\n            return end - start;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { upnpNat } from '@achingbrain/nat-port-mapper';\nimport { logger } from '@libp2p/logger';\nimport { fromNodeAddress } from '@multiformats/multiaddr';\nimport { isBrowser } from 'wherearewe';\nimport isPrivateIp from 'private-ip';\nimport * as pkg from './version.js';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isLoopback } from '@libp2p/utils/multiaddr/is-loopback';\nconst log = logger('libp2p:nat');\nconst DEFAULT_TTL = 7200;\nfunction highPort(min = 1024, max = 65535) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport class NatManager {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.enabled = init.enabled;\n        this.externalAddress = init.externalAddress;\n        this.localAddress = init.localAddress;\n        this.description = init.description ?? `${pkg.name}@${pkg.version} ${this.components.peerId.toString()}`;\n        this.ttl = init.ttl ?? DEFAULT_TTL;\n        this.keepAlive = init.keepAlive ?? true;\n        this.gateway = init.gateway;\n        if (this.ttl < DEFAULT_TTL) {\n            throw errCode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), codes.ERR_INVALID_PARAMETERS);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() { }\n    /**\n     * Attempt to use uPnP to configure port mapping using the current gateway.\n     *\n     * Run after start to ensure the transport manager has all addresses configured.\n     */\n    afterStart() {\n        if (isBrowser || !this.enabled || this.started) {\n            return;\n        }\n        this.started = true;\n        // done async to not slow down startup\n        void this._start().catch((err) => {\n            // hole punching errors are non-fatal\n            log.error(err);\n        });\n    }\n    async _start() {\n        const addrs = this.components.transportManager.getAddrs();\n        for (const addr of addrs) {\n            // try to open uPnP ports for each thin waist address\n            const { family, host, port, transport } = addr.toOptions();\n            if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n                // only bare tcp addresses\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (isLoopback(addr)) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (family !== 4) {\n                // ignore ipv6\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            const client = await this._getClient();\n            const publicIp = this.externalAddress ?? await client.externalIp();\n            const isPrivate = isPrivateIp(publicIp);\n            if (isPrivate === true) {\n                throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);\n            }\n            if (isPrivate == null) {\n                throw new Error(`${publicIp} is not an IP address`);\n            }\n            const publicPort = highPort();\n            log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);\n            await client.map({\n                publicPort,\n                localPort: port,\n                localAddress: this.localAddress,\n                protocol: transport.toUpperCase() === 'TCP' ? 'TCP' : 'UDP'\n            });\n            this.components.addressManager.addObservedAddr(fromNodeAddress({\n                family: 4,\n                address: publicIp,\n                port: publicPort\n            }, transport));\n        }\n    }\n    async _getClient() {\n        if (this.client != null) {\n            return this.client;\n        }\n        this.client = await upnpNat({\n            description: this.description,\n            ttl: this.ttl,\n            keepAlive: this.keepAlive,\n            gateway: this.gateway\n        });\n        return this.client;\n    }\n    /**\n     * Stops the NAT manager\n     */\n    async stop() {\n        if (isBrowser || this.client == null) {\n            return;\n        }\n        try {\n            await this.client.close();\n            this.client = undefined;\n        }\n        catch (err) {\n            log.error(err);\n        }\n    }\n}\n//# sourceMappingURL=nat-manager.js.map","export async function upnpNat() {\n    throw new Error('Not supported in browsers');\n}\nexport async function pmpNat() {\n    throw new Error('Not supported in browsers');\n}\n//# sourceMappingURL=browser.js.map","import { RecordEnvelope, PeerRecord } from '@libp2p/peer-record';\nimport { logger } from '@libp2p/logger';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:peer-record-updater');\nexport class PeerRecordUpdater {\n    constructor(components) {\n        this.components = components;\n        this.started = false;\n        this.update = this.update.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n        this.components.transportManager.addEventListener('listener:listening', this.update);\n        this.components.transportManager.addEventListener('listener:close', this.update);\n        this.components.addressManager.addEventListener('change:addresses', this.update);\n    }\n    async stop() {\n        this.started = false;\n        this.components.transportManager.removeEventListener('listener:listening', this.update);\n        this.components.transportManager.removeEventListener('listener:close', this.update);\n        this.components.addressManager.removeEventListener('change:addresses', this.update);\n    }\n    /**\n     * Create (or update if existing) self peer record and store it in the AddressBook.\n     */\n    update() {\n        Promise.resolve()\n            .then(async () => {\n            const peerRecord = new PeerRecord({\n                peerId: this.components.peerId,\n                multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n            });\n            const envelope = await RecordEnvelope.seal(peerRecord, this.components.peerId);\n            await this.components.peerStore.addressBook.consumePeerRecord(envelope);\n        })\n            .catch(err => {\n            log.error('Could not update self peer record: %o', err);\n        });\n    }\n}\n//# sourceMappingURL=peer-record-updater.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTPeerRouting {\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async findPeer(peerId, options = {}) {\n        for await (const event of this.dht.findPeer(peerId, options)) {\n            if (event.name === 'FINAL_PEER') {\n                return event.peer;\n            }\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    async *getClosestPeers(key, options = {}) {\n        for await (const event of this.dht.getClosestPeers(key, options)) {\n            if (event.name === 'FINAL_PEER') {\n                yield event.peer;\n            }\n        }\n    }\n}\n//# sourceMappingURL=dht-peer-routing.js.map","export const codes = {\n    ERR_INVALID_PARAMETERS: 'ERR_INVALID_PARAMETERS',\n    ERR_NOT_FOUND: 'ERR_NOT_FOUND'\n};\n//# sourceMappingURL=errors.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { codes } from './errors.js';\nimport { PeerRecord, RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:address-book');\nconst EVENT_NAME = 'change:multiaddrs';\nasync function allowAll() {\n    return true;\n}\nexport class PeerStoreAddressBook {\n    constructor(dispatchEvent, store, addressFilter) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n        this.addressFilter = addressFilter ?? allowAll;\n    }\n    /**\n     * ConsumePeerRecord adds addresses from a signed peer record contained in a record envelope.\n     * This will return a boolean that indicates if the record was successfully processed and added\n     * into the AddressBook.\n     */\n    async consumePeerRecord(envelope) {\n        log.trace('consumePeerRecord await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('consumePeerRecord got write lock');\n        let peerId;\n        let peer;\n        let updatedPeer;\n        try {\n            let peerRecord;\n            try {\n                peerRecord = PeerRecord.createFromProtobuf(envelope.payload);\n            }\n            catch (err) {\n                log.error('invalid peer record received');\n                return false;\n            }\n            peerId = peerRecord.peerId;\n            const multiaddrs = peerRecord.multiaddrs;\n            // Verify peerId\n            if (!peerId.equals(envelope.peerId)) {\n                log('signing key does not match PeerId in the PeerRecord');\n                return false;\n            }\n            // ensure the record has multiaddrs\n            if (multiaddrs == null || multiaddrs.length === 0) {\n                return false;\n            }\n            if (await this.store.has(peerId)) {\n                peer = await this.store.load(peerId);\n                if (peer.peerRecordEnvelope != null) {\n                    const storedEnvelope = await RecordEnvelope.createFromProtobuf(peer.peerRecordEnvelope);\n                    const storedRecord = PeerRecord.createFromProtobuf(storedEnvelope.payload);\n                    // ensure seq is greater than, or equal to, the last received\n                    if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n                        log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber);\n                        return false;\n                    }\n                }\n            }\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter, true);\n            // Replace unsigned addresses by the new ones from the record\n            // TODO: Once we have ttls for the addresses, we should merge these in\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                addresses,\n                peerRecordEnvelope: envelope.marshal().subarray()\n            });\n            log('stored provided peer record for %p', peerRecord.peerId);\n        }\n        finally {\n            log.trace('consumePeerRecord release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(({ multiaddr }) => multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        return true;\n    }\n    async getRawEnvelope(peerId) {\n        log.trace('getRawEnvelope await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getRawEnvelope got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.peerRecordEnvelope;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('getRawEnvelope release read lock');\n            release();\n        }\n    }\n    /**\n     * Get an Envelope containing a PeerRecord for the given peer.\n     * Returns undefined if no record exists.\n     */\n    async getPeerRecord(peerId) {\n        const raw = await this.getRawEnvelope(peerId);\n        if (raw == null) {\n            return undefined;\n        }\n        return await RecordEnvelope.createFromProtobuf(raw);\n    }\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get wait for read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.addresses;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return [];\n    }\n    async set(peerId, multiaddrs) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(multiaddrs)) {\n            log.error('multiaddrs must be an array of Multiaddrs');\n            throw new CodeError('multiaddrs must be an array of Multiaddrs', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let hasPeer = false;\n        let peer;\n        let updatedPeer;\n        try {\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter);\n            // No valid addresses found\n            if (addresses.length === 0) {\n                return;\n            }\n            try {\n                peer = await this.store.load(peerId);\n                hasPeer = true;\n                if (new Set([\n                    ...addresses.map(({ multiaddr }) => multiaddr.toString()),\n                    ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())\n                ]).size === peer.addresses.length && addresses.length === peer.addresses.length) {\n                    // not changing anything, no need to update\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, { addresses });\n            log('set multiaddrs for %p', peerId);\n        }\n        finally {\n            log.trace('set multiaddrs for %p', peerId);\n            log('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        // Notify the existence of a new peer\n        if (!hasPeer) {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: {\n                    id: peerId,\n                    multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                    protocols: updatedPeer.protocols\n                }\n            }));\n        }\n    }\n    async add(peerId, multiaddrs) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(multiaddrs)) {\n            log.error('multiaddrs must be an array of Multiaddrs');\n            throw new CodeError('multiaddrs must be an array of Multiaddrs', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('add await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('add got write lock');\n        let hasPeer;\n        let peer;\n        let updatedPeer;\n        try {\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter);\n            // No valid addresses found\n            if (addresses.length === 0) {\n                return;\n            }\n            try {\n                peer = await this.store.load(peerId);\n                hasPeer = true;\n                if (new Set([\n                    ...addresses.map(({ multiaddr }) => multiaddr.toString()),\n                    ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())\n                ]).size === peer.addresses.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, { addresses });\n            log('added multiaddrs for %p', peerId);\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        // Notify the existence of a new peer\n        if (hasPeer === true) {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: {\n                    id: peerId,\n                    multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                    protocols: updatedPeer.protocols\n                }\n            }));\n        }\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                addresses: []\n            });\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    multiaddrs: [],\n                    oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n                }\n            }));\n        }\n    }\n}\nasync function filterMultiaddrs(peerId, multiaddrs, addressFilter, isCertified = false) {\n    const output = [];\n    await Promise.all(multiaddrs.map(async (multiaddr) => {\n        if (!isMultiaddr(multiaddr)) {\n            log.error('multiaddr must be an instance of Multiaddr');\n            throw new CodeError('multiaddr must be an instance of Multiaddr', codes.ERR_INVALID_PARAMETERS);\n        }\n        const include = await addressFilter(peerId, multiaddr);\n        if (!include) {\n            return;\n        }\n        output.push({\n            multiaddr,\n            isCertified\n        });\n    }));\n    return output;\n}\n//# sourceMappingURL=address-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:key-book');\nconst EVENT_NAME = 'change:pubkey';\nexport class PeerStoreKeyBook {\n    /**\n     * The KeyBook is responsible for keeping the known public keys of a peer\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    /**\n     * Set the Peer public key\n     */\n    async set(peerId, publicKey) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!(publicKey instanceof Uint8Array)) {\n            log.error('publicKey must be an instance of Uint8Array to store data');\n            throw new CodeError('publicKey must be an instance of PublicKey', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let updatedKey = false;\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if ((peer.pubKey != null) && uint8arrayEquals(peer.pubKey, publicKey)) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                pubKey: publicKey\n            });\n            updatedKey = true;\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        if (updatedKey) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    publicKey,\n                    oldPublicKey: peer == null ? undefined : peer.pubKey\n                }\n            }));\n        }\n    }\n    /**\n     * Get Public key of the given PeerId, if stored\n     */\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get await write lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got write lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.pubKey;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log('get release write lock');\n            release();\n        }\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                pubKey: undefined\n            });\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                publicKey: undefined,\n                oldPublicKey: peer == null ? undefined : peer.pubKey\n            }\n        }));\n    }\n}\n//# sourceMappingURL=key-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:metadata-book');\nconst EVENT_NAME = 'change:metadata';\nexport class PeerStoreMetadataBook {\n    /**\n     * The MetadataBook is responsible for keeping metadata\n     * about known peers\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    /**\n     * Get the known data of a provided peer\n     */\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.metadata;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return new Map();\n    }\n    /**\n     * Get specific metadata value, if it exists\n     */\n    async getValue(peerId, key) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('getValue await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getValue got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.metadata.get(key);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('getValue release write lock');\n            release();\n        }\n    }\n    async set(peerId, metadata) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!(metadata instanceof Map)) {\n            log.error('valid metadata must be provided to store data');\n            throw new CodeError('valid metadata must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.mergeOrCreate(peerId, {\n                metadata\n            });\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                metadata,\n                oldMetadata: peer == null ? new Map() : peer.metadata\n            }\n        }));\n    }\n    /**\n     * Set metadata key and value of a provided peer\n     */\n    async setValue(peerId, key, value) {\n        peerId = peerIdFromPeerId(peerId);\n        if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n            log.error('valid key and value must be provided to store data');\n            throw new CodeError('valid key and value must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('setValue await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('setValue got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                const existingValue = peer.metadata.get(key);\n                if (existingValue != null && uint8ArrayEquals(value, existingValue)) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, {\n                metadata: new Map([[key, value]])\n            });\n        }\n        finally {\n            log.trace('setValue release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                metadata: updatedPeer.metadata,\n                oldMetadata: peer == null ? new Map() : peer.metadata\n            }\n        }));\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            if (peer != null) {\n                await this.store.patch(peerId, {\n                    metadata: new Map()\n                });\n            }\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    metadata: new Map(),\n                    oldMetadata: peer.metadata\n                }\n            }));\n        }\n    }\n    async deleteValue(peerId, key) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('deleteValue await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('deleteValue got write lock');\n        let metadata;\n        let peer;\n        try {\n            peer = await this.store.load(peerId);\n            metadata = peer.metadata;\n            metadata.delete(key);\n            await this.store.patch(peerId, {\n                metadata\n            });\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('deleteValue release write lock');\n            release();\n        }\n        if (metadata != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    metadata,\n                    oldMetadata: peer == null ? new Map() : peer.metadata\n                }\n            }));\n        }\n    }\n}\n//# sourceMappingURL=metadata-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:proto-book');\nconst EVENT_NAME = 'change:protocols';\nexport class PeerStoreProtoBook {\n    /**\n     * The ProtoBook is responsible for keeping the known supported\n     * protocols of a peer\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    async get(peerId) {\n        log.trace('get wait for read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.protocols;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return [];\n    }\n    async set(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if (new Set([\n                    ...protocols\n                ]).size === peer.protocols.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                protocols\n            });\n            log('stored provided protocols for %p', peerId);\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async add(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('add await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('add got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if (new Set([\n                    ...peer.protocols,\n                    ...protocols\n                ]).size === peer.protocols.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, {\n                protocols\n            });\n            log('added provided protocols for %p', peerId);\n        }\n        finally {\n            log.trace('add release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async remove(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('remove await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('remove got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                const protocolSet = new Set(peer.protocols);\n                for (const protocol of protocols) {\n                    protocolSet.delete(protocol);\n                }\n                if (peer.protocols.length === protocolSet.size) {\n                    return;\n                }\n                protocols = Array.from(protocolSet);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                protocols\n            });\n        }\n        finally {\n            log.trace('remove release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                protocols: []\n            });\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    protocols: [],\n                    oldProtocols: peer.protocols\n                }\n            }));\n        }\n    }\n}\n//# sourceMappingURL=proto-book.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Peer;\n(function (Peer) {\n    let _codec;\n    Peer.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.addresses != null) {\n                    for (const value of obj.addresses) {\n                        w.uint32(10);\n                        Address.codec().encode(value, w);\n                    }\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(18);\n                        w.string(value);\n                    }\n                }\n                if (obj.metadata != null) {\n                    for (const value of obj.metadata) {\n                        w.uint32(26);\n                        Metadata.codec().encode(value, w);\n                    }\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(34);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.peerRecordEnvelope != null) {\n                    w.uint32(42);\n                    w.bytes(obj.peerRecordEnvelope);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    addresses: [],\n                    protocols: [],\n                    metadata: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.addresses.push(Address.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 3:\n                            obj.metadata.push(Metadata.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 5:\n                            obj.peerRecordEnvelope = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Peer.encode = (obj) => {\n        return encodeMessage(obj, Peer.codec());\n    };\n    Peer.decode = (buf) => {\n        return decodeMessage(buf, Peer.codec());\n    };\n})(Peer || (Peer = {}));\nexport var Address;\n(function (Address) {\n    let _codec;\n    Address.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.multiaddr);\n                }\n                if (obj.isCertified != null) {\n                    w.uint32(16);\n                    w.bool(obj.isCertified);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    multiaddr: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.multiaddr = reader.bytes();\n                            break;\n                        case 2:\n                            obj.isCertified = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Address.encode = (obj) => {\n        return encodeMessage(obj, Address.codec());\n    };\n    Address.decode = (buf) => {\n        return decodeMessage(buf, Address.codec());\n    };\n})(Address || (Address = {}));\nexport var Metadata;\n(function (Metadata) {\n    let _codec;\n    Metadata.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.key != null && obj.key !== '')) {\n                    w.uint32(10);\n                    w.string(obj.key);\n                }\n                if ((obj.value != null && obj.value.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    key: '',\n                    value: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.string();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Metadata.encode = (obj) => {\n        return encodeMessage(obj, Metadata.codec());\n    };\n    Metadata.decode = (buf) => {\n        return decodeMessage(buf, Metadata.codec());\n    };\n})(Metadata || (Metadata = {}));\n//# sourceMappingURL=peer.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","import { logger } from '@libp2p/logger';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { Key } from 'interface-datastore/key';\nimport { base32 } from 'multiformats/bases/base32';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Peer as PeerPB } from './pb/peer.js';\nimport mortice from 'mortice';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nconst log = logger('libp2p:peer-store:store');\nconst NAMESPACE_COMMON = '/peers/';\nexport class PersistentStore {\n    constructor(components) {\n        this.components = components;\n        this.lock = mortice({\n            name: 'peer-store',\n            singleProcess: true\n        });\n    }\n    _peerIdToDatastoreKey(peerId) {\n        if (peerId.type == null) {\n            log.error('peerId must be an instance of peer-id to store data');\n            throw new CodeError('peerId must be an instance of peer-id', codes.ERR_INVALID_PARAMETERS);\n        }\n        const b32key = peerId.toCID().toString();\n        return new Key(`${NAMESPACE_COMMON}${b32key}`);\n    }\n    async has(peerId) {\n        return await this.components.datastore.has(this._peerIdToDatastoreKey(peerId));\n    }\n    async delete(peerId) {\n        await this.components.datastore.delete(this._peerIdToDatastoreKey(peerId));\n    }\n    async load(peerId) {\n        const buf = await this.components.datastore.get(this._peerIdToDatastoreKey(peerId));\n        const peer = PeerPB.decode(buf);\n        const metadata = new Map();\n        for (const meta of peer.metadata) {\n            metadata.set(meta.key, meta.value);\n        }\n        return {\n            ...peer,\n            id: peerId,\n            addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {\n                return {\n                    multiaddr: multiaddr(ma),\n                    isCertified: isCertified ?? false\n                };\n            }),\n            metadata,\n            pubKey: peer.pubKey ?? undefined,\n            peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined\n        };\n    }\n    async save(peer) {\n        if (peer.pubKey != null && peer.id.publicKey != null && !uint8arrayEquals(peer.pubKey, peer.id.publicKey)) {\n            log.error('peer publicKey bytes do not match peer id publicKey bytes');\n            throw new CodeError('publicKey bytes do not match peer id publicKey bytes', codes.ERR_INVALID_PARAMETERS);\n        }\n        // dedupe addresses\n        const addressSet = new Set();\n        const addresses = peer.addresses\n            .filter(address => {\n            if (addressSet.has(address.multiaddr.toString())) {\n                return false;\n            }\n            addressSet.add(address.multiaddr.toString());\n            return true;\n        })\n            .sort((a, b) => {\n            return a.multiaddr.toString().localeCompare(b.multiaddr.toString());\n        })\n            .map(({ multiaddr, isCertified }) => ({\n            multiaddr: multiaddr.bytes,\n            isCertified\n        }));\n        const metadata = [];\n        [...peer.metadata.keys()].sort().forEach(key => {\n            const value = peer.metadata.get(key);\n            if (value != null) {\n                metadata.push({ key, value });\n            }\n        });\n        const buf = PeerPB.encode({\n            addresses,\n            protocols: peer.protocols.sort(),\n            pubKey: peer.pubKey,\n            metadata,\n            peerRecordEnvelope: peer.peerRecordEnvelope\n        });\n        await this.components.datastore.put(this._peerIdToDatastoreKey(peer.id), buf.subarray());\n        return await this.load(peer.id);\n    }\n    async patch(peerId, data) {\n        const peer = await this.load(peerId);\n        return await this._patch(peerId, data, peer);\n    }\n    async patchOrCreate(peerId, data) {\n        let peer;\n        try {\n            peer = await this.load(peerId);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n            peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };\n        }\n        return await this._patch(peerId, data, peer);\n    }\n    async _patch(peerId, data, peer) {\n        return await this.save({\n            ...peer,\n            ...data,\n            id: peerId\n        });\n    }\n    async merge(peerId, data) {\n        const peer = await this.load(peerId);\n        return await this._merge(peerId, data, peer);\n    }\n    async mergeOrCreate(peerId, data) {\n        /** @type {Peer} */\n        let peer;\n        try {\n            peer = await this.load(peerId);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n            peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };\n        }\n        return await this._merge(peerId, data, peer);\n    }\n    async _merge(peerId, data, peer) {\n        // if the peer has certified addresses, use those in\n        // favour of the supplied versions\n        const addresses = new Map();\n        peer.addresses.forEach((addr) => {\n            addresses.set(addr.multiaddr.toString(), addr.isCertified);\n        });\n        (data.addresses ?? []).forEach(addr => {\n            const addrString = addr.multiaddr.toString();\n            const isAlreadyCertified = Boolean(addresses.get(addrString));\n            const isCertified = isAlreadyCertified || addr.isCertified;\n            addresses.set(addrString, isCertified);\n        });\n        return await this.save({\n            id: peerId,\n            addresses: Array.from(addresses.entries()).map(([addrStr, isCertified]) => {\n                return {\n                    multiaddr: multiaddr(addrStr),\n                    isCertified\n                };\n            }),\n            protocols: Array.from(new Set([\n                ...(peer.protocols ?? []),\n                ...(data.protocols ?? [])\n            ])),\n            metadata: new Map([\n                ...(peer.metadata?.entries() ?? []),\n                ...(data.metadata?.entries() ?? [])\n            ]),\n            pubKey: data.pubKey ?? (peer != null ? peer.pubKey : undefined),\n            peerRecordEnvelope: data.peerRecordEnvelope ?? (peer != null ? peer.peerRecordEnvelope : undefined)\n        });\n    }\n    async *all() {\n        for await (const key of this.components.datastore.queryKeys({\n            prefix: NAMESPACE_COMMON\n        })) {\n            // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n            const base32Str = key.toString().split('/')[2];\n            const buf = base32.decode(base32Str);\n            yield this.load(peerIdFromBytes(buf));\n        }\n    }\n}\n//# sourceMappingURL=store.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Tags;\n(function (Tags) {\n    let _codec;\n    Tags.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.tags != null) {\n                    for (const value of obj.tags) {\n                        w.uint32(10);\n                        Tag.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    tags: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.tags.push(Tag.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Tags.encode = (obj) => {\n        return encodeMessage(obj, Tags.codec());\n    };\n    Tags.decode = (buf) => {\n        return decodeMessage(buf, Tags.codec());\n    };\n})(Tags || (Tags = {}));\nexport var Tag;\n(function (Tag) {\n    let _codec;\n    Tag.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.name != null && obj.name !== '')) {\n                    w.uint32(10);\n                    w.string(obj.name);\n                }\n                if (obj.value != null) {\n                    w.uint32(16);\n                    w.uint32(obj.value);\n                }\n                if (obj.expiry != null) {\n                    w.uint32(24);\n                    w.uint64(obj.expiry);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    name: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.name = reader.string();\n                            break;\n                        case 2:\n                            obj.value = reader.uint32();\n                            break;\n                        case 3:\n                            obj.expiry = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Tag.encode = (obj) => {\n        return encodeMessage(obj, Tag.codec());\n    };\n    Tag.decode = (buf) => {\n        return decodeMessage(buf, Tag.codec());\n    };\n})(Tag || (Tag = {}));\n//# sourceMappingURL=tags.js.map","import { logger } from '@libp2p/logger';\nimport { EventEmitter } from '@libp2p/interfaces/events';\nimport { PeerStoreAddressBook } from './address-book.js';\nimport { PeerStoreKeyBook } from './key-book.js';\nimport { PeerStoreMetadataBook } from './metadata-book.js';\nimport { PeerStoreProtoBook } from './proto-book.js';\nimport { PersistentStore } from './store.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Tags } from './pb/tags.js';\nconst log = logger('libp2p:peer-store');\n/**\n * An implementation of PeerStore that stores data in a Datastore\n */\nexport class PersistentPeerStore extends EventEmitter {\n    constructor(components, init = {}) {\n        super();\n        this.components = components;\n        this.store = new PersistentStore(components);\n        this.addressBook = new PeerStoreAddressBook(this.dispatchEvent.bind(this), this.store, init.addressFilter);\n        this.keyBook = new PeerStoreKeyBook(this.dispatchEvent.bind(this), this.store);\n        this.metadataBook = new PeerStoreMetadataBook(this.dispatchEvent.bind(this), this.store);\n        this.protoBook = new PeerStoreProtoBook(this.dispatchEvent.bind(this), this.store);\n    }\n    async forEach(fn) {\n        log.trace('getPeers await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getPeers got read lock');\n        try {\n            for await (const peer of this.store.all()) {\n                if (peer.id.equals(this.components.peerId)) {\n                    // Skip self peer if present\n                    continue;\n                }\n                fn(peer);\n            }\n        }\n        finally {\n            log.trace('getPeers release read lock');\n            release();\n        }\n    }\n    async all() {\n        const output = [];\n        await this.forEach(peer => {\n            output.push(peer);\n        });\n        return output;\n    }\n    /**\n     * Delete the information of the given peer in every book\n     */\n    async delete(peerId) {\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        try {\n            await this.store.delete(peerId);\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n    }\n    /**\n     * Get the stored information of a given peer\n     */\n    async get(peerId) {\n        log.trace('get await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            return await this.store.load(peerId);\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n    }\n    /**\n     * Returns true if we have a record of the peer\n     */\n    async has(peerId) {\n        log.trace('has await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('has got read lock');\n        try {\n            return await this.store.has(peerId);\n        }\n        finally {\n            log.trace('has release read lock');\n            release();\n        }\n    }\n    async tagPeer(peerId, tag, options = {}) {\n        const providedValue = options.value ?? 0;\n        const value = Math.round(providedValue);\n        const ttl = options.ttl ?? undefined;\n        if (value !== providedValue || value < 0 || value > 100) {\n            throw new CodeError('Tag value must be between 0-100', 'ERR_TAG_VALUE_OUT_OF_BOUNDS');\n        }\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        // do not allow duplicate tags\n        tags = tags.filter(t => t.name !== tag);\n        tags.push({\n            name: tag,\n            value,\n            expiry: ttl == null ? undefined : BigInt(Date.now() + ttl)\n        });\n        await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags }).subarray());\n    }\n    async unTagPeer(peerId, tag) {\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        tags = tags.filter(t => t.name !== tag);\n        await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags }).subarray());\n    }\n    async getTags(peerId) {\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        const now = BigInt(Date.now());\n        const unexpiredTags = tags.filter(tag => tag.expiry == null || tag.expiry > now);\n        if (unexpiredTags.length !== tags.length) {\n            // remove any expired tags\n            await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags: unexpiredTags }).subarray());\n        }\n        return unexpiredTags.map(t => ({\n            name: t.name,\n            value: t.value ?? 0\n        }));\n    }\n}\n//# sourceMappingURL=index.js.map","import drain from 'it-drain';\nimport errCode from 'err-code';\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTContentRouting {\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async provide(cid) {\n        await drain(this.dht.provide(cid));\n    }\n    async *findProviders(cid, options = {}) {\n        for await (const event of this.dht.findProviders(cid, options)) {\n            if (event.name === 'PROVIDER') {\n                yield* event.providers;\n            }\n        }\n    }\n    async put(key, value, options) {\n        await drain(this.dht.put(key, value, options));\n    }\n    async get(key, options) {\n        for await (const event of this.dht.get(key, options)) {\n            if (event.name === 'VALUE') {\n                return event.value;\n            }\n        }\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n    }\n}\n//# sourceMappingURL=dht-content-routing.js.map","import errCode from 'err-code';\nimport { isStartable } from '@libp2p/interfaces/startable';\nexport class DefaultComponents {\n    constructor(init = {}) {\n        this._started = false;\n        this._peerId = init.peerId;\n        this._addressManager = init.addressManager;\n        this._peerStore = init.peerStore;\n        this._upgrader = init.upgrader;\n        this._metrics = init.metrics;\n        this._registrar = init.registrar;\n        this._connectionManager = init.connectionManager;\n        this._transportManager = init.transportManager;\n        this._connectionGater = init.connectionGater;\n        this._contentRouting = init.contentRouting;\n        this._peerRouting = init.peerRouting;\n        this._datastore = init.datastore;\n        this._connectionProtector = init.connectionProtector;\n        this._dht = init.dht;\n        this._pubsub = init.pubsub;\n        this._dialer = init.dialer;\n    }\n    isStarted() {\n        return this._started;\n    }\n    async beforeStart() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.beforeStart != null) {\n                await startable.beforeStart();\n            }\n        }));\n    }\n    async start() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            await startable.start();\n        }));\n        this._started = true;\n    }\n    async afterStart() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.afterStart != null) {\n                await startable.afterStart();\n            }\n        }));\n    }\n    async beforeStop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.beforeStop != null) {\n                await startable.beforeStop();\n            }\n        }));\n    }\n    async stop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            await startable.stop();\n        }));\n        this._started = false;\n    }\n    async afterStop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.afterStop != null) {\n                await startable.afterStop();\n            }\n        }));\n    }\n    get peerId() {\n        if (this._peerId == null) {\n            throw errCode(new Error('peerId not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerId;\n    }\n    set peerId(peerId) {\n        this._peerId = peerId;\n    }\n    get addressManager() {\n        if (this._addressManager == null) {\n            throw errCode(new Error('addressManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._addressManager;\n    }\n    set addressManager(addressManager) {\n        this._addressManager = addressManager;\n    }\n    get peerStore() {\n        if (this._peerStore == null) {\n            throw errCode(new Error('peerStore not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerStore;\n    }\n    set peerStore(peerStore) {\n        this._peerStore = peerStore;\n    }\n    get upgrader() {\n        if (this._upgrader == null) {\n            throw errCode(new Error('upgrader not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._upgrader;\n    }\n    set upgrader(upgrader) {\n        this._upgrader = upgrader;\n    }\n    get registrar() {\n        if (this._registrar == null) {\n            throw errCode(new Error('registrar not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._registrar;\n    }\n    set registrar(registrar) {\n        this._registrar = registrar;\n    }\n    get connectionManager() {\n        if (this._connectionManager == null) {\n            throw errCode(new Error('connectionManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._connectionManager;\n    }\n    set connectionManager(connectionManager) {\n        this._connectionManager = connectionManager;\n    }\n    get transportManager() {\n        if (this._transportManager == null) {\n            throw errCode(new Error('transportManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._transportManager;\n    }\n    set transportManager(transportManager) {\n        this._transportManager = transportManager;\n    }\n    get connectionGater() {\n        if (this._connectionGater == null) {\n            throw errCode(new Error('connectionGater not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._connectionGater;\n    }\n    set connectionGater(connectionGater) {\n        this._connectionGater = connectionGater;\n    }\n    get contentRouting() {\n        if (this._contentRouting == null) {\n            throw errCode(new Error('contentRouting not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._contentRouting;\n    }\n    set contentRouting(contentRouting) {\n        this._contentRouting = contentRouting;\n    }\n    get peerRouting() {\n        if (this._peerRouting == null) {\n            throw errCode(new Error('peerRouting not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerRouting;\n    }\n    set peerRouting(peerRouting) {\n        this._peerRouting = peerRouting;\n    }\n    get datastore() {\n        if (this._datastore == null) {\n            throw errCode(new Error('datastore not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._datastore;\n    }\n    set datastore(datastore) {\n        this._datastore = datastore;\n    }\n    get connectionProtector() {\n        return this._connectionProtector;\n    }\n    set connectionProtector(connectionProtector) {\n        this._connectionProtector = connectionProtector;\n    }\n    get dialer() {\n        if (this._dialer == null) {\n            throw errCode(new Error('dialer not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._dialer;\n    }\n    set dialer(dialer) {\n        this._dialer = dialer;\n    }\n    get metrics() {\n        return this._metrics;\n    }\n    set metrics(metrics) {\n        this._metrics = metrics;\n    }\n    get dht() {\n        return this._dht;\n    }\n    set dht(dht) {\n        this._dht = dht;\n    }\n    get pubsub() {\n        return this._pubsub;\n    }\n    set pubsub(pubsub) {\n        this._pubsub = pubsub;\n    }\n}\n//# sourceMappingURL=components.js.map","/**\n * How long in ms a dial attempt is allowed to take\n */\nexport const DIAL_TIMEOUT = 30e3;\n/**\n * How long in ms an inbound connection upgrade is allowed to take\n */\nexport const INBOUND_UPGRADE_TIMEOUT = 30e3;\n/**\n * Maximum allowed concurrent dials\n */\nexport const MAX_PARALLEL_DIALS = 100;\n/**\n * Allowed parallel dials per DialRequest\n */\nexport const MAX_PER_PEER_DIALS = 4;\n/**\n * Maximum number of allowed addresses to attempt to dial\n */\nexport const MAX_ADDRS_TO_DIAL = 25;\nexport const METRICS = {\n    computeThrottleMaxQueueSize: 1000,\n    computeThrottleTimeout: 2000,\n    movingAverageIntervals: [\n        60 * 1000,\n        5 * 60 * 1000,\n        15 * 60 * 1000 // 15 minutes\n    ],\n    maxOldPeersRetention: 50\n};\n//# sourceMappingURL=constants.js.map","import mergeOptions from 'merge-options';\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers';\nimport * as Constants from './constants.js';\nimport { AGENT_VERSION } from './identify/consts.js';\nimport * as RelayConstants from './circuit/constants.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { codes, messages } from './errors.js';\nimport errCode from 'err-code';\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe';\nconst DefaultConfig = {\n    addresses: {\n        listen: [],\n        announce: [],\n        noAnnounce: [],\n        announceFilter: (multiaddrs) => multiaddrs\n    },\n    connectionManager: {\n        maxConnections: 300,\n        minConnections: 50,\n        autoDial: true,\n        autoDialInterval: 10000,\n        maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n        maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n        dialTimeout: Constants.DIAL_TIMEOUT,\n        inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n        resolvers: {\n            dnsaddr: dnsaddrResolver\n        },\n        addressSorter: publicAddressesFirst\n    },\n    connectionGater: {},\n    transportManager: {\n        faultTolerance: FaultTolerance.FATAL_ALL\n    },\n    peerRouting: {\n        refreshManager: {\n            enabled: true,\n            interval: 6e5,\n            bootDelay: 10e3\n        }\n    },\n    nat: {\n        enabled: true,\n        ttl: 7200,\n        keepAlive: true\n    },\n    relay: {\n        enabled: true,\n        advertise: {\n            bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n            enabled: false,\n            ttl: RelayConstants.ADVERTISE_TTL\n        },\n        hop: {\n            enabled: false,\n            active: false,\n            timeout: 30000\n        },\n        autoRelay: {\n            enabled: false,\n            maxListeners: 2\n        }\n    },\n    identify: {\n        protocolPrefix: 'ipfs',\n        host: {\n            agentVersion: AGENT_VERSION\n        },\n        // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n        timeout: 60000,\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        maxPushIncomingStreams: 1,\n        maxPushOutgoingStreams: 1\n    },\n    ping: {\n        protocolPrefix: 'ipfs',\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        timeout: 10000\n    },\n    fetch: {\n        protocolPrefix: 'libp2p',\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        timeout: 10000\n    }\n};\nexport function validateConfig(opts) {\n    const resultingOptions = mergeOptions(DefaultConfig, opts);\n    if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n        throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED);\n    }\n    if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n        throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);\n    }\n    if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n        throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED);\n    }\n    // Append user agent version to default AGENT_VERSION depending on the environment\n    if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n        if (isNode || isElectronMain) {\n            resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`;\n        }\n        else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n            resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`;\n        }\n    }\n    return resultingOptions;\n}\n//# sourceMappingURL=config.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nimport { EventEmitter } from '@libp2p/interfaces/events';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nexport class DummyDHT extends EventEmitter {\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/dummy-dht';\n    }\n    get wan() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    get lan() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    get() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    findProviders() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    findPeer() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    getClosestPeers() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    provide() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    put() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async getMode() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async setMode() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async refreshRoutingTable() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n}\n//# sourceMappingURL=dummy-dht.js.map","import { EventEmitter } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nexport class DummyPubSub extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.topicValidators = new Map();\n    }\n    isStarted() {\n        return false;\n    }\n    start() {\n    }\n    stop() {\n    }\n    get globalSignaturePolicy() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    get multicodecs() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getPeers() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getTopics() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    subscribe() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    unsubscribe() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getSubscribers() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    async publish() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n}\n//# sourceMappingURL=dummy-pubsub.js.map","import errCode from 'err-code';\nimport { anySignal } from 'any-signal';\nimport FIFO from 'p-fifo';\nimport { setMaxListeners } from 'events';\nimport { codes } from '../../errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:dialer:dial-request');\nexport class DialRequest {\n    /**\n     * Manages running the `dialAction` on multiple provided `addrs` in parallel\n     * up to a maximum determined by the number of tokens returned\n     * from `dialer.getTokens`. Once a DialRequest is created, it can be\n     * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n     * all other dials in the request will be cancelled.\n     */\n    constructor(options) {\n        const { addrs, dialAction, dialer } = options;\n        this.addrs = addrs;\n        this.dialer = dialer;\n        this.dialAction = dialAction;\n    }\n    async run(options = {}) {\n        const tokens = this.dialer.getTokens(this.addrs.length);\n        // If no tokens are available, throw\n        if (tokens.length < 1) {\n            throw errCode(new Error('No dial tokens available'), codes.ERR_NO_DIAL_TOKENS);\n        }\n        const tokenHolder = new FIFO();\n        for (const token of tokens) {\n            void tokenHolder.push(token).catch(err => {\n                log.error(err);\n            });\n        }\n        const dialAbortControllers = this.addrs.map(() => {\n            const controller = new AbortController();\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, controller.signal);\n            }\n            catch { }\n            return controller;\n        });\n        if (options.signal != null) {\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, options.signal);\n            }\n            catch { }\n        }\n        let completedDials = 0;\n        let done = false;\n        try {\n            return await Promise.any(this.addrs.map(async (addr, i) => {\n                const token = await tokenHolder.shift(); // get token\n                // End attempt once another attempt succeeded\n                if (done) {\n                    this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                    throw errCode(new Error('dialAction already succeeded'), codes.ERR_ALREADY_SUCCEEDED);\n                }\n                const controller = dialAbortControllers[i];\n                if (controller == null) {\n                    throw errCode(new Error('dialAction did not come with an AbortController'), codes.ERR_INVALID_PARAMETERS);\n                }\n                let conn;\n                try {\n                    const signal = controller.signal;\n                    conn = await this.dialAction(addr, { ...options, signal: (options.signal != null) ? anySignal([signal, options.signal]) : signal });\n                    // Remove the successful AbortController so it is not aborted\n                    dialAbortControllers[i] = undefined;\n                }\n                finally {\n                    completedDials++;\n                    // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n                    if (this.addrs.length - completedDials >= tokens.length) {\n                        void tokenHolder.push(token).catch(err => {\n                            log.error(err);\n                        });\n                    }\n                    else {\n                        this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                    }\n                }\n                if (conn == null) {\n                    // Notify Promise.any that attempt was not successful\n                    // to prevent from returning undefined despite there\n                    // were successful dial attempts\n                    throw errCode(new Error('dialAction led to empty object'), codes.ERR_TRANSPORT_DIAL_FAILED);\n                }\n                else {\n                    // This dial succeeded, don't attempt anything else\n                    done = true;\n                }\n                return conn;\n            }));\n        }\n        finally {\n            // success/failure happened, abort everything else\n            dialAbortControllers.forEach(c => {\n                if (c !== undefined) {\n                    c.abort();\n                }\n            });\n            tokens.forEach(token => this.dialer.releaseToken(token)); // release tokens back to the dialer\n        }\n    }\n}\n//# sourceMappingURL=dial-request.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { isMultiaddr, multiaddr, resolvers } from '@multiformats/multiaddr';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { setMaxListeners } from 'events';\nimport { DialRequest } from './dial-request.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { trackedMap } from '@libp2p/tracked-map';\nimport { codes } from '../../errors.js';\nimport { DIAL_TIMEOUT, MAX_PARALLEL_DIALS, MAX_PER_PEER_DIALS, MAX_ADDRS_TO_DIAL } from '../../constants.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nimport { getPeerAddress } from '../../get-peer.js';\nconst log = logger('libp2p:dialer');\nexport class DefaultDialer {\n    constructor(components, init = {}) {\n        this.started = false;\n        this.addressSorter = init.addressSorter ?? publicAddressesFirst;\n        this.maxAddrsToDial = init.maxAddrsToDial ?? MAX_ADDRS_TO_DIAL;\n        this.timeout = init.dialTimeout ?? DIAL_TIMEOUT;\n        this.maxDialsPerPeer = init.maxDialsPerPeer ?? MAX_PER_PEER_DIALS;\n        this.tokens = [...new Array(init.maxParallelDials ?? MAX_PARALLEL_DIALS)].map((_, index) => index);\n        this.components = components;\n        this.pendingDials = trackedMap({\n            name: 'libp2p_dialler_pending_dials',\n            metrics: components.metrics\n        });\n        this.pendingDialTargets = trackedMap({\n            name: 'libp2p_dialler_pending_dial_targets',\n            metrics: components.metrics\n        });\n        for (const [key, value] of Object.entries(init.resolvers ?? {})) {\n            resolvers.set(key, value);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    /**\n     * Clears any pending dials\n     */\n    async stop() {\n        this.started = false;\n        for (const dial of this.pendingDials.values()) {\n            try {\n                dial.controller.abort();\n            }\n            catch (err) {\n                log.error(err);\n            }\n        }\n        this.pendingDials.clear();\n        for (const pendingTarget of this.pendingDialTargets.values()) {\n            pendingTarget.abort();\n        }\n        this.pendingDialTargets.clear();\n    }\n    /**\n     * Connects to a given `peer` by dialing all of its known addresses.\n     * The dial to the first address that is successfully able to upgrade a connection\n     * will be used.\n     */\n    async dial(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddr } = getPeerAddress(peerIdOrMultiaddr);\n        if (peerId != null) {\n            if (this.components.peerId.equals(peerId)) {\n                throw errCode(new Error('Tried to dial self'), codes.ERR_DIALED_SELF);\n            }\n            if (multiaddr != null) {\n                log('storing multiaddrs %p', peerId, multiaddr);\n                await this.components.peerStore.addressBook.add(peerId, [multiaddr]);\n            }\n            if (await this.components.connectionGater.denyDialPeer(peerId)) {\n                throw errCode(new Error('The dial request is blocked by gater.allowDialPeer'), codes.ERR_PEER_DIAL_INTERCEPTED);\n            }\n        }\n        log('creating dial target for %p', peerId);\n        // resolving multiaddrs can involve dns lookups so allow them to be aborted\n        const controller = new AbortController();\n        const controllerId = randomId();\n        this.pendingDialTargets.set(controllerId, controller);\n        let signal = controller.signal;\n        // merge with the passed signal, if any\n        if (options.signal != null) {\n            signal = anySignal([signal, options.signal]);\n        }\n        let dialTarget;\n        try {\n            dialTarget = await this._createDialTarget({ peerId, multiaddr }, {\n                ...options,\n                signal\n            });\n        }\n        finally {\n            // done resolving the multiaddrs so remove the abort controller\n            this.pendingDialTargets.delete(controllerId);\n        }\n        if (dialTarget.addrs.length === 0) {\n            throw errCode(new Error('The dial request has no valid addresses'), codes.ERR_NO_VALID_ADDRESSES);\n        }\n        // try to join an in-flight dial for this peer if one is available\n        const pendingDial = this.pendingDials.get(dialTarget.id) ?? this._createPendingDial(dialTarget, options);\n        try {\n            const connection = await pendingDial.promise;\n            log('dial succeeded to %s', dialTarget.id);\n            return connection;\n        }\n        catch (err) {\n            log('dial failed to %s', dialTarget.id, err);\n            // Error is a timeout\n            if (pendingDial.controller.signal.aborted) {\n                err.code = codes.ERR_TIMEOUT;\n            }\n            log.error(err);\n            throw err;\n        }\n        finally {\n            pendingDial.destroy();\n        }\n    }\n    /**\n     * Creates a DialTarget. The DialTarget is used to create and track\n     * the DialRequest to a given peer.\n     *\n     * If a multiaddr is received it should be the only address attempted.\n     *\n     * Multiaddrs not supported by the available transports will be filtered out.\n     */\n    async _createDialTarget(peerIdOrMultiaddr, options) {\n        let addrs = [];\n        if (isMultiaddr(peerIdOrMultiaddr.multiaddr)) {\n            addrs.push(peerIdOrMultiaddr.multiaddr);\n        }\n        // only load addresses if a peer id was passed, otherwise only dial the passed multiaddr\n        if (!isMultiaddr(peerIdOrMultiaddr.multiaddr) && isPeerId(peerIdOrMultiaddr.peerId)) {\n            addrs.push(...await this._loadAddresses(peerIdOrMultiaddr.peerId));\n        }\n        addrs = (await Promise.all(addrs.map(async (ma) => await this._resolve(ma, options))))\n            .flat()\n            // Multiaddrs not supported by the available transports will be filtered out.\n            .filter(ma => Boolean(this.components.transportManager.transportForMultiaddr(ma)));\n        // deduplicate addresses\n        addrs = [...new Set(addrs.map(ma => ma.toString()))].map(ma => multiaddr(ma));\n        if (addrs.length > this.maxAddrsToDial) {\n            throw errCode(new Error('dial with more addresses than allowed'), codes.ERR_TOO_MANY_ADDRESSES);\n        }\n        const peerId = isPeerId(peerIdOrMultiaddr.peerId) ? peerIdOrMultiaddr.peerId : undefined;\n        if (peerId != null) {\n            const peerIdMultiaddr = `/p2p/${peerId.toString()}`;\n            addrs = addrs.map(addr => {\n                const addressPeerId = addr.getPeerId();\n                if (addressPeerId == null || !peerId.equals(addressPeerId)) {\n                    return addr.encapsulate(peerIdMultiaddr);\n                }\n                return addr;\n            });\n        }\n        return {\n            id: peerId == null ? randomId() : peerId.toString(),\n            addrs\n        };\n    }\n    /**\n     * Loads a list of addresses from the peer store for the passed peer id\n     */\n    async _loadAddresses(peer) {\n        const addresses = await this.components.peerStore.addressBook.get(peer);\n        return (await Promise.all(addresses.map(async (address) => {\n            const deny = await this.components.connectionGater.denyDialMultiaddr(peer, address.multiaddr);\n            if (deny) {\n                return false;\n            }\n            return address;\n        })))\n            .filter(isTruthy)\n            // Sort addresses so, for example, we try certified public address first\n            .sort(this.addressSorter)\n            .map(address => address.multiaddr);\n    }\n    /**\n     * Creates a PendingDial that wraps the underlying DialRequest\n     */\n    _createPendingDial(dialTarget, options = {}) {\n        /**\n         * @param {Multiaddr} addr\n         * @param {{ signal: { aborted: any; }; }} options\n         */\n        const dialAction = async (addr, options = {}) => {\n            if (options.signal?.aborted === true) {\n                throw errCode(new Error('already aborted'), codes.ERR_ALREADY_ABORTED);\n            }\n            return await this.components.transportManager.dial(addr, options).catch(err => {\n                log.error('dial to %s failed', addr, err);\n                throw err;\n            });\n        };\n        const dialRequest = new DialRequest({\n            addrs: dialTarget.addrs,\n            dialAction,\n            dialer: this\n        });\n        // Combine the timeout signal and options.signal, if provided\n        const timeoutController = new TimeoutController(this.timeout);\n        const signals = [timeoutController.signal];\n        (options.signal != null) && signals.push(options.signal);\n        const signal = anySignal(signals);\n        // this signal will potentially be used while dialing lots of\n        // peers so prevent MaxListenersExceededWarning appearing in the console\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, signal);\n        }\n        catch { }\n        const pendingDial = {\n            dialRequest,\n            controller: timeoutController,\n            promise: dialRequest.run({ ...options, signal }),\n            destroy: () => {\n                timeoutController.clear();\n                this.pendingDials.delete(dialTarget.id);\n            }\n        };\n        this.pendingDials.set(dialTarget.id, pendingDial);\n        return pendingDial;\n    }\n    getTokens(num) {\n        const total = Math.min(num, this.maxDialsPerPeer, this.tokens.length);\n        const tokens = this.tokens.splice(0, total);\n        log('%d tokens request, returning %d, %d remaining', num, total, this.tokens.length);\n        return tokens;\n    }\n    releaseToken(token) {\n        // Guard against duplicate releases\n        if (this.tokens.includes(token)) {\n            return;\n        }\n        log('token %d released', token);\n        this.tokens.push(token);\n    }\n    /**\n     * Resolve multiaddr recursively\n     */\n    async _resolve(ma, options) {\n        // TODO: recursive logic should live in multiaddr once dns4/dns6 support is in place\n        // Now only supporting resolve for dnsaddr\n        const resolvableProto = ma.protoNames().includes('dnsaddr');\n        // Multiaddr is not resolvable? End recursion!\n        if (!resolvableProto) {\n            return [ma];\n        }\n        const resolvedMultiaddrs = await this._resolveRecord(ma, options);\n        const recursiveMultiaddrs = await Promise.all(resolvedMultiaddrs.map(async (nm) => {\n            return await this._resolve(nm, options);\n        }));\n        const addrs = recursiveMultiaddrs.flat();\n        return addrs.reduce((array, newM) => {\n            if (array.find(m => m.equals(newM)) == null) {\n                array.push(newM);\n            }\n            return array;\n        }, ([]));\n    }\n    /**\n     * Resolve a given multiaddr. If this fails, an empty array will be returned\n     */\n    async _resolveRecord(ma, options) {\n        try {\n            ma = multiaddr(ma.toString()); // Use current multiaddr module\n            const multiaddrs = await ma.resolve(options);\n            return multiaddrs;\n        }\n        catch (err) {\n            log.error(`multiaddr ${ma.toString()} could not be resolved`, err);\n            return [];\n        }\n    }\n}\n/**\n * Type safe version of `list.filter(Boolean)`\n */\nfunction isTruthy(e) {\n    return Boolean(e);\n}\n/**\n * Returns a random string\n */\nfunction randomId() {\n    return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`;\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { isStartable } from '@libp2p/interfaces/startable';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { MemoryDatastore } from 'datastore-core/memory';\nimport { DefaultPeerRouting } from './peer-routing.js';\nimport { CompoundContentRouting } from './content-routing/index.js';\nimport { codes } from './errors.js';\nimport { DefaultAddressManager } from './address-manager/index.js';\nimport { DefaultConnectionManager } from './connection-manager/index.js';\nimport { AutoDialler } from './connection-manager/auto-dialler.js';\nimport { Circuit } from './circuit/transport.js';\nimport { Relay } from './circuit/index.js';\nimport { KeyChain } from './keychain/index.js';\nimport { DefaultTransportManager } from './transport-manager.js';\nimport { DefaultUpgrader } from './upgrader.js';\nimport { DefaultRegistrar } from './registrar.js';\nimport { IdentifyService } from './identify/index.js';\nimport { FetchService } from './fetch/index.js';\nimport { PingService } from './ping/index.js';\nimport { NatManager } from './nat-manager.js';\nimport { PeerRecordUpdater } from './peer-record-updater.js';\nimport { DHTPeerRouting } from './dht/dht-peer-routing.js';\nimport { PersistentPeerStore } from '@libp2p/peer-store';\nimport { DHTContentRouting } from './dht/dht-content-routing.js';\nimport { DefaultComponents } from './components.js';\nimport { validateConfig } from './config.js';\nimport { createEd25519PeerId } from '@libp2p/peer-id-factory';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport errCode from 'err-code';\nimport { unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { DummyDHT } from './dht/dummy-dht.js';\nimport { DummyPubSub } from './pubsub/dummy-pubsub.js';\nimport { PeerSet } from '@libp2p/peer-collections';\nimport { DefaultDialer } from './connection-manager/dialer/index.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('libp2p');\nexport class Libp2pNode extends EventEmitter {\n    constructor(init) {\n        super();\n        this.started = false;\n        this.peerId = init.peerId;\n        const components = this.components = new DefaultComponents({\n            peerId: init.peerId,\n            datastore: init.datastore ?? new MemoryDatastore(),\n            connectionGater: {\n                denyDialPeer: async () => await Promise.resolve(false),\n                denyDialMultiaddr: async () => await Promise.resolve(false),\n                denyInboundConnection: async () => await Promise.resolve(false),\n                denyOutboundConnection: async () => await Promise.resolve(false),\n                denyInboundEncryptedConnection: async () => await Promise.resolve(false),\n                denyOutboundEncryptedConnection: async () => await Promise.resolve(false),\n                denyInboundUpgradedConnection: async () => await Promise.resolve(false),\n                denyOutboundUpgradedConnection: async () => await Promise.resolve(false),\n                filterMultiaddrForPeer: async () => await Promise.resolve(true),\n                ...init.connectionGater\n            }\n        });\n        components.peerStore = new PersistentPeerStore(components, {\n            addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n            ...init.peerStore\n        });\n        this.services = [\n            components\n        ];\n        // Create Metrics\n        if (init.metrics != null) {\n            this.metrics = this.components.metrics = this.configureComponent(init.metrics(this.components));\n        }\n        this.peerStore = this.components.peerStore;\n        this.peerStore.addEventListener('peer', evt => {\n            const { detail: peerData } = evt;\n            this.dispatchEvent(new CustomEvent('peer:discovery', { detail: peerData }));\n        });\n        // Set up connection protector if configured\n        if (init.connectionProtector != null) {\n            this.components.connectionProtector = init.connectionProtector(components);\n        }\n        // Set up the Upgrader\n        this.components.upgrader = new DefaultUpgrader(this.components, {\n            connectionEncryption: (init.connectionEncryption ?? []).map(fn => this.configureComponent(fn(this.components))),\n            muxers: (init.streamMuxers ?? []).map(fn => this.configureComponent(fn(this.components))),\n            inboundUpgradeTimeout: init.connectionManager.inboundUpgradeTimeout\n        });\n        // Create the dialer\n        this.components.dialer = new DefaultDialer(this.components, init.connectionManager);\n        // Create the Connection Manager\n        this.connectionManager = this.components.connectionManager = new DefaultConnectionManager(this.components, init.connectionManager);\n        // forward connection manager events\n        this.components.connectionManager.addEventListener('peer:disconnect', (event) => {\n            this.dispatchEvent(new CustomEvent('peer:disconnect', { detail: event.detail }));\n        });\n        this.components.connectionManager.addEventListener('peer:connect', (event) => {\n            this.dispatchEvent(new CustomEvent('peer:connect', { detail: event.detail }));\n        });\n        // Create the Registrar\n        this.registrar = this.components.registrar = new DefaultRegistrar(this.components);\n        // Setup the transport manager\n        this.components.transportManager = new DefaultTransportManager(this.components, init.transportManager);\n        // Addresses {listen, announce, noAnnounce}\n        this.components.addressManager = new DefaultAddressManager(this.components, init.addresses);\n        // update our peer record when addresses change\n        this.configureComponent(new PeerRecordUpdater(this.components));\n        this.configureComponent(new AutoDialler(this.components, {\n            enabled: init.connectionManager.autoDial,\n            minConnections: init.connectionManager.minConnections,\n            autoDialInterval: init.connectionManager.autoDialInterval\n        }));\n        // Create keychain\n        const keychainOpts = KeyChain.generateOptions();\n        this.keychain = this.configureComponent(new KeyChain(this.components, {\n            ...keychainOpts,\n            ...init.keychain\n        }));\n        // Create the Nat Manager\n        this.services.push(new NatManager(this.components, init.nat));\n        init.transports.forEach((fn) => {\n            this.components.transportManager.add(this.configureComponent(fn(this.components)));\n        });\n        // Add the identify service\n        this.identifyService = new IdentifyService(this.components, {\n            ...init.identify\n        });\n        this.configureComponent(this.identifyService);\n        // dht provided components (peerRouting, contentRouting, dht)\n        if (init.dht != null) {\n            this.dht = this.components.dht = init.dht(this.components);\n        }\n        else {\n            this.dht = new DummyDHT();\n        }\n        // Create pubsub if provided\n        if (init.pubsub != null) {\n            this.pubsub = this.components.pubsub = init.pubsub(this.components);\n        }\n        else {\n            this.pubsub = new DummyPubSub();\n        }\n        // Attach remaining APIs\n        // peer and content routing will automatically get modules from _modules and _dht\n        const peerRouters = (init.peerRouters ?? []).map(fn => this.configureComponent(fn(this.components)));\n        if (init.dht != null) {\n            // add dht to routers\n            peerRouters.push(this.configureComponent(new DHTPeerRouting(this.dht)));\n            // use dht for peer discovery\n            this.dht.addEventListener('peer', (evt) => {\n                this.onDiscoveryPeer(evt);\n            });\n        }\n        this.peerRouting = this.components.peerRouting = this.configureComponent(new DefaultPeerRouting(this.components, {\n            ...init.peerRouting,\n            routers: peerRouters\n        }));\n        const contentRouters = (init.contentRouters ?? []).map(fn => this.configureComponent(fn(this.components)));\n        if (init.dht != null) {\n            // add dht to routers\n            contentRouters.push(this.configureComponent(new DHTContentRouting(this.dht)));\n        }\n        this.contentRouting = this.components.contentRouting = this.configureComponent(new CompoundContentRouting(this.components, {\n            routers: contentRouters\n        }));\n        if (init.relay.enabled) {\n            this.components.transportManager.add(this.configureComponent(new Circuit(this.components, init.relay)));\n            this.configureComponent(new Relay(this.components, {\n                addressSorter: init.connectionManager.addressSorter,\n                ...init.relay\n            }));\n        }\n        this.fetchService = this.configureComponent(new FetchService(this.components, {\n            ...init.fetch\n        }));\n        this.pingService = this.configureComponent(new PingService(this.components, {\n            ...init.ping\n        }));\n        // Discovery modules\n        for (const fn of init.peerDiscovery ?? []) {\n            const service = this.configureComponent(fn(this.components));\n            service.addEventListener('peer', (evt) => {\n                this.onDiscoveryPeer(evt);\n            });\n        }\n    }\n    configureComponent(component) {\n        if (isStartable(component)) {\n            this.services.push(component);\n        }\n        return component;\n    }\n    /**\n     * Starts the libp2p node and all its subsystems\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        log('libp2p is starting');\n        try {\n            await Promise.all(this.services.map(async (service) => {\n                if (service.beforeStart != null) {\n                    await service.beforeStart();\n                }\n            }));\n            // start any startables\n            await Promise.all(this.services.map(service => service.start()));\n            await Promise.all(this.services.map(async (service) => {\n                if (service.afterStart != null) {\n                    await service.afterStart();\n                }\n            }));\n            log('libp2p has started');\n        }\n        catch (err) {\n            log.error('An error occurred starting libp2p', err);\n            await this.stop();\n            throw err;\n        }\n    }\n    /**\n     * Stop the libp2p node by closing its listeners and open connections\n     */\n    async stop() {\n        if (!this.started) {\n            return;\n        }\n        log('libp2p is stopping');\n        this.started = false;\n        await Promise.all(this.services.map(async (service) => {\n            if (service.beforeStop != null) {\n                await service.beforeStop();\n            }\n        }));\n        await Promise.all(this.services.map(service => service.stop()));\n        await Promise.all(this.services.map(async (service) => {\n            if (service.afterStop != null) {\n                await service.afterStop();\n            }\n        }));\n        log('libp2p has stopped');\n    }\n    isStarted() {\n        return this.started;\n    }\n    getConnections(peerId) {\n        return this.components.connectionManager.getConnections(peerId);\n    }\n    getPeers() {\n        const peerSet = new PeerSet();\n        for (const conn of this.components.connectionManager.getConnections()) {\n            peerSet.add(conn.remotePeer);\n        }\n        return Array.from(peerSet);\n    }\n    async dial(peer, options = {}) {\n        return await this.components.connectionManager.openConnection(peer, options);\n    }\n    async dialProtocol(peer, protocols, options = {}) {\n        if (protocols == null) {\n            throw errCode(new Error('no protocols were provided to open a stream'), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        protocols = Array.isArray(protocols) ? protocols : [protocols];\n        if (protocols.length === 0) {\n            throw errCode(new Error('no protocols were provided to open a stream'), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        const connection = await this.dial(peer, options);\n        return await connection.newStream(protocols, options);\n    }\n    getMultiaddrs() {\n        return this.components.addressManager.getAddresses();\n    }\n    getProtocols() {\n        return this.components.registrar.getProtocols();\n    }\n    async hangUp(peer) {\n        if (isMultiaddr(peer)) {\n            peer = peerIdFromString(peer.getPeerId() ?? '');\n        }\n        await this.components.connectionManager.closeConnections(peer);\n    }\n    /**\n     * Get the public key for the given peer id\n     */\n    async getPublicKey(peer, options = {}) {\n        log('getPublicKey %p', peer);\n        if (peer.publicKey != null) {\n            return peer.publicKey;\n        }\n        const peerInfo = await this.peerStore.get(peer);\n        if (peerInfo.pubKey != null) {\n            return peerInfo.pubKey;\n        }\n        if (this.dht == null) {\n            throw errCode(new Error('Public key was not in the peer store and the DHT is not enabled'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const peerKey = uint8ArrayConcat([\n            uint8ArrayFromString('/pk/'),\n            peer.multihash.digest\n        ]);\n        // search the dht\n        for await (const event of this.dht.get(peerKey, options)) {\n            if (event.name === 'VALUE') {\n                const key = unmarshalPublicKey(event.value);\n                await this.peerStore.keyBook.set(peer, event.value);\n                return key.bytes;\n            }\n        }\n        throw errCode(new Error(`Node not responding with its public key: ${peer.toString()}`), codes.ERR_INVALID_RECORD);\n    }\n    async fetch(peer, key, options = {}) {\n        if (isMultiaddr(peer)) {\n            const peerId = peerIdFromString(peer.getPeerId() ?? '');\n            await this.components.peerStore.addressBook.add(peerId, [peer]);\n            peer = peerId;\n        }\n        return await this.fetchService.fetch(peer, key, options);\n    }\n    async ping(peer, options = {}) {\n        if (isMultiaddr(peer)) {\n            const peerId = peerIdFromString(peer.getPeerId() ?? '');\n            await this.components.peerStore.addressBook.add(peerId, [peer]);\n            peer = peerId;\n        }\n        return await this.pingService.ping(peer, options);\n    }\n    async handle(protocols, handler, options) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.handle(protocol, handler, options);\n        }));\n    }\n    async unhandle(protocols) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.unhandle(protocol);\n        }));\n    }\n    async register(protocol, topology) {\n        return await this.registrar.register(protocol, topology);\n    }\n    unregister(id) {\n        this.registrar.unregister(id);\n    }\n    /**\n     * Called whenever peer discovery services emit `peer` events.\n     * Known peers may be emitted.\n     */\n    onDiscoveryPeer(evt) {\n        const { detail: peer } = evt;\n        if (peer.id.toString() === this.peerId.toString()) {\n            log.error(new Error(codes.ERR_DISCOVERED_SELF));\n            return;\n        }\n        if (peer.multiaddrs.length > 0) {\n            void this.components.peerStore.addressBook.add(peer.id, peer.multiaddrs).catch(err => log.error(err));\n        }\n        if (peer.protocols.length > 0) {\n            void this.components.peerStore.protoBook.set(peer.id, peer.protocols).catch(err => log.error(err));\n        }\n        this.dispatchEvent(new CustomEvent('peer:discovery', { detail: peer }));\n    }\n}\n/**\n * Returns a new Libp2pNode instance - this exposes more of the internals than the\n * libp2p interface and is useful for testing and debugging.\n */\nexport async function createLibp2pNode(options) {\n    if (options.peerId == null) {\n        const datastore = options.datastore;\n        if (datastore != null) {\n            try {\n                // try load the peer id from the keychain\n                // @ts-expect-error missing the peer id property\n                const keyChain = new KeyChain({\n                    datastore\n                }, {\n                    ...KeyChain.generateOptions(),\n                    ...(options.keychain ?? {})\n                });\n                options.peerId = await keyChain.exportPeerId('self');\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n    }\n    if (options.peerId == null) {\n        // no peer id in the keychain, create a new peer id\n        options.peerId = await createEd25519PeerId();\n    }\n    return new Libp2pNode(validateConfig(options));\n}\n//# sourceMappingURL=libp2p.js.map","// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\nexport const second = 1000;\nexport const minute = 60 * second;\nexport const hour = 60 * minute;\nexport const MAX_RECORD_AGE = 36 * hour;\nexport const LAN_PREFIX = '/lan';\nexport const PROTOCOL_PREFIX = '/ipfs';\nexport const PROTOCOL_DHT = '/kad/1.0.0';\nexport const RECORD_KEY_PREFIX = '/dht/record';\nexport const PROVIDER_KEY_PREFIX = '/dht/provider';\nexport const PROVIDERS_LRU_CACHE_SIZE = 256;\nexport const PROVIDERS_VALIDITY = 24 * hour;\nexport const PROVIDERS_CLEANUP_INTERVAL = hour;\nexport const READ_MESSAGE_TIMEOUT = 10 * second;\n// The number of records that will be retrieved on a call to getMany()\nexport const GET_MANY_RECORD_COUNT = 16;\n// K is the maximum number of requests to perform before returning failure\nexport const K = 20;\n// Alpha is the concurrency for asynchronous requests\nexport const ALPHA = 3;\n// How often we look for our closest DHT neighbours\nexport const QUERY_SELF_INTERVAL = Number(5 * minute);\n// How long to look for our closest DHT neighbours for\nexport const QUERY_SELF_TIMEOUT = Number(30 * second);\n// How often we try to find new peers\nexport const TABLE_REFRESH_INTERVAL = Number(5 * minute);\n// How how long to look for new peers for\nexport const TABLE_REFRESH_QUERY_TIMEOUT = Number(30 * second);\n// When a timeout is not specified, run a query for this long\nexport const DEFAULT_QUERY_TIMEOUT = Number(30 * second);\n//# sourceMappingURL=constants.js.map","import { sha256 } from 'multiformats/hashes/sha2';\nimport { Key } from 'interface-datastore/key';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport isPrivateIp from 'private-ip';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { RECORD_KEY_PREFIX } from './constants.js';\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = uint8ArrayFromString('/pk/');\nexport function removePrivateAddresses(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            // treat /dns, /dns4, and /dns6 addrs as public\n            if (type === 53 || type === 54 || type === 55) {\n                // localhost can be a dns address but it's private\n                if (addr === 'localhost') {\n                    return false;\n                }\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = isPrivateIp(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return true;\n            }\n            return !isPrivate;\n        })\n    };\n}\nexport function removePublicAddresses(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            if (addr === 'localhost') {\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = isPrivateIp(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return false;\n            }\n            return isPrivate;\n        })\n    };\n}\n/**\n * Creates a DHT ID by hashing a given Uint8Array\n */\nexport async function convertBuffer(buf) {\n    const multihash = await sha256.digest(buf);\n    return multihash.digest;\n}\n/**\n * Creates a DHT ID by hashing a Peer ID\n */\nexport async function convertPeerId(peerId) {\n    return await convertBuffer(peerId.toBytes());\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToKey(buf) {\n    return new Key('/' + uint8ArrayToString(buf, 'base32'), false);\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToRecordKey(buf) {\n    return new Key(`${RECORD_KEY_PREFIX}/${uint8ArrayToString(buf, 'base32')}`, false);\n}\n/**\n * Generate the key for a public key.\n */\nexport function keyForPublicKey(peer) {\n    return uint8ArrayConcat([\n        PK_PREFIX,\n        peer.toBytes()\n    ]);\n}\nexport function isPublicKeyKey(key) {\n    return uint8ArrayToString(key.subarray(0, 4)) === '/pk/';\n}\nexport function isIPNSKey(key) {\n    return uint8ArrayToString(key.subarray(0, 4)) === '/ipns/';\n}\nexport function fromPublicKeyKey(key) {\n    return peerIdFromBytes(key.subarray(4));\n}\n/**\n * Create a new put record, encodes and signs it if enabled\n */\nexport function createPutRecord(key, value) {\n    const timeReceived = new Date();\n    const rec = new Libp2pRecord(key, value, timeReceived);\n    return rec.serialize();\n}\nexport function debounce(callback, wait = 100) {\n    let timeout;\n    return () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => { callback(); }, wait);\n    };\n}\n//# sourceMappingURL=utils.js.map","// @ts-expect-error no types\nimport KBuck from 'k-bucket';\nimport * as utils from '../utils.js';\nimport Queue from 'p-queue';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { logger } from '@libp2p/logger';\nimport { PeerSet } from '@libp2p/peer-collections';\nexport const KAD_CLOSE_TAG_NAME = 'kad-close';\nexport const KAD_CLOSE_TAG_VALUE = 50;\nexport const KBUCKET_SIZE = 20;\nexport const PING_TIMEOUT = 10000;\nexport const PING_CONCURRENCY = 10;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nexport class RoutingTable {\n    constructor(components, init) {\n        const { kBucketSize, pingTimeout, lan, pingConcurrency, protocol, tagName, tagValue } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table`);\n        this.kBucketSize = kBucketSize ?? KBUCKET_SIZE;\n        this.pingTimeout = pingTimeout ?? PING_TIMEOUT;\n        this.pingConcurrency = pingConcurrency ?? PING_CONCURRENCY;\n        this.lan = lan;\n        this.running = false;\n        this.protocol = protocol;\n        this.tagName = tagName ?? KAD_CLOSE_TAG_NAME;\n        this.tagValue = tagValue ?? KAD_CLOSE_TAG_VALUE;\n        const updatePingQueueSizeMetric = () => {\n            this.metrics?.pingQueueSize.update(this.pingQueue.size);\n            this.metrics?.pingRunning.update(this.pingQueue.pending);\n        };\n        this.pingQueue = new Queue({ concurrency: this.pingConcurrency });\n        this.pingQueue.addListener('add', updatePingQueueSizeMetric);\n        this.pingQueue.addListener('next', updatePingQueueSizeMetric);\n        this._onPing = this._onPing.bind(this);\n    }\n    isStarted() {\n        return this.running;\n    }\n    async start() {\n        this.running = true;\n        if (this.components.metrics != null) {\n            this.metrics = {\n                routingTableSize: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_routing_table_size`),\n                pingQueueSize: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_ping_queue_size`),\n                pingRunning: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_ping_running`)\n            };\n        }\n        const kBuck = new KBuck({\n            localNodeId: await utils.convertPeerId(this.components.peerId),\n            numberOfNodesPerKBucket: this.kBucketSize,\n            numberOfNodesToPing: 1\n        });\n        this.kb = kBuck;\n        // test whether to evict peers\n        kBuck.on('ping', this._onPing);\n        // tag kad-close peers\n        this._tagPeers(kBuck);\n    }\n    async stop() {\n        this.running = false;\n        this.pingQueue.clear();\n        this.kb = undefined;\n    }\n    /**\n     * Keep track of our k-closest peers and tag them in the peer store as such\n     * - this will lower the chances that connections to them get closed when\n     * we reach connection limits\n     */\n    _tagPeers(kBuck) {\n        let kClosest = new PeerSet();\n        const updatePeerTags = utils.debounce(() => {\n            const newClosest = new PeerSet(kBuck.closest(kBuck.localNodeId, KBUCKET_SIZE).map(contact => contact.peer));\n            const addedPeers = newClosest.difference(kClosest);\n            const removedPeers = kClosest.difference(newClosest);\n            Promise.resolve()\n                .then(async () => {\n                for (const peer of addedPeers) {\n                    await this.components.peerStore.tagPeer(peer, this.tagName, {\n                        value: this.tagValue\n                    });\n                }\n                for (const peer of removedPeers) {\n                    await this.components.peerStore.unTagPeer(peer, this.tagName);\n                }\n            })\n                .catch(err => {\n                this.log.error('Could not update peer tags', err);\n            });\n            kClosest = newClosest;\n        });\n        kBuck.on('added', () => {\n            updatePeerTags();\n        });\n        kBuck.on('removed', () => {\n            updatePeerTags();\n        });\n    }\n    /**\n     * Called on the `ping` event from `k-bucket` when a bucket is full\n     * and cannot split.\n     *\n     * `oldContacts.length` is defined by the `numberOfNodesToPing` param\n     * passed to the `k-bucket` constructor.\n     *\n     * `oldContacts` will not be empty and is the list of contacts that\n     * have not been contacted for the longest.\n     */\n    _onPing(oldContacts, newContact) {\n        // add to a queue so multiple ping requests do not overlap and we don't\n        // flood the network with ping requests if lots of newContact requests\n        // are received\n        this.pingQueue.add(async () => {\n            if (!this.running) {\n                return;\n            }\n            let responded = 0;\n            try {\n                await Promise.all(oldContacts.map(async (oldContact) => {\n                    let timeoutController;\n                    try {\n                        timeoutController = new TimeoutController(this.pingTimeout);\n                        const options = {\n                            signal: timeoutController.signal\n                        };\n                        this.log('pinging old contact %p', oldContact.peer);\n                        const connection = await this.components.connectionManager.openConnection(oldContact.peer, options);\n                        const stream = await connection.newStream(this.protocol, options);\n                        stream.close();\n                        responded++;\n                    }\n                    catch (err) {\n                        if (this.running && this.kb != null) {\n                            // only evict peers if we are still running, otherwise we evict when dialing is\n                            // cancelled due to shutdown in progress\n                            this.log.error('could not ping peer %p', oldContact.peer, err);\n                            this.log('evicting old contact after ping failed %p', oldContact);\n                            this.kb.remove(oldContact.id);\n                        }\n                    }\n                    finally {\n                        if (timeoutController != null) {\n                            timeoutController.clear();\n                        }\n                        this.metrics?.routingTableSize.update(this.size);\n                    }\n                }));\n                if (this.running && responded < oldContacts.length && this.kb != null) {\n                    this.log('adding new contact %p', newContact.peer);\n                    this.kb.add(newContact);\n                }\n            }\n            catch (err) {\n                this.log.error('could not process k-bucket ping event', err);\n            }\n        })\n            .catch(err => {\n            this.log.error('could not process k-bucket ping event', err);\n        });\n    }\n    // -- Public Interface\n    /**\n     * Amount of currently stored peers\n     */\n    get size() {\n        if (this.kb == null) {\n            return 0;\n        }\n        return this.kb.count();\n    }\n    /**\n     * Find a specific peer by id\n     */\n    async find(peer) {\n        const key = await utils.convertPeerId(peer);\n        const closest = this.closestPeer(key);\n        if (closest != null && peer.equals(closest)) {\n            return closest;\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the closest peers to the given key\n     */\n    closestPeer(key) {\n        const res = this.closestPeers(key, 1);\n        if (res.length > 0) {\n            return res[0];\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the `count`-closest peers to the given key\n     */\n    closestPeers(key, count = this.kBucketSize) {\n        if (this.kb == null) {\n            return [];\n        }\n        const closest = this.kb.closest(key, count);\n        return closest.map(p => p.peer);\n    }\n    /**\n     * Add or update the routing table with the given peer\n     */\n    async add(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await utils.convertPeerId(peer);\n        this.kb.add({ id, peer });\n        this.log('added %p with kad id %b', peer, id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n    /**\n     * Remove a given peer from the table\n     */\n    async remove(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await utils.convertPeerId(peer);\n        this.kb.remove(id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n}\n//# sourceMappingURL=index.js.map","export default [\n    77591, 22417, 43971, 28421, 740, 29829, 71467, 228973, 196661, 78537, 27689, 36431, 44415, 14362, 19456, 106025,\n    96308, 2882, 49509, 21149, 87173, 131409, 75844, 23676, 121838, 30291, 17492, 2953, 7564, 110620, 129477, 127283,\n    53113, 72417, 165166, 109690, 21200, 102125, 24049, 71504, 90342, 25307, 72039, 26812, 26715, 32264, 133800, 71161,\n    88956, 171987, 51779, 24425, 16671, 30251, 186294, 247761, 14202, 2121, 8465, 35024, 4876, 85917, 169730, 3638,\n    256836, 96184, 943, 18678, 6583, 52907, 35807, 112254, 214097, 18796, 11595, 9243, 23554, 887, 268203, 382004,\n    24590, 111335, 11625, 16619, 29039, 102425, 69006, 97976, 92362, 32552, 63717, 41433, 128974, 137630, 59943, 10019,\n    13986, 35430, 33665, 108037, 43799, 43280, 38195, 29078, 58629, 18265, 14425, 46832, 235538, 40830, 77881, 110717,\n    58937, 3463, 325358, 51300, 47623, 117252, 19007, 10170, 20540, 91237, 294813, 4951, 79841, 56232, 36270, 128547,\n    69209, 66275, 100156, 32063, 73531, 34439, 80937, 28892, 44466, 88595, 216307, 32583, 49620, 16605, 82127, 45807,\n    21630, 78726, 20235, 40163, 111007, 96926, 5567, 72083, 21665, 58844, 39419, 179767, 48328, 42662, 51550, 5251,\n    37811, 49608, 81056, 50854, 55513, 20922, 18891, 197409, 164656, 32593, 71449, 220474, 58919, 85682, 67854, 13758,\n    35066, 3565, 61905, 214793, 119572, 141419, 21504, 10302, 27354, 67003, 46131, 32668, 15165, 64871, 34450, 17821,\n    2757, 11452, 34189, 5160, 12257, 85523, 560, 53385, 65887, 119549, 135620, 312353, 115979, 122356, 10867, 193231,\n    124537, 54783, 90675, 120791, 4715, 142253, 50943, 17271, 43358, 25331, 4917, 120566, 34580, 12878, 33786, 160528,\n    32523, 4869, 301307, 104817, 81491, 23276, 8832, 97911, 31265, 52065, 7998, 49622, 9715, 43998, 34091, 84587,\n    20664, 69041, 29419, 53205, 10838, 58288, 116145, 6185, 5154, 141795, 35924, 21307, 144738, 43730, 12085, 8279,\n    10002, 119, 133779, 199668, 72938, 31768, 39176, 67875, 38453, 9700, 44144, 4121, 116048, 41733, 12868, 82669,\n    92308, 128, 34262, 11332, 7712, 90764, 36141, 13553, 71312, 77470, 117314, 96549, 49135, 23602, 54468, 28605,\n    6327, 62308, 17171, 67531, 21319, 14105, 894, 107722, 46157, 8503, 51069, 100472, 45138, 15246, 14577, 35609,\n    191464, 1757, 13364, 161349, 32067, 91705, 81144, 52339, 5408, 91066, 21983, 14157, 100545, 4372, 26630, 129112,\n    1423, 29676, 213626, 4397, 88436, 99190, 6877, 49958, 26122, 114348, 60661, 29818, 293118, 50042, 179738, 16400,\n    163423, 89627, 31040, 43973, 36638, 45952, 5153, 1894, 109322, 1898, 134021, 12402, 112077, 68309, 190269, 69866,\n    31938, 107383, 11522, 105232, 11248, 14868, 39852, 71707, 186525, 16530, 38162, 106212, 11700, 5130, 16608, 26998,\n    59586, 108399, 230033, 43683, 48135, 82179, 2073, 5015, 196684, 189293, 16378, 23452, 8301, 35640, 11632, 214551,\n    29240, 57644, 33137, 91949, 55157, 52384, 117313, 5090, 17717, 89668, 49363, 82238, 241035, 66216, 29066, 184088,\n    97206, 62820, 26595, 4241, 135635, 173672, 8202, 459, 71355, 146294, 29587, 3008, 135385, 141203, 14803, 6634,\n    45094, 69362, 50925, 546, 51884, 62011, 83296, 234584, 44515, 56050, 89476, 87751, 19373, 12691, 149923, 19794,\n    13833, 35846, 87557, 58339, 2884, 19145, 25647, 12224, 11024, 77338, 64608, 122297, 53025, 7205, 36189, 36294,\n    170779, 21750, 7739, 173883, 75192, 35664, 224240, 113121, 30181, 26267, 27036, 117827, 92015, 106516, 55628, 203549,\n    67949, 60462, 60844, 35911, 20457, 1820, 920, 19773, 8738, 73173, 181993, 38521, 98254, 76257, 46008, 92796,\n    5384, 26868, 151566, 22124, 2411, 15919, 186872, 180021, 28099, 152961, 78811, 80237, 62352, 102653, 74259, 184890,\n    16792, 123702, 224945, 29940, 19512, 75283, 14059, 112691, 92811, 233329, 20411, 138569, 53341, 109802, 50600, 134528,\n    66747, 5529, 166531, 31578, 64732, 67189, 1596, 126357, 967, 167999, 206598, 109752, 119431, 207825, 78791, 91938,\n    10301, 27311, 24233, 252343, 28831, 32812, 66002, 112267, 90895, 8786, 8095, 16824, 22866, 21813, 60507, 174833,\n    19549, 130985, 117051, 52110, 6938, 81923, 123864, 38061, 919, 18680, 53534, 46739, 112893, 161529, 85429, 26761,\n    11900, 81121, 91968, 15390, 217947, 56524, 1713, 6654, 37089, 85630, 138866, 61850, 16491, 75577, 16884, 98296,\n    73523, 6140, 44645, 6062, 36366, 29844, 57946, 37932, 42472, 5266, 20834, 19309, 33753, 127182, 134259, 35810,\n    41805, 45878, 312001, 14881, 47757, 49251, 120050, 44252, 3708, 25856, 107864, 120347, 1228, 36550, 41682, 34496,\n    47025, 8393, 173365, 246526, 12894, 161607, 35670, 90785, 126572, 2095, 124731, 157033, 58694, 554, 12786, 9642,\n    4817, 16136, 47864, 174698, 66992, 4639, 69284, 10625, 40710, 27763, 51738, 30404, 264105, 137904, 109882, 52487,\n    42824, 57514, 2740, 10479, 146799, 107390, 16586, 88038, 174951, 9410, 16185, 44158, 5568, 40658, 46108, 12763,\n    97385, 26175, 108859, 664, 230732, 67470, 46663, 14395, 50750, 141320, 93140, 15361, 47997, 55784, 6791, 307840,\n    118569, 107326, 18056, 58281, 260415, 54691, 8790, 73332, 45633, 7511, 45674, 143373, 14031, 11799, 94491, 35646,\n    96544, 14560, 26049, 32983, 25791, 83814, 42094, 231370, 63955, 139212, 2359, 169908, 3108, 183486, 105867, 28197,\n    32941, 124968, 26402, 88267, 149768, 23053, 3078, 19091, 52924, 25383, 19209, 111548, 97361, 3959, 24880, 235061,\n    9099, 24921, 161254, 151405, 20508, 7159, 34381, 20133, 11434, 74036, 19974, 34769, 36585, 1076, 22454, 17354,\n    38727, 235160, 111547, 96454, 117448, 156940, 91330, 37299, 7310, 26915, 117060, 51369, 22620, 61861, 322264, 106850,\n    111694, 15091, 2624, 40345, 300446, 177064, 1707, 27389, 54792, 327783, 132669, 183543, 59003, 17744, 20603, 151134,\n    106923, 53084, 71803, 279424, 319816, 11579, 21946, 16728, 38274, 72711, 5085, 83391, 88646, 40159, 25027, 34680,\n    10752, 12988, 54126, 30365, 18338, 100445, 230674, 44874, 84974, 143877, 123253, 139372, 28082, 91477, 144002, 13096,\n    219729, 46016, 50029, 42377, 14601, 6660, 58244, 58978, 23918, 88206, 113611, 64452, 17541, 41032, 10942, 12021,\n    49189, 10978, 40175, 37156, 10947, 71709, 106894, 112538, 57007, 137486, 150608, 152719, 40615, 7746, 279716, 13101,\n    19524, 28708, 40578, 72320, 1096, 182051, 94527, 51275, 22833, 45164, 81917, 77519, 48508, 5421, 140302, 37845,\n    149830, 5587, 27579, 5357, 428725, 248187, 6326, 206760, 39814, 32585, 89923, 44341, 288753, 284443, 96368, 31201,\n    94189, 119504, 20359, 52073, 103216, 179, 27934, 32801, 96035, 34111, 34309, 101326, 18198, 20704, 210266, 37643,\n    27880, 141873, 106000, 19414, 56614, 167714, 66483, 107885, 86602, 4379, 20796, 75467, 4987, 5017, 118857, 26003,\n    34308, 114428, 29198, 6686, 29697, 73632, 3739, 69795, 16798, 41504, 7207, 30722, 21436, 36735, 28067, 28545,\n    3239, 11221, 36031, 41889, 100010, 19247, 317673, 29495, 174554, 6424, 129725, 53845, 94986, 7955, 59676, 2604,\n    191497, 19735, 102214, 62954, 23844, 11872, 179525, 261436, 34492, 428, 78404, 142035, 16747, 17246, 27578, 37021,\n    33672, 57944, 26056, 135760, 2369, 61674, 122066, 31327, 19374, 157065, 40553, 130982, 69619, 71290, 38855, 72100,\n    92903, 95940, 51422, 165999, 65713, 57873, 50726, 7288, 20272, 2081, 42326, 22624, 81120, 57914, 79352, 19447,\n    1684, 72302, 11774, 302559, 161481, 96396, 13692, 414988, 3721, 79066, 56627, 46883, 21150, 11747, 12184, 5856,\n    113458, 176117, 84416, 52079, 27933, 3354, 59765, 141359, 2212, 216309, 2555, 23458, 196722, 142463, 45701, 44548,\n    28798, 19418, 215, 29916, 9396, 10574, 114226, 84475, 13520, 18694, 34056, 4524, 90302, 62930, 13539, 19407,\n    77209, 7728, 38088, 9535, 2263, 23875, 183945, 17750, 26274, 67172, 10585, 28042, 22199, 7478, 51331, 66030,\n    26774, 192929, 31434, 25850, 50197, 52926, 178158, 4679, 181256, 70184, 229600, 9959, 105594, 72158, 73974, 2726,\n    35085, 78087, 23284, 35568, 51713, 155676, 5401, 27254, 11966, 17569, 223253, 71993, 103357, 111477, 55722, 30504,\n    26034, 46774, 35392, 36285, 214814, 41143, 163465, 1051, 16094, 81044, 6636, 76489, 179102, 20712, 39178, 35683,\n    125177, 54219, 30617, 52994, 25324, 50123, 2543, 87529, 58995, 10688, 125199, 12388, 60158, 125481, 131646, 7642,\n    133350, 65874, 3438, 97277, 101450, 10075, 56344, 116821, 50778, 60547, 98016, 106135, 13859, 14255, 16300, 77373,\n    173521, 8285, 45932, 37426, 4054, 114295, 55947, 7703, 39114, 52, 51119, 128135, 19714, 60715, 9554, 50492,\n    88180, 2823, 118271, 52993, 122625, 97919, 23859, 37895, 25040, 33614, 32102, 20431, 3577, 9275, 15686, 43031,\n    157741, 110358, 1884, 40291, 125391, 13736, 5008, 64881, 87336, 77381, 70711, 43032, 49155, 118587, 70494, 4318,\n    10168, 30126, 12580, 10524, 280104, 104001, 145413, 2862, 84140, 6603, 106005, 13566, 12780, 11251, 42830, 571,\n    179910, 82443, 13146, 469, 42714, 32591, 265217, 424024, 92553, 54721, 134100, 6007, 15242, 114681, 59030, 16718,\n    85465, 200214, 85982, 55174, 165013, 23493, 56964, 82529, 109150, 32706, 27568, 82442, 5350, 14976, 13165, 44890,\n    60021, 21343, 33978, 17264, 4655, 22328, 27819, 75730, 16567, 55483, 14510, 17926, 45827, 150609, 3704, 7385,\n    272531, 161543, 76904, 122163, 52405, 2039, 19165, 41623, 14423, 228354, 3369, 176360, 85491, 7122, 35789, 303724,\n    4465, 13628, 2233, 55311, 118771, 20713, 10006, 221519, 45115, 71021, 35650, 29775, 7337, 10864, 20665, 21142,\n    1746, 15080, 1624, 32449, 10905, 105743, 229797, 7701, 3940, 22997, 178467, 57208, 389057, 39683, 59403, 63344,\n    63125, 54847, 69691, 18336, 56448, 3362, 37202, 18282, 29648, 138224, 35867, 10495, 5911, 28814, 26653, 31514,\n    176702, 26550, 45621, 11734, 4525, 40543, 73944, 121080, 27858, 155561, 14887, 44670, 30742, 8796, 107455, 113472,\n    56369, 75581, 183777, 240095, 133699, 153299, 8768, 160464, 26058, 49078, 103971, 21875, 71486, 44888, 17156, 9678,\n    89541, 123019, 102337, 3972, 83930, 21245, 87852, 109660, 287918, 183019, 686, 10100, 39177, 283941, 11274, 24736,\n    26793, 26214, 25995, 77011, 141580, 4070, 23742, 46285, 46632, 30700, 26669, 19056, 35951, 115575, 174034, 56097,\n    35463, 87425, 24575, 44245, 38701, 82317, 85922, 281616, 100333, 147697, 61503, 7730, 84330, 8530, 59917, 61597,\n    17173, 9092, 32658, 90288, 193136, 39023, 20381, 56654, 31132, 7779, 1919, 1375, 117128, 30819, 11169, 40938,\n    23935, 115201, 101155, 151034, 4835, 11231, 74550, 89388, 59951, 91704, 107312, 167882, 115062, 12732, 72738, 88703,\n    464019, 158267, 57995, 60496, 737, 14371, 123867, 4174, 243339, 159946, 7568, 16025, 134556, 110916, 38103, 191,\n    80226, 88794, 29688, 27230, 10454, 76308, 57647, 77409, 113483, 66864, 14745, 19808, 12023, 46583, 84805, 16015,\n    17102, 2231, 20611, 3547, 95740, 250131, 34559, 108894, 8498, 15853, 159169, 148920, 20942, 2813, 93160, 45188,\n    210613, 45531, 52587, 149062, 39782, 28194, 57849, 60965, 84954, 89766, 84453, 100927, 16501, 27658, 165311, 103841,\n    54192, 207341, 19558, 20084, 319622, 5672, 205467, 98462, 61849, 36279, 13609, 147177, 24726, 165015, 209489, 59591,\n    31157, 6551, 117580, 75060, 141146, 277310, 21072, 22023, 106474, 63041, 137443, 122965, 68371, 5383, 42146, 98961,\n    113467, 30863, 23794, 4843, 99630, 30392, 82679, 13699, 241612, 33601, 93146, 24319, 18643, 32155, 95669, 40440,\n    15333, 34089, 67799, 142144, 58245, 38633, 114531, 117400, 77861, 188726, 5507, 2568, 8853, 10987, 107222, 2663,\n    2421, 11530, 13345, 30075, 41785, 118661, 104786, 17459, 12490, 16281, 71936, 193555, 17431, 5944, 71758, 26485,\n    77317, 20803, 367167, 158, 7362, 93430, 11735, 172445, 46002, 11532, 54482, 930, 62911, 2235, 23004, 179236,\n    4764, 101859, 208113, 22477, 55163, 95579, 14098, 67320, 162556, 90709, 156949, 3826, 57492, 4025, 34092, 87442,\n    104565, 6718, 186015, 28214, 14209, 10039, 107186, 233912, 58877, 81637, 55265, 39828, 6194, 145813, 50831, 105849,\n    4974, 88319, 122296, 10272, 197216, 95714, 51540, 72418, 23324, 91555, 8743, 140452, 250249, 51666, 34124, 7229,\n    38592, 129641, 78169, 174242, 22464, 149964, 51450, 14034, 10026, 95376, 26190, 120062, 14401, 8700, 265, 31386,\n    143573, 7203, 229889, 61567, 4227, 140981, 2466, 72052, 10787, 10062, 30958, 6099, 38471, 30103, 23202, 208101,\n    70847, 467, 58934, 32271, 32984, 36637, 24107, 30771, 17109, 73353, 13650, 2098, 157040, 67366, 66904, 106018,\n    265380, 107238, 18535, 44025, 32681, 144983, 62505, 91295, 56120, 3082, 77508, 10322, 63023, 36700, 81885, 224127,\n    16721, 45023, 239261, 111272, 13852, 7866, 149243, 204199, 32309, 22084, 42029, 38316, 126644, 104973, 14406, 43454,\n    67322, 61310, 15789, 40285, 24026, 181047, 6301, 70927, 23319, 115823, 27248, 66693, 115875, 278566, 63007, 146844,\n    56841, 59007, 87368, 180001, 22370, 42114, 80605, 12022, 10374, 308, 25079, 14689, 12618, 63368, 7936, 264973,\n    212291, 136713, 95999, 105801, 18965, 32075, 48700, 52230, 35119, 96912, 32992, 8586, 16606, 101333, 101812, 14969,\n    39930, 759, 193090, 27387, 42914, 12937, 5058, 62646, 64528, 38624, 25743, 37502, 3716, 4435, 30352, 178687,\n    26461, 132611, 42002, 138442, 35833, 59582, 16345, 8048, 60319, 49349, 309, 47800, 49739, 90482, 26405, 34470,\n    63786, 32479, 85028, 39866, 47846, 11649, 23934, 29466, 2816, 42864, 31828, 7410, 74885, 49632, 47629, 111801,\n    90749, 19536, 18767, 105764, 59606, 21223, 10746, 76298, 22220, 39408, 7190, 79654, 64856, 11602, 82156, 272765,\n    17079, 70089, 245473, 51813, 184407, 384678, 1576, 122249, 5064, 27481, 6188, 25790, 74361, 27541, 318284, 45430,\n    31488, 620, 93579, 45723, 192118, 22670, 51913, 4162, 70244, 35966, 26397, 16199, 50899, 209613, 121702, 287507,\n    2993, 36101, 132229, 67345, 33062, 76295, 118628, 78705, 52316, 34375, 107083, 107454, 44863, 127561, 33964, 3073,\n    154010, 190914, 55967, 39074, 6272, 31047, 5550, 41123, 26154, 98638, 47110, 19998, 148091, 50229, 31329, 59900,\n    195442, 19106, 61347, 73497, 70015, 682, 45850, 25776, 38022, 148951, 6288, 37411, 232526, 109277, 27286, 32342,\n    9262, 5220, 16651, 23175, 46740, 129438, 78614, 121925, 66914, 88710, 127952, 5563, 21500, 34521, 10739, 14863,\n    191006, 62956, 17359, 16749, 67027, 56284, 69134, 43301, 35039, 58883, 54466, 60823, 404451, 75743, 59856, 86979,\n    7923, 34273, 83785, 32142, 7693, 268986, 197428, 282681, 17049, 22346, 22990, 92245, 107180, 3357, 37104, 96724,\n    49153, 7683, 31197, 43267, 82231, 164276, 23696, 20848, 188364, 22309, 24821, 158707, 1018, 22514, 70922, 27792,\n    45589, 59709, 10765, 736, 35218, 63479, 51987, 24275, 63588, 55361, 92929, 81964, 4658, 20122, 12330, 44058,\n    13065, 311456, 72224, 8337, 211229, 38979, 22590, 138478, 52757, 32595, 133600, 8838, 31549, 94412, 43391, 90056,\n    1585, 94802, 127271, 6223, 31889, 137038, 132910, 2165, 57616, 230152, 6080, 10748, 36737, 74579, 134062, 50525,\n    180532, 119270, 34556, 76155, 82394, 52595, 29258, 31435, 87820, 67996, 26943, 183878, 38007, 2410, 13526, 180297,\n    69856, 3503, 187396, 167700, 7838, 16701, 9199, 56267, 3661, 37407, 65994, 23767, 5708, 62508, 221700, 67088,\n    86978, 46776, 84434, 32088, 5612, 9149, 88244, 21685, 95151, 46750, 189612, 2979, 506311, 2594, 3628, 40074,\n    105039, 78243, 28523, 6651, 38058, 71999, 30992, 12764, 68261, 108991, 6165, 26450, 61961, 13400, 22426, 7490,\n    60890, 109623, 2070, 12958, 50355, 67979, 257096, 7213, 42578, 52121, 35716, 65461, 7516, 124758, 39268, 302,\n    64712, 14977, 1467, 219452, 2840, 34229, 11121, 21602, 19270, 63574, 8024, 1532, 17331, 79839, 78885, 52029,\n    180767, 57957, 6069, 91265, 61380, 55767, 8927, 32881, 287603, 22149, 35029, 68876, 6428, 199567, 46926, 13412,\n    104132, 21434, 366616, 45060, 110046, 81924, 128910, 45886, 52821, 130416, 29416, 77342, 21762, 67329, 121432, 79924,\n    11724, 38625, 81006, 102033, 28338, 13326, 3250, 82056, 82526, 38212, 21112, 12382, 111495, 3263, 7414, 86274,\n    93490, 40844, 30224, 45212, 24019, 48411, 71367, 24941, 76729, 57776, 3769, 38114, 202019, 197745, 31953, 237533,\n    33270, 201580, 255648, 100798, 44741, 32241, 98468, 106931, 10085, 15090, 170358, 33154, 66787, 18819, 69760, 25061,\n    234005, 82660, 6295, 131975, 16874, 9076, 4094, 25005, 17740, 40908, 19533, 220019, 44330, 99792, 50040, 19619,\n    13950, 55228, 24423, 31253, 95308, 103177, 184795, 28590, 82285, 5059, 3210, 75525, 49894, 70007, 56178, 10580,\n    36051, 139681, 21617, 98736, 3555, 106306, 164189, 37352, 63915, 47824, 24883, 145530, 61904, 28444, 11483, 19837,\n    145446, 30420, 112972, 85939, 11835, 191233, 2262, 20705, 58630, 1753, 148334, 1197, 144714, 6887, 11223, 107667,\n    60879, 77914, 4151, 57417, 81594, 96681, 169430, 1784, 20444, 95138, 254041, 27038, 596, 7117, 72808, 13759,\n    3353, 126776, 21074, 55322, 27081, 36942, 39547, 139830, 179275, 4453, 713, 8722, 71399, 19204, 25785, 22794,\n    23923, 104114, 11291, 25458, 102309, 88396, 75288, 230440, 206396, 104551, 58447, 130857, 37247, 94734, 31548, 176529,\n    226077, 65159, 20104, 10096, 66881, 94191, 237909, 27109, 37404, 1520, 27421, 25220, 113003, 23423, 24884, 50585,\n    6286, 231877, 150800, 11789, 3226, 90004, 60642, 5053, 202400, 61442, 132531, 175329, 57138, 30116, 103847, 9973,\n    75367, 16452, 32360, 59119, 21246, 10191, 164804, 23305, 61051, 37348, 154530, 13214, 5468, 50403, 66754, 130976,\n    50559, 80515, 14436, 155492, 84017, 5472, 43107, 41240, 2890, 90431, 70188, 382, 76234, 48040, 50211, 281038,\n    237007, 32115, 142178, 1536, 22761, 96429, 1811, 31243, 1679, 49143, 55209, 17402, 235054, 61494, 7462, 77030,\n    34925, 87609, 78002, 9499, 9027, 73289, 201078, 101379, 63544, 27666, 5469, 10642, 30029, 49816, 132979, 95620,\n    58086, 351930, 116300, 2110, 2043, 30845, 6154, 11279, 16727, 4122, 2277, 27281, 4971, 3650, 39060, 61970,\n    65951, 39674, 75686, 38151, 11370, 130809, 177895, 32665, 63725, 122267, 7857, 39618, 118483, 44792, 157755, 178624,\n    136994, 24260, 41308, 22471, 12404, 21707, 12486, 30473, 52781, 50246, 20247, 39065, 909, 56825, 103158, 128603,\n    31542, 1089, 41935, 32744, 12428, 37963, 84420, 33134, 72921, 208449, 42622, 168151, 127335, 147107, 46699, 38216,\n    12591, 94342, 85814, 31423, 24944, 2605, 87542, 67473, 192551, 4496, 56321, 91819, 17630, 6300, 256183, 114569,\n    202090, 33209, 35289, 34897, 24967, 40520, 43470, 5344, 10199, 34810, 14283, 10381, 10017, 62923, 49924, 23233,\n    64539, 13051, 35686, 19698, 11570, 135555, 120868, 44924, 87065, 52318, 52335, 47586, 140906, 245885, 109834, 78668,\n    9065, 46990, 25258, 72022, 61243, 40838, 4545, 146387, 10537, 11557, 17470, 36930, 68104, 46711, 24264, 79401,\n    81043, 18225, 120488, 24746, 84338, 81652, 28266, 13776, 21878, 46973, 1047, 230465, 73357, 95777, 24973, 210160,\n    62210, 58404, 110633, 169651, 6937, 41870, 9909, 26822, 191062, 76553, 27519, 96256, 239070, 2478, 205678, 67955,\n    58532, 20601, 50120, 19148, 78501, 195724, 110740, 8249, 109665, 27446, 30568, 57631, 31425, 49752, 32820, 65504,\n    50079, 3663, 102256, 219898, 23849, 211315, 14645, 4359, 91767, 9528, 12449, 49366, 7941, 49763, 107848, 8930,\n    27086, 50686, 9744, 10447, 81935, 39513, 46514, 1670, 29229, 6172, 22312, 137280, 97759, 9806, 14445, 22976,\n    56458, 73391, 34983, 93760, 174219, 52573, 33149, 59747, 2429, 136277, 75123, 165263, 91040, 7446, 57632, 48633,\n    97140, 246081, 84766, 151684, 79918, 93268, 120346, 54059, 54875, 77858, 32996, 103590, 45276, 11968, 19600, 25849,\n    17159, 132907, 42828, 16817, 4913, 99462, 103303, 27395, 5737, 74184, 20749, 21160, 14377, 77062, 131403, 158735,\n    10999, 27799, 77785, 9320, 34366, 51593, 61070, 33746, 47048, 29268, 36675, 30262, 53297, 9832, 82000, 20188,\n    122292, 39917, 7331, 18160, 68301, 185935, 134830, 15031, 4935, 10004, 165845, 185534, 46923, 30109, 44134, 122631,\n    18874, 22903, 112790, 26561, 18549, 348902, 82871, 140345, 255565, 135390, 63556, 103747, 145055, 179600, 145662, 296111,\n    61661, 211987, 23952, 52342, 126343, 48450, 32919, 44277, 82185, 9591, 62139, 205363, 376969, 394874, 108461, 18040,\n    120885, 14798, 39863, 16571, 16794, 58271, 81025, 55206, 14640, 118656, 6361, 44092, 85970, 6262, 153863, 108244,\n    180200, 72264, 79947, 38044, 10050, 5735, 61221, 80712, 5471, 115689, 11391, 11661, 184257, 20010, 60116, 30320,\n    19327, 134598, 45455, 27542, 18004, 125092, 452272, 1549, 91523, 46567, 180063, 156026, 2608, 11174, 58848, 37788,\n    65907, 80194, 30490, 5786, 40775, 119519, 106241, 11323, 156297, 8425, 61495, 2617, 29675, 2425, 59886, 112582,\n    49142, 59618, 4863, 50597, 86710, 50650, 168632, 27693, 85641, 83643, 18993, 25768, 84284, 28090, 93592, 36627,\n    312804, 43381, 9887, 9402, 100931, 97165, 3311, 173330, 66805, 28935, 4963, 184460, 3201, 78102, 19126, 21607,\n    37496, 24938, 22615, 16153, 32862, 134792, 153318, 61120, 6067, 2812, 12826, 12792, 23825, 37559, 64662, 202250,\n    102694, 155488, 85881, 149193, 46233, 65383, 15521, 106982, 11358, 176786, 25752, 39717, 34208, 24510, 32464, 77742,\n    39371, 72028, 138229, 60688, 71386, 102834, 132477, 2208, 11548, 63670, 271279, 28351, 30338, 38620, 32491, 99845,\n    143885, 152266, 13252, 2825, 178663, 108097, 1775, 78201, 14897, 113573, 163346, 62292, 171129, 22183, 96598, 38733,\n    64971, 166776, 117445, 9968, 146393, 44677, 74867, 20908, 97328, 12761, 25656, 26785, 9148, 112344, 26115, 99176,\n    110121, 22437, 49547, 6180, 79320, 5835, 31392, 43328, 33377, 75870, 119860, 69497, 80273, 7325, 155219, 43167,\n    111173, 28347, 20222, 3763, 71752, 55041, 47252, 14618, 28088, 15012, 97805, 194698, 54636, 2036, 41349, 6173,\n    96604, 61530, 51859, 43782, 13361, 24334, 22668, 24792, 7070, 23441, 16789, 3209, 36211, 208475, 26242, 32880,\n    122181, 182407, 21444, 31060, 88459, 29929, 77907, 12716, 10934, 97005, 20599, 31690, 8403, 58445, 30303, 22700,\n    10336, 86731, 103115, 337709, 72556, 46788, 112566, 47684, 67089, 53548, 36874, 56487, 41387, 125985, 26893, 40071,\n    106683, 73712, 18787, 40105, 72992, 67246, 137276, 50802, 36790, 70328, 138827, 22466, 39263, 183295, 29858, 50975,\n    9322, 57397, 10654, 24364, 30383, 55799, 41600, 23584, 127295, 296610, 129078, 143558, 244131, 86397, 36049, 1085,\n    80677, 3820, 108139, 5476, 34767, 24683, 7758, 13060, 7239, 131671, 250593, 59556, 103392, 29810, 4188, 252323,\n    39404, 116877, 7651, 43600, 40338, 13554, 157253, 39196, 25978, 144387, 61211, 234, 50104, 6129, 10449, 93777,\n    9240, 356378, 274148, 4439, 72970, 3724, 147770, 78680, 62570, 115877, 40027, 40547, 36817, 224392, 64609, 34795,\n    165027, 67440, 2477, 37206, 23431, 50754, 164797, 46018, 94995, 170982, 27051, 7957, 22767, 3674, 27900, 56419,\n    18930, 60701, 41302, 2692, 84749, 339721, 61996, 111094, 80221, 50129, 1045, 8153, 62945, 19202, 8250, 37208,\n    37418, 32560, 79477, 41106, 88569, 33963, 36693, 5892, 30570, 1581, 66471, 49647, 11922, 160717, 29442, 5643,\n    114865, 82962, 95982, 132098, 22633, 22838, 94726, 54556, 28566, 205039, 162340, 33216, 16849, 35847, 221339, 94851,\n    26533, 71469, 1805, 3804, 12935, 45483, 71020, 36310, 65381, 192960, 34240, 35165, 59773, 1248, 46954, 155332,\n    96864, 4246, 388800, 16129, 57133, 74592, 44807, 442014, 38203, 42574, 80818, 91592, 26377, 36424, 65760, 977,\n    77387, 22628, 147610, 28018, 30561, 98454, 6969, 119628, 63648, 18170, 36854, 26601, 64018, 22027, 37279, 51395,\n    152934, 21153, 9430, 58760, 194742, 5330, 55115, 34158, 28917, 174111, 13171, 122326, 1526, 43896, 66094, 25325,\n    4234, 148354, 11450, 275, 18999, 112191, 44365, 22723, 68409, 8733, 57746, 96565, 75007, 14196, 108844, 29475,\n    88599, 177563, 100792, 106156, 86323, 93726, 14248, 135341, 194131, 40126, 47099, 14779, 8272, 39597, 95983, 171398,\n    65882, 28052, 10393, 47213, 40689, 22120, 72212, 106829, 34964, 109146, 753, 648, 21660, 30047, 17527, 181025,\n    5619, 145357, 4085, 216883, 9359, 186951, 24779, 53931, 24545, 36197, 223296, 62628, 168101, 4243, 107313, 30321,\n    26642, 13049, 51059, 31027, 107912, 807, 73550, 26551, 84369, 122422, 165872, 49754, 74213, 234264, 33151, 52014,\n    33100, 87183, 22365, 52500, 40013, 23302, 5652, 72723, 21404, 26107, 48434, 587, 94049, 168493, 96418, 32871,\n    70860, 31709, 25128, 443, 71597, 166253, 15670, 70994, 26341, 133675, 28280, 75491, 54756, 47955, 56028, 26182,\n    11952, 113272, 472197, 64640, 110753, 17919, 337, 50642, 22576, 142, 87371, 53391, 93210, 126694, 15285, 19642,\n    85667, 14148, 1506, 42092, 52962, 33243, 11970, 20734, 135843, 57044, 58880, 13002, 219134, 22876, 64754, 232519,\n    4257, 43120, 321573, 24799, 64526, 124728, 52579, 81472, 70831, 276848, 17403, 74359, 23021, 182101, 74597, 23744,\n    148267, 12055, 7976, 5349, 11772, 67540, 167347, 65318, 18720, 127832, 108238, 22828, 90233, 9987, 259080, 118185,\n    73209, 79270, 13775, 90100, 137742, 90799, 70569, 15699, 19961, 9087, 67475, 57872, 39731, 8810, 134897, 131868,\n    146849, 19898, 3334, 2281, 167061, 91073, 60356, 467742, 74712, 188, 53179, 137679, 92769, 29241, 9537, 132595,\n    80119, 1041, 88962, 5976, 40171, 44911, 102859, 139059, 104558, 98987, 47761, 19272, 71472, 113864, 175377, 73338,\n    10857, 23402, 23758, 1591, 139864, 5644, 4076, 118760, 16427, 134198, 18853, 20291, 100849, 37423, 22038, 36677,\n    19071, 195521, 57445, 11069, 31869, 55718, 66882, 148490, 44, 41296, 75242, 49704, 166810, 9906, 20943, 122258,\n    49112, 105667, 15969, 10344, 6408, 187694, 21399, 72742, 58970, 14867, 14376, 81889, 41856, 23225, 15042, 56993,\n    16074, 131389, 74276, 72407, 53875, 383108, 53597, 37363, 68993, 44854, 122548, 430927, 198279, 38430, 80409, 12245,\n    2981, 628, 2818, 17760, 37437, 238229, 7968, 46892, 2200, 3730, 34190, 65983, 37959, 112291, 87850, 70827,\n    6522, 20750, 73913, 111621, 41652, 19587, 2780, 58668, 25916, 85259, 18200, 168962, 95781, 42445, 102050, 7776,\n    57662, 103313, 47742, 96358, 41964, 66174, 100396, 29069, 204735, 19679, 27978, 7479, 40264, 22534, 61183, 36081,\n    107436, 58223, 14680, 23002, 101311, 24716, 124108, 12908, 5646, 31750, 40380, 14215, 232799, 102772, 14122, 96775,\n    61398, 50917, 12096, 149880, 67833, 598749, 124194, 155871, 49216, 790, 14677, 65319, 56917, 7440, 145744, 95701,\n    12206, 49405, 129269, 76199, 45732, 9767, 11058, 9047, 210885, 11051, 7392, 26307, 2130, 8132, 147526, 20802,\n    232698, 115660, 50060, 59789, 57344, 107623, 80343, 112676, 23291, 9866, 160971, 34032, 118291, 15719, 59730, 164911,\n    28975, 2659, 58046, 78480, 21854, 66209, 53863, 109085, 116045, 29021, 46481, 107552, 22130, 18764, 70254, 31272,\n    11300, 52460, 43933, 84738, 20721, 53869, 190840, 79673, 105300, 7561, 321817, 66924, 13940, 33281, 101046, 183181,\n    32176, 71878, 5678, 62924, 79535, 56646, 40303, 19559, 27703, 93042, 73368, 42187, 3670, 37376, 46440, 7023,\n    36816, 109628, 20680, 5940, 276440, 275233, 170848, 112093, 136996, 14984, 20226, 111441, 77693, 112960, 48577, 39370,\n    55707, 50314, 123404, 26570, 54281, 61372, 123391, 4857, 35928, 246740, 132507, 106646, 44241, 7196, 92258, 9825,\n    37688, 51197, 303141, 5590, 15476, 132986, 10955, 85782, 34486, 26696, 7991, 28813, 18858, 39546, 11703, 11365,\n    38185, 5716, 93555, 11925, 40121, 60002, 6985, 10976, 171384, 3887, 43394, 13337, 56346, 6381, 252336, 39573,\n    75042, 53711, 1028, 31781, 44295, 95925, 131713, 7214, 68125, 43571, 70954, 213234, 1628, 8760, 13391, 65485,\n    17320, 56038, 1710, 25248, 60803, 57399, 19839, 3870, 326, 281556, 50945, 72400, 21460, 316244, 75619, 56246,\n    98775, 481, 13513, 55765, 50427, 7388, 123519, 32929, 57908, 27124, 61316, 101097, 57467, 30228, 48792, 10788,\n    20402, 37318, 50526, 155730, 34456, 158065, 145305, 17832, 43733, 64052, 4506, 35072, 205355, 177028, 184004, 187081,\n    68616, 35938, 83703, 10367, 36892, 93186, 260137, 51934, 89970, 4985, 23445, 26755, 21558, 7948, 78741, 23376,\n    124405, 85594, 68596, 57536, 49351, 12619, 56593, 132668, 99924, 109728, 71844, 71935, 196018, 65464, 17617, 14987,\n    89701, 143773, 33997, 8687, 22701, 33258, 2914, 4436, 72108, 85610, 9671, 49067, 2327, 82988, 1361, 1672,\n    44033, 35777, 30269, 24057, 10605, 82236, 616, 15793, 13919, 47249, 112086, 116698, 9484, 80207, 90574, 33304,\n    68624, 93127, 56101, 42210, 160929, 4827, 38995, 38095, 4701, 125119, 5027, 33680, 9236, 231236, 14135, 87837,\n    23318, 70261, 78893, 30151, 81482, 14332, 1084, 74256, 27532, 46644, 79185, 3148, 62615, 6981, 55672, 31668,\n    36825, 1849, 14536, 37446, 14738, 23779, 43058, 162749, 72199, 1168, 21346, 5592, 85932, 85302, 9668, 18351,\n    57135, 150360, 2080, 228015, 77953, 34670, 119302, 151751, 31009, 106725, 84265, 45214, 59289, 74178, 113071, 263206,\n    111009, 4021, 44449, 188119, 192629, 123592, 392506, 292847, 114487, 12831, 205858, 9852, 20780, 79648, 75767, 357014,\n    97721, 18166, 21005, 67950, 33226, 204009, 16536, 2987, 11335, 66717, 144910, 47950, 17262, 55060, 15063, 2934,\n    51038, 26775, 178497, 66008, 3427, 49433, 128592, 20036, 157553, 63861, 3089, 23015, 51210, 28696, 35933, 49942,\n    71135, 231518, 99620, 17248, 21835, 176536, 20676, 16944, 38700, 165831, 233253, 295625, 36723, 13023, 52745, 10907,\n    19423, 67972, 125868, 95473, 82875, 1183, 108455, 52685, 33417, 64095, 21433, 52438, 33191, 127809, 44505, 211823,\n    7810, 2752, 95548, 162031, 7185, 91196, 47563, 61721, 33359, 17897, 23682, 42806, 178101, 22874, 49707, 199897,\n    75419, 82456, 8618, 11171, 79712, 116847, 18783, 44190, 46564, 5346, 59046, 95032, 7893, 14916, 3214, 26800,\n    24172, 121453, 34362, 10250, 17408, 18888, 4840, 68696, 22831, 13162, 36005, 32512, 14800, 62357, 41723, 45046,\n    27247, 37486, 5372, 2564, 34261, 298500, 66509, 133920, 89138, 31305, 117697, 19097, 108304, 81386, 84106, 23802,\n    46411, 63304, 946, 51417, 41777, 41041, 19501, 115864, 60743, 294354, 37955, 94165, 18116, 1156, 17937, 20645,\n    57114, 90804, 58042, 48643, 92288, 9861, 2557, 88546, 61333, 101008, 12853, 5148, 87856, 4152, 144503, 73841,\n    18718, 9789, 147565, 10846, 42085, 12789, 30223, 8993, 56352, 67203, 2448, 28215, 6052, 23540, 126319, 75933,\n    36689, 80235, 23231, 23561, 21383, 38800, 77548, 102798, 21234, 31468, 158608, 46188, 63960, 191679, 8051, 67014,\n    11185, 170078, 42186, 28827, 34777, 41930, 212079, 12421, 34750, 24111, 110344, 73918, 45171, 70826, 141949, 40063,\n    23979, 24254, 37309, 26724, 27179, 24718, 83648, 54938, 14591, 17425, 29525, 102675, 48975, 48654, 12316, 8929,\n    60640, 41709, 50168, 63264, 89812, 50716, 48632, 38755, 138583, 160123, 55579, 71829, 24230, 233277, 46322, 39650,\n    166388, 34718, 24108, 98252, 7031, 106695, 62498, 18258, 35062, 217827, 78731, 34824, 33354, 19520, 60852, 2432,\n    60224, 8587, 2836, 62955, 702, 20227, 42285, 40560, 95592, 62486, 11094, 53035, 143291, 18842, 46177, 77994,\n    1770, 9657, 107422, 172915, 32655, 128716, 25886, 25164, 156740, 119928, 165875, 85817, 11007, 89110, 33956, 12652,\n    65156, 180266, 8494, 36889, 19958, 20955, 96, 1264, 118288, 135769, 44754, 86671, 5632, 19026, 168220, 289120,\n    33569, 93821, 66144, 70635, 7687, 5642, 2714, 55445, 56636, 71545, 184182, 93133, 7332, 37389, 12643, 52315,\n    22729, 11014, 158742, 17050, 152889, 50178, 34601, 41945, 52136, 9948, 26914, 63548, 95721, 115951, 40759, 8960,\n    158258, 38938, 49232, 48325, 42234, 81523, 253019, 66128, 40978, 20048, 238048, 38760, 62928, 122560, 118532, 43687,\n    137472, 163689, 26680, 9878, 17448, 51035, 16211, 60834, 36749, 29178, 14241, 59868, 150086, 2305, 26477, 42422,\n    34342, 165341, 83279, 33894, 14257, 29928, 12743, 13957, 125571, 89134, 66712, 10952, 16507, 147839, 30146, 7249,\n    16565, 45399, 39874, 114565, 215780, 31990, 230881, 171477, 102, 196546, 44538, 10880, 84948, 281705, 86651, 10617,\n    31395, 2342, 453658, 43569, 60561, 132901, 21845, 17727, 58556, 258242, 22262, 58728, 4008, 77997, 11806, 37431,\n    30599, 81375, 109137, 185787, 114085, 217292, 97453, 169085, 30593, 60212, 11544, 102056, 65580, 2384, 91655, 4855,\n    95725, 7295, 157994, 16228, 20669, 53276, 141590, 105246, 17334, 25440, 76067, 17967, 39321, 38911, 11362, 28559,\n    63807, 21627, 26468, 85816, 40120, 1025, 15234, 58319, 69516, 66512, 124548, 75845, 78873, 22137, 46681, 51242,\n    85683, 32909, 76747, 35555, 43396, 101465, 1765, 73094, 1077, 2962, 39028, 66777, 57831, 42048, 15828, 13962,\n    36041, 63657, 52412, 5242, 58846, 2141, 5506, 219012, 134451, 3936, 182230, 17558, 17153, 152237, 22621, 49377,\n    170216, 35257, 68233, 65374, 6510, 11126, 212151, 7184, 2480, 22517, 3437, 33073, 30156, 16557, 3768, 55067,\n    86829, 91000, 12350, 148650, 66017, 79424, 70885, 49066, 28250, 21369, 51213, 34533, 11510, 3258, 18176, 18465,\n    84413, 6315, 36411, 163765, 4346, 356, 107618, 598, 13727, 285026, 162695, 8749, 14583, 7132, 63521, 184253,\n    32378, 25991, 5604, 30961, 53675, 4874, 84693, 5086, 34811, 26978, 56564, 7904, 33519, 51221, 113942, 69253,\n    6664, 125563, 22055, 220680, 102008, 742, 51930, 19494, 176108, 44424, 35123, 13025, 75685, 11759, 74335, 22250,\n    181453, 131147, 16984, 132115, 154311, 11991, 76452, 52609, 85351, 196, 30969, 9198, 74919, 2529, 56838, 71779,\n    29187, 116304, 3504, 62330, 41190, 86153, 28393, 254926, 104228, 105189, 13264, 84359, 3574, 12415, 8534, 57147,\n    10175, 188174, 59504, 60932, 66318, 16407, 107921, 17638, 99103, 49278, 28403, 39786, 145865, 8462, 3558, 43406,\n    142271, 29139, 21989, 36552, 93955, 72365, 7176, 13556, 106185, 37957, 321774, 17782, 129017, 51154, 27938, 24952,\n    1935, 39366, 2791, 33489, 41582, 56078, 24558, 9311, 5449, 218786, 27808, 190429, 68013, 36020, 86003, 29735,\n    3404, 87348, 119357, 115714, 2324, 86796, 81973, 40992, 43376, 93621, 28784, 16808, 36367, 2517, 2909, 191926,\n    24978, 55303, 53308, 205724, 60068, 3098, 21375, 64784, 23949, 26579, 63121, 12319, 80145, 39967, 97861, 6757,\n    70143, 67642, 37082, 34698, 69140, 122883, 46151, 62187, 80934, 429, 19437, 135071, 137885, 222647, 13331, 154065,\n    327, 61778, 74257, 40116, 37493, 14855, 85079, 237641, 42342, 102164, 199965, 71204, 4662, 29368, 5042, 113914,\n    122214, 8955, 13149, 102503, 43173, 5659, 163787, 69003, 307084, 63392, 171080, 21390, 81918, 86666, 36622, 24126,\n    28887, 5736, 28054, 207170, 163428, 79891, 346467, 95363, 38980, 111806, 80828, 9200, 19288, 294896, 114468, 87405,\n    111715, 141705, 7015, 72754, 68463, 48738, 243147, 33397, 101210, 37051, 98801, 82847, 20397, 4940, 185559, 18716,\n    54718, 83491, 11725, 40803, 1128, 12128, 23060, 5174, 7745, 67007, 46701, 1571, 27807, 180186, 256996, 18975,\n    16837, 7877, 212758, 250379, 15440, 87954, 57755, 24719, 124057, 83461, 258, 50864, 8874, 29038, 71289, 31627,\n    15429, 9005, 4061, 113851, 107716, 82819, 13651, 79656, 117851, 17539, 111446, 12938, 39724, 190787, 4352, 15402,\n    21070, 62708, 8539, 23777, 73853, 13552, 38810, 86117, 16285, 56400, 1718, 75342, 142863, 29033, 378, 110113,\n    180321, 32586, 23606, 26393, 160984, 207987, 23783, 8406, 16904, 24596, 47274, 11693, 46539, 60524, 78595, 48423,\n    31718, 20170, 9009, 146268, 15183, 191060, 172765, 1349, 138436, 37365, 10970, 40509, 225817, 20021, 70394, 152138,\n    21541, 66559, 66544, 89352, 2725, 17258, 91345, 7313, 3815, 115868, 8660, 40362, 4071, 103524, 39388, 118275,\n    21950, 6549, 38226, 32754, 209574, 29201, 43495, 18028, 20296, 40597, 18370, 47520, 202450, 24134, 2219, 8195,\n    69545, 38041, 136934, 46374, 19041, 159811, 84865, 58620, 846, 98749, 13569, 30714, 97246, 32186, 4479, 27355,\n    92973, 35214, 151491, 75963, 37631, 1561, 27200, 238083, 23182, 60756, 12291, 25766, 39355, 102333, 87362, 65741,\n    59906, 19538, 201575, 48772, 102938, 24438, 292580, 39964, 66366, 9004, 61379, 50548, 37622, 38732, 28379, 68180,\n    76622, 17488, 69849, 5963, 7219, 48143, 43413, 55358, 540, 58691, 29506, 19245, 52193, 48621, 5518, 13048,\n    118625, 44755, 191081, 42061, 89197, 2259, 60665, 66994, 71210, 51232, 3585, 142096, 55024, 7892, 8345, 58653,\n    463307, 65658, 64319, 137941, 136323, 53499, 12746, 43492, 6978, 95163, 29925, 60175, 5128, 7352, 41463, 184756,\n    121146, 20473, 18426, 4598, 5309, 54580, 14277, 121151, 10691, 56711, 43880, 63409, 76682, 11830, 172218, 264898,\n    32632, 66536, 81062, 31649, 25788, 92774, 60222, 11100, 63159, 9432, 224657, 25240, 53613, 152, 138620, 163829,\n    2397, 85345, 12501, 37507, 64932, 38575, 43522, 65789, 80198, 78796, 35226, 3851, 108891, 73311, 3060, 28391,\n    93671, 39663, 46142, 30982, 66041, 37281, 68157, 26553, 71872, 81142, 211527, 39747, 118119, 22695, 2859, 11066,\n    20232, 168911, 7933, 197005, 17066, 111071, 44434, 133994, 120798, 12766, 227798, 45756, 132852, 29917, 36076, 55352,\n    65281, 129800, 41958, 18944, 84678, 18580, 168093, 132621, 39997, 54092, 27740, 32354, 3770, 114118, 103242, 43918,\n    15899, 18574, 145944, 3190, 123469, 219903, 24169, 100571, 62403, 16776, 92779, 14535, 17168, 16475, 14304, 37231,\n    1712, 28218, 242754, 61688, 28980, 1318, 51359, 222657, 99200, 67989, 31772, 23932, 35351, 201251, 49041, 27306,\n    19128, 40135, 3986, 77333, 19649, 120683, 151927, 21081, 7076, 78375, 77501, 101599, 8011, 89585, 96715, 58179,\n    5378, 102138, 106793, 26051, 217276, 4197, 16297, 27014, 46721, 13322, 22806, 5278, 29629, 70632, 9647, 71519,\n    58818, 40603, 128530, 8903, 36770, 56900, 31483, 26935, 43845, 34265, 34920, 87658, 6114, 84767, 64250, 47318,\n    50720, 19264, 162514, 33357, 13117, 6705, 46696, 75032, 71054, 87004, 42035, 69138, 11903, 99854, 102328, 19611,\n    34525, 69312, 6431, 49842, 101600, 133178, 108751, 41829, 89939, 225664, 48916, 99556, 9195, 130387, 5960, 36857,\n    116724, 53518, 94002, 39077, 53996, 6945, 22261, 64291, 8314, 152785, 57588, 16522, 9091, 5048, 87671, 35441,\n    39509, 1945, 12423, 158923, 178413, 37549, 14095, 1475, 73188, 62878, 4819, 24012, 68534, 42606, 4010, 120809,\n    57497, 59564, 101758, 103718, 32701, 80116, 12345, 95834, 46918, 21468, 53213, 15665, 31200, 3867, 5140, 96013,\n    250744, 21016, 10069, 13968, 35449, 180829, 27683, 39704, 59956, 22893, 3115, 26293, 32785, 75934, 62445, 141162,\n    62720, 2018, 83638, 19949, 114012, 95006, 3330, 99829, 130935, 309272, 9565, 55874, 121727, 37017, 23586, 319858,\n    40970, 27602, 8625, 112329, 61060, 100088, 118525, 25922, 16232, 1907, 60671, 51583, 44553, 80993, 5262, 94679,\n    8676, 940, 20736, 11823, 3020, 16476, 12340, 152600, 97416, 3703, 25744, 66826, 16245, 16876, 46446, 84798,\n    74227, 176020, 45192, 61955, 75496, 23946, 23626, 40372, 26036, 6149, 11822, 30582, 16541, 41914, 82385, 232823,\n    40921, 80773, 14930, 3631, 7517, 39619, 4348, 36180, 126106, 138939, 62611, 1477, 113512, 47321, 25052, 14546,\n    118881, 29060, 23589, 128322, 36795, 18401, 137921, 104699, 267929, 36194, 172791, 18113, 4766, 188215, 30083, 332586,\n    94089, 5805, 77909, 22194, 68234, 154976, 43220, 40660, 70001, 184893, 138095, 11128, 103010, 22663, 5108, 212615,\n    8485, 5565, 49222, 54614, 26530, 42639, 16319, 55062, 152662, 105595, 21114, 22216, 10294, 68158, 10436, 86950,\n    7206, 62115, 3977, 3657, 59874, 456, 118617, 18156, 106663, 112229, 80992, 17442, 8217, 55551, 5133, 34344,\n    251927, 51153, 39364, 201321, 7816, 66803, 23057, 156724, 145664, 14276, 95705, 979, 2796, 6875, 13429, 212525,\n    50602, 26276, 28284, 3424, 19465, 52397, 46963, 31420, 51399, 206476, 92317, 48851, 637, 100820, 83349, 10317,\n    60227, 21972, 6908, 282439, 32857, 224767, 95629, 83882, 42106, 87338, 69757, 29840, 68709, 37665, 45244, 114577,\n    49188, 175943, 54009, 186746, 106158, 70168, 3358, 234002, 50555, 9221, 129338, 9562, 20118, 32923, 78479, 118280,\n    65752, 4977, 10474, 102174, 60947, 129006, 10570, 83451, 8598, 8078, 159367, 123785, 80438, 16742, 5905, 5281,\n    181513, 42402, 6977, 163136, 93179, 42191, 14968, 50421, 112401, 105440, 33456, 57347, 121611, 4221, 94954, 36517,\n    24046, 27796, 6255, 33394, 72990, 135408, 116627, 1233, 57874, 25654, 95419, 68156, 401399, 313338, 55208, 45573,\n    93124, 119251, 47200, 38196, 11909, 130667, 45391, 73904, 64964, 167846, 4137, 115606, 52036, 62214, 7969, 160925,\n    7187, 1132, 134835, 40309, 73195, 64494, 80472, 444841, 61111, 26500, 45323, 40743, 53625, 52797, 22659, 15631,\n    29739, 36706, 28841, 39147, 102836, 26794, 10536, 14845, 87305, 45874, 12241, 127587, 83833, 57183, 79722, 30844,\n    41304, 84655, 20825, 92500, 3722, 25655, 27811, 10157, 81634, 31362, 34088, 92487, 70123, 22190, 185100, 72658,\n    139035, 192523, 88241, 2078, 230490, 44528, 85638, 100198, 22088, 29982, 291233, 241062, 13865, 4445, 137791, 37835,\n    107218, 31726, 19718, 38234, 72528, 23046, 19177, 66695, 5109, 17251, 28077, 5617, 21554, 47839, 72425, 133825,\n    1486, 73065, 181275, 141508, 21768, 62971, 63082, 2512, 34200, 9904, 120309, 6392, 91243, 68416, 268253, 41199,\n    116757, 138551, 185526, 41246, 28986, 4093, 19057, 17295, 4148, 245766, 122360, 35356, 112075, 20301, 75441, 10998,\n    7977, 19769, 62922, 937, 63547, 100196, 26427, 157820, 20983, 236696, 22935, 8140, 90315, 156004, 47204, 140973,\n    7726, 45097, 52725, 22636, 23436, 257282, 105247, 522, 88389, 216031, 202204, 46812, 211666, 19693, 68828, 81691,\n    45925, 11256, 30292, 372, 5236, 167826, 88328, 232776, 151611, 5360, 82104, 18841, 80393, 25465, 18285, 20320,\n    72377, 31730, 33160, 45803, 38715, 27705, 37379, 24163, 18360, 103586, 4015, 32305, 269494, 91252, 20080, 36567,\n    54650, 7797, 57073, 12650, 31164, 42209, 6375, 261663, 105528, 81661, 106002, 2800, 5375, 17247, 43151, 4442,\n    15727, 194619, 100855, 144898, 62320, 78465, 39929, 16454, 1967, 28311, 61363, 17219, 9395, 8745, 121445, 76939,\n    80385, 162380, 22009, 54191, 44248, 16299, 122830, 48151, 74429, 78291, 64755, 14238, 44966, 2511, 17712, 67954,\n    93583, 829, 105899, 49935, 84750, 11591, 33185, 85447, 42717, 27409, 208542, 28965, 62052, 52525, 5597, 25694,\n    65594, 16343, 63224, 276188, 12475, 9331, 127507, 38522, 57287, 24128, 133161, 79723, 105548, 133695, 48917, 27558,\n    43278, 46520, 13778, 141954, 110785, 83366, 17715, 46317, 105763, 66298, 147013, 41086, 94180, 16478, 220447, 44611,\n    730, 19722, 78975, 117889, 125643, 26254, 16574, 18480, 65006, 15806, 38549, 246418, 46052, 36056, 8440, 34984,\n    30170, 3163, 59800, 4458, 115442, 4283, 41970, 33507, 104078, 1653, 22, 121158, 276486, 3655, 6338, 24048,\n    133421, 23641, 2161, 24422, 36006, 8086, 10675, 181474, 12307, 29514, 59143, 14729, 52509, 87128, 122470, 19446,\n    80852, 33314, 24573, 119864, 14237, 9652, 57779, 6612, 51851, 15284, 98871, 90581, 124466, 156831, 21190, 22015,\n    71380, 161906, 87247, 69201, 18392, 17908, 108470, 72962, 40719, 14338, 17911, 95260, 43339, 20610, 78916, 20710,\n    72451, 11315, 31448, 17263, 58853, 178878, 48111, 116002, 45497, 80506, 82605, 85880, 36300, 121755, 25215, 36118,\n    301929, 88728, 405223, 276136, 553, 34704, 212438, 49970, 78329, 922, 20711, 25036, 257130, 38295, 145369, 18128,\n    15385, 30829, 55656, 48345, 8012, 3561, 28004, 122041, 192900, 58338, 112508, 41085, 29976, 87040, 47117, 23905,\n    4336, 92061, 138880, 97407, 42083, 172121, 6256, 25192, 172671, 5, 93568, 1420, 12677, 31605, 56743, 40620,\n    6015, 78415, 231077, 31298, 80026, 13902, 19048, 24924, 170586, 32955, 176119, 87859, 36731, 6773, 27711, 24658,\n    26475, 115216, 133207, 93250, 95820, 88522, 8317, 5714, 124047, 55219, 86860, 19677, 23961, 22928, 162209, 8904,\n    225992, 359835, 56084, 96201, 29392, 96558, 86071, 93643, 55114, 13347, 8183, 95129, 82012, 2017, 123336, 34219,\n    115554, 157159, 47747, 101684, 41008, 18735, 193781, 104151, 226906, 7552, 179874, 124113, 31159, 21162, 44010, 14771,\n    51268, 166128, 31382, 73124, 77438, 92830, 205709, 12113, 1292, 38937, 13114, 1334, 2118, 15597, 69581, 14449,\n    21934, 76618, 48728, 67038, 14967, 51495, 24243, 87736, 147249, 26720, 11119, 46063, 43749, 5843, 44147, 152629,\n    133428, 65703, 14269, 45604, 57982, 28672, 55616, 45957, 8438, 95433, 37698, 220862, 132034, 39456, 61870, 4161,\n    26501, 73560, 56418, 9845, 4654, 20916, 10456, 88920, 119358, 9015, 65931, 96507, 48029, 38534, 21676, 109081,\n    43078, 34943, 25089, 6131, 28766, 23665, 5477, 10255, 16695, 67, 45778, 42443, 42770, 29534, 23733, 100513,\n    62617, 42630, 48746, 14191, 43753, 50295, 26007, 8792, 57243, 43119, 54725, 164253, 58250, 112304, 131796, 25165,\n    4651, 3188, 24831, 47748, 3705, 19540, 13211, 102095, 5593, 18699, 23666, 32005, 117571, 33541, 60584, 74573,\n    86311, 99443, 25172, 27222, 168938, 7143, 11853, 53560, 18834, 19960, 86522, 28217, 53266, 117700, 72989, 34323,\n    18721, 66450, 34346, 74056, 47217, 202002, 46269, 9429, 68582, 75458, 37823, 82843, 96652, 32549, 145144, 27958,\n    19820, 158086, 31955, 201406, 135379, 31207, 192545, 12950, 51704, 9094, 248263, 76147, 64028, 110009, 79407, 89345,\n    99284, 223492, 47966, 26848, 15359, 201137, 2861, 110507, 71231, 72297, 31851, 118777, 71039, 151051, 240855, 16333,\n    50766, 14727, 7939, 4149, 80908, 418780, 88378, 59276, 1327, 7284, 38576, 79814, 65820, 42199, 84860, 49574,\n    62596, 12396, 70598, 40117, 8648, 7994, 16836, 7630, 14047, 359699, 106878, 525, 29037, 28064, 13380, 11675,\n    50669, 74216, 103539, 180314, 27449, 56299, 172344, 19274, 7301, 246099, 32043, 19422, 36506, 129317, 6806, 30140,\n    4614, 46639, 66926, 932, 86600, 6322, 27847, 233103, 10541, 39025, 34887, 3517, 12972, 26220, 2031, 66561,\n    115015, 48658, 47596, 12714, 33845, 3893, 16165, 35237, 89983, 14769, 11962, 147224, 47018, 29977, 27979, 5552,\n    82338, 86023, 131368, 1218, 24853, 237840, 132193, 15455, 40873, 3668, 65351, 53388, 15229, 59889, 272245, 47934,\n    11858, 34347, 18038, 90853, 86981, 300602, 19343, 114181, 29362, 84921, 6095, 106059, 79472, 38015, 1206, 48741,\n    6208, 80000, 21916, 17423, 6002, 108083, 24479, 34931, 56661, 9511, 26995, 100694, 163853, 35997, 81254, 58321,\n    18919, 171890, 86877, 91341, 74503, 70477, 53412, 7027, 59281, 39892, 131302, 5864, 15947, 61301, 67466, 162369,\n    47956, 27874, 35624, 282324, 21270, 111847, 102548, 41482, 30955, 116737, 28264, 8592, 55458, 22301, 75090, 29821,\n    30697, 51709, 3041, 19208, 8038, 24634, 30467, 87509, 126428, 19389, 18814, 152686, 20701, 83474, 45832, 80891,\n    105808, 11378, 153223, 120770, 98186, 150633, 49838, 9141, 12755, 30962, 5260, 74490, 21256, 31678, 65062, 33326,\n    289838, 187831, 20595, 89768, 2805, 58535, 10844, 70085, 12090, 2451, 138068, 98544, 24461, 4511, 6754, 41684,\n    28203, 3383, 65355, 82833, 30161, 83924, 234361, 128424, 28921, 222594, 33975, 125491, 34069, 11508, 67464, 144226,\n    41850, 98703, 34371, 7901, 21254, 38398, 65651, 23549, 53883, 213340, 123269, 12028, 71764, 177701, 28758, 2623,\n    68395, 11549, 15232, 68603, 9660, 63116, 36079, 57093, 31198, 20475, 48467, 89984, 35619, 186847, 107469, 31389,\n    43631, 73867, 41949, 68841, 114250, 1605, 30564, 63403, 17588, 27680, 99533, 12641, 70325, 50428, 73426, 78379,\n    11855, 91651, 72081, 91720, 60198, 15743, 12065, 83398, 140046, 6761, 46598, 45900, 5068, 886, 62448, 148968,\n    37347, 19405, 9680, 15819, 43496, 63370, 75667, 163700, 37639, 3633, 22774, 34341, 183131, 134335, 37200, 23915,\n    7054, 14194, 12970, 26438, 13350, 285521, 25594, 8219, 104410, 91039, 168804, 138480, 149734, 15907, 33818, 61132,\n    60082, 4622, 110187, 56736, 13551, 73571, 3945, 73463, 65498, 17758, 263266, 17593, 2710, 27585, 54469, 38200,\n    45367, 63754, 28881, 3473, 12791, 98287, 31895, 65787, 4463, 94536, 24951, 36332, 59901, 28803, 52130, 86403,\n    7668, 181822, 74831, 18977, 9850, 177206, 145485, 109798, 7292, 31421, 26280, 77211, 58511, 12507, 127004, 11113,\n    147, 8729, 56208, 43066, 79926, 129937, 31345, 83947, 39915, 46146, 98763, 42566, 1337, 13192, 18323, 105163,\n    80570, 117753, 16555, 72883, 11077, 159438, 40764, 70933, 83329, 26066, 12276, 72059, 21655, 173836, 126713, 69454,\n    153482, 91585, 70644, 102558, 110483, 6764, 127864, 190133, 3961, 101798, 20945, 71138, 82402, 90884, 69669, 44753,\n    923, 16939, 59700, 164258, 25969, 27082, 31399, 43846, 6306, 246093, 51342, 6153, 151581, 202801, 182731, 56475,\n    162188, 89426, 141356, 14355, 121815, 27536, 28023, 65257, 77523, 106668, 127314, 24947, 12790, 38796, 169698, 23555,\n    10725, 44573, 183083, 42088, 62716, 43265, 105958, 32050, 44067, 50118, 1668, 3874, 6243, 318411, 16599, 1691,\n    94999, 52378, 28671, 216728, 123258, 2059, 34969, 69225, 5913, 136280, 171443, 141515, 91662, 22175, 135282, 80020,\n    92270, 1663, 4808, 4482, 3495, 34691, 5226, 109830, 108512, 17342, 107488, 11606, 123190, 100247, 29666, 146527,\n    113014, 15794, 30894, 13224, 39585, 243192, 22351, 9903, 7836, 47699, 11078, 25468, 122291, 48821, 26780, 122679,\n    75521, 81450, 630, 4895, 92900, 55074, 74293, 17441, 3563, 111657, 103102, 51613, 12318, 52370, 36191, 68245,\n    34269, 40445, 41354, 122901, 168604, 182500, 62012, 42557, 11259, 24428, 115113, 86345, 12362, 3909, 78430, 86852,\n    134602, 20459, 47853, 93879, 22577, 7659, 3688, 38555, 13349, 17381, 56715, 91639, 12493, 10895, 92438, 3142,\n    37057, 28928, 2004, 36427, 32268, 34222, 209974, 10432, 67436, 41989, 173518, 107930, 27079, 62729, 30908, 55558,\n    5828, 45031, 14902, 53546, 8204, 144263, 60255, 14520, 88212, 86582, 109589, 69356, 8064, 47449, 8505, 66558,\n    16886, 4844, 52817, 111260, 215129, 12941, 91118, 650, 20770, 6273, 73089, 40618, 62790, 2873, 35002, 14023,\n    97208, 19386, 102646, 36993, 143736, 135457, 35385, 113601, 17893, 32627, 84439, 100619, 56016, 6581, 57264, 172160,\n    45452, 111710, 203627, 70131, 24100, 322787, 1996, 35665, 70078, 22358, 90922, 83658, 4097, 63200, 58499, 14542,\n    99153, 52159, 6615, 12414, 63415, 31986, 16823, 1579, 65405, 137809, 8841, 16898, 48082, 259, 33014, 42375,\n    12260, 179850, 73667, 91389, 98882, 29532, 17311, 326251, 41092, 5928, 20742, 44964, 48019, 43505, 9317, 49265,\n    6643, 192712, 48424, 163487, 19861, 20113, 70848, 31928, 105333, 23685, 78563, 14638, 54755, 7158, 24142, 44018,\n    20774, 125255, 20331, 24280, 10163, 1285, 2336, 39851, 4299, 117269, 46714, 63816, 87779, 159624, 11731, 9971,\n    990, 137317, 108831, 50994, 74554, 162680, 23640, 131597, 146962, 170620, 34829, 91205, 21184, 1913, 63616, 18427,\n    93136, 156592, 17519, 67565, 115882, 138220, 78622, 88535, 18115, 2711, 33554, 109492, 54298, 971, 24914, 25863,\n    36363, 45715, 27099, 194995, 14299, 178181, 111488, 72395, 322385, 157719, 130787, 11897, 81843, 83999, 11369, 49280,\n    118604, 40922, 61332, 110343, 53407, 75639, 40582, 300440, 54722, 25637, 13694, 48248, 48278, 194521, 56203, 52779,\n    48783, 72627, 10953, 376, 16733, 280238, 26351, 230789, 15132, 25168, 137270, 3588, 63704, 73376, 94031, 74284,\n    19443, 159557, 9697, 39901, 13351, 119050, 15406, 146455, 3460, 29556, 75195, 37673, 102524, 92329, 47289, 98413,\n    15311, 100684, 56345, 7116, 95480, 11590, 7200, 167, 23610, 58426, 17730, 136656, 27944, 53151, 2701, 8824,\n    103124, 3017, 90744, 113588, 53216, 79736, 65940, 26931, 498, 29568, 80540, 143543, 21292, 1740, 59268, 16561,\n    180816, 42323, 50174, 40890, 52866, 10703, 57169, 4700, 17191, 4424, 93511, 49698, 166650, 26972, 48631, 165169,\n    82879, 69326, 202970, 4007, 2376, 231325, 139592, 22119, 62851, 37504, 68816, 58345, 67398, 186643, 43331, 277416,\n    53749, 15746, 23102, 17432, 4793, 151138, 48822, 54265, 48203, 198688, 14305, 54287, 2291, 18018, 113378, 123260,\n    7180, 97549, 87027, 120085, 2920, 76080, 8190, 102005, 5641, 64580, 14955, 59802, 54028, 58884, 19367, 81779,\n    412567, 85957, 97053, 103637, 78871, 29364, 27637, 141728, 4767, 30686, 112738, 130146, 42745, 12730, 105040, 14844,\n    232, 210944, 36581, 152317, 135543, 29744, 3129, 55647, 58149, 46319, 27265, 17499, 28005, 59948, 7170, 34138,\n    5702, 293047, 110892, 408, 91760, 218674, 18469, 46095, 81403, 14389, 4610, 35672, 73060, 11006, 74848, 104820,\n    118143, 190357, 20043, 105358, 141735, 5115, 27093, 45924, 123073, 52599, 29433, 9616, 238350, 78610, 24851, 58858,\n    26769, 31969, 24613, 18294, 4982, 32735, 39639, 143563, 112073, 202205, 12567, 4873, 88601, 44897, 81503, 101648,\n    81362, 34662, 85277, 17574, 48173, 21435, 221188, 40215, 39576, 80786, 26544, 64668, 81841, 10731, 37733, 247986,\n    149188, 127703, 495, 18382, 54388, 72446, 43071, 30974, 198723, 89608, 41360, 190, 33045, 8386, 31658, 19992,\n    237838, 119015, 137622, 50890, 100913, 6460, 116233, 267230, 26621, 104129, 65114, 14190, 41542, 14888, 85962, 23342,\n    23041, 26453, 43725, 71809, 45186, 4770, 46452, 53894, 56616, 221286, 18973, 9038, 109299, 55365, 19366, 26863,\n    18808, 60909, 69353, 41738, 83463, 12100, 68561, 72860, 3980, 13796, 49340, 12332, 31311, 27418, 4255, 53430,\n    18976, 45523, 510, 14224, 30477, 26581, 4530, 3651, 101663, 139840, 22709, 150861, 31996, 63923, 120623, 262522,\n    3076, 10528, 2929, 14672, 130238, 18087, 9816, 121894, 100308, 25085, 55111, 14565, 18952, 53293, 2042, 369988,\n    23674, 61789, 133529, 28783, 108293, 35477, 47119, 36448, 71049, 40015, 33055, 78598, 198442, 1833, 159937, 40654,\n    77444, 189245, 113153, 8621, 18599, 38553, 35223, 166072, 2375, 11659, 21786, 89523, 6032, 12116, 63046, 159398,\n    18454, 3678, 32521, 47626, 11411, 103527, 38896, 42946, 15696, 26370, 10185, 8413, 37080, 165583, 4331, 63555,\n    14907, 72220, 50056, 6623, 62236, 36565, 49783, 10049, 17503, 100581, 55951, 146244, 24724, 9626, 17969, 25524,\n    109300, 173965, 99994, 101056, 46459, 43647, 53737, 277968, 8347, 123521, 74858, 33829, 44762, 77574, 877, 81377,\n    222525, 123532, 30602, 43881, 53145, 2973, 16284, 81940, 61281, 127044, 63620, 9875, 14756, 114829, 19032, 9202,\n    52759, 119141, 23928, 120551, 19607, 3599, 33401, 76821, 73233, 117430, 39968, 36539, 7071, 5446, 121735, 194059,\n    15206, 45283, 6706, 15603, 65615, 1207, 165723, 92275, 34773, 104447, 8396, 32353, 205240, 164323, 13600, 60555,\n    79205, 25532, 22907, 33410, 57480, 107111, 69630, 32137, 47832, 70913, 33161, 20321, 2371, 117348, 10714, 86246,\n    1625, 11763, 17900, 268, 78457, 99175, 97940, 101092, 86660, 32221, 14041, 128504, 125080, 53744, 124263, 31017,\n    13897, 403, 31859, 21964, 5633, 111630, 5547, 77329, 17961, 18241, 84995, 25984, 12983, 67491, 62168, 47262,\n    5241, 297, 51191, 7351, 8967, 147212, 82060, 16821, 782, 11033, 82431, 62957, 5026, 43459, 77963, 203477,\n    53528, 6247, 191852, 87774, 74164, 215654, 13467, 1522, 219964, 28589, 244104, 16242, 117821, 67725, 72570, 156792,\n    17186, 15979, 26990, 44128, 193014, 35276, 57125, 16212, 166451, 68017, 6905, 77608, 16364, 53777, 75921, 76426,\n    37975, 26203, 269296, 64099, 84122, 12077, 38533, 830, 4407, 20139, 963, 43028, 38902, 42911, 37503, 83343,\n    85045, 16979, 1165, 60835, 137387, 58380, 86990, 110066, 134540, 56331, 193845, 81238, 17922, 163093, 38744, 110641,\n    12502, 56404, 34862, 26865, 125964, 12965, 111648, 25547, 7771, 27196, 136980, 9555, 29551, 107158, 57885, 18831,\n    37705, 35505, 101742, 13970, 102109, 62548, 124657, 23328, 11124, 89592, 146376, 248050, 6241, 22033, 18337, 80685,\n    29898, 11908, 216623, 67721, 106162, 146610, 21377, 15085, 91552, 42041, 62560, 122532, 125336, 102365, 121537, 142559,\n    29693, 223919, 11515, 110495, 18776, 22494, 5895, 185059, 103592, 229351, 51220, 100102, 37027, 257855, 29359, 54123,\n    36066, 106493, 12244, 79258, 32002, 432, 56205, 94836, 90182, 6726, 14762, 29391, 48938, 26864, 38083, 60364,\n    3310, 60192, 14766, 205567, 57504, 110760, 22649, 24666, 46333, 21517, 3430, 13135, 28873, 27052, 158809, 11597,\n    20529, 6695, 23138, 22960, 37137, 45574, 6545, 305877, 43423, 26153, 24769, 59844, 14501, 10430, 134352, 56169,\n    13213, 103432, 49523, 35181, 13435, 12408, 129475, 64620, 230854, 77390, 51990, 15653, 83248, 33466, 44571, 117828,\n    51481, 2187, 10559, 68019, 18021, 54895, 48247, 18354, 33737, 4554, 108595, 37288, 39767, 116707, 9175, 3726,\n    108877, 21616, 83684, 49862, 1938, 8543, 276466, 20134, 108498, 48770, 102254, 31914, 131520, 185291, 100559, 51890,\n    209, 19526, 76471, 50544, 71814, 99351, 8172, 198526, 28816, 20419, 9109, 98389, 136777, 76479, 75596, 30635,\n    165417, 48216, 120220, 25955, 211071, 39314, 24308, 32164, 2559, 146280, 43403, 9233, 17947, 90585, 1786, 86920,\n    125662, 2457, 64741, 32152, 32918, 122882, 78538, 44001, 31723, 56426, 23375, 103172, 88177, 145697, 52506, 49319,\n    68016, 31664, 41488, 18486, 110400, 7030, 28241, 986, 109199, 19900, 42147, 56864, 65287, 49183, 7858, 24000,\n    30453, 840, 16673, 25907, 68916, 89927, 6309, 158335, 36407, 199737, 130464, 13137, 59603, 201778, 195292, 21015,\n    42466, 179062, 172561, 89492, 11075, 180407, 31868, 72493, 20998, 60217, 9865, 19530, 39274, 130266, 54539, 21623,\n    12535, 13505, 40641, 73375, 4087, 85633, 2153, 3117, 70680, 55788, 92096, 47509, 98493, 37490, 271936, 151475,\n    3032, 16171, 96642, 34106, 78425, 125761, 19591, 3366, 19316, 54508, 24183, 50786, 194248, 91528, 33253, 34622,\n    108355, 41741, 705, 3814, 3883, 108929, 13203, 67831, 10142, 59754, 68208, 29128, 84820, 56880, 38794, 24972,\n    48571, 40821, 40476, 18137, 164254, 24064, 236309, 79181, 11282, 395, 39169, 2013, 51587, 28551, 9645, 701,\n    109513, 115899, 113566, 12762, 62045, 58322, 103726, 41343, 40866, 244102, 143816, 2490, 70346, 40973, 52618, 15412,\n    30720, 104315, 38917, 42027, 93676, 17513, 107418, 20706, 123890, 13399, 97727, 24044, 87962, 65606, 44250, 98044,\n    65276, 74790, 101473, 19350, 91570, 1326, 87790, 172042, 7577, 100813, 86896, 85891, 41512, 108130, 27794, 14875,\n    71431, 12835, 156250, 58135, 3759, 22476, 42176, 115873, 34686, 56523, 73643, 108505, 51491, 20838, 12721, 32863,\n    45700, 29496, 13700, 34294, 55360, 29206, 155942, 123812, 7706, 163234, 203, 132720, 49358, 144431, 8130, 175788,\n    35818, 3270, 76832, 25710, 54095, 97274, 28779, 94621, 74396, 19092, 128242, 58067, 20885, 14670, 93255, 15107,\n    63291, 23654, 126900, 129421, 59294, 262659, 9798, 3251, 67344, 28600, 44629, 50672, 29072, 26999, 31526, 23183,\n    49175, 165843, 175455, 17282, 175411, 32022, 45989, 30298, 90690, 78118, 83156, 23749, 35636, 31317, 7069, 80381,\n    94561, 133756, 14960, 97404, 6138, 41065, 78041, 32843, 16601, 34123, 9559, 146529, 123377, 96395, 54441, 42012,\n    84257, 123541, 10745, 22139, 106459, 11720, 150883, 172651, 154996, 110538, 4728, 53447, 25704, 2009, 71152, 119354,\n    21166, 66604, 1429, 216162, 8637, 122250, 63520, 27180, 29172, 36124, 276428, 107787, 77184, 4680, 14952, 104903,\n    24418, 14793, 51561, 52931, 8371, 26342, 48526, 7118, 92066, 67280, 40653, 8847, 34597, 105438, 14198, 50163,\n    61188, 146286, 50315, 41205, 170829, 161496, 585, 197359, 95056, 1687, 365794, 91349, 48507, 5804, 49263, 5146,\n    104902, 96365, 117343, 132222, 46084, 96919, 16875, 8073, 262381, 79982, 52663, 13928, 16056, 153908, 15145, 109256,\n    132308, 18763, 24904, 167644, 13618, 40750, 18686, 147124, 114709, 150038, 52849, 2938, 12568, 48617, 8778, 5459,\n    44202, 44591, 74914, 17183, 248689, 13878, 7822, 80060, 23116, 194037, 18487, 2067, 7798, 43077, 33678, 244028,\n    31320, 74273, 2794, 19466, 8218, 36280, 183997, 48124, 19416, 29656, 19280, 98734, 7715, 18311, 30701, 133602,\n    150307, 126956, 7378, 2933, 79903, 13178, 12593, 86571, 26604, 92446, 13574, 44205, 65699, 427599, 21118, 8245,\n    14407, 27877, 47936, 33542, 7916, 26460, 117762, 21596, 37818, 2249, 127359, 209394, 60044, 47677, 308089, 36791,\n    154971, 31417, 6998, 150042, 174360, 12255, 43009, 29335, 48739, 3912, 101398, 53340, 2580, 146939, 151295, 45360,\n    125275, 15273, 45383, 27456, 48761, 23314, 8750, 60801, 85823, 104759, 27894, 123685, 66968, 39480, 26917, 55290,\n    83305, 2696, 98390, 57569, 145853, 340733, 4919, 20024, 52268, 30884, 7413, 203685, 70989, 112855, 4129, 50536,\n    349518, 68205, 332641, 159581, 135361, 236026, 37563, 176404, 64899, 6578, 122033, 63871, 1850, 85234, 82089, 66124,\n    74145, 121098, 107351, 12687, 36881, 117334, 13136, 14698, 85933, 93866, 18047, 32620, 310, 15094, 46000, 88451,\n    23632, 36645, 27940, 87618, 80520, 58892, 20976, 27702, 140090, 96075, 67841, 103292, 238964, 87778, 107338, 17019,\n    83427, 67522, 7302, 8261, 47570, 116787, 8730, 80484, 61772, 174422, 56005, 131193, 52875, 14588, 28471, 59817,\n    9586, 15720, 158155, 51307, 109734, 15196, 11025, 59331, 3884, 52626, 102602, 84797, 25158, 27314, 4437, 20488,\n    76214, 189248, 35023, 114952, 157376, 2827, 62439, 102878, 129749, 36405, 10329, 109339, 108633, 36662, 1254, 13267,\n    5470, 87105, 58004, 15397, 10434, 159667, 21864, 52022, 179464, 3013, 32147, 31496, 116832, 18494, 105502, 129227,\n    107267, 50033, 13481, 9954, 24267, 22141, 16257, 116154, 36185, 950, 115685, 11305, 176708, 2048, 178671, 112573,\n    287867, 162328, 497663, 95170, 50979, 193861, 50987, 30368, 136257, 31830, 46549, 15119, 169876, 23788, 17462, 249887,\n    57377, 1949, 35448, 14791, 43769, 210091, 3783, 34612, 282103, 88380, 245190, 5457, 20491, 98908, 11402, 86899,\n    117916, 16028, 162584, 60644, 320177, 156096, 31065, 55876, 22000, 77655, 9992, 23397, 13757, 317623, 63978, 215255,\n    2443, 17648, 93231, 27388, 104529, 93807, 55505, 140477, 12046, 112040, 70887, 40152, 94365, 112353, 25063, 114679,\n    266061, 71248, 119555, 15589, 2244, 617, 14129, 211431, 70110, 100652, 7777, 4383, 85911, 89221, 21010, 120615,\n    58357, 86405, 37554, 41647, 18, 15143, 69662, 60491, 14714, 186134, 148344, 42347, 5410, 168175, 44535, 42449,\n    343894, 129417, 99682, 20659, 27272, 140483, 63455, 222159, 17536, 13722, 42637, 62324, 11976, 114691, 148109, 2283,\n    32057, 182393, 4295, 147364, 33705, 2075, 44303, 30274, 28331, 63740, 69740, 29148, 10346, 44862, 33716, 73937,\n    153333, 12930, 38784, 247159, 2515, 41053, 20256, 83368, 256189, 54639, 115240, 5096, 24661, 175419, 153552, 26516,\n    141, 138176, 63885, 34115, 47222, 55709, 2765, 28479, 38875, 236608, 12229, 22921, 77291, 54426, 45388, 2860,\n    57787, 114579, 295139, 105782, 17826, 71066, 19119, 54364, 69385, 16568, 12323, 28057, 33346, 34919, 124763, 155533,\n    101386, 31644, 8627, 49001, 303600, 29868, 63213, 9103, 77280, 71333, 9696, 138789, 37059, 24823, 5057, 21352,\n    32368, 114208, 56803, 19424, 10445, 58514, 8661, 209508, 26187, 171838, 10460, 63454, 14016, 122504, 41328, 21329,\n    46618, 32493, 38225, 7855, 31763, 7945, 29876, 8734, 6438, 24205, 97490, 139977, 130740, 47323, 33195, 85390,\n    57194, 13813, 60600, 21313, 96251, 7699, 27584, 170521, 139271, 1363, 4402, 336738, 129223, 84983, 69150, 13147,\n    3590, 163929, 207225, 155260, 55916, 20288, 4503, 8398, 98490, 11773, 27512, 37113, 84976, 86558, 28365, 11756,\n    116005, 182148, 13733, 115313, 47644, 67208, 85069, 9347, 14995, 226141, 14704, 101835, 41159, 35314, 13113, 63526,\n    214039, 29978, 50446, 83339, 17440, 129441, 72522, 118641, 97816, 24907, 73844, 15717, 118884, 167255, 96509, 162793,\n    30847, 36849, 51297, 78974, 77793, 10427, 1873, 2972, 9999, 35074, 28190, 64297, 146836, 46298, 60038, 163007,\n    108919, 61219, 2403, 75022, 127339, 4233, 110389, 69022, 9833, 128097, 88016, 79390, 222936, 22570, 94657, 28462,\n    56956, 38803, 81536, 30474, 152794, 19566, 16481, 147408, 74574, 81895, 20731, 1918, 1366, 76367, 187321, 54494,\n    24366, 21690, 61696, 33283, 107477, 77499, 31112, 414383, 74362, 18463, 218441, 120929, 59848, 258629, 201924, 69269,\n    454, 19989, 13054, 59894, 3623, 58908, 20681, 35723, 78523, 102680, 38988, 184112, 108087, 50944, 132704, 52966,\n    21699, 18860, 96349, 201411, 82697, 85395, 95658, 5093, 6427, 177894, 44191, 32755, 26961, 155739, 6249, 31310,\n    81030, 26574, 84311, 120155, 86730, 113535, 7424, 48888, 13516, 45747, 98098, 20077, 183995, 81945, 43210, 26704,\n    40420, 75831, 45648, 11180, 6855, 57927, 65528, 124096, 34851, 2598, 156633, 107572, 127352, 38169, 123845, 60142,\n    62722, 105584, 232364, 23211, 68120, 1601, 22169, 89299, 747, 258039, 80572, 7258, 152249, 11862, 101204, 8834,\n    121434, 33761, 19175, 133142, 46343, 40178, 48723, 3589, 41977, 30210, 38868, 62257, 10087, 82658, 87827, 90646,\n    16415, 47552, 351723, 28298, 72225, 91146, 272760, 1701, 11295, 1652, 109651, 300747, 51863, 198800, 29446, 11794,\n    32345, 37538, 22356, 33102, 37590, 113544, 37970, 11478, 179743, 25454, 103417, 59905, 221970, 105196, 145604, 7817,\n    164809, 102360, 16974, 75840, 255333, 56902, 6659, 1954, 645, 59400, 67769, 7689, 18675, 5215, 13793, 20536,\n    27852, 3387, 29523, 259718, 16860, 94625, 43143, 29245, 15848, 233581, 22685, 63631, 78557, 22836, 133302, 84513,\n    1348, 51826, 47129, 98836, 58284, 1830, 1749, 94642, 10933, 6145, 12506, 10975, 13879, 103781, 144434, 10268,\n    28409, 32346, 52968, 121567, 107374, 77268, 23686, 35097, 10501, 155275, 15303, 47136, 21102, 168741, 55332, 90385,\n    15996, 84817, 681, 137803, 25054, 142275, 6163, 38175, 8056, 124296, 240642, 65621, 4934, 178205, 16101, 62803,\n    60964, 18230, 100622, 76465, 44689, 14545, 9543, 47514, 16852, 93380, 28048, 12047, 107106, 37575, 101485, 77047,\n    57326, 34819, 96137, 76916, 6469, 46264, 115983, 75768, 87668, 69942, 13027, 165, 8373, 114231, 26434, 52844,\n    42799, 182044, 23580, 146254, 38081, 43236, 33883, 146220, 382894, 14606, 46035, 36481, 166621, 35417, 95382, 2957,\n    59384, 60428, 36358, 66343, 75378, 22267, 22950, 83528, 17577, 56474, 25285, 4619, 179691, 75355, 95836, 53295,\n    34588, 171410, 4487, 14679, 84208, 44015, 18562, 109133, 54101, 11531, 86052, 174479, 303157, 28095, 9953, 35642,\n    14564, 39802, 16145, 77606, 117406, 53038, 121117, 53624, 22062, 1212, 7632, 127157, 237292, 189087, 10478, 127345,\n    102515, 181997, 86752, 87623, 10966, 121602, 68783, 68681, 83042, 114380, 138349, 191305, 67176, 50085, 39016, 1427,\n    42384, 1412, 67118, 122616, 72389, 25260, 2237, 13576, 137346, 19938, 20304, 2191, 68759, 5373, 61364, 238507,\n    75814, 23931, 69565, 38993, 131741, 38364, 12528, 87762, 5679, 129853, 5310, 186831, 32653, 90338, 260176, 389531,\n    108118, 26843, 43985, 50175, 30563, 25106, 56965, 18130, 140428, 4542, 165503, 117991, 24219, 229605, 1819, 129663,\n    1240, 3797, 76093, 18398, 71339, 51919, 93043, 27175, 47060, 216257, 6483, 35051, 1217, 16512, 80798, 129064,\n    13225, 69339, 8548, 237079, 72298, 2575, 34280, 51379, 117910, 55671, 53345, 247552, 29486, 39328, 140821, 34681,\n    57045, 60177, 5004, 90269, 78522, 2479, 322607, 48474, 61296, 13057, 31558, 4678, 59271, 6699, 27044, 31988,\n    35944, 12503, 83480, 4389, 136508, 3781, 114121, 70279, 4488, 155829, 42214, 2898, 68191, 75695, 305850, 45041,\n    74344, 106509, 30087, 17429, 93292, 12477, 290, 23080, 114802, 35714, 18751, 26554, 105424, 17775, 2144, 2412,\n    100610, 65192, 113975, 52975, 180272, 135050, 129815, 76238, 106483, 21440, 63186, 4260, 46189, 9711, 28249, 4169,\n    23429, 23390, 8324, 141585, 63809, 67668, 38457, 38063, 39226, 59972, 1189, 203916, 62368, 14403, 16949, 61767,\n    85801, 1739, 40147, 35049, 76757, 33124, 62102, 15780, 103593, 103009, 53484, 22952, 67973, 114645, 6566, 5245,\n    50462, 7601, 8288, 3513, 194571, 80276, 1908, 54592, 5124, 58571, 2513, 6800, 273997, 193904, 1119, 17991,\n    117245, 2508, 129156, 82366, 26278, 71465, 63341, 56943, 39662, 106116, 94966, 156875, 9736, 2204, 122308, 94418,\n    27134, 1280, 24539, 49022, 45314, 3764, 50904, 46424, 30699, 28087, 293839, 9400, 33646, 40165, 822, 147499,\n    50263, 116179, 29085, 11863, 31314, 5578, 17797, 5104, 12454, 1604, 15342, 219206, 10232, 67800, 94261, 25872,\n    13565, 90339, 78971, 75377, 26649, 41184, 47695, 11514, 35369, 20767, 14227, 41953, 309396, 148270, 147938, 33074,\n    14453, 27499, 109019, 39018, 25738, 240196, 158931, 52820, 8612, 95853, 21524, 137010, 84901, 70869, 70021, 116794,\n    48404, 38771, 6732, 1070, 70990, 187297, 49140, 5238, 576, 3564, 253975, 16027, 16483, 2811, 37775, 19034,\n    25259, 4053, 2000, 70083, 95774, 19713, 33431, 92703, 91314, 42381, 288770, 48194, 95985, 3991, 77418, 13406,\n    241328, 245086, 56533, 35275, 62725, 9246, 51924, 70181, 95331, 16163, 31410, 79016, 39312, 120878, 119371, 275987,\n    80124, 27712, 9186, 220, 23598, 146167, 85209, 68238, 282190, 57048, 31273, 30555, 80913, 17594, 75779, 59160,\n    135002, 101219, 189377, 29225, 96735, 60126, 62522, 104000, 27620, 86814, 17240, 147533, 11001, 5425, 43682, 410,\n    49460, 87270, 69480, 46315, 59448, 1816, 76201, 9431, 11788, 87960, 29063, 65539, 47347, 11678, 33846, 7008,\n    196704, 9895, 6753, 8633, 120892, 59970, 572824, 115934, 6646, 202559, 892, 48351, 37611, 251282, 57823, 67263,\n    57750, 26527, 34485, 90747, 7685, 88370, 6144, 64182, 1709, 41969, 21458, 62327, 181657, 49247, 225330, 122600,\n    114574, 107124, 85361, 111833, 63243, 71420, 15655, 191178, 72430, 18063, 51425, 54002, 12364, 53225, 86557, 18193,\n    97580, 41232, 138398, 67821, 128724, 8944, 233212, 101353, 52099, 42127, 14006, 120107, 32789, 32132, 3498, 18123,\n    33758, 56058, 5779, 128760, 59888, 98869, 18445, 84702, 51911, 13234, 218379, 20093, 39031, 8074, 70195, 20708,\n    23462, 24355, 131384, 60189, 26390, 10403, 41060, 7140, 10781, 49410, 42261, 87202, 82566, 41663, 43105, 60276,\n    2768, 5733, 74176, 28329, 2297, 145430, 131632, 83615, 122915, 105441, 655, 224102, 5284, 136426, 67763, 16294,\n    188511, 32538, 61049, 27893, 3394, 13951, 159099, 28542, 17930, 145360, 9492, 190122, 32285, 78855, 26440, 13570,\n    58648, 73908, 4239, 124561, 2444, 74172, 53131, 11468, 10794, 73566, 11623, 35343, 64710, 30481, 4163, 10328,\n    38309, 29901, 10538, 154377, 76132, 92405, 24839, 11679, 3465, 13449, 11637, 7824, 2337, 57754, 1260, 14458,\n    41118, 19878, 38661, 13416, 159180, 37074, 163164, 54137, 28627, 52134, 184900, 8520, 40385, 29546, 30502, 22386,\n    66527, 107458, 6850, 24022, 47983, 30603, 35083, 8934, 304066, 39500, 9, 28261, 33026, 77251, 9374, 44833,\n    116312, 34990, 29236, 63563, 125639, 135405, 165398, 159055, 55690, 88141, 69643, 236964, 31983, 25572, 20436, 36746,\n    60896, 31850, 16179, 11828, 5888, 3043, 66368, 9750, 31167, 7915, 53111, 36430, 1333, 64344, 93659, 20061,\n    60596, 180191, 51630, 6792, 30244, 43509, 101058, 22409, 420, 44210, 109783, 43223, 27030, 72477, 72831, 32679,\n    29235, 7675, 47556, 12258, 39907, 149412, 84926, 118247, 24692, 71717, 105038, 86009, 45941, 41189, 89453, 29856,\n    52543, 30627, 226798, 67303, 59230, 67415, 34408, 1367, 99685, 16867, 128419, 52147, 4111, 125381, 117881, 16173,\n    44093, 102224, 31575, 23234, 24870, 83790, 127407, 239098, 3200, 994, 1255, 100903, 242275, 117266, 55116, 38205,\n    16140, 29662, 11307, 40414, 208793, 123355, 56470, 4862, 75600, 30119, 58218, 70828, 24075, 26974, 7802, 192353,\n    4851, 5475, 78720, 66596, 3409, 28573, 64396, 30381, 30690, 59859, 88256, 5406, 99945, 103064, 34463, 37727,\n    24238, 86643, 60088, 4057, 23741, 5967, 162904, 38240, 28356, 93858, 25510, 122879, 6897, 3278, 7057, 11971,\n    4400, 35461, 211413, 21395, 59615, 39471, 87233, 55795, 128426, 3051, 22470, 41950, 14705, 3974, 180108, 80476,\n    78442, 204996, 91987, 15634, 67610, 139015, 142373, 35611, 51134, 10387, 4353, 153456, 57749, 181039, 14183, 68447,\n    151532, 21107, 36452, 20551, 3186, 46247, 46383, 129666, 88736, 140662, 146243, 2066, 8360, 7978, 64818, 106963,\n    17896, 47801, 10723, 114821, 223295, 74192, 3293, 3393, 16987, 74064, 11277, 91622, 4270, 29828, 27951, 387869,\n    103235, 1374, 61988, 120083, 477, 145892, 128378, 11779, 211263, 61354, 18221, 17869, 46530, 83061, 108538, 157981,\n    90608, 67199, 95080, 49064, 195814, 12302, 66307, 10348, 231346, 160732, 112859, 63633, 146558, 21271, 31037, 198802,\n    47622, 12862, 95710, 3910, 77850, 73961, 85585, 34752, 61000, 4082, 24595, 103679, 71107, 8208, 79568, 150019,\n    16615, 24961, 139857, 32664, 197366, 4559, 54735, 32696, 4126, 162019, 75698, 13916, 70108, 159638, 19834, 9349,\n    24675, 175560, 49643, 18206, 52459, 27992, 10809, 88865, 401975, 133172, 29000, 34558, 30915, 3658, 25834, 42430,\n    36562, 125265, 18182, 10155, 40149, 97082, 208980, 19575, 60853, 90529, 66545, 9600, 789, 46420, 2317, 88593,\n    55595, 98980, 115302, 5742, 169155, 1073, 177901, 3472, 11189, 63711, 78643, 65472, 50459, 127979, 93, 42202,\n    67053, 21720, 157650, 11145, 141378, 42033, 22824, 85705, 79114, 35584, 15974, 1510, 54172, 28562, 12451, 104226,\n    19190, 97151, 73024, 20948, 5151, 81741, 21499, 29006, 84183, 198074, 54003, 45120, 170125, 26240, 35177, 28389,\n    64863, 79974, 60778, 176915, 232183, 45342, 2038, 80253, 41564, 40703, 32689, 5430, 100689, 5366, 23007, 134279,\n    14266, 26712, 73993, 24934, 64242, 52113, 102887, 61801, 46415, 201049, 54251, 62133, 122757, 164883, 30815, 139966,\n    2319, 30842, 766, 13362, 10287, 134518, 86111, 81665, 82440, 28333, 43019, 18963, 8804, 161944, 23439, 102144,\n    101145, 80029, 39052, 248708, 30350, 117340, 11878, 128467, 974, 138625, 63961, 5237, 74778, 61834, 67040, 43814,\n    13690, 65947, 33809, 232476, 115258, 181745, 28824, 94013, 9510, 10246, 93722, 81976, 7217, 114383, 3493, 16014,\n    69045, 72692, 12145, 80981, 9507, 6692, 1620, 60820, 330444, 35474, 33962, 4797, 7053, 295463, 46445, 27026,\n    12491, 77988, 49524, 35675, 90947, 29114, 166705, 101385, 133782, 32704, 6186, 84595, 176031, 185623, 45966, 151302,\n    63069, 1699, 107491, 947, 15458, 74452, 196212, 6046, 10498, 12163, 10239, 35191, 243951, 9277, 9090, 29539,\n    54460, 22820, 26514, 112549, 60372, 51753, 48756, 21812, 70861, 260326, 41, 44222, 10441, 16961, 48148, 138771,\n    216194, 5914, 52153, 53400, 212036, 56519, 26245, 10117, 45888, 15294, 138019, 90913, 26368, 43842, 42111, 23348,\n    6082, 194845, 161089, 156206, 51546, 11647, 30759, 302912, 262094, 8635, 78876, 26535, 35283, 54183, 31183, 85484,\n    147873, 12989, 5197, 6356, 72894, 65347, 20150, 27370, 73787, 1493, 45918, 12366, 190217, 20724, 13858, 10981,\n    67449, 81213, 7553, 14115, 72242, 271517, 11842, 48310, 88743, 143726, 22177, 3290, 243231, 58452, 62937, 12592,\n    1654, 40066, 33477, 13751, 9921, 128442, 15868, 7106, 75236, 83773, 10775, 36938, 10482, 170465, 17368, 17469,\n    161508, 32752, 98340, 800, 19824, 264456, 3901, 87319, 2867, 26782, 9630, 113102, 185815, 24197, 44584, 86366,\n    40224, 3636, 140916, 31731, 267731, 9567, 53678, 72984, 29389, 27963, 17106, 50282, 284911, 60170, 8322, 12608,\n    23374, 89652, 5268, 39044, 229766, 8869, 151350, 31436, 177342, 12269, 183212, 120418, 116270, 2843, 78888, 69192,\n    7865, 184099, 1086, 129897, 18383, 70508, 20242, 18508, 229924, 124569, 35749, 50589, 55626, 9884, 83115, 40971,\n    30671, 18135, 14452, 38861, 17844, 201826, 5549, 26413, 17189, 13561, 38539, 10679, 143331, 3314, 36785, 171194,\n    49685, 187713, 67506, 4618, 104039, 17060, 195080, 50648, 33159, 19238, 67559, 134840, 28599, 157523, 17130, 38064,\n    117398, 94355, 31918, 13575, 34538, 40326, 13997, 3494, 348283, 62481, 26862, 3603, 104426, 244363, 153709, 112487,\n    304612, 199674, 41239, 35545, 54869, 293005, 28223, 26277, 26899, 4533, 18518, 15492, 38587, 80488, 70485, 160395,\n    263, 60162, 11382, 222152, 4696, 250751, 51921, 182609, 10707, 48463, 46243, 1227, 49111, 111564, 46502, 33342,\n    56846, 68541, 63559, 858, 139927, 16654, 229375, 76759, 26478, 33205, 95828, 23399, 92945, 2637, 35630, 28470,\n    143992, 50214, 14174, 21456, 166191, 65665, 1711, 21594, 78019, 97599, 111701, 36, 147151, 110246, 189022, 43021,\n    30397, 40757, 131935, 42065, 73335, 48039, 26596, 28984, 15102, 2361, 7421, 202167, 69744, 43766, 52826, 3642,\n    83304, 33873, 75140, 63169, 192389, 36551, 92748, 13039, 123959, 233220, 21738, 84447, 77230, 20228, 187852, 19095,\n    25799, 92136, 108774, 29237, 53947, 2299, 118106, 2687, 8830, 42331, 202924, 33667, 2023, 73763, 30704, 19363,\n    19779, 16737, 35629, 48081, 24068, 101013, 162338, 291912, 13749, 24745, 328289, 167679, 70086, 48299, 23306, 16732,\n    17801, 43322, 54589, 3586, 63653, 43624, 53474, 925, 109177, 251316, 43805, 13082, 19511, 86565, 142182, 92461,\n    17117, 101033, 103319, 64589, 4022, 4351, 235897, 5352, 82705, 107142, 46391, 156084, 5860, 61365, 10558, 13045,\n    7717, 18357, 33922, 12590, 33065, 6928, 46993, 783, 46937, 67846, 8952, 26295, 6107, 119656, 18799, 17458,\n    50747, 4229, 179559, 112727, 118080, 20683, 41464, 125468, 51560, 49749, 44231, 7359, 35339, 62988, 136487, 67015,\n    5208, 29150, 24956, 105186, 48858, 6143, 18097, 6972, 16404, 73489, 58742, 97196, 36357, 164616, 5834, 32267,\n    13746, 147733, 15113, 132091, 34127, 106298, 39729, 106426, 22294, 9780, 15602, 36213, 71502, 42808, 66802, 599,\n    60755, 5851, 39120, 67363, 108623, 126368, 72770, 91263, 32486, 30596, 151717, 7951, 52002, 43103, 11768, 68942,\n    40901, 39344, 24037, 127500, 116890, 48403, 16926, 86750, 17745, 48648, 159545, 34460, 58419, 5634, 114317, 67865,\n    31462, 23352, 24010, 98185, 125708, 69686, 68337, 13610, 26271, 70691, 2980, 4768, 27225, 102402, 75453, 28106,\n    8104, 6931, 1176, 6274, 6475, 112635, 22498, 6176, 238686, 26832, 28893, 90319, 14441, 15682, 15087, 39517,\n    45270, 109134, 104440, 45965, 47645, 81772, 7876, 52683, 87720, 12898, 4505, 185665, 2769, 113401, 15664, 57592,\n    105229, 137381, 97059, 119268, 6876, 43309, 33886, 128363, 35476, 144249, 67013, 143587, 83367, 25703, 91436, 59347,\n    53236, 2289, 16519, 19844, 46309, 58558, 99834, 23313, 218816, 231303, 36388, 51333, 183535, 109792, 139277, 54306,\n    90139, 18235, 8275, 32710, 37677, 82464, 86025, 92204, 88842, 117723, 37570, 128723, 234242, 76350, 73795, 34896,\n    148247, 58424, 11105, 11744, 45746, 63372, 17118, 49772, 199520, 81902, 38004, 22911, 33752, 3125, 1995, 53792,\n    4689, 26909, 108150, 146062, 69674, 41811, 161444, 84855, 8999, 28561, 16731, 93937, 3189, 21967, 24890, 22943,\n    1356, 145300, 51569, 28802, 517, 118679, 31703, 40607, 48098, 108854, 25003, 10233, 73969, 177495, 5248, 24516,\n    215347, 146192, 48712, 60626, 69188, 40735, 5866, 586, 101541, 6509, 47590, 52129, 5969, 222045, 110933, 25733,\n    24223, 65339, 62812, 2414, 155418, 35819, 16022, 78423, 43138, 20995, 128255, 240673, 46745, 236093, 72176, 57085,\n    97841, 61248, 107, 36068, 193177, 105427, 55726, 215229, 20446, 47228, 100420, 87091, 14429, 121708, 23605, 21157,\n    187721, 21880, 2997, 203976, 99166, 95068, 25877, 7724, 98925, 83401, 4829, 13182, 18229, 13718, 239662, 38653,\n    116505, 153497, 30589, 89029, 38962, 181302, 43853, 78872, 180301, 4786, 248240, 7401, 106136, 112590, 77745, 19731,\n    60880, 77789, 125748, 135487, 5975, 48627, 34084, 12419, 215770, 47557, 254582, 10364, 106495, 21856, 67539, 88981,\n    38805, 21428, 48732, 42316, 12149, 16078, 52808, 25327, 51322, 33850, 51147, 12253, 122354, 46077, 56483, 254553,\n    115417, 81834, 150991, 94662, 86668, 7381, 12841, 100650, 18218, 15741, 22372, 68294, 50705, 15535, 84660, 61887,\n    22553, 72299, 31361, 24824, 17743, 46820, 64288, 31582, 77006, 111674, 116384, 30760, 80920, 86149, 77192, 51979,\n    79691, 60342, 122805, 103800, 240873, 160744, 233114, 78962, 54920, 8608, 3484, 316104, 72548, 24337, 5088, 230040,\n    21926, 10172, 36838, 26, 86221, 83458, 102176, 12062, 17571, 41929, 41170, 28428, 68239, 41750, 103930, 2634,\n    18313, 53019, 34825, 97837, 63115, 24606, 73157, 152474, 14715, 91439, 37033, 109806, 140259, 30668, 174760, 380,\n    135597, 95673, 136073, 65073, 134249, 13829, 17279, 122305, 4420, 46444, 10237, 64848, 203623, 70728, 10349, 182885,\n    65075, 24519, 25783, 40318, 34139, 22222, 63394, 55266, 102764, 41422, 20126, 65100, 90408, 53640, 35128, 48932,\n    11192, 38935, 96839, 34782, 39492, 19396, 41332, 6250, 5511, 19492, 51304, 25936, 104466, 54099, 73771, 86115,\n    5080, 7669, 30891, 111700, 13931, 25276, 72289, 135447, 14820, 258641, 25265, 31005, 281179, 75286, 393, 95359,\n    14623, 13584, 6680, 101227, 80173, 44933, 76666, 54542, 13244, 39348, 458, 25379, 109451, 134348, 81143, 6959,\n    65554, 12027, 51311, 8716, 57589, 140731, 28467, 23316, 17272, 30458, 25980, 55229, 77197, 83798, 28302, 114784,\n    7428, 34548, 26241, 14712, 39336, 103304, 18928, 54080, 12870, 334, 87722, 15208, 16895, 142098, 114262, 39820,\n    83913, 57817, 28682, 7721, 14900, 108672, 11250, 62246, 42849, 415188, 1724, 26555, 24549, 25505, 26443, 107450,\n    145899, 61035, 43528, 6901, 60726, 65906, 267741, 21338, 147590, 42079, 18924, 73017, 135236, 15393, 5206, 4026,\n    84185, 1531, 5988, 113890, 82647, 303391, 7386, 69844, 71611, 189865, 76523, 31877, 13315, 19314, 198575, 32821,\n    1928, 67641, 25913, 104475, 103489, 3297, 70391, 18406, 15446, 113347, 19295, 93790, 27856, 1792, 167471, 116449,\n    8541, 4408, 41757, 63233, 25765, 86680, 64501, 27034, 24816, 34975, 6079, 4486, 49693, 36229, 16917, 21581,\n    62426, 27862, 11612, 54284, 35702, 194034, 355, 24277, 48262, 87411, 70504, 310164, 118018, 12516, 47559, 43502,\n    57433, 107139, 9290, 66533, 80863, 14634, 34312, 91725, 28606, 21342, 67241, 72355, 43244, 375789, 37402, 174015,\n    105070, 8342, 44167, 67494, 1890, 16365, 11723, 271002, 1865, 47918, 8350, 45564, 27742, 25110, 125803, 8553,\n    49504, 81925, 62211, 4534, 15491, 19011, 80373, 206920, 667, 102405, 128623, 245524, 5553, 113309, 192739, 65766,\n    19567, 22832, 261958, 29679, 21293, 71134, 20962, 105123, 24721, 860, 21752, 33448, 18372, 157167, 94822, 35770,\n    173224, 232737, 75729, 28937, 46828, 28062, 25453, 5207, 140366, 36665, 30652, 6169, 67920, 150458, 92040, 23186,\n    184604, 92330, 20891, 176492, 49427, 27828, 38305, 42495, 143982, 49560, 25503, 90043, 29747, 65328, 47830, 12932,\n    11068, 77721, 9003, 25213, 94205, 140426, 46090, 89945, 138173, 192691, 33329, 112232, 129905, 35709, 27514, 1841,\n    19957, 31411, 127476, 53572, 17497, 173549, 55063, 175135, 19841, 69314, 5192, 237921, 117660, 150697, 4060, 273045,\n    50414, 98940, 65348, 153665, 164423, 58804, 156695, 48994, 213928, 86036, 28608, 8355, 39574, 34540, 16927, 135680,\n    18374, 151587, 10830, 53805, 16878, 16623, 4282, 48030, 8537, 14986, 46102, 13062, 72897, 72, 33050, 108227,\n    39451, 45935, 651, 113320, 40535, 95176, 57450, 48843, 5003, 19019, 10407, 211163, 3848, 1068, 4988, 32091,\n    30095, 41692, 15099, 43602, 107434, 50744, 7627, 171349, 16313, 150832, 352665, 207750, 33937, 38256, 51091, 156000,\n    87889, 90663, 84175, 24908, 114900, 50365, 31494, 83829, 5398, 169342, 47521, 54818, 18935, 8356, 43094, 41212,\n    174536, 10082, 92550, 6678, 60614, 23355, 69721, 14796, 34149, 128830, 58187, 3179, 208, 40325, 28399, 225029,\n    401412, 51150, 31580, 207268, 6657, 10993, 69818, 64282, 289845, 23308, 12961, 38447, 6681, 52944, 31855, 2572,\n    47646, 120728, 179148, 37240, 45196, 218274, 4816, 3695, 21961, 50084, 35209, 18073, 51452, 27004, 6100, 33941,\n    1377, 84831, 171214, 85, 141510, 9078, 99227, 32610, 6417, 11718, 49868, 65579, 87902, 73018, 49062, 46280,\n    61742, 21512, 40862, 107733, 15941, 29168, 157765, 144919, 14487, 5767, 158014, 140070, 7241, 573, 71584, 16921,\n    223566, 40331, 179473, 35081, 47926, 140885, 41508, 52104, 59180, 42310, 32811, 29048, 123517, 102413, 80208, 10104,\n    14746, 12649, 153641, 126022, 37965, 113017, 4171, 83, 142592, 2809, 6362, 50416, 71323, 116894, 260776, 16204,\n    1524, 5760, 30351, 12658, 20703, 54403, 36083, 45408, 74772, 4946, 14485, 50759, 111222, 10890, 2195, 167147,\n    92962, 130534, 16283, 177256, 35016, 15472, 210156, 151187, 73922, 117691, 43250, 52051, 37392, 24811, 24358, 30830,\n    5775, 818, 21969, 1476, 127322, 151783, 58392, 31021, 106913, 65215, 89407, 90802, 28531, 11690, 20234, 95249,\n    44602, 37256, 18707, 11928, 5161, 4410, 26571, 51903, 49768, 22008, 25252, 65780, 209499, 68769, 203726, 13249,\n    137363, 48845, 86823, 6658, 5674, 31881, 1083, 1823, 108676, 34518, 166752, 13791, 14287, 91576, 91429, 8665,\n    11529, 26401, 16191, 91972, 30964, 5254, 28486, 54697, 79613, 66520, 18447, 22870, 45203, 194466, 22822, 51703,\n    12278, 76716, 44595, 73455, 33546, 12235, 144843, 36154, 51247, 11116, 33040, 3180, 225753, 60864, 1972, 28469,\n    12891, 28879, 10338, 144157, 56294, 353058, 38302, 41447, 87532, 110616, 27065, 168438, 6557, 1213, 50804, 144643,\n    24817, 2390, 136531, 38174, 247513, 16190, 4059, 122791, 131994, 137430, 39506, 57650, 16305, 5188, 54309, 106128,\n    20628, 88071, 67394, 395446, 250285, 66176, 91254, 1399, 114196, 43915, 60230, 44853, 27206, 106353, 43013, 18733,\n    345105, 226453, 51202, 16607, 57106, 117175, 35492, 10476, 89598, 127439, 15187, 39624, 13688, 61570, 10615, 31111,\n    59370, 6238, 175252, 32143, 224492, 41388, 95408, 34384, 148238, 78307, 38959, 9340, 160091, 61443, 15737, 11216,\n    41244, 170, 38299, 102443, 113097, 26382, 14027, 33707, 3957, 76300, 66160, 19431, 18900, 6952, 1717, 108656,\n    82206, 188021, 257335, 27295, 43999, 41210, 31777, 46956, 57457, 12657, 11489, 15697, 48060, 204748, 53583, 82422,\n    284790, 30503, 137341, 8120, 19615, 220311, 15991, 10217, 63424, 9808, 67431, 70976, 98221, 4491, 15177, 28535,\n    144789, 751, 13230, 2394, 1504, 33977, 132104, 30316, 22230, 931, 97193, 185240, 24826, 22687, 174322, 15307,\n    22988, 1390, 188745, 180325, 29580, 59068, 74903, 18994, 29195, 79, 15436, 7622, 38462, 11566, 138710, 44828,\n    45774, 37768, 99236, 68137, 84083, 19282, 22698, 17134, 74807, 126662, 173497, 46248, 16938, 119735, 3212, 28292,\n    213652, 49013, 9975, 32180, 45660, 86250, 4801, 68788, 95490, 77482, 113751, 11994, 44624, 94452, 46839, 128497,\n    100316, 5798, 58588, 73184, 202987, 65417, 37790, 88524, 1606, 43156, 97964, 105717, 34947, 11203, 100060, 37742,\n    130074, 93653, 107799, 94311, 196106, 41347, 8035, 10780, 16390, 27883, 118236, 167395, 1979, 25006, 19375, 31628,\n    18916, 144723, 78502, 114047, 103107, 86492, 107686, 5844, 20934, 206963, 23556, 22591, 16562, 146333, 20167, 10471,\n    117434, 33085, 2863, 9740, 36669, 41849, 37271, 22790, 18209, 28979, 8231, 12952, 54408, 21731, 25130, 45208,\n    55748, 138120, 75826, 414, 29593, 9925, 292865, 25999, 683, 123149, 7036, 92159, 86055, 61827, 103680, 23176,\n    54918, 58466, 57578, 13305, 5709, 86479, 16697, 31064, 17660, 200919, 10770, 49793, 33423, 32370, 52047, 16488,\n    62555, 6459, 8426, 83493, 7763, 59725, 82812, 18628, 67760, 79405, 68557, 9612, 7673, 28102, 56517, 69620,\n    171797, 32458, 29541, 15870, 81109, 32080, 207644, 71495, 21202, 11039, 91036, 61230, 2810, 130800, 32260, 4613,\n    60590, 37112, 75214, 33979, 126402, 155062, 30642, 63875, 12810, 194463, 82799, 47664, 16725, 36685, 43367, 61099,\n    449, 172150, 102867, 21691, 301838, 36745, 7130, 18671, 57316, 34852, 38034, 54182, 35578, 65900, 99486, 19771,\n    3456, 2658, 16914, 99866, 28390, 28109, 8262, 21147, 34353, 20006, 4228, 137085, 1675, 203023, 283196, 198286,\n    214375, 163329, 290603, 152574, 40471, 83506, 30068, 14730, 23177, 131539, 34759, 27668, 32178, 71896, 104799, 116305,\n    85430, 119262, 42860, 25160, 8911, 23428, 49437, 105322, 6519, 16203, 6349, 74711, 1230, 38045, 8540, 75165,\n    44736, 25909, 51026, 317034, 4984, 32281, 91312, 27060, 44431, 17817, 45363, 155937, 239085, 35697, 59784, 91993,\n    29531, 126740, 213757, 76560, 167776, 285273, 24262, 8237, 65030, 41160, 74437, 48804, 118916, 13159, 37842, 1031,\n    75349, 1478, 11655, 108777, 23435, 277425, 101734, 67469, 70231, 124711, 43532, 28514, 65526, 54956, 1000, 21882,\n    17728, 25302, 40952, 52214, 149632, 1999, 2111, 3259, 63362, 89961, 220561, 39777, 26335, 9063, 10572, 12416,\n    34551, 34623, 38604, 24723, 5947, 15588, 69927, 66252, 119177, 69173, 46629, 28714, 70715, 212408, 20521, 406913,\n    74380, 11716, 50659, 50862, 37009, 88460, 130101, 7210, 53853, 538, 65120, 151950, 55806, 163748, 52837, 13153,\n    21100, 16674, 64536, 6091, 138201, 44837, 58547, 3723, 163, 2177, 32288, 85454, 34033, 8497, 14282, 25742,\n    10535, 10741, 79559, 117493, 243787, 49337, 100718, 79495, 40139, 42956, 7551, 55433, 15421, 31509, 23034, 45081,\n    547, 61176, 53434, 328001, 8470, 36263, 30145, 4519, 74173, 53935, 11845, 73774, 60211, 78025, 3, 4102,\n    73782, 109293, 315332, 48412, 26683, 13714, 6865, 20128, 18490, 104141, 325, 39470, 171970, 115860, 15707, 7268,\n    73301, 74336, 31370, 2368, 111827, 107757, 136231, 142844, 97138, 96638, 84053, 38691, 23801, 1588, 10573, 122098,\n    77039, 240, 186135, 146101, 11996, 18143, 112963, 46171, 155836, 348769, 47795, 121213, 116266, 132515, 3344, 144804,\n    31286, 99187, 255838, 129694, 35894, 48779, 55235, 148582, 71967, 65282, 15174, 13920, 47080, 6147, 108242, 157593,\n    125025, 7136, 1286, 28957, 127956, 28402, 98813, 20805, 7532, 109417, 40610, 5041, 32958, 15142, 18408, 108596,\n    33543, 50517, 27748, 80114, 233434, 91447, 487, 37094, 100048, 30541, 43477, 10639, 89862, 155868, 37667, 8726,\n    60684, 237903, 73408, 99589, 12190, 38739, 97348, 3914, 13594, 2680, 149016, 13907, 30171, 28343, 23530, 115225,\n    61104, 35821, 147679, 14337, 4297, 244282, 24085, 326976, 56428, 7851, 21303, 131620, 71446, 83253, 68692, 111870,\n    5224, 15813, 38197, 49026, 45057, 13660, 3306, 76345, 40671, 27905, 91072, 996, 68527, 62085, 91351, 122634,\n    55109, 168209, 2024, 27560, 112707, 17352, 8306, 167115, 169921, 166958, 5031, 46020, 11844, 67284, 19130, 76185,\n    6920, 32849, 5450, 14610, 22451, 21002, 17392, 31872, 66682, 84796, 13709, 40210, 59898, 12029, 8719, 53564,\n    21462, 91884, 21647, 88379, 194428, 12754, 37797, 132826, 160016, 22567, 54383, 53186, 77611, 31107, 8339, 4694,\n    19185, 90355, 23597, 17222, 140675, 28442, 23668, 55977, 9128, 61555, 28774, 155229, 17658, 9390, 24379, 69357,\n    15752, 127381, 239631, 62460, 93181, 55913, 45133, 140155, 18676, 25249, 33164, 29581, 82837, 67223, 22362, 29975,\n    7317, 52813, 1943, 29613, 20012, 207130, 49617, 49651, 5636, 15334, 36313, 29226, 28084, 95247, 72072, 19000,\n    224932, 15811, 114, 32127, 38097, 37508, 88507, 37225, 27359, 91626, 12193, 69279, 20608, 11055, 88156, 92808,\n    2152, 57259, 55275, 72789, 24475, 104414, 1708, 9882, 3818, 48661, 66897, 1631, 34806, 227930, 85815, 87753,\n    18321, 250664, 72733, 25107, 206797, 50891, 8082, 196411, 92596, 96764, 152823, 65514, 22819, 387277, 62176, 51225,\n    40329, 15563, 189, 3659, 73670, 64357, 51793, 275136, 33482, 86653, 74615, 67058, 11318, 125720, 15388, 22388,\n    8267, 1730, 102663, 170910, 40784, 7144, 85373, 13040, 7088, 94309, 583, 44224, 140424, 77439, 18496, 164026,\n    36578, 4722, 9151, 5824, 63365, 26510, 35199, 40500, 79277, 32495, 44614, 35233, 9566, 203293, 152144, 7097,\n    2330, 183480, 98629, 13423, 330887, 44130, 68600, 30939, 97829, 31012, 345465, 56747, 94879, 4939, 160027, 149761,\n    99423, 46099, 32251, 15332, 8761, 96094, 128555, 5763, 235318, 222223, 55729, 30241, 55420, 201746, 3987, 81382,\n    8259, 49325, 23287, 7719, 24633, 251100, 92311, 18591, 110533, 64759, 170260, 393860, 7175, 21144, 132887, 3593,\n    75346, 101277, 91109, 16387, 259187, 11627, 57459, 173829, 44694, 55780, 49797, 89192, 120443, 62622, 3904, 14814,\n    23887, 1027, 112258, 64955, 99800, 11132, 66353, 36202, 48624, 18158, 88481, 96882, 43059, 11040, 2455, 7077,\n    21651, 181159, 99126, 100434, 61388, 68186, 19161, 110468, 120052, 8819, 55324, 41494, 7014, 37689, 3618, 87729,\n    92615, 207943, 9823, 128657, 12587, 15857, 6379, 67628, 51216, 71775, 157617, 63244, 1503, 3864, 218754, 110864,\n    5769, 21492, 7243, 1192, 87921, 85529, 31512, 18537, 42698, 35350, 73510, 84474, 34301, 8991, 21013, 35034,\n    566, 38832, 19838, 35586, 37216, 39413, 55006, 12178, 59742, 856, 84563, 6900, 25632, 17437, 49786, 30723,\n    13847, 70845, 4044, 7843, 23944, 235976, 55530, 48942, 6518, 20939, 73769, 192653, 52936, 95207, 23895, 132542,\n    142982, 22632, 87452, 48042, 54018, 178468, 10728, 26230, 23559, 363, 81269, 142012, 5718, 346258, 31456, 84333,\n    246476, 51018, 66692, 101804, 120570, 39962, 30373, 70593, 2864, 60541, 19425, 54209, 104092, 7201, 31545, 48018,\n    25865, 15442, 46257, 40443, 8328, 6451, 111782, 47527, 97754, 33046, 470, 245116, 31095, 39, 91934, 87208,\n    73470, 36708, 36521, 12801, 70624, 36272, 8892, 79768, 12427, 55454, 103756, 5908, 52390, 62962, 22720, 141138,\n    94634, 41689, 128402, 126390, 6628, 106394, 35527, 134394, 82727, 254651, 194502, 148064, 89549, 3202, 28359, 957,\n    21954, 27906, 49840, 142747, 8307, 24206, 48978, 1186, 71728, 133038, 71474, 91306, 6333, 110959, 74600, 70387,\n    18983, 62609, 56057, 22970, 1147, 135850, 1321, 28834, 3578, 59715, 102227, 32827, 81415, 99952, 55636, 257598,\n    390, 22702, 35701, 85872, 402916, 39216, 189795, 14929, 19467, 10112, 144422, 61514, 5279, 63421, 134686, 41436,\n    8424, 51925, 10598, 132295, 124416, 4604, 194739, 210929, 57866, 31829, 51626, 50007, 9976, 91878, 61906, 56168,\n    81906, 60918, 61859, 40017, 23059, 16887, 40927, 62064, 12785, 32893, 32913, 21782, 93965, 20169, 44387, 79084,\n    38463, 11457, 93950, 27127, 157050, 2697, 337088, 5116, 54128, 48255, 33279, 8821, 27352, 25515, 124022, 65710,\n    28906, 38557, 33390, 1722, 104435, 72215, 38551, 12094, 30978, 25113, 6671, 37355, 175109, 42862, 98024, 65406,\n    221276, 59624, 118012, 64637, 78760, 86697, 21426, 1639, 40350, 12584, 67193, 84144, 31396, 7863, 143011, 69629,\n    63112, 9454, 28666, 65798, 46372, 134721, 6314, 51402, 30837, 151922, 2847, 38676, 38008, 92823, 136245, 17540,\n    5504, 109295, 205242, 37606, 5211, 214892, 1586, 20670, 208711, 137743, 19328, 40652, 16995, 20023, 14657, 154919,\n    34422, 12996, 13918, 38221, 47690, 16398, 2959, 37680, 89122, 6721, 198469, 91876, 172043, 83898, 101992, 26084,\n    94570, 3635, 76958, 22853, 76497, 38266, 176590, 168403, 44464, 142840, 79180, 184594, 1984, 41806, 83147, 11985,\n    6546, 366068, 59732, 24533, 271505, 8736, 39084, 222992, 93429, 28962, 58985, 86665, 8432, 30028, 14548, 32439,\n    54424, 165029, 55175, 27458, 69046, 121277, 46168, 33732, 20661, 24581, 135574, 123110, 37556, 79260, 72611, 16957,\n    12939, 46162, 58238, 44907, 72936, 253758, 41324, 32518, 96480, 11949, 124438, 65280, 43256, 34107, 53533, 43531,\n    37037, 28366, 45970, 32741, 173438, 6121, 194202, 62969, 26355, 30314, 58370, 28455, 1848, 50519, 82830, 90393,\n    21761, 295490, 10936, 256940, 133568, 44050, 20269, 4089, 27457, 21610, 219460, 36743, 14821, 101388, 52005, 13124,\n    30979, 140816, 167362, 26054, 18458, 60789, 34917, 40447, 26606, 33422, 9066, 3452, 83614, 5761, 20263, 137238,\n    25038, 91310, 101, 52322, 74548, 42572, 38084, 214054, 186568, 31802, 17665, 30620, 141936, 37730, 14420, 4265,\n    187218, 49640, 188208, 51441, 55388, 96452, 66659, 40869, 42039, 60967, 221027, 19234, 178581, 29105, 96050, 9165,\n    196118, 157335, 3738, 40354, 117436, 2965, 34136, 59659, 15570, 50843, 230035, 31444, 71260, 43886, 18316, 5387,\n    38500, 168508, 17406, 32174, 8828, 103373, 143806, 90367, 3560, 18719, 122310, 16508, 26719, 2541, 105429, 6645,\n    37998, 73190, 10591, 235916, 49737, 87112, 233941, 53188, 32193, 79154, 4544, 52905, 126477, 7580, 63501, 57314,\n    3216, 31337, 6541, 103083, 60846, 49, 9756, 15481, 1355, 43840, 14319, 13743, 27486, 10222, 73114, 230718,\n    418644, 16706, 6674, 279748, 23058, 45273, 295831, 86306, 2743, 5535, 88773, 21829, 35253, 120938, 31153, 3169,\n    16839, 42847, 8751, 80974, 33942, 36867, 35514, 16485, 26474, 77775, 56877, 5391, 48346, 3882, 108713, 31403,\n    27804, 55248, 26235, 43821, 136104, 40118, 175507, 28034, 203908, 18732, 1788, 34030, 106427, 36958, 54359, 7251,\n    44936, 15356, 69139, 455, 157915, 22173, 140291, 50348, 43275, 82066, 49621, 54952, 15216, 36226, 96695, 66855,\n    6936, 1987, 8227, 196087, 4631, 68827, 99004, 47541, 110265, 17953, 147605, 110242, 58520, 31312, 38724, 329975,\n    642, 3155, 34497, 75937, 6207, 73843, 6120, 17249, 51429, 117746, 3218, 910, 68961, 319671, 14938, 29555,\n    34700, 1649, 66673, 72268, 9655, 76800, 153087, 6941, 210168, 27130, 35398, 1780, 73242, 3135, 56689, 19556,\n    165307, 8765, 35967, 121458, 13333, 70453, 17350, 117253, 22265, 13340, 44265, 39869, 441, 3742, 135025, 23581,\n    33309, 16543, 17731, 13291, 157637, 283005, 21408, 101360, 63887, 52312, 83873, 5338, 233779, 23759, 186949, 34531,\n    177320, 38069, 156465, 91004, 19353, 59852, 68160, 14891, 1338, 1072, 29823, 1950, 28901, 81407, 313445, 73038,\n    84807, 162348, 240257, 37162, 138934, 16111, 58013, 41253, 102951, 16457, 96056, 19541, 56402, 67217, 41638, 94381,\n    89674, 29481, 37456, 80815, 151579, 13937, 13683, 132537, 19699, 134545, 67020, 29816, 222341, 141235, 427578, 48868,\n    129557, 233342, 23077, 87871, 16213, 18728, 16184, 9469, 37913, 19680, 2798, 171356, 178328, 13216, 50049, 72690,\n    71904, 124644, 55455, 7504, 29052, 41036, 266546, 19899, 30391, 188755, 8659, 59469, 16, 104298, 112943, 53865,\n    76203, 138226, 68857, 139953, 14125, 107625, 119795, 173133, 4398, 50273, 48808, 54390, 16466, 122086, 31835, 67035,\n    50971, 48859, 7508, 46427, 66477, 73021, 84615, 39985, 83076, 46779, 201569, 53336, 36443, 60865, 168164, 143810,\n    51393, 25548, 169307, 32896, 24485, 38424, 21837, 29087, 275813, 51674, 6714, 64883, 46169, 187369, 55186, 76192,\n    12852, 12018, 62134, 31067, 118303, 16542, 12125, 10579, 4928, 26291, 43854, 7091, 10946, 253716, 109062, 39283,\n    17261, 113012, 258512, 47764, 125126, 32646, 55892, 80279, 201623, 149872, 3192, 385, 1208, 48750, 5376, 58738,\n    22335, 5427, 82416, 47811, 32435, 143086, 38930, 94128, 59975, 156037, 37977, 38224, 62485, 7698, 50405, 71027,\n    16462, 21559, 136153, 34131, 107506, 162069, 63703, 3101, 215029, 40407, 4178, 3774, 9187, 80019, 17880, 97926,\n    67579, 2600, 18405, 8351, 47924, 86638, 70820, 92206, 86453, 29610, 42241, 119200, 3198, 15466, 67813, 57863,\n    35454, 4779, 99518, 4649, 104641, 144269, 33730, 38073, 65864, 6838, 109456, 193298, 154007, 5623, 45741, 30846,\n    182578, 25573, 157224, 1543, 58575, 138703, 146140, 44971, 49356, 18275, 59064, 20300, 13122, 11848, 24453, 11973,\n    9797, 86843, 2919, 25530, 49210, 1130, 161220, 76788, 75373, 85604, 34926, 36014, 17777, 17255, 51533, 11676,\n    92226, 51845, 119859, 21525, 5936, 18507, 28050, 1140, 31418, 14857, 34207, 47859, 10750, 36382, 32079, 106909,\n    59426, 87757, 38393, 110042, 15965, 97104, 33757, 35344, 97993, 53979, 33651, 45407, 41884, 82515, 173089, 7177,\n    58371, 35365, 47543, 51927, 35587, 10670, 23544, 29306, 84233, 39976, 76076, 62097, 9007, 8668, 28119, 78281,\n    120790, 19835, 143020, 54968, 18670, 64959, 20649, 34469, 42570, 33001, 136570, 87796, 120044, 1106, 58700, 63951,\n    127623, 12805, 83057, 40212, 31773, 49850, 7361, 54336, 347524, 101314, 23751, 19569, 48791, 29174, 49369, 20467,\n    7465, 75842, 38281, 623, 112457, 60210, 28849, 51003, 94720, 6426, 90047, 85560, 43761, 3579, 85105, 34607,\n    90410, 118528, 7224, 42907, 111163, 18168, 6960, 161135, 191298, 5247, 100584, 127552, 171568, 20121, 91173, 12636,\n    54615, 20199, 63730, 98105, 2396, 40387, 14438, 125012, 4765, 33235, 12865, 45299, 37728, 82098, 77872, 114037,\n    59253, 19675, 24838, 398016, 102561, 11446, 17069, 57508, 178277, 65836, 99941, 26114, 2585, 271882, 136866, 50126,\n    11027, 155648, 118367, 14585, 8910, 123015, 335383, 40434, 41016, 53021, 14439, 87098, 176860, 201543, 121888, 2358,\n    9286, 5739, 22666, 54270, 37884, 169381, 33984, 93859, 16124, 89364, 72207, 51639, 76366, 99029, 65812, 2198,\n    12147, 174891, 194289, 6986, 30252, 88822, 21284, 11445, 288337, 160821, 33034, 100869, 43852, 25761, 52882, 1144,\n    103809, 1924, 84458, 86079, 43411, 13542, 139276, 18141, 34978, 41298, 7276, 26481, 173800, 33210, 17951, 142652,\n    33616, 33677, 2210, 19941, 98568, 2486, 192414, 80136, 12058, 235883, 50963, 249638, 29572, 27221, 47034, 6124,\n    72107, 63346, 97620, 158513, 299699, 40388, 23235, 37176, 224244, 198386, 121323, 67992, 23827, 63170, 17838, 106622,\n    158590, 26807, 5345, 23489, 91891, 55474, 74834, 37981, 13058, 5977, 72552, 34706, 26828, 145172, 19904, 21367,\n    34043, 960, 77092, 91381, 4733, 47446, 7680, 41697, 5170, 16960, 14741, 46101, 13656, 473, 51842, 37433,\n    11103, 11551, 121951, 13191, 97536, 165932, 50397, 51628, 129028, 9069, 44885, 6590, 59195, 47045, 32940, 225472,\n    90345, 21833, 13303, 29407, 96615, 141951, 5198, 6028, 18395, 7181, 3861, 14966, 156358, 167182, 36529, 55253,\n    25942, 173153, 30959, 27261, 50691, 150176, 162201, 38467, 48462, 80602, 42163, 118482, 168, 108756, 26011, 17166,\n    54149, 456538, 22512, 91374, 13816, 90358, 131615, 18132, 226707, 1824, 28139, 26860, 42253, 93877, 77351, 65575,\n    8980, 80574, 22020, 27948, 40422, 91324, 76376, 13528, 39281, 91685, 82215, 122541, 144066, 1983, 193851, 17283,\n    26320, 2739, 194978, 4790, 26845, 42627, 61300, 65815, 174612, 55133, 4200, 191130, 79771, 158321, 52280, 166796,\n    221620, 62461, 11278, 4067, 88152, 83409, 31717, 121367, 13522, 47325, 37945, 10406, 174348, 249321, 154101, 64912,\n    29938, 51775, 17220, 15776, 166138, 78890, 84425, 54121, 42861, 16368, 24572, 291647, 10197, 32073, 22651, 11677,\n    97509, 26952, 35787, 18424, 41910, 71614, 94977, 72318, 41594, 70024, 275419, 37702, 60199, 7335, 39107, 61315,\n    18271, 18394, 33768, 87884, 104277, 123724, 7277, 56288, 71981, 189803, 49320, 3352, 6798, 14240, 8954, 69220,\n    94433, 57372, 28620, 68863, 193727, 85575, 42309, 41667, 67689, 42081, 22543, 44824, 12719, 28540, 114236, 101553,\n    27638, 27296, 4300, 5353, 4663, 19379, 94098, 3758, 95888, 95144, 80344, 87320, 28447, 259518, 12718, 71391,\n    152731, 37063, 24132, 31911, 104896, 15672, 103782, 1521, 4945, 72541, 23717, 122632, 15619, 87175, 206120, 29428,\n    189780, 61416, 28350, 44457, 972, 1175, 47233, 198738, 95789, 41907, 21953, 97034, 59341, 22864, 53713, 16873,\n    32971, 20693, 20954, 31336, 21477, 16169, 38370, 16412, 9019, 3841, 24599, 21938, 17085, 6484, 81198, 76413,\n    5849, 72514, 12320, 65247, 276175, 37234, 59796, 52642, 16312, 57349, 198507, 94148, 46134, 18958, 125552, 1747,\n    18725, 151873, 14901, 5490, 68287, 29470, 3689, 64794, 40814, 26018, 25692, 54450, 2703, 88278, 124886, 173087,\n    174000, 24159, 179477, 24276, 46004, 201876, 209202, 445, 52876, 31948, 30206, 157610, 39180, 18439, 44124, 50469,\n    5774, 96278, 222758, 200216, 50290, 45486, 20435, 46986, 46276, 140133, 142326, 15569, 13363, 47522, 92583, 2182,\n    7135, 16853, 22998, 30272, 4952, 63263, 35623, 39096, 53789, 44864, 20053, 110392, 124213, 4630, 16087, 28221,\n    127787, 25839, 77481, 44693, 13464, 113146, 6983, 27069, 55717, 50102, 4760, 7107, 26186, 66507, 59145, 36032,\n    104182, 71328, 29425, 64317, 50781, 47465, 94298, 69706, 74899, 22754, 120756, 25108, 93077, 56834, 73286, 39928,\n    16218, 41699, 176763, 7555, 70819, 50083, 26895, 23315, 26014, 16773, 123079, 41712, 5719, 31516, 90427, 158540,\n    85051, 183128, 40864, 27505, 55392, 9058, 45224, 96857, 30901, 136622, 96557, 56304, 120061, 11501, 151448, 5773,\n    89743, 7769, 86069, 2935, 18471, 41628, 10114, 33660, 110170, 49479, 26745, 92846, 33221, 26731, 18795, 87076,\n    8550, 2100, 29972, 120289, 3077, 72490, 33784, 2630, 208722, 50861, 63483, 79029, 6419, 39467, 14302, 45286,\n    64207, 9686, 67513, 44170, 1050, 77246, 59266, 17055, 53801, 7150, 11111, 42432, 4278, 94579, 362117, 36175,\n    42902, 41933, 39002, 98489, 22913, 74161, 84773, 57036, 17556, 162288, 74485, 178760, 93867, 73635, 128860, 50362,\n    261, 67455, 80001, 46080, 35662, 4368, 25247, 19230, 74393, 22588, 1822, 27682, 235324, 13798, 85998, 13194,\n    235067, 23514, 71669, 147632, 23191, 134748, 214683, 105101, 1518, 25489, 247114, 7380, 54842, 26922, 3971, 26361,\n    20844, 68642, 170517, 77339, 123255, 8963, 77818, 150998, 48466, 36806, 2732, 23261, 11741, 236162, 18243, 126216,\n    28690, 50546, 16385, 92760, 197383, 246558, 201295, 88255, 67588, 71687, 176076, 172653, 169058, 33906, 63747, 24835,\n    157621, 43338, 30050, 46152, 132741, 2770, 51371, 94835, 6614, 15112, 11749, 56936, 1250, 19027, 399017, 58036,\n    100215, 23388, 55815, 308768, 124152, 94803, 9521, 64186, 8971, 28, 30427, 62163, 7616, 103838, 35079, 29203,\n    131235, 7743, 17389, 10882, 37420, 61460, 228512, 85363, 41581, 131077, 62822, 119647, 10130, 54445, 26925, 19968,\n    29016, 24446, 74028, 24176, 61448, 67185, 9254, 8563, 119129, 9771, 99184, 37716, 39514, 10532, 221512, 258753,\n    218630, 55980, 23394, 32141, 61924, 66749, 32411, 3741, 36475, 26678, 77010, 44946, 91203, 128749, 116953, 20476,\n    49625, 53116, 13735, 102335, 29376, 51946, 83407, 67892, 59212, 34685, 21083, 1546, 112982, 32972, 74397, 1078,\n    190545, 16082, 86140, 58591, 89611, 101531, 10061, 105104, 76319, 20035, 17551, 52611, 169061, 190842, 100780, 23907,\n    90413, 115619, 9675, 34710, 193435, 49443, 129734, 11183, 258877, 16318, 136182, 126808, 44635, 27304, 192375, 2599,\n    125648, 47051, 12091, 23814, 721, 58800, 40137, 66726, 97930, 60877, 74487, 7942, 54326, 9841, 41428, 13762,\n    8211, 85383, 6950, 99177, 79806, 201786, 296464, 124087, 13144, 29741, 41721, 47634, 55088, 254286, 106408, 17041,\n    99064, 12942, 64086, 45233, 14005, 2612, 55827, 255, 7984, 13980, 38574, 12776, 46654, 73499, 249951, 2101,\n    26676, 25996, 132326, 116415, 119062, 50449, 31033, 23038, 11589, 179252, 20007, 14860, 129270, 21143, 17796, 144715,\n    60106, 70758, 69842, 34674, 282133, 44014, 16774, 57268, 38528, 24053, 46373, 201667, 28327, 471023, 51889, 102667,\n    21193, 114909, 84132, 69317, 96723, 67969, 16134, 68145, 15058, 28765, 32035, 2524, 101089, 98664, 25045, 76571,\n    14957, 86040, 118506, 262428, 154764, 81573, 39681, 283900, 73287, 127825, 544, 80448, 52347, 38512, 175971, 15180,\n    45467, 33086, 46552, 48894, 81107, 43213, 36672, 54025, 76703, 8053, 7608, 13299, 56619, 20752, 238099, 54164,\n    105133, 1444, 32942, 953, 37564, 8000, 66316, 119463, 106817, 404, 13667, 149108, 128597, 31267, 10269, 49836,\n    106150, 1484, 52330, 76965, 160486, 171648, 38456, 31263, 22424, 37738, 66245, 67467, 143369, 60471, 75610, 20895,\n    115528, 86070, 60854, 40796, 49347, 18989, 15030, 11371, 37578, 15779, 79867, 10187, 86462, 46402, 155626, 93200,\n    40229, 7090, 57547, 108053, 99598, 11088, 47505, 41218, 206017, 2173, 20988, 30219, 22919, 80563, 57566, 42369,\n    93141, 41675, 2407, 182519, 120495, 27154, 16702, 29456, 14349, 7958, 16688, 117177, 140375, 42467, 261919, 74916,\n    153569, 10836, 34742, 49526, 7621, 105997, 12212, 2270, 392377, 7755, 17959, 25086, 232152, 138791, 33847, 13860,\n    35316, 5811, 1344, 71259, 50452, 207539, 92635, 50359, 5821, 33674, 30255, 2086, 2587, 96264, 17543, 42,\n    6029, 9580, 43007, 139248, 82831, 12917, 29607, 25786, 51467, 42137, 85161, 100698, 31561, 88989, 121990, 278500,\n    3602, 109344, 37982, 15279, 116442, 28936, 30880, 87894, 58079, 128661, 126731, 67392, 28051, 146885, 4861, 16216,\n    97344, 42827, 147561, 153948, 22684, 21335, 47685, 1853, 43349, 15185, 59642, 10229, 25520, 187921, 108972, 5579,\n    98037, 24945, 6697, 19193, 63734, 137934, 75056, 89740, 19767, 224268, 56138, 63643, 151661, 39313, 70618, 84031,\n    89723, 84074, 13703, 85626, 35460, 8867, 64845, 3439, 57906, 99776, 63968, 49270, 81130, 34356, 16210, 23547,\n    36446, 34090, 140028, 72439, 2221, 22163, 57058, 363492, 113754, 18913, 95451, 48663, 54464, 54037, 176097, 68425,\n    3023, 34906, 29482, 117389, 341780, 80431, 58330, 16753, 92616, 60907, 94846, 147486, 4498, 48646, 7773, 46801,\n    7778, 18946, 464978, 47558, 33223, 177444, 7328, 15626, 63337, 94700, 11743, 9351, 255024, 39098, 16447, 42647,\n    96230, 39769, 58840, 10068, 63439, 35800, 65843, 58823, 413844, 9156, 51258, 7434, 61791, 85018, 6872, 3692,\n    28096, 7121, 33024, 6009, 75532, 31997, 192535, 9661, 3304, 9547, 14753, 31987, 25314, 55689, 15896, 20430,\n    39472, 31340, 99744, 25398, 115569, 54883, 28719, 205423, 23071, 57855, 64638, 149867, 25671, 82403, 37616, 20668,\n    39989, 77996, 74948, 140555, 175248, 64810, 36515, 46595, 4958, 248773, 24045, 28728, 136673, 168704, 20804, 114833,\n    100325, 27135, 21205, 96151, 153134, 45992, 7093, 13992, 76047, 1980, 19432, 145001, 75159, 87462, 17710, 1013,\n    45556, 34297, 144882, 20648, 26061, 11319, 129567, 108555, 18872, 464580, 33386, 22717, 65948, 167189, 5603, 135042,\n    79542, 8801, 202632, 18114, 91882, 5973, 5239, 67315, 4431, 60916, 47819, 71693, 32597, 32606, 18183, 45072,\n    80329, 76385, 24749, 51305, 40314, 156514, 14693, 130345, 13168, 66214, 18029, 12858, 34801, 27628, 14544, 10823,\n    40522, 40185, 33739, 148694, 23548, 9923, 61012, 28859, 17933, 19442, 34364, 99849, 164107, 141167, 30629, 21054,\n    6744, 36491, 8096, 42474, 41706, 155060, 30650, 10600, 163442, 1143, 96655, 61390, 52359, 7559, 51568, 64256,\n    203854, 4467, 22453, 14504, 436398, 7878, 6980, 8293, 63610, 293747, 16167, 35763, 19627, 147603, 15419, 18032,\n    110744, 51346, 33681, 54571, 40472, 48615, 39073, 21604, 13754, 173027, 92560, 11083, 47299, 63062, 11813, 52007,\n    29883, 9734, 139722, 15953, 1550, 20651, 13616, 49306, 16113, 90089, 92326, 7584, 30712, 72424, 164858, 6831,\n    152871, 55746, 197721, 34167, 196442, 6022, 112107, 55215, 7538, 123381, 4920, 43539, 77165, 8939, 50392, 34192,\n    20225, 79762, 22505, 58667, 40770, 29788, 97180, 82835, 4568, 8579, 13273, 363569, 35898, 49983, 436, 36598,\n    3237, 131691, 62418, 35591, 8101, 4073, 379438, 65218, 76072, 33887, 2968, 27573, 212619, 288680, 68278, 72851,\n    150504, 217896, 6913, 121339, 22017, 35340, 51072, 43616, 75043, 31437, 10833, 81487, 4364, 22968, 41454, 106687,\n    85446, 19863, 109625, 149241, 524, 141850, 214404, 54376, 657, 237023, 9401, 108137, 53800, 32474, 49712, 53334,\n    126876, 27337, 45552, 177696, 8269, 15036, 12097, 42240, 2328, 125374, 119295, 99715, 2500, 19624, 39441, 27220,\n    102691, 60957, 94543, 39101, 18566, 67362, 13975, 78230, 25017, 34017, 239007, 90027, 39351, 41681, 35354, 43822,\n    1043, 916, 58587, 141983, 94818, 38799, 75459, 41114, 67432, 16195, 36606, 59568, 22272, 126769, 31424, 68659,\n    12287, 134302, 257977, 5756, 207285, 95637, 47248, 117689, 19583, 77451, 22373, 12200, 54993, 117118, 34244, 29386,\n    34562, 53819, 71267, 64172, 77665, 49368, 7716, 59301, 25749, 45426, 194789, 17297, 2650, 1766, 32501, 45198,\n    20403, 20984, 6600, 14171, 94604, 19037, 5402, 29896, 9938, 59935, 109708, 88081, 145182, 44844, 39167, 352626,\n    164173, 35374, 45982, 6122, 154, 73419, 220487, 53834, 53601, 17992, 8609, 229321, 5610, 68098, 66815, 71012,\n    95069, 140968, 27396, 8957, 134489, 24656, 86659, 56598, 134852, 17316, 123838, 255436, 6613, 41610, 138033, 81452,\n    32023, 32396, 123687, 63398, 8693, 29712, 30407, 19296, 121188, 3551, 36099, 20032, 111948, 56624, 16547, 27453,\n    35916, 15378, 52039, 56849, 13489, 22214, 73177, 53097, 277349, 2157, 14029, 187886, 10260, 141743, 246460, 91880,\n    50869, 3788, 49486, 133566, 54950, 33120, 129337, 53768, 18333, 9525, 26902, 312251, 10297, 9020, 70759, 16647,\n    112432, 59260, 84609, 9818, 82766, 73569, 468, 46001, 75780, 55028, 52106, 11498, 43645, 108069, 17150, 17753,\n    29417, 16705, 31799, 9606, 289, 122254, 115975, 8620, 6133, 255357, 56908, 14456, 133464, 43554, 79224, 11247,\n    29630, 160, 12756, 25464, 65960, 350428, 62521, 321796, 100359, 67358, 35169, 46172, 113128, 48988, 88868, 31094,\n    33266, 6847, 60887, 98188, 49659, 69117, 92977, 220228, 13947, 80181, 35103, 62170, 97351, 13475, 2440, 199768,\n    19498, 36597, 46971, 25234, 67806, 62881, 84717, 73648, 181966, 10488, 94149, 21550, 26655, 63436, 48375, 14405,\n    165650, 9621, 24439, 28043, 42735, 4490, 29963, 56674, 45373, 1934, 262446, 50855, 67098, 26898, 5261, 52696,\n    40644, 33900, 9440, 180286, 87162, 22940, 19704, 26936, 69769, 10254, 101759, 27406, 12243, 48000, 73926, 113215,\n    54935, 5726, 192787, 4312, 106216, 9366, 11550, 52949, 23457, 212271, 277152, 133895, 108374, 6191, 96477, 29980,\n    218916, 58024, 54696, 40853, 91124, 65894, 91170, 65908, 252552, 6793, 29212, 15389, 44516, 122515, 52617, 35058,\n    9017, 103536, 39510, 49136, 19242, 130652, 662077, 74699, 47024, 31422, 8517, 73351, 24399, 13867, 128360, 4810,\n    4434, 61779, 111983, 61036, 17798, 110240, 59722, 102960, 39688, 10001, 23803, 23039, 176498, 56659, 44814, 134295,\n    17188, 77577, 74466, 226175, 102472, 154333, 63900, 111747, 18062, 41171, 79669, 32773, 408933, 42562, 28931, 30907,\n    107388, 43487, 2946, 240310, 23938, 24354, 319, 184983, 7927, 6488, 1422, 10790, 68809, 68209, 64775, 4361,\n    202, 17123, 59634, 51200, 44391, 18188, 17843, 2619, 74278, 3230, 9540, 47187, 21702, 36274, 56894, 43907,\n    16310, 34790, 16866, 6150, 5561, 13587, 107545, 108873, 126867, 86986, 28640, 33427, 19017, 5762, 80637, 17430,\n    46903, 2047, 131055, 25958, 13558, 5444, 47152, 13900, 44563, 122857, 45348, 70863, 39593, 54332, 38068, 33637,\n    318, 40310, 143467, 18502, 24520, 11377, 62013, 28942, 27246, 28269, 83545, 17999, 59015, 90707, 30065, 15161,\n    34720, 1263, 37008, 2012, 6060, 98575, 92933, 5721, 299, 199555, 24578, 29223, 2985, 743, 115825, 109523,\n    136657, 47454, 26378, 53586, 3733, 174945, 93340, 244456, 5693, 37386, 28782, 89767, 27545, 23573, 18798, 136425,\n    34320, 84778, 20041, 48453, 38215, 7477, 71958, 40621, 8773, 5874, 187927, 105965, 51100, 43533, 18083, 8443,\n    10180, 43597, 2003, 183999, 69689, 12216, 129696, 146188, 62389, 34044, 68410, 12765, 43273, 26949, 266807, 3345,\n    34477, 79197, 5688, 47539, 213110, 21634, 22257, 50092, 32222, 42346, 39530, 63668, 98, 134978, 74022, 5152,\n    59088, 174145, 37220, 9934, 9545, 118937, 5724, 87240, 19875, 15784, 40143, 23263, 87513, 181654, 285152, 37881,\n    263241, 4966, 43934, 10433, 186657, 6470, 74416, 225854, 25908, 142677, 246262, 32280, 6192, 75890, 45546, 143264,\n    135305, 29742, 47013, 77787, 11732, 126658, 8763, 37950, 21806, 57557, 113464, 89465, 108995, 164574, 23894, 22996,\n    23169, 15369, 23117, 17642, 130607, 40503, 36239, 280990, 44666, 9981, 40427, 147487, 26869, 168452, 32886, 32991,\n    46798, 240839, 15111, 70502, 65697, 88548, 44145, 28701, 48767, 31139, 206777, 35659, 181164, 166262, 14554, 171445,\n    31786, 66523, 76607, 17956, 6507, 31279, 90476, 116611, 167918, 6560, 1243, 115324, 80128, 41867, 55897, 187323,\n    37069, 32596, 189444, 145931, 13390, 105530, 65709, 26805, 6999, 55714, 41300, 22915, 68951, 22138, 21120, 22264,\n    10058, 19945, 33635, 56123, 99085, 10032, 5818, 6016, 46649, 57476, 35264, 94413, 112522, 262288, 93686, 83038,\n    14341, 23204, 28807, 66084, 77987, 6101, 126673, 7133, 38126, 5923, 122091, 170240, 97772, 46874, 215746, 43948,\n    41622, 3272, 55596, 8332, 146411, 251315, 13533, 8561, 81521, 115449, 48616, 175175, 2063, 186556, 3036, 134537,\n    75772, 29728, 82360, 22973, 186559, 86348, 89100, 38388, 82297, 45610, 2613, 87082, 9986, 177812, 57884, 23591,\n    47485, 42543, 33582, 44713, 74439, 257444, 252451, 31825, 35631, 38540, 33066, 5147, 13973, 4343, 51830, 70378,\n    22827, 26448, 95560, 36896, 241741, 48067, 203953, 298860, 61620, 20450, 3220, 67272, 6586, 107662, 100160, 108684,\n    6929, 57226, 4762, 7457, 1320, 40404, 77204, 99309, 62750, 208653, 59977, 44000, 74315, 34332, 5819, 172217,\n    64904, 114077, 18147, 84012, 1791, 98456, 90930, 21446, 116669, 103938, 7422, 85140, 59713, 5768, 326211, 16239,\n    75411, 13229, 29398, 10758, 236107, 1539, 112472, 95979, 152154, 151294, 306, 21196, 38146, 10700, 6891, 84282,\n    109646, 56492, 40539, 6589, 119491, 51354, 30685, 140209, 136906, 29622, 73617, 49553, 70525, 51671, 166869, 139616,\n    74395, 37439, 49595, 45678, 11959, 33211, 86560, 52434, 9282, 62690, 112155, 130810, 5243, 108261, 99970, 265613,\n    72551, 80049, 6391, 33365, 90721, 66737, 69872, 87011, 1860, 9032, 112544, 60905, 37371, 89015, 140351, 19076,\n    850, 373531, 2802, 36725, 218795, 72062, 28990, 16550, 24614, 7815, 6187, 26336, 33373, 32162, 42791, 73555,\n    32062, 23386, 10244, 56392, 49442, 27076, 136262, 12412, 14883, 1134, 33675, 97153, 199281, 15608, 100152, 74072,\n    47942, 254301, 36451, 16026, 10687, 65067, 56708, 254030, 30290, 50490, 13864, 57941, 259331, 35588, 23485, 43486,\n    24869, 21620, 92971, 22072, 88645, 1048, 182050, 13343, 32452, 14825, 19509, 3325, 216938, 45740, 99716, 189082,\n    53740, 78245, 25609, 24311, 176777, 47340, 308354, 40669, 66085, 14102, 125339, 9225, 128709, 97207, 1271, 200933,\n    78439, 113451, 88975, 18324, 46521, 11819, 18570, 141756, 72512, 170020, 52754, 63550, 118515, 103073, 93330, 32736,\n    50499, 14722, 31600, 68452, 398867, 29316, 172786, 18417, 104924, 2606, 5670, 84818, 16288, 67106, 59580, 82929,\n    607401, 291, 85829, 359, 15897, 35830, 50696, 65630, 52672, 22115, 356968, 29895, 40837, 231192, 34024, 38957,\n    26722, 406, 23335, 124952, 72068, 68804, 13268, 147101, 164740, 276569, 162596, 66943, 11569, 26654, 66358, 4777,\n    23229, 102127, 5848, 978, 2921, 59666, 5371, 28212, 90108, 42938, 39320, 2499, 4271, 108792, 33510, 125072,\n    71653, 65239, 38250, 66357, 38577, 13964, 86251, 35708, 50755, 36010, 29448, 12209, 3844, 38222, 206337, 100876,\n    67827, 137088, 14167, 252225, 84163, 195270, 1306, 5703, 54198, 779, 46802, 22028, 51124, 86759, 70560, 113164,\n    35685, 162145, 45471, 34561, 422, 2611, 6464, 47486, 19223, 38246, 9191, 18331, 89942, 243642, 212364, 15893,\n    17518, 22617, 6409, 30046, 126182, 59716, 36560, 104428, 18846, 26592, 19458, 50793, 147333, 30826, 1388, 27647,\n    10922, 14495, 33545, 19269, 135828, 39727, 41601, 46931, 233379, 49169, 131130, 182112, 16276, 82381, 118209, 142445,\n    128310, 19672, 28740, 82907, 33436, 3118, 102206, 28723, 24819, 41937, 38854, 5157, 3881, 111491, 1142, 9776,\n    421673, 152241, 29309, 14961, 87854, 6054, 15424, 3796, 82656, 54996, 2108, 55367, 239450, 154525, 9643, 118103,\n    106041, 64601, 68549, 48707, 30266, 25772, 18740, 9462, 229669, 91798, 112152, 191327, 14493, 72828, 8175, 66636,\n    236474, 25817, 87351, 129027, 76653, 20422, 22983, 71240, 27846, 44661, 12399, 46158, 77704, 53101, 35032, 11072,\n    17300, 109294, 33638, 24408, 1895, 11241, 760, 17584, 82479, 125877, 63150, 141075, 34259, 23274, 81698, 15732,\n    43577, 48340, 91584, 14688, 16379, 24481, 150280, 96420, 262050, 48635, 43727, 61819, 56268, 72003, 88178, 17281,\n    79912, 13218, 122519, 125295, 166396, 11811, 2171, 118930, 67746, 17636, 178278, 174656, 95661, 173039, 83845, 79689,\n    17473, 98555, 127696, 203415, 54730, 22925, 232239, 9309, 12136, 175026, 20740, 180188, 10747, 39816, 314017, 266131,\n    10040, 175732, 112550, 220651, 31974, 37393, 888, 23008, 86799, 4303, 64905, 148467, 75337, 251, 3284, 370102,\n    50264, 9835, 5438, 23655, 4481, 29851, 329, 12855, 7162, 64931, 78141, 12804, 42372, 296771, 83547, 18624,\n    34874, 86271, 3360, 48665, 77735, 88767, 11463, 63527, 28889, 22258, 29140, 194315, 113924, 25499, 6406, 31334,\n    1845, 4802, 49184, 43455, 35469, 127594, 92970, 61038, 115005, 38840, 87761, 106838, 8811, 20572, 55637, 11162,\n    96721, 132425, 108925, 2948, 125457, 36356, 3502, 75270, 27622, 127192, 2561, 123095, 49394, 61155, 16897, 110064,\n    9699, 89448, 53356, 19628, 220310, 21622, 83036, 9885, 112214, 6087, 26713, 17901, 161912, 91492, 3440, 68594,\n    9266, 92238, 8087, 6866, 150194, 72175, 80701, 13459, 31836, 43243, 239700, 95846, 44749, 50647, 21945, 230538,\n    120612, 132371, 244604, 5193, 105637, 34661, 41341, 68775, 85393, 1874, 8771, 33718, 49672, 77403, 595452, 99507,\n    6490, 58895, 128742, 7704, 39239, 73217, 43816, 62824, 37804, 199976, 22361, 80005, 87514, 94832, 14089, 4574,\n    139975, 59142, 75523, 100268, 43906, 53442, 15152, 2547, 186002, 17011, 19513, 204282, 3343, 60568, 128318, 119250,\n    4298, 51871, 41336, 71759, 21921, 45074, 98169, 145889, 99427, 11350, 1237, 5520, 28799, 7803, 53702, 21026,\n    136352, 38293, 128690, 12158, 90132, 44600, 10184, 26957, 39459, 126025, 78904, 82999, 59373, 39301, 150198, 120529,\n    153042, 20177, 50089, 14764, 271571, 30530, 123161, 38975, 101562, 22941, 5648, 124654, 109243, 69817, 71675, 49162,\n    106884, 21241, 107795, 30258, 16572, 188262, 141456, 7688, 60718, 8271, 11044, 32440, 104608, 103419, 236109, 93156,\n    43293, 128929, 42107, 67180, 25201, 115254, 185488, 130954, 72813, 167547, 20537, 39969, 38432, 22582, 184022, 1139,\n    27199, 5655, 17767, 97412, 122606, 209377, 27070, 35871, 326617, 188954, 42680, 73512, 80911, 22629, 3011, 95021,\n    315242, 157737, 383, 41821, 41808, 19335, 27950, 15674, 25677, 110950, 35375, 76835, 59108, 57370, 35262, 16569,\n    160415, 37706, 78086, 32041, 49691, 137143, 9782, 172080, 50148, 77917, 6323, 10110, 69172, 17711, 21795, 59511,\n    76184, 135114, 31046, 132319, 59105, 157578, 20549, 80778, 57649, 158421, 65143, 4575, 72235, 21899, 10797, 92745,\n    34035, 106079, 80159, 4508, 78304, 25350, 75457, 46458, 32937, 25623, 47, 8531, 104751, 84953, 8138, 36508,\n    187199, 66310, 115274, 13253, 32461, 38536, 1916, 42007, 187160, 35055, 26325, 84394, 35963, 94216, 45590, 97782\n];\n//# sourceMappingURL=generated-prefix-list-browser.js.map","import { xor as uint8ArrayXor } from 'uint8arrays/xor';\nimport GENERATED_PREFIXES from './generated-prefix-list.js';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { randomBytes } from '@libp2p/crypto';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport length from 'it-length';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { TABLE_REFRESH_INTERVAL, TABLE_REFRESH_QUERY_TIMEOUT } from '../constants.js';\n/**\n * Cannot generate random KadIds longer than this + 1\n */\nconst MAX_COMMON_PREFIX_LENGTH = 15;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nexport class RoutingTableRefresh {\n    constructor(init) {\n        const { peerRouting, routingTable, refreshInterval, refreshQueryTimeout, lan } = init;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table:refresh`);\n        this.peerRouting = peerRouting;\n        this.routingTable = routingTable;\n        this.refreshInterval = refreshInterval ?? TABLE_REFRESH_INTERVAL;\n        this.refreshQueryTimeout = refreshQueryTimeout ?? TABLE_REFRESH_QUERY_TIMEOUT;\n        this.commonPrefixLengthRefreshedAt = [];\n        this.refreshTable = this.refreshTable.bind(this);\n    }\n    async start() {\n        this.log(`refreshing routing table every ${this.refreshInterval}ms`);\n        this.refreshTable(true);\n    }\n    async stop() {\n        if (this.refreshTimeoutId != null) {\n            clearTimeout(this.refreshTimeoutId);\n        }\n    }\n    /**\n     * To speed lookups, we seed the table with random PeerIds. This means\n     * when we are asked to locate a peer on the network, we can find a KadId\n     * that is close to the requested peer ID and query that, then network\n     * peers will tell us who they know who is close to the fake ID\n     */\n    refreshTable(force = false) {\n        this.log('refreshing routing table');\n        const prefixLength = this._maxCommonPrefix();\n        const refreshCpls = this._getTrackedCommonPrefixLengthsForRefresh(prefixLength);\n        this.log(`max common prefix length ${prefixLength}`);\n        this.log(`tracked CPLs [ ${refreshCpls.map(date => date.toISOString()).join(', ')} ]`);\n        /**\n         * If we see a gap at a common prefix length in the Routing table, we ONLY refresh up until\n         * the maximum cpl we have in the Routing Table OR (2 * (Cpl+ 1) with the gap), whichever\n         * is smaller.\n         *\n         * This is to prevent refreshes for Cpls that have no peers in the network but happen to be\n         * before a very high max Cpl for which we do have peers in the network.\n         *\n         * The number of 2 * (Cpl + 1) can be proved and a proof would have been written here if\n         * the programmer had paid more attention in the Math classes at university.\n         *\n         * So, please be patient and a doc explaining it will be published soon.\n         *\n         * https://github.com/libp2p/go-libp2p-kad-dht/commit/2851c88acb0a3f86bcfe3cfd0f4604a03db801d8#diff-ad45f4ba97ffbc4083c2eb87a4420c1157057b233f048030d67c6b551855ccf6R219\n         */\n        Promise.all(refreshCpls.map(async (lastRefresh, index) => {\n            try {\n                await this._refreshCommonPrefixLength(index, lastRefresh, force);\n                if (this._numPeersForCpl(prefixLength) === 0) {\n                    const lastCpl = Math.min(2 * (index + 1), refreshCpls.length - 1);\n                    for (let n = index + 1; n < lastCpl + 1; n++) {\n                        try {\n                            await this._refreshCommonPrefixLength(n, lastRefresh, force);\n                        }\n                        catch (err) {\n                            this.log.error(err);\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n        })).catch(err => {\n            this.log.error(err);\n        }).then(() => {\n            this.refreshTimeoutId = setTimeout(this.refreshTable, this.refreshInterval);\n            if (this.refreshTimeoutId.unref != null) {\n                this.refreshTimeoutId.unref();\n            }\n        }).catch(err => {\n            this.log.error(err);\n        });\n    }\n    async _refreshCommonPrefixLength(cpl, lastRefresh, force) {\n        if (!force && lastRefresh.getTime() > (Date.now() - this.refreshInterval)) {\n            this.log('not running refresh for cpl %s as time since last refresh not above interval', cpl);\n            return;\n        }\n        // gen a key for the query to refresh the cpl\n        const peerId = await this._generateRandomPeerId(cpl);\n        this.log('starting refreshing cpl %s with key %p (routing table size was %s)', cpl, peerId, this.routingTable.size);\n        const controller = new TimeoutController(this.refreshQueryTimeout);\n        try {\n            const peers = await length(this.peerRouting.getClosestPeers(peerId.toBytes(), { signal: controller.signal }));\n            this.log(`found ${peers} peers that were close to imaginary peer %p`, peerId);\n            this.log('finished refreshing cpl %s with key %p (routing table size is now %s)', cpl, peerId, this.routingTable.size);\n        }\n        finally {\n            controller.clear();\n        }\n    }\n    _getTrackedCommonPrefixLengthsForRefresh(maxCommonPrefix) {\n        if (maxCommonPrefix > MAX_COMMON_PREFIX_LENGTH) {\n            maxCommonPrefix = MAX_COMMON_PREFIX_LENGTH;\n        }\n        const dates = [];\n        for (let i = 0; i <= maxCommonPrefix; i++) {\n            // defaults to the zero value if we haven't refreshed it yet.\n            dates[i] = this.commonPrefixLengthRefreshedAt[i] ?? new Date();\n        }\n        return dates;\n    }\n    async _generateRandomPeerId(targetCommonPrefixLength) {\n        if (this.routingTable.kb == null) {\n            throw new Error('Routing table not started');\n        }\n        const randomData = randomBytes(2);\n        const randomUint16 = (randomData[1] << 8) + randomData[0];\n        const key = await this._makePeerId(this.routingTable.kb.localNodeId, randomUint16, targetCommonPrefixLength);\n        return peerIdFromBytes(key);\n    }\n    async _makePeerId(localKadId, randomPrefix, targetCommonPrefixLength) {\n        if (targetCommonPrefixLength > MAX_COMMON_PREFIX_LENGTH) {\n            throw new Error(`Cannot generate peer ID for common prefix length greater than ${MAX_COMMON_PREFIX_LENGTH}`);\n        }\n        const view = new DataView(localKadId.buffer, localKadId.byteOffset, localKadId.byteLength);\n        const localPrefix = view.getUint16(0, false);\n        // For host with ID `L`, an ID `K` belongs to a bucket with ID `B` ONLY IF CommonPrefixLen(L,K) is EXACTLY B.\n        // Hence, to achieve a targetPrefix `T`, we must toggle the (T+1)th bit in L & then copy (T+1) bits from L\n        // to our randomly generated prefix.\n        const toggledLocalPrefix = localPrefix ^ (0x8000 >> targetCommonPrefixLength);\n        // Combine the toggled local prefix and the random bits at the correct offset\n        // such that ONLY the first `targetCommonPrefixLength` bits match the local ID.\n        const mask = 65535 << (16 - (targetCommonPrefixLength + 1));\n        const targetPrefix = (toggledLocalPrefix & mask) | (randomPrefix & ~mask);\n        // Convert to a known peer ID.\n        const keyPrefix = GENERATED_PREFIXES[targetPrefix];\n        const keyBuffer = new ArrayBuffer(34);\n        const keyView = new DataView(keyBuffer, 0, keyBuffer.byteLength);\n        keyView.setUint8(0, sha256.code);\n        keyView.setUint8(1, 32);\n        keyView.setUint32(2, keyPrefix, false);\n        return new Uint8Array(keyView.buffer, keyView.byteOffset, keyView.byteLength);\n    }\n    /**\n     * returns the maximum common prefix length between any peer in the table\n     * and the current peer\n     */\n    _maxCommonPrefix() {\n        // xor our KadId with every KadId in the k-bucket tree,\n        // return the longest id prefix that is the same\n        let prefixLength = 0;\n        for (const length of this._prefixLengths()) {\n            if (length > prefixLength) {\n                prefixLength = length;\n            }\n        }\n        return prefixLength;\n    }\n    /**\n     * Returns the number of peers in the table with a given prefix length\n     */\n    _numPeersForCpl(prefixLength) {\n        let count = 0;\n        for (const length of this._prefixLengths()) {\n            if (length === prefixLength) {\n                count++;\n            }\n        }\n        return count;\n    }\n    /**\n     * Yields the common prefix length of every peer in the table\n     */\n    *_prefixLengths() {\n        if (this.routingTable.kb == null) {\n            return;\n        }\n        for (const { id } of this.routingTable.kb.toIterable()) {\n            const distance = uint8ArrayXor(this.routingTable.kb.localNodeId, id);\n            let leadingZeros = 0;\n            for (const byte of distance) {\n                if (byte === 0) {\n                    leadingZeros++;\n                }\n                else {\n                    break;\n                }\n            }\n            yield leadingZeros;\n        }\n    }\n}\n//# sourceMappingURL=refresh.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message, enumeration } from 'protons-runtime';\nexport var Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.key != null) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if (obj.value != null) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if (obj.author != null) {\n                    w.uint32(26);\n                    w.bytes(obj.author);\n                }\n                if (obj.signature != null) {\n                    w.uint32(34);\n                    w.bytes(obj.signature);\n                }\n                if (obj.timeReceived != null) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.bytes();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        case 3:\n                            obj.author = reader.bytes();\n                            break;\n                        case 4:\n                            obj.signature = reader.bytes();\n                            break;\n                        case 5:\n                            obj.timeReceived = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return encodeMessage(obj, Record.codec());\n    };\n    Record.decode = (buf) => {\n        return decodeMessage(buf, Record.codec());\n    };\n})(Record || (Record = {}));\nexport var Message;\n(function (Message) {\n    let MessageType;\n    (function (MessageType) {\n        MessageType[\"PUT_VALUE\"] = \"PUT_VALUE\";\n        MessageType[\"GET_VALUE\"] = \"GET_VALUE\";\n        MessageType[\"ADD_PROVIDER\"] = \"ADD_PROVIDER\";\n        MessageType[\"GET_PROVIDERS\"] = \"GET_PROVIDERS\";\n        MessageType[\"FIND_NODE\"] = \"FIND_NODE\";\n        MessageType[\"PING\"] = \"PING\";\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let __MessageTypeValues;\n    (function (__MessageTypeValues) {\n        __MessageTypeValues[__MessageTypeValues[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n        __MessageTypeValues[__MessageTypeValues[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n        __MessageTypeValues[__MessageTypeValues[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n        __MessageTypeValues[__MessageTypeValues[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n        __MessageTypeValues[__MessageTypeValues[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n        __MessageTypeValues[__MessageTypeValues[\"PING\"] = 5] = \"PING\";\n    })(__MessageTypeValues || (__MessageTypeValues = {}));\n    (function (MessageType) {\n        MessageType.codec = () => {\n            return enumeration(__MessageTypeValues);\n        };\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let ConnectionType;\n    (function (ConnectionType) {\n        ConnectionType[\"NOT_CONNECTED\"] = \"NOT_CONNECTED\";\n        ConnectionType[\"CONNECTED\"] = \"CONNECTED\";\n        ConnectionType[\"CAN_CONNECT\"] = \"CAN_CONNECT\";\n        ConnectionType[\"CANNOT_CONNECT\"] = \"CANNOT_CONNECT\";\n    })(ConnectionType = Message.ConnectionType || (Message.ConnectionType = {}));\n    let __ConnectionTypeValues;\n    (function (__ConnectionTypeValues) {\n        __ConnectionTypeValues[__ConnectionTypeValues[\"NOT_CONNECTED\"] = 0] = \"NOT_CONNECTED\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CONNECTED\"] = 1] = \"CONNECTED\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CAN_CONNECT\"] = 2] = \"CAN_CONNECT\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CANNOT_CONNECT\"] = 3] = \"CANNOT_CONNECT\";\n    })(__ConnectionTypeValues || (__ConnectionTypeValues = {}));\n    (function (ConnectionType) {\n        ConnectionType.codec = () => {\n            return enumeration(__ConnectionTypeValues);\n        };\n    })(ConnectionType = Message.ConnectionType || (Message.ConnectionType = {}));\n    let Peer;\n    (function (Peer) {\n        let _codec;\n        Peer.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.id != null) {\n                        w.uint32(10);\n                        w.bytes(obj.id);\n                    }\n                    if (obj.addrs != null) {\n                        for (const value of obj.addrs) {\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (obj.connection != null) {\n                        w.uint32(24);\n                        Message.ConnectionType.codec().encode(obj.connection, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        addrs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.id = reader.bytes();\n                                break;\n                            case 2:\n                                obj.addrs.push(reader.bytes());\n                                break;\n                            case 3:\n                                obj.connection = Message.ConnectionType.codec().decode(reader);\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer.encode = (obj) => {\n            return encodeMessage(obj, Peer.codec());\n        };\n        Peer.decode = (buf) => {\n            return decodeMessage(buf, Peer.codec());\n        };\n    })(Peer = Message.Peer || (Message.Peer = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    Message.MessageType.codec().encode(obj.type, w);\n                }\n                if (obj.clusterLevelRaw != null) {\n                    w.uint32(80);\n                    w.int32(obj.clusterLevelRaw);\n                }\n                if (obj.key != null) {\n                    w.uint32(18);\n                    w.bytes(obj.key);\n                }\n                if (obj.record != null) {\n                    w.uint32(26);\n                    w.bytes(obj.record);\n                }\n                if (obj.closerPeers != null) {\n                    for (const value of obj.closerPeers) {\n                        w.uint32(66);\n                        Message.Peer.codec().encode(value, w);\n                    }\n                }\n                if (obj.providerPeers != null) {\n                    for (const value of obj.providerPeers) {\n                        w.uint32(74);\n                        Message.Peer.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    closerPeers: [],\n                    providerPeers: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = Message.MessageType.codec().decode(reader);\n                            break;\n                        case 10:\n                            obj.clusterLevelRaw = reader.int32();\n                            break;\n                        case 2:\n                            obj.key = reader.bytes();\n                            break;\n                        case 3:\n                            obj.record = reader.bytes();\n                            break;\n                        case 8:\n                            obj.closerPeers.push(Message.Peer.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 9:\n                            obj.providerPeers.push(Message.Peer.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return encodeMessage(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return decodeMessage(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=dht.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function enumeration(v) {\n    function findValue(val) {\n        // Use the reverse mapping to look up the enum key for the stored value\n        // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n        if (v[val.toString()] == null) {\n            throw new Error('Invalid enum value');\n        }\n        return v[val];\n    }\n    const encode = function enumEncode(val, writer) {\n        const enumValue = findValue(val);\n        writer.int32(enumValue);\n    };\n    const decode = function enumDecode(reader) {\n        const val = reader.int32();\n        return findValue(val);\n    };\n    // @ts-expect-error yeah yeah\n    return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);\n}\n//# sourceMappingURL=enum.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","import { peerIdFromBytes } from '@libp2p/peer-id';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { Message as PBMessage } from './dht.js';\nexport const MESSAGE_TYPE = PBMessage.MessageType;\nexport const CONNECTION_TYPE = PBMessage.ConnectionType;\nexport const MESSAGE_TYPE_LOOKUP = Object.keys(MESSAGE_TYPE);\n/**\n * Represents a single DHT control message.\n */\nexport class Message {\n    constructor(type, key, level) {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error('Key must be a Uint8Array');\n        }\n        this.type = type;\n        this.key = key;\n        this.clusterLevelRaw = level;\n        this.closerPeers = [];\n        this.providerPeers = [];\n        this.record = undefined;\n    }\n    /**\n     * @type {number}\n     */\n    get clusterLevel() {\n        const level = this.clusterLevelRaw - 1;\n        if (level < 0) {\n            return 0;\n        }\n        return level;\n    }\n    set clusterLevel(level) {\n        this.clusterLevelRaw = level;\n    }\n    /**\n     * Encode into protobuf\n     */\n    serialize() {\n        return PBMessage.encode({\n            key: this.key,\n            type: this.type,\n            clusterLevelRaw: this.clusterLevelRaw,\n            closerPeers: this.closerPeers.map(toPbPeer),\n            providerPeers: this.providerPeers.map(toPbPeer),\n            record: this.record == null ? undefined : this.record.serialize().subarray()\n        });\n    }\n    /**\n     * Decode from protobuf\n     */\n    static deserialize(raw) {\n        const dec = PBMessage.decode(raw);\n        const msg = new Message(dec.type ?? PBMessage.MessageType.PUT_VALUE, dec.key ?? Uint8Array.from([]), dec.clusterLevelRaw ?? 0);\n        msg.closerPeers = dec.closerPeers.map(fromPbPeer);\n        msg.providerPeers = dec.providerPeers.map(fromPbPeer);\n        if (dec.record?.length != null) {\n            msg.record = Libp2pRecord.deserialize(dec.record);\n        }\n        return msg;\n    }\n}\nfunction toPbPeer(peer) {\n    const output = {\n        id: peer.id.toBytes(),\n        addrs: (peer.multiaddrs ?? []).map((m) => m.bytes),\n        connection: CONNECTION_TYPE.CONNECTED\n    };\n    return output;\n}\nfunction fromPbPeer(peer) {\n    if (peer.id == null) {\n        throw new Error('Invalid peer in message');\n    }\n    return {\n        id: peerIdFromBytes(peer.id),\n        multiaddrs: (peer.addrs ?? []).map((a) => multiaddr(a)),\n        protocols: []\n    };\n}\n//# sourceMappingURL=index.js.map","import { MESSAGE_TYPE_LOOKUP } from '../message/index.js';\nexport function sendingQueryEvent(fields) {\n    return {\n        ...fields,\n        name: 'SENDING_QUERY',\n        type: 0,\n        messageName: fields.type,\n        messageType: MESSAGE_TYPE_LOOKUP.indexOf(fields.type.toString())\n    };\n}\nexport function peerResponseEvent(fields) {\n    return {\n        ...fields,\n        name: 'PEER_RESPONSE',\n        type: 1,\n        messageName: fields.messageType,\n        closer: (fields.closer != null) ? fields.closer : [],\n        providers: (fields.providers != null) ? fields.providers : []\n    };\n}\nexport function finalPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'FINAL_PEER',\n        type: 2\n    };\n}\nexport function queryErrorEvent(fields) {\n    return {\n        ...fields,\n        name: 'QUERY_ERROR',\n        type: 3\n    };\n}\nexport function providerEvent(fields) {\n    return {\n        ...fields,\n        name: 'PROVIDER',\n        type: 4\n    };\n}\nexport function valueEvent(fields) {\n    return {\n        ...fields,\n        name: 'VALUE',\n        type: 5\n    };\n}\nexport function addingPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'ADDING_PEER',\n        type: 6\n    };\n}\nexport function dialingPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'DIALING_PEER',\n        type: 7\n    };\n}\n//# sourceMappingURL=events.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport drain from 'it-drain';\nimport first from 'it-first';\nimport { Message } from './message/index.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { dialingPeerEvent, sendingQueryEvent, peerResponseEvent, queryErrorEvent } from './query/events.js';\nimport { logger } from '@libp2p/logger';\nimport { abortableDuplex } from 'abortable-iterator';\n/**\n * Handle network operations for the dht\n */\nexport class Network extends EventEmitter {\n    /**\n     * Create a new network\n     */\n    constructor(components, init) {\n        super();\n        const { protocol, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:network`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n    }\n    /**\n     * Is the network online?\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Send a request and record RTT for latency measurements\n     */\n    async *sendRequest(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield dialingPeerEvent({ peer: to });\n        yield sendingQueryEvent({ to, type: msg.type });\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            const response = await this._writeReadMessage(stream, msg.serialize(), options);\n            yield peerResponseEvent({\n                from: to,\n                messageType: response.type,\n                closer: response.closerPeers,\n                providers: response.providerPeers,\n                record: response.record\n            });\n        }\n        catch (err) {\n            yield queryErrorEvent({ from: to, error: err });\n        }\n        finally {\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Sends a message without expecting an answer\n     */\n    async *sendMessage(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield dialingPeerEvent({ peer: to });\n        yield sendingQueryEvent({ to, type: msg.type });\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            await this._writeMessage(stream, msg.serialize(), options);\n            yield peerResponseEvent({ from: to, messageType: msg.type });\n        }\n        catch (err) {\n            yield queryErrorEvent({ from: to, error: err });\n        }\n        finally {\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Write a message to the given stream\n     */\n    async _writeMessage(stream, msg, options) {\n        if (options.signal != null) {\n            stream = abortableDuplex(stream, options.signal);\n        }\n        await pipe([msg], lp.encode(), stream, drain);\n    }\n    /**\n     * Write a message and read its response.\n     * If no response is received after the specified timeout\n     * this will error out.\n     */\n    async _writeReadMessage(stream, msg, options) {\n        if (options.signal != null) {\n            stream = abortableDuplex(stream, options.signal);\n        }\n        const res = await pipe([msg], lp.encode(), stream, lp.decode(), async (source) => {\n            const buf = await first(source);\n            if (buf != null) {\n                return buf;\n            }\n            throw new CodeError('No message received', 'ERR_NO_MESSAGE_RECEIVED');\n        });\n        const message = Message.deserialize(res);\n        // tell any listeners about new peers we've seen\n        message.closerPeers.forEach(peerData => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        message.providerPeers.forEach(peerData => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        return message;\n    }\n}\n//# sourceMappingURL=network.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { bestRecord } from '@libp2p/record/selectors';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { valueEvent, queryErrorEvent } from '../query/events.js';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { pipe } from 'it-pipe';\nimport { ALPHA } from '../constants.js';\nimport { createPutRecord, convertBuffer, bufferToRecordKey } from '../utils.js';\nimport { logger } from '@libp2p/logger';\nexport class ContentFetching {\n    constructor(components, init) {\n        const { validators, selectors, peerRouting, queryManager, routingTable, network, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-fetching`);\n        this.validators = validators;\n        this.selectors = selectors;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.routingTable = routingTable;\n        this.network = network;\n    }\n    async putLocal(key, rec) {\n        const dsKey = bufferToRecordKey(key);\n        await this.components.datastore.put(dsKey, rec);\n    }\n    /**\n     * Attempt to retrieve the value for the given key from\n     * the local datastore\n     */\n    async getLocal(key) {\n        this.log('getLocal %b', key);\n        const dsKey = bufferToRecordKey(key);\n        this.log('fetching record for key %k', dsKey);\n        const raw = await this.components.datastore.get(dsKey);\n        this.log('found %k in local datastore', dsKey);\n        const rec = Libp2pRecord.deserialize(raw);\n        await verifyRecord(this.validators, rec);\n        return rec;\n    }\n    /**\n     * Send the best record found to any peers that have an out of date record\n     */\n    async *sendCorrectionRecord(key, vals, best, options = {}) {\n        this.log('sendCorrection for %b', key);\n        const fixupRec = createPutRecord(key, best);\n        for (const { value, from } of vals) {\n            // no need to do anything\n            if (uint8ArrayEquals(value, best)) {\n                this.log('record was ok');\n                continue;\n            }\n            // correct ourself\n            if (this.components.peerId.equals(from)) {\n                try {\n                    const dsKey = bufferToRecordKey(key);\n                    this.log(`Storing corrected record for key ${dsKey.toString()}`);\n                    await this.components.datastore.put(dsKey, fixupRec.subarray());\n                }\n                catch (err) {\n                    this.log.error('Failed error correcting self', err);\n                }\n                continue;\n            }\n            // send correction\n            let sentCorrection = false;\n            const request = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n            request.record = Libp2pRecord.deserialize(fixupRec);\n            for await (const event of this.network.sendRequest(from, request, options)) {\n                if (event.name === 'PEER_RESPONSE' && (event.record != null) && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n                    sentCorrection = true;\n                }\n                yield event;\n            }\n            if (!sentCorrection) {\n                yield queryErrorEvent({ from, error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') });\n            }\n            this.log.error('Failed error correcting entry');\n        }\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        this.log('put key %b value %b', key, value);\n        // create record in the dht format\n        const record = createPutRecord(key, value);\n        // store the record locally\n        const dsKey = bufferToRecordKey(key);\n        this.log(`storing record for key ${dsKey.toString()}`);\n        await this.components.datastore.put(dsKey, record.subarray());\n        // put record to the closest peers\n        yield* pipe(this.peerRouting.getClosestPeers(key, { signal: options.signal }), (source) => map(source, (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                const msg = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n                msg.record = Libp2pRecord.deserialize(record);\n                this.log('send put to %p', event.peer.id);\n                for await (const putEvent of this.network.sendRequest(event.peer.id, msg, options)) {\n                    events.push(putEvent);\n                    if (putEvent.name !== 'PEER_RESPONSE') {\n                        continue;\n                    }\n                    if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n                        events.push(queryErrorEvent({ from: event.peer.id, error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') }));\n                    }\n                }\n                return events;\n            };\n        }), (source) => parallel(source, {\n            ordered: false,\n            concurrency: ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n    }\n    /**\n     * Get the value to the given key\n     */\n    async *get(key, options = {}) {\n        this.log('get %b', key);\n        const vals = [];\n        for await (const event of this.getMany(key, options)) {\n            if (event.name === 'VALUE') {\n                vals.push(event);\n            }\n            yield event;\n        }\n        if (vals.length === 0) {\n            return;\n        }\n        const records = vals.map((v) => v.value);\n        let i = 0;\n        try {\n            i = bestRecord(this.selectors, key, records);\n        }\n        catch (err) {\n            // Assume the first record if no selector available\n            if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {\n                throw err;\n            }\n        }\n        const best = records[i];\n        this.log('GetValue %b %b', key, best);\n        if (best == null) {\n            throw new CodeError('best value was not found', 'ERR_NOT_FOUND');\n        }\n        yield* this.sendCorrectionRecord(key, vals, best, options);\n        yield vals[i];\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n    async *getMany(key, options = {}) {\n        this.log('getMany values for %b', key);\n        try {\n            const localRec = await this.getLocal(key);\n            yield valueEvent({\n                value: localRec.value,\n                from: this.components.peerId\n            });\n        }\n        catch (err) {\n            this.log('error getting local value for %b', key, err);\n        }\n        const id = await convertBuffer(key);\n        const rtp = this.routingTable.closestPeers(id);\n        this.log('found %d peers in routing table', rtp.length);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const getValueQuery = async function* ({ peer, signal }) {\n            for await (const event of self.peerRouting.getValueOrPeers(peer, key, { signal })) {\n                yield event;\n                if (event.name === 'PEER_RESPONSE' && (event.record != null)) {\n                    yield valueEvent({ from: peer, value: event.record.value });\n                }\n            }\n        };\n        // we have peers, lets send the actual query to them\n        yield* this.queryManager.run(key, rtp, getValueQuery, options);\n    }\n}\n//# sourceMappingURL=index.js.map","import { Message, MESSAGE_TYPE } from '../message/index.js';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { convertBuffer } from '../utils.js';\nimport { ALPHA } from '../constants.js';\nimport { pipe } from 'it-pipe';\nimport { queryErrorEvent, peerResponseEvent, providerEvent } from '../query/events.js';\nimport { logger } from '@libp2p/logger';\nexport class ContentRouting {\n    constructor(components, init) {\n        const { network, peerRouting, queryManager, routingTable, providers, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-routing`);\n        this.network = network;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.routingTable = routingTable;\n        this.providers = providers;\n    }\n    /**\n     * Announce to the network that we can provide the value for a given key and\n     * are contactable on the given multiaddrs\n     */\n    async *provide(key, multiaddrs, options = {}) {\n        this.log('provide %s', key);\n        // Add peer as provider\n        await this.providers.addProvider(key, this.components.peerId);\n        const msg = new Message(MESSAGE_TYPE.ADD_PROVIDER, key.multihash.bytes, 0);\n        msg.providerPeers = [{\n                id: this.components.peerId,\n                multiaddrs,\n                protocols: []\n            }];\n        let sent = 0;\n        const maybeNotifyPeer = (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                this.log('putProvider %s to %p', key, event.peer.id);\n                try {\n                    this.log('sending provider record for %s to %p', key, event.peer.id);\n                    for await (const sendEvent of this.network.sendMessage(event.peer.id, msg, options)) {\n                        if (sendEvent.name === 'PEER_RESPONSE') {\n                            this.log('sent provider record for %s to %p', key, event.peer.id);\n                            sent++;\n                        }\n                        events.push(sendEvent);\n                    }\n                }\n                catch (err) {\n                    this.log.error('error sending provide record to peer %p', event.peer.id, err);\n                    events.push(queryErrorEvent({ from: event.peer.id, error: err }));\n                }\n                return events;\n            };\n        };\n        // Notify closest peers\n        yield* pipe(this.peerRouting.getClosestPeers(key.multihash.bytes, options), (source) => map(source, (event) => maybeNotifyPeer(event)), (source) => parallel(source, {\n            ordered: false,\n            concurrency: ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n        this.log('sent provider records to %d peers', sent);\n    }\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     */\n    async *findProviders(key, options) {\n        const toFind = this.routingTable.kBucketSize;\n        const target = key.multihash.bytes;\n        const id = await convertBuffer(target);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        this.log('findProviders %c', key);\n        const provs = await this.providers.getProviders(key);\n        // yield values if we have some, also slice because maybe we got lucky and already have too many?\n        if (provs.length > 0) {\n            const providers = [];\n            for (const peerId of provs.slice(0, toFind)) {\n                providers.push({\n                    id: peerId,\n                    multiaddrs: ((await this.components.peerStore.addressBook.get(peerId)) ?? []).map(address => address.multiaddr),\n                    protocols: []\n                });\n            }\n            yield peerResponseEvent({ from: this.components.peerId, messageType: MESSAGE_TYPE.GET_PROVIDERS, providers });\n            yield providerEvent({ from: this.components.peerId, providers });\n        }\n        // All done\n        if (provs.length >= toFind) {\n            return;\n        }\n        /**\n         * The query function to use on this particular disjoint path\n         */\n        const findProvidersQuery = async function* ({ peer, signal }) {\n            const request = new Message(MESSAGE_TYPE.GET_PROVIDERS, target, 0);\n            yield* self.network.sendRequest(peer, request, { signal });\n        };\n        const providers = new Set(provs.map(p => p.toString()));\n        for await (const event of this.queryManager.run(target, this.routingTable.closestPeers(id), findProvidersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                this.log('Found %d provider entries for %c and %d closer peers', event.providers.length, key, event.closer.length);\n                const newProviders = [];\n                for (const peer of event.providers) {\n                    if (providers.has(peer.id.toString())) {\n                        continue;\n                    }\n                    providers.add(peer.id.toString());\n                    newProviders.push(peer);\n                }\n                if (newProviders.length > 0) {\n                    yield providerEvent({ from: event.from, providers: newProviders });\n                }\n                if (providers.size === toFind) {\n                    return;\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import * as utils from '../utils.js';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor';\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport class PeerDistanceList {\n    constructor(originDhtKey, capacity) {\n        this.originDhtKey = originDhtKey;\n        this.capacity = capacity;\n        this.peerDistances = [];\n    }\n    /**\n     * The length of the list\n     */\n    get length() {\n        return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n    get peers() {\n        return this.peerDistances.map(pd => pd.peerId);\n    }\n    /**\n     * Add a peerId to the list.\n     */\n    async add(peerId) {\n        if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n            return;\n        }\n        const dhtKey = await utils.convertPeerId(peerId);\n        const el = {\n            peerId,\n            distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n        };\n        this.peerDistances.push(el);\n        this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));\n        this.peerDistances = this.peerDistances.slice(0, this.capacity);\n    }\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     */\n    async anyCloser(peerIds) {\n        if (peerIds.length === 0) {\n            return false;\n        }\n        if (this.length === 0) {\n            return true;\n        }\n        const dhtKeys = await Promise.all(peerIds.map(utils.convertPeerId));\n        const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n        for (const dhtKey of dhtKeys) {\n            const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n            if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=peer-distance-list.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport * as utils from '../utils.js';\nimport { queryErrorEvent, finalPeerEvent, valueEvent } from '../query/events.js';\nimport { PeerDistanceList } from '../peer-list/peer-distance-list.js';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { logger } from '@libp2p/logger';\nimport { keys } from '@libp2p/crypto';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nexport class PeerRouting {\n    constructor(components, init) {\n        const { routingTable, network, validators, queryManager, lan } = init;\n        this.components = components;\n        this.routingTable = routingTable;\n        this.network = network;\n        this.validators = validators;\n        this.queryManager = queryManager;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:peer-routing`);\n    }\n    /**\n     * Look if we are connected to a peer with the given id.\n     * Returns its id and addresses, if found, otherwise `undefined`.\n     */\n    async findPeerLocal(peer) {\n        let peerData;\n        const p = await this.routingTable.find(peer);\n        if (p != null) {\n            this.log('findPeerLocal found %p in routing table', peer);\n            try {\n                peerData = await this.components.peerStore.get(p);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData == null) {\n            try {\n                peerData = await this.components.peerStore.get(peer);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData != null) {\n            this.log('findPeerLocal found %p in peer store', peer);\n            return {\n                id: peerData.id,\n                multiaddrs: peerData.addresses.map((address) => address.multiaddr),\n                protocols: []\n            };\n        }\n        return undefined;\n    }\n    /**\n     * Get a value via rpc call for the given parameters\n     */\n    async *_getValueSingle(peer, key, options = {}) {\n        const msg = new Message(MESSAGE_TYPE.GET_VALUE, key, 0);\n        yield* this.network.sendRequest(peer, msg, options);\n    }\n    /**\n     * Get the public key directly from a node\n     */\n    async *getPublicKeyFromNode(peer, options = {}) {\n        const pkKey = utils.keyForPublicKey(peer);\n        for await (const event of this._getValueSingle(peer, pkKey, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE' && event.record != null) {\n                const recPeer = await peerIdFromKeys(keys.marshalPublicKey({ bytes: event.record.value }));\n                // compare hashes of the pub key\n                if (!recPeer.equals(peer)) {\n                    throw new CodeError('public key does not match id', 'ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID');\n                }\n                if (recPeer.publicKey == null) {\n                    throw new CodeError('public key missing', 'ERR_PUBLIC_KEY_MISSING');\n                }\n                yield valueEvent({ from: peer, value: recPeer.publicKey });\n            }\n        }\n        throw new CodeError(`Node not responding with its public key: ${peer.toString()}`, 'ERR_INVALID_RECORD');\n    }\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        this.log('findPeer %p', id);\n        // Try to find locally\n        const pi = await this.findPeerLocal(id);\n        // already got it\n        if (pi != null) {\n            this.log('found local');\n            yield finalPeerEvent({\n                from: this.components.peerId,\n                peer: pi\n            });\n            return;\n        }\n        const key = await utils.convertPeerId(id);\n        const peers = this.routingTable.closestPeers(key);\n        // sanity check\n        const match = peers.find((p) => p.equals(id));\n        if (match != null) {\n            try {\n                const peer = await this.components.peerStore.get(id);\n                this.log('found in peerStore');\n                yield finalPeerEvent({\n                    from: this.components.peerId,\n                    peer: {\n                        id: peer.id,\n                        multiaddrs: peer.addresses.map((address) => address.multiaddr),\n                        protocols: []\n                    }\n                });\n                return;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const findPeerQuery = async function* ({ peer, signal }) {\n            const request = new Message(MESSAGE_TYPE.FIND_NODE, id.toBytes(), 0);\n            for await (const event of self.network.sendRequest(peer, request, { signal })) {\n                yield event;\n                if (event.name === 'PEER_RESPONSE') {\n                    const match = event.closer.find((p) => p.id.equals(id));\n                    // found the peer\n                    if (match != null) {\n                        yield finalPeerEvent({ from: event.from, peer: match });\n                    }\n                }\n            }\n        };\n        let foundPeer = false;\n        for await (const event of this.queryManager.run(id.toBytes(), peers, findPeerQuery, options)) {\n            if (event.name === 'FINAL_PEER') {\n                foundPeer = true;\n            }\n            yield event;\n        }\n        if (!foundPeer) {\n            yield queryErrorEvent({ from: this.components.peerId, error: new CodeError('Not found', 'ERR_NOT_FOUND') });\n        }\n    }\n    /**\n     * Kademlia 'node lookup' operation on a key, which could be a the\n     * bytes from a multihash or a peer ID\n     */\n    async *getClosestPeers(key, options = {}) {\n        this.log('getClosestPeers to %b', key);\n        const id = await utils.convertBuffer(key);\n        const tablePeers = this.routingTable.closestPeers(id);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const peers = new PeerDistanceList(id, this.routingTable.kBucketSize);\n        await Promise.all(tablePeers.map(async (peer) => { await peers.add(peer); }));\n        const getCloserPeersQuery = async function* ({ peer, signal }) {\n            self.log('closerPeersSingle %s from %p', uint8ArrayToString(key, 'base32'), peer);\n            const request = new Message(MESSAGE_TYPE.FIND_NODE, key, 0);\n            yield* self.network.sendRequest(peer, request, { signal });\n        };\n        for await (const event of this.queryManager.run(key, tablePeers, getCloserPeersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                await Promise.all(event.closer.map(async (peerData) => { await peers.add(peerData.id); }));\n            }\n        }\n        this.log('found %d peers close to %b', peers.length, key);\n        for (const peer of peers.peers) {\n            yield finalPeerEvent({\n                from: this.components.peerId,\n                peer: {\n                    id: peer,\n                    multiaddrs: (await (this.components.peerStore.addressBook.get(peer)) ?? []).map(addr => addr.multiaddr),\n                    protocols: []\n                }\n            });\n        }\n    }\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     */\n    async *getValueOrPeers(peer, key, options = {}) {\n        for await (const event of this._getValueSingle(peer, key, options)) {\n            if (event.name === 'PEER_RESPONSE') {\n                if (event.record != null) {\n                    // We have a record\n                    try {\n                        await this._verifyRecordOnline(event.record);\n                    }\n                    catch (err) {\n                        const errMsg = 'invalid record received, discarded';\n                        this.log(errMsg);\n                        yield queryErrorEvent({ from: event.from, error: new CodeError(errMsg, 'ERR_INVALID_RECORD') });\n                        continue;\n                    }\n                }\n            }\n            yield event;\n        }\n    }\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Throws an error if the record is invalid.\n     */\n    async _verifyRecordOnline(record) {\n        if (record.timeReceived == null) {\n            throw new CodeError('invalid record received', 'ERR_INVALID_RECORD');\n        }\n        await verifyRecord(this.validators, new Libp2pRecord(record.key, record.value, record.timeReceived));\n    }\n    /**\n     * Get the nearest peers to the given query, but if closer\n     * than self\n     */\n    async getCloserPeersOffline(key, closerThan) {\n        const id = await utils.convertBuffer(key);\n        const ids = this.routingTable.closestPeers(id);\n        const output = [];\n        for (const peerId of ids) {\n            if (peerId.equals(closerThan)) {\n                continue;\n            }\n            try {\n                const addresses = await this.components.peerStore.addressBook.get(peerId);\n                const protocols = await this.components.peerStore.protoBook.get(peerId);\n                output.push({\n                    id: peerId,\n                    multiaddrs: addresses.map((address) => address.multiaddr),\n                    protocols\n                });\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (output.length > 0) {\n            this.log('getCloserPeersOffline found %d peer(s) closer to %b than %p', output.length, key, closerThan);\n        }\n        else {\n            this.log('getCloserPeersOffline could not find peer closer to %b than %p', key, closerThan);\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=index.js.map","import cache from 'hashlru';\nimport varint from 'varint';\nimport { Key } from 'interface-datastore/key';\nimport Queue from 'p-queue';\nimport { PROVIDERS_CLEANUP_INTERVAL, PROVIDERS_VALIDITY, PROVIDERS_LRU_CACHE_SIZE, PROVIDER_KEY_PREFIX } from './constants.js';\nimport { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('libp2p:kad-dht:providers');\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\nexport class Providers {\n    constructor(components, init = {}) {\n        const { cacheSize, cleanupInterval, provideValidity } = init;\n        this.components = components;\n        this.cleanupInterval = cleanupInterval ?? PROVIDERS_CLEANUP_INTERVAL;\n        this.provideValidity = provideValidity ?? PROVIDERS_VALIDITY;\n        this.cache = cache(cacheSize ?? PROVIDERS_LRU_CACHE_SIZE);\n        this.syncQueue = new Queue({ concurrency: 1 });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start the provider cleanup service\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        this.cleaner = setInterval(() => {\n            this._cleanup().catch(err => {\n                log.error(err);\n            });\n        }, this.cleanupInterval);\n    }\n    /**\n     * Release any resources.\n     */\n    async stop() {\n        this.started = false;\n        if (this.cleaner != null) {\n            clearInterval(this.cleaner);\n            this.cleaner = undefined;\n        }\n    }\n    /**\n     * Check all providers if they are still valid, and if not delete them\n     */\n    async _cleanup() {\n        await this.syncQueue.add(async () => {\n            const start = Date.now();\n            let count = 0;\n            let deleteCount = 0;\n            const deleted = new Map();\n            const batch = this.components.datastore.batch();\n            // Get all provider entries from the datastore\n            const query = this.components.datastore.query({ prefix: PROVIDER_KEY_PREFIX });\n            for await (const entry of query) {\n                try {\n                    // Add a delete to the batch for each expired entry\n                    const { cid, peerId } = parseProviderKey(entry.key);\n                    const time = readTime(entry.value).getTime();\n                    const now = Date.now();\n                    const delta = now - time;\n                    const expired = delta > this.provideValidity;\n                    log('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');\n                    if (expired) {\n                        deleteCount++;\n                        batch.delete(entry.key);\n                        const peers = deleted.get(cid) ?? new Set();\n                        peers.add(peerId);\n                        deleted.set(cid, peers);\n                    }\n                    count++;\n                }\n                catch (err) {\n                    log.error(err.message);\n                }\n            }\n            // Commit the deletes to the datastore\n            if (deleted.size > 0) {\n                log('deleting %d / %d entries', deleteCount, count);\n                await batch.commit();\n            }\n            else {\n                log('nothing to delete');\n            }\n            // Clear expired entries from the cache\n            for (const [cid, peers] of deleted) {\n                const key = makeProviderKey(cid);\n                const provs = this.cache.get(key);\n                if (provs != null) {\n                    for (const peerId of peers) {\n                        provs.delete(peerId);\n                    }\n                    if (provs.size === 0) {\n                        this.cache.remove(key);\n                    }\n                    else {\n                        this.cache.set(key, provs);\n                    }\n                }\n            }\n            log('Cleanup successful (%dms)', Date.now() - start);\n        });\n    }\n    /**\n     * Get the currently known provider peer ids for a given CID\n     */\n    async _getProvidersMap(cid) {\n        const cacheKey = makeProviderKey(cid);\n        let provs = this.cache.get(cacheKey);\n        if (provs == null) {\n            provs = await loadProviders(this.components.datastore, cid);\n            this.cache.set(cacheKey, provs);\n        }\n        return provs;\n    }\n    /**\n     * Add a new provider for the given CID\n     */\n    async addProvider(cid, provider) {\n        await this.syncQueue.add(async () => {\n            log('%p provides %s', provider, cid);\n            const provs = await this._getProvidersMap(cid);\n            log('loaded %s provs', provs.size);\n            const now = new Date();\n            provs.set(provider.toString(), now);\n            const dsKey = makeProviderKey(cid);\n            this.cache.set(dsKey, provs);\n            await writeProviderEntry(this.components.datastore, cid, provider, now);\n        });\n    }\n    /**\n     * Get a list of providers for the given CID\n     */\n    async getProviders(cid) {\n        return await this.syncQueue.add(async () => {\n            log('get providers for %s', cid);\n            const provs = await this._getProvidersMap(cid);\n            return [...provs.keys()].map(peerIdStr => {\n                return peerIdFromString(peerIdStr);\n            });\n        }, {\n            // no timeout is specified for this queue so it will not\n            // throw, but this is required to get the right return\n            // type since p-queue@7.3.4\n            throwOnTimeout: true\n        });\n    }\n}\n/**\n * Encode the given key its matching datastore key\n */\nfunction makeProviderKey(cid) {\n    const cidStr = typeof cid === 'string' ? cid : uint8ArrayToString(cid.multihash.bytes, 'base32');\n    return `${PROVIDER_KEY_PREFIX}/${cidStr}`;\n}\n/**\n * Write a provider into the given store\n */\nasync function writeProviderEntry(store, cid, peer, time) {\n    const dsKey = [\n        makeProviderKey(cid),\n        '/',\n        peer.toString()\n    ].join('');\n    const key = new Key(dsKey);\n    const buffer = Uint8Array.from(varint.encode(time.getTime()));\n    await store.put(key, buffer);\n}\n/**\n * Parse the CID and provider peer id from the key\n */\nfunction parseProviderKey(key) {\n    const parts = key.toString().split('/');\n    if (parts.length !== 5) {\n        throw new Error(`incorrectly formatted provider entry key in datastore: ${key.toString()}`);\n    }\n    return {\n        cid: parts[3],\n        peerId: parts[4]\n    };\n}\n/**\n * Load providers for the given CID from the store\n */\nasync function loadProviders(store, cid) {\n    const providers = new Map();\n    const query = store.query({ prefix: makeProviderKey(cid) });\n    for await (const entry of query) {\n        const { peerId } = parseProviderKey(entry.key);\n        providers.set(peerId, readTime(entry.value));\n    }\n    return providers;\n}\nfunction readTime(buf) {\n    return new Date(varint.decode(buf));\n}\n//# sourceMappingURL=providers.js.map","import Queue from 'p-queue';\nimport { xor } from 'uint8arrays/xor';\nimport { toString } from 'uint8arrays/to-string';\nimport defer from 'p-defer';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { convertPeerId, convertBuffer } from '../utils.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { queryErrorEvent } from './events.js';\nconst MAX_XOR = BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\n/**\n * Walks a path through the DHT, calling the passed query function for\n * every peer encountered that we have not seen before\n */\nexport async function* queryPath(options) {\n    const { key, startingPeer, ourPeerId, signal, query, alpha, pathIndex, numPaths, cleanUp, queryFuncTimeout, log, peersSeen } = options;\n    // Only ALPHA node/value lookups are allowed at any given time for each process\n    // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1\n    const queue = new Queue({\n        concurrency: alpha\n    });\n    // perform lookups on kadId, not the actual value\n    const kadId = await convertBuffer(key);\n    /**\n     * Adds the passed peer to the query queue if it's not us and no\n     * other path has passed through this peer\n     */\n    function queryPeer(peer, peerKadId) {\n        if (peer == null) {\n            return;\n        }\n        peersSeen.add(peer);\n        const peerXor = BigInt('0x' + toString(xor(peerKadId, kadId), 'base16'));\n        queue.add(async () => {\n            let timeout;\n            const signals = [signal];\n            if (queryFuncTimeout != null) {\n                timeout = new TimeoutController(queryFuncTimeout);\n                signals.push(timeout.signal);\n            }\n            const compoundSignal = anySignal(signals);\n            try {\n                for await (const event of query({\n                    key,\n                    peer,\n                    signal: compoundSignal,\n                    pathIndex,\n                    numPaths\n                })) {\n                    if (compoundSignal.aborted) {\n                        return;\n                    }\n                    // if there are closer peers and the query has not completed, continue the query\n                    if (event.name === 'PEER_RESPONSE') {\n                        for (const closerPeer of event.closer) {\n                            if (peersSeen.has(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('already seen %p in query', closerPeer.id);\n                                continue;\n                            }\n                            if (ourPeerId.equals(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('not querying ourselves');\n                                continue;\n                            }\n                            const closerPeerKadId = await convertPeerId(closerPeer.id);\n                            const closerPeerXor = BigInt('0x' + toString(xor(closerPeerKadId, kadId), 'base16'));\n                            // only continue query if closer peer is actually closer\n                            if (closerPeerXor > peerXor) { // eslint-disable-line max-depth\n                                log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer);\n                                continue;\n                            }\n                            log('querying closer peer %p', closerPeer.id);\n                            queryPeer(closerPeer.id, closerPeerKadId);\n                        }\n                    }\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('completed', event);\n                }\n                timeout?.clear();\n            }\n            catch (err) {\n                if (signal.aborted) {\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('error', err);\n                }\n                else {\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('completed', queryErrorEvent({\n                        from: peer,\n                        error: err\n                    }));\n                }\n            }\n            finally {\n                timeout?.clear();\n            }\n        }, {\n            // use xor value as the queue priority - closer peers should execute first\n            // subtract it from MAX_XOR because higher priority values execute sooner\n            // @ts-expect-error this is supposed to be a Number but it's ok to use BigInts\n            // as long as all priorities are BigInts since we won't mix BigInts and Number\n            // values in arithmetic operations\n            priority: MAX_XOR - peerXor\n        }).catch(err => {\n            log.error(err);\n        });\n    }\n    // begin the query with the starting peer\n    queryPeer(startingPeer, await convertPeerId(startingPeer));\n    // yield results as they come in\n    yield* toGenerator(queue, signal, cleanUp, log);\n}\nasync function* toGenerator(queue, signal, cleanUp, log) {\n    let deferred = defer();\n    let running = true;\n    const results = [];\n    const cleanup = () => {\n        if (!running) {\n            return;\n        }\n        log('clean up queue, results %d, queue size %d, pending tasks %d', results.length, queue.size, queue.pending);\n        running = false;\n        queue.clear();\n        results.splice(0, results.length);\n    };\n    queue.on('completed', result => {\n        results.push(result);\n        deferred.resolve();\n    });\n    queue.on('error', err => {\n        log('queue error', err);\n        cleanup();\n        deferred.reject(err);\n    });\n    queue.on('idle', () => {\n        log('queue idle');\n        running = false;\n        deferred.resolve();\n    });\n    // clear the queue and throw if the query is aborted\n    signal.addEventListener('abort', () => {\n        log('abort queue');\n        const wasRunning = running;\n        cleanup();\n        if (wasRunning) {\n            deferred.reject(new CodeError('Query aborted', 'ERR_QUERY_ABORTED'));\n        }\n    });\n    // the user broke out of the loop early, ensure we resolve the deferred result\n    // promise and clear the queue of any remaining jobs\n    cleanUp.addEventListener('cleanup', () => {\n        cleanup();\n        deferred.resolve();\n    });\n    while (running) { // eslint-disable-line no-unmodified-loop-condition\n        await deferred.promise;\n        deferred = defer();\n        // yield all available results\n        while (results.length > 0) {\n            const result = results.shift();\n            if (result != null) {\n                yield result;\n            }\n        }\n    }\n    // yield any remaining results\n    yield* results;\n}\n//# sourceMappingURL=query-path.js.map","import { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { ALPHA, K, DEFAULT_QUERY_TIMEOUT } from '../constants.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { queryPath } from './query-path.js';\nimport merge from 'it-merge';\nimport { setMaxListeners } from 'events';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { PeerSet } from '@libp2p/peer-collections';\n/**\n * Keeps track of all running queries\n */\nexport class QueryManager {\n    constructor(components, init) {\n        const { lan = false, disjointPaths = K, alpha = ALPHA } = init;\n        this.components = components;\n        this.disjointPaths = disjointPaths ?? K;\n        this.controllers = new Set();\n        this.running = false;\n        this.alpha = alpha ?? ALPHA;\n        this.lan = lan;\n        this.queries = 0;\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Starts the query manager\n     */\n    async start() {\n        this.running = true;\n        if (this.components.metrics != null && this.metrics == null) {\n            this.metrics = {\n                runningQueries: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_running_queries`),\n                queryTime: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_query_time_seconds`)\n            };\n        }\n    }\n    /**\n     * Stops all queries\n     */\n    async stop() {\n        this.running = false;\n        for (const controller of this.controllers) {\n            controller.abort();\n        }\n        this.controllers.clear();\n    }\n    async *run(key, peers, queryFunc, options = {}) {\n        if (!this.running) {\n            throw new Error('QueryManager not started');\n        }\n        const stopQueryTimer = this.metrics?.queryTime.timer();\n        let timeoutController;\n        if (options.signal == null) {\n            // don't let queries run forever\n            timeoutController = new TimeoutController(DEFAULT_QUERY_TIMEOUT);\n            options.signal = timeoutController.signal;\n            // this signal will get listened to for network requests, etc\n            // so make sure we don't make a lot of noise in the logs\n            try {\n                if (setMaxListeners != null) {\n                    setMaxListeners(Infinity, timeoutController.signal);\n                }\n            }\n            catch { } // fails on node < 15.4\n        }\n        // allow us to stop queries on shut down\n        const abortController = new AbortController();\n        this.controllers.add(abortController);\n        const signals = [abortController.signal];\n        if (options.signal != null) {\n            signals.push(options.signal);\n        }\n        const signal = anySignal(signals);\n        // this signal will get listened to for every invocation of queryFunc\n        // so make sure we don't make a lot of noise in the logs\n        try {\n            if (setMaxListeners != null) {\n                setMaxListeners(Infinity, signal);\n            }\n        }\n        catch { } // fails on node < 15.4\n        const log = logger(`libp2p:kad-dht:${this.lan ? 'lan' : 'wan'}:query:` + uint8ArrayToString(key, 'base58btc'));\n        // query a subset of peers up to `kBucketSize / 2` in length\n        const peersToQuery = peers.slice(0, Math.min(this.disjointPaths, peers.length));\n        const startTime = Date.now();\n        const cleanUp = new EventEmitter();\n        try {\n            log('query:start');\n            this.queries++;\n            this.metrics?.runningQueries.update(this.queries);\n            if (peers.length === 0) {\n                log.error('Running query with no peers');\n                return;\n            }\n            // make sure we don't get trapped in a loop\n            const peersSeen = new PeerSet();\n            // Create query paths from the starting peers\n            const paths = peersToQuery.map((peer, index) => {\n                return queryPath({\n                    key,\n                    startingPeer: peer,\n                    ourPeerId: this.components.peerId,\n                    signal,\n                    query: queryFunc,\n                    pathIndex: index,\n                    numPaths: peersToQuery.length,\n                    alpha: this.alpha,\n                    cleanUp,\n                    queryFuncTimeout: options.queryFuncTimeout,\n                    log,\n                    peersSeen\n                });\n            });\n            // Execute the query along each disjoint path and yield their results as they become available\n            for await (const event of merge(...paths)) {\n                yield event;\n                if (event.name === 'QUERY_ERROR') {\n                    log('error', event.error);\n                }\n            }\n        }\n        catch (err) {\n            if (!this.running && err.code === 'ERR_QUERY_ABORTED') {\n                // ignore query aborted errors that were thrown during query manager shutdown\n            }\n            else {\n                throw err;\n            }\n        }\n        finally {\n            this.controllers.delete(abortController);\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            this.queries--;\n            this.metrics?.runningQueries.update(this.queries);\n            if (stopQueryTimer != null) {\n                stopQueryTimer();\n            }\n            cleanUp.dispatchEvent(new CustomEvent('cleanup'));\n            log('query:done in %dms', Date.now() - startTime);\n        }\n    }\n}\n//# sourceMappingURL=manager.js.map","import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:add-provider');\nexport class AddProviderHandler {\n    constructor(init) {\n        const { providers } = init;\n        this.providers = providers;\n    }\n    async handle(peerId, msg) {\n        log('start');\n        if (msg.key == null || msg.key.length === 0) {\n            throw new CodeError('Missing key', 'ERR_MISSING_KEY');\n        }\n        let cid;\n        try {\n            // this is actually just the multihash, not the whole CID\n            cid = CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        if (msg.providerPeers == null || msg.providerPeers.length === 0) {\n            log.error('no providers found in message');\n        }\n        await Promise.all(msg.providerPeers.map(async (pi) => {\n            // Ignore providers not from the originator\n            if (!pi.id.equals(peerId)) {\n                log('invalid provider peer %p from %p', pi.id, peerId);\n                return;\n            }\n            if (pi.multiaddrs.length < 1) {\n                log('no valid addresses for provider %p. Ignore', peerId);\n                return;\n            }\n            log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map((m) => m.toString()));\n            await this.providers.addProvider(cid, pi.id);\n        }));\n        return undefined;\n    }\n}\n//# sourceMappingURL=add-provider.js.map","import { Message } from '../../message/index.js';\nimport { logger } from '@libp2p/logger';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:kad-dht:rpc:handlers:find-node');\nexport class FindNodeHandler {\n    constructor(components, init) {\n        const { peerRouting, lan } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n        this.lan = Boolean(lan);\n    }\n    /**\n     * Process `FindNode` DHT messages\n     */\n    async handle(peerId, msg) {\n        log('incoming request from %p for peers closer to %b', peerId, msg.key);\n        let closer = [];\n        if (uint8ArrayEquals(this.components.peerId.toBytes(), msg.key)) {\n            closer = [{\n                    id: this.components.peerId,\n                    multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code)),\n                    protocols: []\n                }];\n        }\n        else {\n            closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId);\n        }\n        closer = closer\n            .map(this.lan ? removePublicAddresses : removePrivateAddresses)\n            .filter(({ multiaddrs }) => multiaddrs.length);\n        const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n        if (closer.length > 0) {\n            response.closerPeers = closer;\n        }\n        else {\n            log('could not find any peers closer to %b than %p', msg.key, peerId);\n        }\n        return response;\n    }\n}\n//# sourceMappingURL=find-node.js.map","import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Message } from '../../message/index.js';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-providers');\nexport class GetProvidersHandler {\n    constructor(components, init) {\n        const { peerRouting, providers, lan } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n        this.providers = providers;\n        this.lan = Boolean(lan);\n    }\n    async handle(peerId, msg) {\n        let cid;\n        try {\n            cid = CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        log('%p asking for providers for %s', peerId, cid);\n        const [peers, closer] = await Promise.all([\n            this.providers.getProviders(cid),\n            this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n        ]);\n        const providerPeers = await this._getPeers(peers);\n        const closerPeers = await this._getPeers(closer.map(({ id }) => id));\n        const response = new Message(msg.type, msg.key, msg.clusterLevel);\n        if (providerPeers.length > 0) {\n            response.providerPeers = providerPeers;\n        }\n        if (closerPeers.length > 0) {\n            response.closerPeers = closerPeers;\n        }\n        log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n        return response;\n    }\n    async _getAddresses(peerId) {\n        const addrs = await this.components.peerStore.addressBook.get(peerId);\n        return addrs.map(address => address.multiaddr);\n    }\n    async _getPeers(peerIds) {\n        const output = [];\n        const addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses;\n        for (const peerId of peerIds) {\n            const peer = addrFilter({\n                id: peerId,\n                multiaddrs: await this._getAddresses(peerId),\n                protocols: []\n            });\n            if (peer.multiaddrs.length > 0) {\n                output.push(peer);\n            }\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=get-providers.js.map","import { Libp2pRecord } from '@libp2p/record';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Message, MESSAGE_TYPE } from '../../message/index.js';\nimport { MAX_RECORD_AGE } from '../../constants.js';\nimport { bufferToRecordKey, isPublicKeyKey, fromPublicKeyKey } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-value');\nexport class GetValueHandler {\n    constructor(components, init) {\n        const { peerRouting } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        log('%p asked for key %b', peerId, key);\n        if (key == null || key.length === 0) {\n            throw new CodeError('Invalid key', 'ERR_INVALID_KEY');\n        }\n        const response = new Message(MESSAGE_TYPE.GET_VALUE, key, msg.clusterLevel);\n        if (isPublicKeyKey(key)) {\n            log('is public key');\n            const idFromKey = fromPublicKeyKey(key);\n            let pubKey;\n            try {\n                const key = await this.components.peerStore.keyBook.get(idFromKey);\n                if (key == null) {\n                    throw new CodeError('No public key found in key book', 'ERR_NOT_FOUND');\n                }\n                pubKey = key;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n            if (pubKey != null) {\n                log('returning found public key');\n                response.record = new Libp2pRecord(key, pubKey, new Date());\n                return response;\n            }\n        }\n        const [record, closer] = await Promise.all([\n            this._checkLocalDatastore(key),\n            this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n        ]);\n        if (record != null) {\n            log('had record for %b in local datastore', key);\n            response.record = record;\n        }\n        if (closer.length > 0) {\n            log('had %s closer peers in routing table', closer.length);\n            response.closerPeers = closer;\n        }\n        return response;\n    }\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record if it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     */\n    async _checkLocalDatastore(key) {\n        log('checkLocalDatastore looking for %b', key);\n        const dsKey = bufferToRecordKey(key);\n        // Fetch value from ds\n        let rawRecord;\n        try {\n            rawRecord = await this.components.datastore.get(dsKey);\n        }\n        catch (err) {\n            if (err.code === 'ERR_NOT_FOUND') {\n                return undefined;\n            }\n            throw err;\n        }\n        // Create record from the returned bytes\n        const record = Libp2pRecord.deserialize(rawRecord);\n        if (record == null) {\n            throw new CodeError('Invalid record', 'ERR_INVALID_RECORD');\n        }\n        // Check validity: compare time received with max record age\n        if (record.timeReceived == null ||\n            Date.now() - record.timeReceived.getTime() > MAX_RECORD_AGE) {\n            // If record is bad delete it and return\n            await this.components.datastore.delete(dsKey);\n            return undefined;\n        }\n        // Record is valid\n        return record;\n    }\n}\n//# sourceMappingURL=get-value.js.map","import { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:ping');\nexport class PingHandler {\n    async handle(peerId, msg) {\n        log('ping from %p', peerId);\n        return msg;\n    }\n}\n//# sourceMappingURL=ping.js.map","import { bufferToRecordKey } from '../../utils.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { logger } from '@libp2p/logger';\nexport class PutValueHandler {\n    constructor(components, init) {\n        const { validators } = init;\n        this.components = components;\n        this.log = logger('libp2p:kad-dht:rpc:handlers:put-value');\n        this.validators = validators;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        this.log('%p asked us to store value for key %b', peerId, key);\n        const record = msg.record;\n        if (record == null) {\n            const errMsg = `Empty record from: ${peerId.toString()}`;\n            this.log.error(errMsg);\n            throw new CodeError(errMsg, 'ERR_EMPTY_RECORD');\n        }\n        try {\n            await verifyRecord(this.validators, record);\n            record.timeReceived = new Date();\n            const recordKey = bufferToRecordKey(record.key);\n            await this.components.datastore.put(recordKey, record.serialize().subarray());\n            this.log('put record for %b into datastore under key %k', key, recordKey);\n        }\n        catch (err) {\n            this.log('did not put record for key %b into datastore %o', key, err);\n        }\n        return msg;\n    }\n}\n//# sourceMappingURL=put-value.js.map","import { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport { logger } from '@libp2p/logger';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { AddProviderHandler } from './handlers/add-provider.js';\nimport { FindNodeHandler } from './handlers/find-node.js';\nimport { GetProvidersHandler } from './handlers/get-providers.js';\nimport { GetValueHandler } from './handlers/get-value.js';\nimport { PingHandler } from './handlers/ping.js';\nimport { PutValueHandler } from './handlers/put-value.js';\nexport class RPC {\n    constructor(components, init) {\n        const { providers, peerRouting, validators, lan } = init;\n        this.log = logger('libp2p:kad-dht:rpc');\n        this.routingTable = init.routingTable;\n        this.handlers = {\n            [MESSAGE_TYPE.GET_VALUE]: new GetValueHandler(components, { peerRouting }),\n            [MESSAGE_TYPE.PUT_VALUE]: new PutValueHandler(components, { validators }),\n            [MESSAGE_TYPE.FIND_NODE]: new FindNodeHandler(components, { peerRouting, lan }),\n            [MESSAGE_TYPE.ADD_PROVIDER]: new AddProviderHandler({ providers }),\n            [MESSAGE_TYPE.GET_PROVIDERS]: new GetProvidersHandler(components, { peerRouting, providers, lan }),\n            [MESSAGE_TYPE.PING]: new PingHandler()\n        };\n    }\n    /**\n     * Process incoming DHT messages\n     */\n    async handleMessage(peerId, msg) {\n        try {\n            await this.routingTable.add(peerId);\n        }\n        catch (err) {\n            this.log.error('Failed to update the kbucket store', err);\n        }\n        // get handler & execute it\n        const handler = this.handlers[msg.type];\n        if (handler == null) {\n            this.log.error(`no handler found for message type: ${msg.type}`);\n            return;\n        }\n        return await handler.handle(peerId, msg);\n    }\n    /**\n     * Handle incoming streams on the dht protocol\n     */\n    onIncomingStream(data) {\n        Promise.resolve().then(async () => {\n            const { stream, connection } = data;\n            const peerId = connection.remotePeer;\n            try {\n                await this.routingTable.add(peerId);\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n            const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            await pipe(stream, lp.decode(), async function* (source) {\n                for await (const msg of source) {\n                    // handle the message\n                    const desMessage = Message.deserialize(msg);\n                    self.log('incoming %s from %p', desMessage.type, peerId);\n                    const res = await self.handleMessage(peerId, desMessage);\n                    // Not all handlers will return a response\n                    if (res != null) {\n                        yield res.serialize();\n                    }\n                }\n            }, lp.encode(), stream);\n        })\n            .catch(err => {\n            this.log.error(err);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","import { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends EventEmitter {\n    constructor(components, init) {\n        super();\n        const { protocol, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n        // register protocol with topology\n        const topology = createTopology({\n            onConnect: (peerId) => {\n                this.log('observed peer %p with protocol %s', peerId, this.protocol);\n                this.dispatchEvent(new CustomEvent('peer', {\n                    detail: peerId\n                }));\n            }\n        });\n        this.registrarId = await this.components.registrar.register(this.protocol, topology);\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n        // unregister protocol and handlers\n        if (this.registrarId != null) {\n            this.components.registrar.unregister(this.registrarId);\n            this.registrarId = undefined;\n        }\n    }\n}\n//# sourceMappingURL=topology-listener.js.map","import { setMaxListeners } from 'events';\nimport take from 'it-take';\nimport length from 'it-length';\nimport { QUERY_SELF_INTERVAL, QUERY_SELF_TIMEOUT, K } from './constants.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { logger } from '@libp2p/logger';\nimport { pipe } from 'it-pipe';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class QuerySelf {\n    constructor(components, init) {\n        const { peerRouting, lan, count, interval, queryTimeout } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:query-self`);\n        this.running = false;\n        this.peerRouting = peerRouting;\n        this.count = count ?? K;\n        this.interval = interval ?? QUERY_SELF_INTERVAL;\n        this.queryTimeout = queryTimeout ?? QUERY_SELF_TIMEOUT;\n    }\n    isStarted() {\n        return this.running;\n    }\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n        this._querySelf();\n    }\n    async stop() {\n        this.running = false;\n        if (this.timeoutId != null) {\n            clearTimeout(this.timeoutId);\n        }\n        if (this.controller != null) {\n            this.controller.abort();\n        }\n    }\n    _querySelf() {\n        Promise.resolve().then(async () => {\n            const timeoutController = new TimeoutController(this.queryTimeout);\n            try {\n                this.controller = new AbortController();\n                const signal = anySignal([this.controller.signal, timeoutController.signal]);\n                // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged\n                try {\n                    if (setMaxListeners != null) {\n                        setMaxListeners(Infinity, signal);\n                    }\n                }\n                catch { } // fails on node < 15.4\n                const found = await pipe(this.peerRouting.getClosestPeers(this.components.peerId.toBytes(), {\n                    signal\n                }), (source) => take(source, this.count), async (source) => await length(source));\n                this.log('query ran successfully - found %d peers', found);\n            }\n            catch (err) {\n                this.log('query error', err);\n            }\n            finally {\n                this.timeoutId = setTimeout(this._querySelf.bind(this), this.interval);\n                timeoutController.clear();\n            }\n        }).catch(err => {\n            this.log('query error', err);\n        });\n    }\n}\n//# sourceMappingURL=query-self.js.map","import { RoutingTable } from './routing-table/index.js';\nimport { RoutingTableRefresh } from './routing-table/refresh.js';\nimport { Network } from './network.js';\nimport { ContentFetching } from './content-fetching/index.js';\nimport { ContentRouting } from './content-routing/index.js';\nimport { PeerRouting } from './peer-routing/index.js';\nimport { Providers } from './providers.js';\nimport { QueryManager } from './query/manager.js';\nimport { RPC } from './rpc/index.js';\nimport { TopologyListener } from './topology-listener.js';\nimport { QuerySelf } from './query-self.js';\nimport { removePrivateAddresses, removePublicAddresses } from './utils.js';\nimport { logger } from '@libp2p/logger';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { validators as recordValidators } from '@libp2p/record/validators';\nimport { selectors as recordSelectors } from '@libp2p/record/selectors';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nimport { PROTOCOL_DHT, PROTOCOL_PREFIX, LAN_PREFIX } from './constants.js';\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class KadDHT extends EventEmitter {\n    /**\n     * Create a new KadDHT\n     */\n    constructor(components, init) {\n        super();\n        const { kBucketSize, clientMode, validators, selectors, querySelfInterval, lan, protocolPrefix, pingTimeout, pingConcurrency, maxInboundStreams, maxOutboundStreams, providers: providersInit } = init;\n        this.running = false;\n        this.components = components;\n        this.lan = Boolean(lan);\n        this.log = logger(`libp2p:kad-dht:${lan === true ? 'lan' : 'wan'}`);\n        this.protocol = `${protocolPrefix ?? PROTOCOL_PREFIX}${lan === true ? LAN_PREFIX : ''}${PROTOCOL_DHT}`;\n        this.kBucketSize = kBucketSize ?? 20;\n        this.clientMode = clientMode ?? true;\n        this.maxInboundStreams = maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n        this.maxOutboundStreams = maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n        this.routingTable = new RoutingTable(components, {\n            kBucketSize,\n            lan: this.lan,\n            pingTimeout,\n            pingConcurrency,\n            protocol: this.protocol\n        });\n        this.providers = new Providers(components, providersInit ?? {});\n        this.validators = {\n            ...recordValidators,\n            ...validators\n        };\n        this.selectors = {\n            ...recordSelectors,\n            ...selectors\n        };\n        this.network = new Network(components, {\n            protocol: this.protocol,\n            lan: this.lan\n        });\n        this.queryManager = new QueryManager(components, {\n            // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n            disjointPaths: Math.ceil(this.kBucketSize / 2),\n            lan\n        });\n        // DHT components\n        this.peerRouting = new PeerRouting(components, {\n            routingTable: this.routingTable,\n            network: this.network,\n            validators: this.validators,\n            queryManager: this.queryManager,\n            lan: this.lan\n        });\n        this.contentFetching = new ContentFetching(components, {\n            validators: this.validators,\n            selectors: this.selectors,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            routingTable: this.routingTable,\n            network: this.network,\n            lan: this.lan\n        });\n        this.contentRouting = new ContentRouting(components, {\n            network: this.network,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            routingTable: this.routingTable,\n            providers: this.providers,\n            lan: this.lan\n        });\n        this.routingTableRefresh = new RoutingTableRefresh({\n            peerRouting: this.peerRouting,\n            routingTable: this.routingTable,\n            lan: this.lan\n        });\n        this.rpc = new RPC(components, {\n            routingTable: this.routingTable,\n            providers: this.providers,\n            peerRouting: this.peerRouting,\n            validators: this.validators,\n            lan: this.lan\n        });\n        this.topologyListener = new TopologyListener(components, {\n            protocol: this.protocol,\n            lan: this.lan\n        });\n        this.querySelf = new QuerySelf(components, {\n            peerRouting: this.peerRouting,\n            interval: querySelfInterval,\n            lan: this.lan\n        });\n        // handle peers being discovered during processing of DHT messages\n        this.network.addEventListener('peer', (evt) => {\n            const peerData = evt.detail;\n            this.onPeerConnect(peerData).catch(err => {\n                this.log.error('could not add %p to routing table', peerData.id, err);\n            });\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        // handle peers being discovered via other peer discovery mechanisms\n        this.topologyListener.addEventListener('peer', (evt) => {\n            const peerId = evt.detail;\n            Promise.resolve().then(async () => {\n                const multiaddrs = await this.components.peerStore.addressBook.get(peerId);\n                const peerData = {\n                    id: peerId,\n                    multiaddrs: multiaddrs.map(addr => addr.multiaddr),\n                    protocols: []\n                };\n                await this.onPeerConnect(peerData);\n            }).catch(err => {\n                this.log.error('could not add %p to routing table', peerId, err);\n            });\n        });\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/kad-dht';\n    }\n    async onPeerConnect(peerData) {\n        this.log('peer %p connected with protocols %s', peerData.id, peerData.protocols);\n        if (this.lan) {\n            peerData = removePublicAddresses(peerData);\n        }\n        else {\n            peerData = removePrivateAddresses(peerData);\n        }\n        if (peerData.multiaddrs.length === 0) {\n            this.log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this.lan ? 'private' : 'public', peerData.multiaddrs.map(addr => addr.toString()));\n            return;\n        }\n        try {\n            await this.routingTable.add(peerData.id);\n        }\n        catch (err) {\n            this.log.error('could not add %p to routing table', peerData.id, err);\n        }\n    }\n    /**\n     * Is this DHT running.\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async getMode() {\n        return this.clientMode ? 'client' : 'server';\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async setMode(mode) {\n        await this.components.registrar.unhandle(this.protocol);\n        if (mode === 'client') {\n            this.log('enabling client mode');\n            this.clientMode = true;\n        }\n        else {\n            this.log('enabling server mode');\n            this.clientMode = false;\n            await this.components.registrar.handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n                maxInboundStreams: this.maxInboundStreams,\n                maxOutboundStreams: this.maxOutboundStreams\n            });\n        }\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n    async start() {\n        this.running = true;\n        // Only respond to queries when not in client mode\n        await this.setMode(this.clientMode ? 'client' : 'server');\n        await Promise.all([\n            this.providers.start(),\n            this.queryManager.start(),\n            this.network.start(),\n            this.routingTable.start(),\n            this.topologyListener.start(),\n            this.querySelf.start()\n        ]);\n        await this.routingTableRefresh.start();\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n    async stop() {\n        this.running = false;\n        await Promise.all([\n            this.providers.stop(),\n            this.queryManager.stop(),\n            this.network.stop(),\n            this.routingTable.stop(),\n            this.routingTableRefresh.stop(),\n            this.topologyListener.stop(),\n            this.querySelf.stop()\n        ]);\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        yield* this.contentFetching.put(key, value, options);\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n    async *get(key, options = {}) {\n        yield* this.contentFetching.get(key, options);\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n    async *provide(key, options = {}) {\n        yield* this.contentRouting.provide(key, this.components.addressManager.getAddresses(), options);\n    }\n    /**\n     * Search the dht for providers of the given CID\n     */\n    async *findProviders(key, options = {}) {\n        yield* this.contentRouting.findProviders(key, options);\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        yield* this.peerRouting.findPeer(id, options);\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n    async *getClosestPeers(key, options = {}) {\n        yield* this.peerRouting.getClosestPeers(key, options);\n    }\n    async refreshRoutingTable() {\n        this.routingTableRefresh.refreshTable(true);\n    }\n}\n//# sourceMappingURL=kad-dht.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport merge from 'it-merge';\nimport { queryErrorEvent } from './query/events.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nconst log = logger('libp2p:kad-dht');\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class DualKadDHT extends EventEmitter {\n    constructor(components, wan, lan) {\n        super();\n        this.components = components;\n        this.wan = wan;\n        this.lan = lan;\n        // handle peers being discovered during processing of DHT messages\n        this.wan.addEventListener('peer', (evt) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: evt.detail\n            }));\n        });\n        this.lan.addEventListener('peer', (evt) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: evt.detail\n            }));\n        });\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/dual-kad-dht';\n    }\n    /**\n     * Is this DHT running.\n     */\n    isStarted() {\n        return this.wan.isStarted() && this.lan.isStarted();\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async getMode() {\n        return await this.wan.getMode();\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async setMode(mode) {\n        await this.wan.setMode(mode);\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n    async start() {\n        await Promise.all([\n            this.lan.start(),\n            this.wan.start()\n        ]);\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n    async stop() {\n        await Promise.all([\n            this.lan.stop(),\n            this.wan.stop()\n        ]);\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        for await (const event of merge(this.lan.put(key, value, options), this.wan.put(key, value, options))) {\n            yield event;\n        }\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n    async *get(key, options = {}) {\n        let queriedPeers = false;\n        let foundValue = false;\n        for await (const event of merge(this.lan.get(key, options), this.wan.get(key, options))) {\n            yield event;\n            if (event.name === 'DIALING_PEER') {\n                queriedPeers = true;\n            }\n            if (event.name === 'VALUE') {\n                queriedPeers = true;\n                if (event.value != null) {\n                    foundValue = true;\n                }\n            }\n            if (event.name === 'SENDING_QUERY') {\n                queriedPeers = true;\n            }\n        }\n        if (!queriedPeers) {\n            throw new CodeError('No peers found in routing table!', 'ERR_NO_PEERS_IN_ROUTING_TABLE');\n        }\n        if (!foundValue) {\n            yield queryErrorEvent({\n                from: this.components.peerId,\n                error: new CodeError('Not found', 'ERR_NOT_FOUND')\n            });\n        }\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n    async *provide(key, options = {}) {\n        let sent = 0;\n        let success = 0;\n        const errors = [];\n        const dhts = [this.lan];\n        // only run provide on the wan if we are in server mode\n        if ((await this.wan.getMode()) === 'server') {\n            dhts.push(this.wan);\n        }\n        for await (const event of merge(...dhts.map(dht => dht.provide(key, options)))) {\n            yield event;\n            if (event.name === 'SENDING_QUERY') {\n                sent++;\n            }\n            if (event.name === 'QUERY_ERROR') {\n                errors.push(event.error);\n            }\n            if (event.name === 'PEER_RESPONSE' && event.messageName === 'ADD_PROVIDER') {\n                log('sent provider record for %s to %p', key, event.from);\n                success++;\n            }\n        }\n        if (success === 0) {\n            if (errors.length > 0) {\n                // if all sends failed, throw an error to inform the caller\n                throw new CodeError(`Failed to provide to ${errors.length} of ${sent} peers`, 'ERR_PROVIDES_FAILED', { errors });\n            }\n            throw new CodeError('Failed to provide - no peers found', 'ERR_PROVIDES_FAILED');\n        }\n    }\n    /**\n     * Search the dht for up to `K` providers of the given CID\n     */\n    async *findProviders(key, options = {}) {\n        yield* merge(this.lan.findProviders(key, options), this.wan.findProviders(key, options));\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        let queriedPeers = false;\n        for await (const event of merge(this.lan.findPeer(id, options), this.wan.findPeer(id, options))) {\n            yield event;\n            if (event.name === 'SENDING_QUERY' || event.name === 'FINAL_PEER') {\n                queriedPeers = true;\n            }\n        }\n        if (!queriedPeers) {\n            throw new CodeError('Peer lookup failed', 'ERR_LOOKUP_FAILED');\n        }\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n    async *getClosestPeers(key, options = {}) {\n        yield* merge(this.lan.getClosestPeers(key, options), this.wan.getClosestPeers(key, options));\n    }\n    async refreshRoutingTable() {\n        await Promise.all([\n            this.lan.refreshRoutingTable(),\n            this.wan.refreshRoutingTable()\n        ]);\n    }\n}\n//# sourceMappingURL=dual-kad-dht.js.map","import { KadDHT as SingleKadDHT } from './kad-dht.js';\nimport { DualKadDHT } from './dual-kad-dht.js';\nclass KadDHT extends DualKadDHT {\n    constructor(components, init) {\n        super(components, new SingleKadDHT(components, {\n            protocolPrefix: '/ipfs',\n            ...init,\n            lan: false\n        }), new SingleKadDHT(components, {\n            protocolPrefix: '/ipfs',\n            ...init,\n            clientMode: false,\n            lan: true\n        }));\n    }\n}\nexport function kadDHT(init) {\n    return (components) => new KadDHT(components, init);\n}\n//# sourceMappingURL=index.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { IpNet } from '@chainsafe/netmask';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'));\nexport const WebRTCDirect = or(and(_WebRTCDirect, base('p2p')), _WebRTCDirect);\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, P2PWebRTCStar, P2PWebRTCDirect, TCP, UTP, QUIC, DNS, WebRTCDirect);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), P2PWebRTCStar, P2PWebRTCDirect, WebRTCDirect, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\nexport const WebRTC = or(and(Circuit, base('webrtc')), and(Reliable, base('webrtc')), base('webrtc'));\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport { P2P } from '@multiformats/mafmt';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nconst log = logger('libp2p:bootstrap');\nconst DEFAULT_BOOTSTRAP_TAG_NAME = 'bootstrap';\nconst DEFAULT_BOOTSTRAP_TAG_VALUE = 50;\nconst DEFAULT_BOOTSTRAP_TAG_TTL = 120000;\nconst DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1000;\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends EventEmitter {\n    constructor(components, options = { list: [] }) {\n        if (options.list == null || options.list.length === 0) {\n            throw new Error('Bootstrap requires a list of peer addresses');\n        }\n        super();\n        this.components = components;\n        this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT;\n        this.list = [];\n        for (const candidate of options.list) {\n            if (!P2P.matches(candidate)) {\n                log.error('Invalid multiaddr');\n                continue;\n            }\n            const ma = multiaddr(candidate);\n            const peerIdStr = ma.getPeerId();\n            if (peerIdStr == null) {\n                log.error('Invalid bootstrap multiaddr without peer id');\n                continue;\n            }\n            const peerData = {\n                id: peerIdFromString(peerIdStr),\n                multiaddrs: [ma],\n                protocols: []\n            };\n            this.list.push(peerData);\n        }\n        this._init = options;\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/bootstrap';\n    }\n    isStarted() {\n        return Boolean(this.timer);\n    }\n    /**\n     * Start emitting events\n     */\n    start() {\n        if (this.isStarted()) {\n            return;\n        }\n        log('Starting bootstrap node discovery, discovering peers after %s ms', this.timeout);\n        this.timer = setTimeout(() => {\n            void this._discoverBootstrapPeers()\n                .catch(err => {\n                log.error(err);\n            });\n        }, this.timeout);\n    }\n    /**\n     * Emit each address in the list as a PeerInfo\n     */\n    async _discoverBootstrapPeers() {\n        if (this.timer == null) {\n            return;\n        }\n        for (const peerData of this.list) {\n            await this.components.peerStore.tagPeer(peerData.id, this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME, {\n                value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,\n                ttl: this._init.tagTTL ?? DEFAULT_BOOTSTRAP_TAG_TTL\n            });\n            // check we are still running\n            if (this.timer == null) {\n                return;\n            }\n            this.dispatchEvent(new CustomEvent('peer', { detail: peerData }));\n        }\n    }\n    /**\n     * Stop emitting events\n     */\n    stop() {\n        if (this.timer != null) {\n            clearTimeout(this.timer);\n        }\n        this.timer = undefined;\n    }\n}\nBootstrap.tag = 'bootstrap';\nexport function bootstrap(init) {\n    return (components) => new Bootstrap(components, init);\n}\n//# sourceMappingURL=index.js.map","/* eslint-env browser */\nexport default WebSocket;\n//# sourceMappingURL=web-socket.browser.js.map","import { EventIterator } from 'event-iterator';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer(obj) {\n    return (obj instanceof ArrayBuffer) ||\n        (obj?.constructor?.name === 'ArrayBuffer' && typeof obj?.byteLength === 'number');\n}\nexport default (socket) => {\n    socket.binaryType = 'arraybuffer';\n    const connected = async () => await new Promise((resolve, reject) => {\n        if (isConnected) {\n            return resolve();\n        }\n        if (connError != null) {\n            return reject(connError);\n        }\n        const cleanUp = (cont) => {\n            socket.removeEventListener('open', onOpen);\n            socket.removeEventListener('error', onError);\n            cont();\n        };\n        const onOpen = () => cleanUp(resolve);\n        const onError = (event) => {\n            cleanUp(() => reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`)));\n        };\n        socket.addEventListener('open', onOpen);\n        socket.addEventListener('error', onError);\n    });\n    const source = (async function* () {\n        const messages = new EventIterator(({ push, stop, fail }) => {\n            const onMessage = (event) => {\n                let data = null;\n                if (typeof event.data === 'string') {\n                    data = uint8ArrayFromString(event.data);\n                }\n                if (isArrayBuffer(event.data)) {\n                    data = new Uint8Array(event.data);\n                }\n                if (event.data instanceof Uint8Array) {\n                    data = event.data;\n                }\n                if (data == null) {\n                    return;\n                }\n                push(data);\n            };\n            const onError = (event) => fail(event.error ?? new Error('Socket error'));\n            socket.addEventListener('message', onMessage);\n            socket.addEventListener('error', onError);\n            socket.addEventListener('close', stop);\n            return () => {\n                socket.removeEventListener('message', onMessage);\n                socket.removeEventListener('error', onError);\n                socket.removeEventListener('close', stop);\n            };\n        }, { highWaterMark: Infinity });\n        await connected();\n        for await (const chunk of messages) {\n            yield isArrayBuffer(chunk) ? new Uint8Array(chunk) : chunk;\n        }\n    }());\n    let isConnected = socket.readyState === 1;\n    let connError;\n    socket.addEventListener('open', () => {\n        isConnected = true;\n        connError = null;\n    });\n    socket.addEventListener('close', () => {\n        isConnected = false;\n        connError = null;\n    });\n    socket.addEventListener('error', event => {\n        if (!isConnected) {\n            connError = event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`);\n        }\n    });\n    return Object.assign(source, {\n        connected\n    });\n};\n//# sourceMappingURL=source.js.map","export default (socket) => {\n    // if the socket is closing or closed, return end\n    if (socket.readyState >= 2) {\n        throw new Error('socket closed');\n    }\n    // if open, return\n    if (socket.readyState === 1) {\n        return;\n    }\n    return new Promise((resolve, reject) => {\n        function cleanup() {\n            socket.removeEventListener('open', handleOpen);\n            socket.removeEventListener('error', handleErr);\n        }\n        function handleOpen() {\n            cleanup();\n            resolve();\n        }\n        function handleErr(event) {\n            cleanup();\n            reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`));\n        }\n        socket.addEventListener('open', handleOpen);\n        socket.addEventListener('error', handleErr);\n    });\n};\n//# sourceMappingURL=ready.js.map","import ready from './ready.js';\nexport default (socket, options) => {\n    options = options ?? {};\n    options.closeOnEnd = options.closeOnEnd !== false;\n    const sink = async (source) => {\n        for await (const data of source) {\n            try {\n                await ready(socket);\n            }\n            catch (err) {\n                if (err.message === 'socket closed')\n                    break;\n                throw err;\n            }\n            socket.send(data);\n        }\n        if (options.closeOnEnd != null && socket.readyState <= 1) {\n            return await new Promise((resolve, reject) => {\n                socket.addEventListener('close', event => {\n                    if (event.wasClean || event.code === 1006) {\n                        resolve();\n                    }\n                    else {\n                        const err = Object.assign(new Error('ws error'), { event });\n                        reject(err);\n                    }\n                });\n                setTimeout(() => socket.close());\n            });\n        }\n    };\n    return sink;\n};\n//# sourceMappingURL=sink.js.map","import source from './source.js';\nimport sink from './sink.js';\nexport default (socket, options) => {\n    options = options ?? {};\n    const connectedSource = source(socket);\n    let remoteAddress = options.remoteAddress;\n    let remotePort = options.remotePort;\n    if (socket.url != null) {\n        // only client->server sockets have urls, server->client connections do not\n        try {\n            const url = new URL(socket.url);\n            remoteAddress = url.hostname;\n            remotePort = parseInt(url.port, 10);\n        }\n        catch { }\n    }\n    if (remoteAddress == null || remotePort == null) {\n        throw new Error('Remote connection did not have address and/or port');\n    }\n    const duplex = {\n        sink: sink(socket, options),\n        source: connectedSource,\n        connected: async () => await connectedSource.connected(),\n        close: async () => {\n            if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n                await new Promise((resolve) => {\n                    socket.addEventListener('close', () => {\n                        resolve();\n                    });\n                    socket.close();\n                });\n            }\n        },\n        destroy: () => {\n            if (socket.terminate != null) {\n                socket.terminate();\n            }\n            else {\n                socket.close();\n            }\n        },\n        remoteAddress,\n        remotePort,\n        socket\n    };\n    return duplex;\n};\n//# sourceMappingURL=duplex.js.map","import { relative } from 'iso-url';\nconst map = { http: 'ws', https: 'wss' };\nconst def = 'ws';\nexport default (url, location) => relative(url, location, map, def);\n//# sourceMappingURL=ws-url.js.map","// load websocket library if we are not in the browser\nimport WebSocket from './web-socket.js';\nimport duplex from './duplex.js';\nimport wsurl from './ws-url.js';\nexport function connect(addr, opts) {\n    const location = typeof window === 'undefined' ? '' : window.location;\n    opts = opts ?? {};\n    const url = wsurl(addr, location.toString());\n    const socket = new WebSocket(url, opts.websocket);\n    return duplex(socket, opts);\n}\n//# sourceMappingURL=client.js.map","export class TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new AbortError(errorMessage)\n\t: new DOMException(errorMessage);\n\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\nconst getAbortedReason = signal => {\n\tconst reason = signal.reason === undefined\n\t\t? getDOMException('This operation was aborted.')\n\t\t: signal.reason;\n\n\treturn reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, options) {\n\tconst {\n\t\tmilliseconds,\n\t\tfallback,\n\t\tmessage,\n\t\tcustomTimers = {setTimeout, clearTimeout},\n\t} = options;\n\n\tlet timer;\n\n\tconst cancelablePromise = new Promise((resolve, reject) => {\n\t\tif (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n\t\t\tthrow new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n\t\t}\n\n\t\tif (milliseconds === Number.POSITIVE_INFINITY) {\n\t\t\tresolve(promise);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\tconst {signal} = options;\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', () => {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t});\n\t\t}\n\n\t\t// We create the error outside of `setTimeout` to preserve the stack trace.\n\t\tconst timeoutError = new TimeoutError();\n\n\t\ttimer = customTimers.setTimeout.call(undefined, () => {\n\t\t\tif (fallback) {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(fallback());\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\n\t\t\tif (message === false) {\n\t\t\t\tresolve();\n\t\t\t} else if (message instanceof Error) {\n\t\t\t\treject(message);\n\t\t\t} else {\n\t\t\t\ttimeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;\n\t\t\t\treject(timeoutError);\n\t\t\t}\n\t\t}, milliseconds);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tresolve(await promise);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t} finally {\n\t\t\t\tcustomTimers.clearTimeout.call(undefined, timer);\n\t\t\t}\n\t\t})();\n\t});\n\n\tcancelablePromise.clear = () => {\n\t\tcustomTimers.clearTimeout.call(undefined, timer);\n\t\ttimer = undefined;\n\t};\n\n\treturn cancelablePromise;\n}\n","import { abortableSource } from 'abortable-iterator';\nimport { CLOSE_TIMEOUT } from './constants.js';\nimport pTimeout from 'p-timeout';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:websockets:socket');\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nexport function socketToMaConn(stream, remoteAddr, options) {\n    options = options ?? {};\n    const maConn = {\n        async sink(source) {\n            if ((options?.signal) != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await stream.sink(source);\n            }\n            catch (err) {\n                if (err.type !== 'aborted') {\n                    log.error(err);\n                }\n            }\n        },\n        source: (options.signal != null) ? abortableSource(stream.source, options.signal) : stream.source,\n        remoteAddr,\n        timeline: { open: Date.now() },\n        async close() {\n            const start = Date.now();\n            try {\n                await pTimeout(stream.close(), {\n                    milliseconds: CLOSE_TIMEOUT\n                });\n            }\n            catch (err) {\n                const { host, port } = maConn.remoteAddr.toOptions();\n                log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n                stream.destroy();\n            }\n            finally {\n                maConn.timeline.close = Date.now();\n            }\n        }\n    };\n    stream.socket.addEventListener('close', () => {\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }, { once: true });\n    return maConn;\n}\n//# sourceMappingURL=socket-to-conn.js.map","// p2p multi-address code\nexport const CODE_P2P = 421;\nexport const CODE_CIRCUIT = 290;\nexport const CODE_TCP = 6;\nexport const CODE_WS = 477;\nexport const CODE_WSS = 478;\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 2000;\n//# sourceMappingURL=constants.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { IpNet } from '@chainsafe/netmask';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'));\nexport const WebRTCDirect = or(and(_WebRTCDirect, base('p2p')), _WebRTCDirect);\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, P2PWebRTCStar, P2PWebRTCDirect, TCP, UTP, QUIC, DNS, WebRTCDirect);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), P2PWebRTCStar, P2PWebRTCDirect, WebRTCDirect, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\nexport const WebRTC = or(and(Circuit, base('webrtc')), and(Reliable, base('webrtc')), base('webrtc'));\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { connect } from 'it-ws/client';\nimport { multiaddrToUri as toUri } from '@multiformats/multiaddr-to-uri';\nimport { AbortError } from '@libp2p/interfaces/errors';\nimport pDefer from 'p-defer';\nimport { logger } from '@libp2p/logger';\nimport { isBrowser, isWebWorker } from 'wherearewe';\nimport { createListener } from './listener.js';\nimport { socketToMaConn } from './socket-to-conn.js';\nimport * as filters from './filters.js';\nimport { symbol } from '@libp2p/interface-transport';\nconst log = logger('libp2p:websockets');\nclass WebSockets {\n    constructor(init) {\n        this.init = init;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/websockets';\n    }\n    get [symbol]() {\n        return true;\n    }\n    async dial(ma, options) {\n        log('dialing %s', ma);\n        options = options ?? {};\n        const socket = await this._connect(ma, options);\n        const maConn = socketToMaConn(socket, ma);\n        log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options?.signal?.aborted === true) {\n            throw new AbortError();\n        }\n        const cOpts = ma.toOptions();\n        log('dialing %s:%s', cOpts.host, cOpts.port);\n        const errorPromise = pDefer();\n        const errfn = (err) => {\n            log.error('connection error:', err);\n            errorPromise.reject(err);\n        };\n        const rawSocket = connect(toUri(ma), this.init);\n        if (rawSocket.socket.on != null) {\n            rawSocket.socket.on('error', errfn);\n        }\n        else {\n            rawSocket.socket.onerror = errfn;\n        }\n        if (options.signal == null) {\n            await Promise.race([rawSocket.connected(), errorPromise.promise]);\n            log('connected %s', ma);\n            return rawSocket;\n        }\n        // Allow abort via signal during connect\n        let onAbort;\n        const abort = new Promise((resolve, reject) => {\n            onAbort = () => {\n                reject(new AbortError());\n                rawSocket.close().catch(err => {\n                    log.error('error closing raw socket', err);\n                });\n            };\n            // Already aborted?\n            if (options?.signal?.aborted === true) {\n                onAbort();\n                return;\n            }\n            options?.signal?.addEventListener('abort', onAbort);\n        });\n        try {\n            await Promise.race([abort, errorPromise.promise, rawSocket.connected()]);\n        }\n        finally {\n            if (onAbort != null) {\n                options?.signal?.removeEventListener('abort', onAbort);\n            }\n        }\n        log('connected %s', ma);\n        return rawSocket;\n    }\n    /**\n     * Creates a Websockets listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`\n     */\n    createListener(options) {\n        return createListener({ ...this.init, ...options });\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.\n     * By default, in a browser environment only DNS+WSS multiaddr is accepted,\n     * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        if (this.init?.filter != null) {\n            return this.init?.filter(multiaddrs);\n        }\n        // Browser\n        if (isBrowser || isWebWorker) {\n            return filters.wss(multiaddrs);\n        }\n        return filters.all(multiaddrs);\n    }\n}\nexport function webSockets(init = {}) {\n    return () => {\n        return new WebSockets(init);\n    };\n}\n//# sourceMappingURL=index.js.map","export function createListener() {\n    throw new Error('WebSocket Servers can not be created in the browser!');\n}\n//# sourceMappingURL=listener.browser.js.map","import * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT, CODE_P2P, CODE_TCP, CODE_WS, CODE_WSS } from './constants.js';\nexport function all(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSockets.matches(testMa) ||\n            mafmt.WebSocketsSecure.matches(testMa);\n    });\n}\nexport function wss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSocketsSecure.matches(testMa);\n    });\n}\nexport function dnsWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSocketsSecure.matches(testMa) &&\n            mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n    });\n}\nexport function dnsWsOrWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        // WS\n        if (mafmt.WebSockets.matches(testMa)) {\n            return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));\n        }\n        // WSS\n        return mafmt.WebSocketsSecure.matches(testMa) &&\n            mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n    });\n}\n//# sourceMappingURL=filters.js.map","import { LongBits } from 'longbits';\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\nconst N8 = Math.pow(2, 56);\nconst N9 = Math.pow(2, 63);\nexport const unsigned = {\n    encodingLength(value) {\n        if (value < N1) {\n            return 1;\n        }\n        if (value < N2) {\n            return 2;\n        }\n        if (value < N3) {\n            return 3;\n        }\n        if (value < N4) {\n            return 4;\n        }\n        if (value < N5) {\n            return 5;\n        }\n        if (value < N6) {\n            return 6;\n        }\n        if (value < N7) {\n            return 7;\n        }\n        if (value < N8) {\n            return 8;\n        }\n        if (value < N9) {\n            return 9;\n        }\n        return 10;\n    },\n    encode(value, buf, offset = 0) {\n        if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError('Could not encode varint');\n        }\n        if (buf == null) {\n            buf = allocUnsafe(unsigned.encodingLength(value));\n        }\n        LongBits.fromNumber(value).toBytes(buf, offset);\n        return buf;\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(true);\n    }\n};\nexport const signed = {\n    encodingLength(value) {\n        if (value < 0) {\n            return 10; // 10 bytes per spec - https://developers.google.com/protocol-buffers/docs/encoding#signed-ints\n        }\n        return unsigned.encodingLength(value);\n    },\n    encode(value, buf, offset) {\n        if (buf == null) {\n            buf = allocUnsafe(signed.encodingLength(value));\n        }\n        if (value < 0) {\n            LongBits.fromNumber(value).toBytes(buf, offset);\n            return buf;\n        }\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        return LongBits.fromBytes(buf, offset).toNumber(false);\n    }\n};\nexport const zigzag = {\n    encodingLength(value) {\n        return unsigned.encodingLength(value >= 0 ? value * 2 : value * -2 - 1);\n    },\n    // @ts-expect-error\n    encode(value, buf, offset) {\n        value = value >= 0 ? value * 2 : (value * -2) - 1;\n        return unsigned.encode(value, buf, offset);\n    },\n    decode(buf, offset = 0) {\n        const value = unsigned.decode(buf, offset);\n        return (value & 1) !== 0 ? (value + 1) / -2 : value / 2;\n    }\n};\n//# sourceMappingURL=index.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport { allocUnsafe } from './alloc.js';\nconst defaultEncoder = (length) => {\n    const lengthLength = unsigned.encodingLength(length);\n    const lengthBuf = allocUnsafe(lengthLength);\n    unsigned.encode(length, lengthBuf);\n    defaultEncoder.bytes = lengthLength;\n    return lengthBuf;\n};\ndefaultEncoder.bytes = 0;\nexport function encode(options) {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    const encoder = async function* (source) {\n        for await (const chunk of source) {\n            // length + data\n            const length = encodeLength(chunk.byteLength);\n            // yield only Uint8Arrays\n            if (length instanceof Uint8Array) {\n                yield length;\n            }\n            else {\n                yield* length;\n            }\n            // yield only Uint8Arrays\n            if (chunk instanceof Uint8Array) {\n                yield chunk;\n            }\n            else {\n                yield* chunk;\n            }\n        }\n    };\n    return encoder;\n}\nencode.single = (chunk, options) => {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);\n};\n//# sourceMappingURL=encode.js.map","export function alloc(len) {\n    return new Uint8Array(len);\n}\nexport function allocUnsafe(len) {\n    if (globalThis?.Buffer?.allocUnsafe != null) {\n        return globalThis.Buffer.allocUnsafe(len);\n    }\n    return new Uint8Array(len);\n}\n//# sourceMappingURL=alloc.js.map","/* eslint max-depth: [\"error\", 6] */\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nimport errCode from 'err-code';\n// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"LENGTH\"] = 0] = \"LENGTH\";\n    ReadMode[ReadMode[\"DATA\"] = 1] = \"DATA\";\n})(ReadMode || (ReadMode = {}));\nconst defaultDecoder = (buf) => {\n    const length = unsigned.decode(buf);\n    defaultDecoder.bytes = unsigned.encodingLength(length);\n    return length;\n};\ndefaultDecoder.bytes = 0;\nexport function decode(options) {\n    const decoder = async function* (source) {\n        const buffer = new Uint8ArrayList();\n        let mode = ReadMode.LENGTH;\n        let dataLength = -1;\n        const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;\n        const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;\n        const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;\n        for await (const buf of source) {\n            buffer.append(buf);\n            while (buffer.byteLength > 0) {\n                if (mode === ReadMode.LENGTH) {\n                    // read length, ignore errors for short reads\n                    try {\n                        dataLength = lengthDecoder(buffer);\n                        if (dataLength < 0) {\n                            throw errCode(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');\n                        }\n                        if (dataLength > maxDataLength) {\n                            throw errCode(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');\n                        }\n                        const dataLengthLength = lengthDecoder.bytes;\n                        buffer.consume(dataLengthLength);\n                        if (options?.onLength != null) {\n                            options.onLength(dataLength);\n                        }\n                        mode = ReadMode.DATA;\n                    }\n                    catch (err) {\n                        if (err instanceof RangeError) {\n                            if (buffer.byteLength > maxLengthLength) {\n                                throw errCode(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');\n                            }\n                            break;\n                        }\n                        throw err;\n                    }\n                }\n                if (mode === ReadMode.DATA) {\n                    if (buffer.byteLength < dataLength) {\n                        // not enough data, wait for more\n                        break;\n                    }\n                    const data = buffer.sublist(0, dataLength);\n                    buffer.consume(dataLength);\n                    if (options?.onData != null) {\n                        options.onData(data);\n                    }\n                    yield data;\n                    mode = ReadMode.LENGTH;\n                }\n            }\n        }\n        if (buffer.byteLength > 0) {\n            throw errCode(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n        }\n    };\n    return decoder;\n}\n/**\n * @param {*} reader\n * @param {import('./types').DecoderOptions} [options]\n * @returns\n */\ndecode.fromReader = (reader, options) => {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = (async function* () {\n        while (true) {\n            try {\n                const { done, value } = await reader.next(byteLength);\n                if (done === true) {\n                    return;\n                }\n                if (value != null) {\n                    yield value;\n                }\n            }\n            catch (err) {\n                if (err.code === 'ERR_UNDER_READ') {\n                    return { done: true, value: null };\n                }\n                throw err;\n            }\n            finally {\n                // Reset the byteLength so we continue to check for varints\n                byteLength = 1;\n            }\n        }\n    }());\n    /**\n     * Once the length has been parsed, read chunk for that length\n     */\n    const onLength = (l) => { byteLength = l; };\n    return decode({\n        ...(options ?? {}),\n        onLength\n    })(varByteSource);\n};\n//# sourceMappingURL=decode.js.map","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive Protobuf encoded messages over\n * streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-pb-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n * stream.writePB({\n *   foo: 'bar'\n * }, MessageType)\n * const res = await stream.readPB(MessageType)\n * ```\n */\nimport { handshake } from 'it-handshake';\nimport * as lp from 'it-length-prefixed';\nexport function pbStream(duplex, opts = {}) {\n    const shake = handshake(duplex);\n    const lpReader = lp.decode.fromReader(shake.reader, opts);\n    const W = {\n        read: async (bytes) => {\n            // just read\n            const { value } = await shake.reader.next(bytes);\n            if (value == null) {\n                throw new Error('Value is null');\n            }\n            return value;\n        },\n        readLP: async () => {\n            // read, decode\n            // @ts-expect-error .next is part of the generator interface\n            const { value } = await lpReader.next();\n            if (value == null) {\n                throw new Error('Value is null');\n            }\n            return value;\n        },\n        readPB: async (proto) => {\n            // readLP, decode\n            const value = await W.readLP();\n            if (value == null) {\n                throw new Error('Value is null');\n            }\n            // Is this a buffer?\n            const buf = value instanceof Uint8Array ? value : value.subarray();\n            return proto.decode(buf);\n        },\n        write: (data) => {\n            // just write\n            if (data instanceof Uint8Array) {\n                shake.writer.push(data);\n            }\n            else {\n                shake.writer.push(data.subarray());\n            }\n        },\n        writeLP: (data) => {\n            // encode, write\n            W.write(lp.encode.single(data, opts));\n        },\n        writePB: (data, proto) => {\n            // encode, writeLP\n            W.writeLP(proto.encode(data));\n        },\n        pb: (proto) => {\n            return {\n                read: async () => await W.readPB(proto),\n                write: (d) => { W.writePB(d, proto); },\n                unwrap: () => W\n            };\n        },\n        unwrap: () => {\n            // returns vanilla duplex again, terminates all reads/writes from this object\n            shake.rest();\n            duplex.source = shake.stream.source;\n            duplex.sink = shake.stream.sink;\n            return duplex;\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map","import defer from 'p-defer';\n/**\n * A pair of streams where one drains from the other\n */\nexport function pair() {\n    const deferred = defer();\n    let piped = false;\n    return {\n        sink: async (source) => {\n            if (piped) {\n                throw new Error('already piped');\n            }\n            piped = true;\n            deferred.resolve(source);\n        },\n        source: (async function* () {\n            const source = await deferred.promise;\n            yield* source;\n        }())\n    };\n}\n//# sourceMappingURL=index.js.map","export const NOISE_MSG_MAX_LENGTH_BYTES = 65535;\nexport const NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16;\nexport const DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS);\n//# sourceMappingURL=constants.js.map","import { HKDF } from '@stablelib/hkdf';\nimport * as x25519 from '@stablelib/x25519';\nimport { SHA256, hash } from '@stablelib/sha256';\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305';\nexport const stablelib = {\n    hashSHA256(data) {\n        return hash(data);\n    },\n    getHKDF(ck, ikm) {\n        const hkdf = new HKDF(SHA256, ikm, ck);\n        const okmU8Array = hkdf.expand(96);\n        const okm = okmU8Array;\n        const k1 = okm.subarray(0, 32);\n        const k2 = okm.subarray(32, 64);\n        const k3 = okm.subarray(64, 96);\n        return [k1, k2, k3];\n    },\n    generateX25519KeyPair() {\n        const keypair = x25519.generateKeyPair();\n        return {\n            publicKey: keypair.publicKey,\n            privateKey: keypair.secretKey\n        };\n    },\n    generateX25519KeyPairFromSeed(seed) {\n        const keypair = x25519.generateKeyPairFromSeed(seed);\n        return {\n            publicKey: keypair.publicKey,\n            privateKey: keypair.secretKey\n        };\n    },\n    generateX25519SharedKey(privateKey, publicKey) {\n        return x25519.sharedKey(privateKey, publicKey);\n    },\n    chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {\n        const ctx = new ChaCha20Poly1305(k);\n        return ctx.seal(nonce, plaintext, ad);\n    },\n    chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {\n        const ctx = new ChaCha20Poly1305(k);\n        return ctx.open(nonce, ciphertext, ad, dst);\n    }\n};\n//# sourceMappingURL=stablelib.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nconst allocUnsafe = (len) => {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.allocUnsafe(len);\n    }\n    return new Uint8Array(len);\n};\nexport const uint16BEEncode = (value) => {\n    const target = allocUnsafe(2);\n    new DataView(target.buffer, target.byteOffset, target.byteLength).setUint16(0, value, false);\n    return target;\n};\nuint16BEEncode.bytes = 2;\nexport const uint16BEDecode = (data) => {\n    if (data.length < 2)\n        throw RangeError('Could not decode int16BE');\n    if (data instanceof Uint8Array) {\n        return new DataView(data.buffer, data.byteOffset, data.byteLength).getUint16(0, false);\n    }\n    return data.getUint16(0);\n};\nuint16BEDecode.bytes = 2;\n// Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)\nexport function encode0(message) {\n    return uint8ArrayConcat([message.ne, message.ciphertext], message.ne.length + message.ciphertext.length);\n}\nexport function encode1(message) {\n    return uint8ArrayConcat([message.ne, message.ns, message.ciphertext], message.ne.length + message.ns.length + message.ciphertext.length);\n}\nexport function encode2(message) {\n    return uint8ArrayConcat([message.ns, message.ciphertext], message.ns.length + message.ciphertext.length);\n}\nexport function decode0(input) {\n    if (input.length < 32) {\n        throw new Error('Cannot decode stage 0 MessageBuffer: length less than 32 bytes.');\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ciphertext: input.subarray(32, input.length),\n        ns: new Uint8Array(0)\n    };\n}\nexport function decode1(input) {\n    if (input.length < 80) {\n        throw new Error('Cannot decode stage 1 MessageBuffer: length less than 80 bytes.');\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ns: input.subarray(32, 80),\n        ciphertext: input.subarray(80, input.length)\n    };\n}\nexport function decode2(input) {\n    if (input.length < 48) {\n        throw new Error('Cannot decode stage 2 MessageBuffer: length less than 48 bytes.');\n    }\n    return {\n        ne: new Uint8Array(0),\n        ns: input.subarray(0, 48),\n        ciphertext: input.subarray(48, input.length)\n    };\n}\n//# sourceMappingURL=encoder.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var NoiseExtensions;\n(function (NoiseExtensions) {\n    let _codec;\n    NoiseExtensions.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.webtransportCerthashes != null) {\n                    for (const value of obj.webtransportCerthashes) {\n                        w.uint32(10);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    webtransportCerthashes: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.webtransportCerthashes.push(reader.bytes());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseExtensions.encode = (obj) => {\n        return encodeMessage(obj, NoiseExtensions.codec());\n    };\n    NoiseExtensions.decode = (buf) => {\n        return decodeMessage(buf, NoiseExtensions.codec());\n    };\n})(NoiseExtensions || (NoiseExtensions = {}));\nexport var NoiseHandshakePayload;\n(function (NoiseHandshakePayload) {\n    let _codec;\n    NoiseHandshakePayload.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || (obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.identityKey ?? new Uint8Array(0));\n                }\n                if (opts.writeDefaults === true || (obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.identitySig ?? new Uint8Array(0));\n                }\n                if (obj.extensions != null) {\n                    w.uint32(34);\n                    NoiseExtensions.codec().encode(obj.extensions, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    identityKey: new Uint8Array(0),\n                    identitySig: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.identityKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.identitySig = reader.bytes();\n                            break;\n                        case 4:\n                            obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseHandshakePayload.encode = (obj) => {\n        return encodeMessage(obj, NoiseHandshakePayload.codec());\n    };\n    NoiseHandshakePayload.decode = (buf) => {\n        return decodeMessage(buf, NoiseHandshakePayload.codec());\n    };\n})(NoiseHandshakePayload || (NoiseHandshakePayload = {}));\n//# sourceMappingURL=payload.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","import { unmarshalPublicKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { NoiseHandshakePayload } from './proto/payload.js';\nexport async function getPayload(localPeer, staticPublicKey, extensions) {\n    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n    if (localPeer.publicKey == null) {\n        throw new Error('PublicKey was missing from local PeerId');\n    }\n    return createHandshakePayload(localPeer.publicKey, signedPayload, extensions);\n}\nexport function createHandshakePayload(libp2pPublicKey, signedPayload, extensions) {\n    return NoiseHandshakePayload.encode({\n        identityKey: libp2pPublicKey,\n        identitySig: signedPayload,\n        extensions: extensions ?? { webtransportCerthashes: [] }\n    }).subarray();\n}\nexport async function signPayload(peerId, payload) {\n    if (peerId.privateKey == null) {\n        throw new Error('PrivateKey was missing from PeerId');\n    }\n    const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n    return await privateKey.sign(payload);\n}\nexport async function getPeerIdFromPayload(payload) {\n    return await peerIdFromKeys(payload.identityKey);\n}\nexport function decodePayload(payload) {\n    return NoiseHandshakePayload.decode(payload);\n}\nexport function getHandshakePayload(publicKey) {\n    const prefix = uint8ArrayFromString('noise-libp2p-static-key:');\n    return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n *\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nexport async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n    // Unmarshaling from PublicKey protobuf\n    const payloadPeerId = await peerIdFromKeys(payload.identityKey);\n    if (!payloadPeerId.equals(remotePeer)) {\n        throw new Error(`Payload identity key ${payloadPeerId.toString()} does not match expected remote peer ${remotePeer.toString()}`);\n    }\n    const generatedPayload = getHandshakePayload(noiseStaticKey);\n    if (payloadPeerId.publicKey == null) {\n        throw new Error('PublicKey was missing from PeerId');\n    }\n    if (payload.identitySig == null) {\n        throw new Error('Signature was missing from message');\n    }\n    const publicKey = unmarshalPublicKey(payloadPeerId.publicKey);\n    const valid = await publicKey.verify(generatedPayload, payload.identitySig);\n    if (!valid) {\n        throw new Error(\"Static key doesn't match to peer that signed payload!\");\n    }\n    return payloadPeerId;\n}\nexport function isValidPublicKey(pk) {\n    if (!(pk instanceof Uint8Array)) {\n        return false;\n    }\n    if (pk.length !== 32) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { DUMP_SESSION_KEYS } from './constants.js';\nconst log = logger('libp2p:noise');\nexport { log as logger };\nlet keyLogger;\nif (DUMP_SESSION_KEYS) {\n    keyLogger = log;\n}\nelse {\n    keyLogger = Object.assign(() => { }, {\n        enabled: false,\n        trace: () => { },\n        error: () => { }\n    });\n}\nexport function logLocalStaticKeys(s) {\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`);\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`);\n}\nexport function logLocalEphemeralKeys(e) {\n    if (e) {\n        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`);\n        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing local ephemeral keys.');\n    }\n}\nexport function logRemoteStaticKey(rs) {\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs, 'hex')}`);\n}\nexport function logRemoteEphemeralKey(re) {\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re, 'hex')}`);\n}\nexport function logCipherState(session) {\n    if (session.cs1 && session.cs2) {\n        keyLogger(`CIPHER_STATE_1 ${session.cs1.n.getUint64()} ${uint8ArrayToString(session.cs1.k, 'hex')}`);\n        keyLogger(`CIPHER_STATE_2 ${session.cs2.n.getUint64()} ${uint8ArrayToString(session.cs2.k, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing cipher state.');\n    }\n}\n//# sourceMappingURL=logger.js.map","export const MIN_NONCE = 0;\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff;\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n    constructor(n = MIN_NONCE) {\n        this.n = n;\n        this.bytes = new Uint8Array(12);\n        this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength);\n        this.view.setUint32(4, n, true);\n    }\n    increment() {\n        this.n++;\n        // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n        this.view.setUint32(4, this.n, true);\n    }\n    getBytes() {\n        return this.bytes;\n    }\n    getUint64() {\n        return this.n;\n    }\n    assertValue() {\n        if (this.n > MAX_NONCE) {\n            throw new Error(ERR_MAX_NONCE);\n        }\n    }\n}\n//# sourceMappingURL=nonce.js.map","import { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays';\nimport { logger } from '../logger.js';\nimport { Nonce } from '../nonce.js';\nexport class AbstractHandshake {\n    constructor(crypto) {\n        this.crypto = crypto;\n    }\n    encryptWithAd(cs, ad, plaintext) {\n        const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n        cs.n.increment();\n        return e;\n    }\n    decryptWithAd(cs, ad, ciphertext, dst) {\n        const { plaintext, valid } = this.decrypt(cs.k, cs.n, ad, ciphertext, dst);\n        if (valid)\n            cs.n.increment();\n        return { plaintext, valid };\n    }\n    // Cipher state related\n    hasKey(cs) {\n        return !this.isEmptyKey(cs.k);\n    }\n    createEmptyKey() {\n        return new Uint8Array(32);\n    }\n    isEmptyKey(k) {\n        const emptyKey = this.createEmptyKey();\n        return uint8ArrayEquals(emptyKey, k);\n    }\n    encrypt(k, n, ad, plaintext) {\n        n.assertValue();\n        return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k);\n    }\n    encryptAndHash(ss, plaintext) {\n        let ciphertext;\n        if (this.hasKey(ss.cs)) {\n            ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n        }\n        else {\n            ciphertext = plaintext;\n        }\n        this.mixHash(ss, ciphertext);\n        return ciphertext;\n    }\n    decrypt(k, n, ad, ciphertext, dst) {\n        n.assertValue();\n        const encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k, dst);\n        if (encryptedMessage) {\n            return {\n                plaintext: encryptedMessage,\n                valid: true\n            };\n        }\n        else {\n            return {\n                plaintext: new Uint8Array(0),\n                valid: false\n            };\n        }\n    }\n    decryptAndHash(ss, ciphertext) {\n        let plaintext;\n        let valid = true;\n        if (this.hasKey(ss.cs)) {\n            ({ plaintext, valid } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n        }\n        else {\n            plaintext = ciphertext;\n        }\n        this.mixHash(ss, ciphertext);\n        return { plaintext, valid };\n    }\n    dh(privateKey, publicKey) {\n        try {\n            const derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey);\n            if (derivedU8.length === 32) {\n                return derivedU8;\n            }\n            return derivedU8.subarray(0, 32);\n        }\n        catch (e) {\n            const err = e;\n            logger(err.message);\n            return new Uint8Array(32);\n        }\n    }\n    mixHash(ss, data) {\n        ss.h = this.getHash(ss.h, data);\n    }\n    getHash(a, b) {\n        const u = this.crypto.hashSHA256(uint8ArrayConcat([a, b], a.length + b.length));\n        return u;\n    }\n    mixKey(ss, ikm) {\n        const [ck, tempK] = this.crypto.getHKDF(ss.ck, ikm);\n        ss.cs = this.initializeKey(tempK);\n        ss.ck = ck;\n    }\n    initializeKey(k) {\n        return { k, n: new Nonce() };\n    }\n    // Symmetric state related\n    initializeSymmetric(protocolName) {\n        const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8');\n        const h = this.hashProtocolName(protocolNameBytes);\n        const ck = h;\n        const key = this.createEmptyKey();\n        const cs = this.initializeKey(key);\n        return { cs, ck, h };\n    }\n    hashProtocolName(protocolName) {\n        if (protocolName.length <= 32) {\n            const h = new Uint8Array(32);\n            h.set(protocolName);\n            return h;\n        }\n        else {\n            return this.getHash(protocolName, new Uint8Array(0));\n        }\n    }\n    split(ss) {\n        const [tempk1, tempk2] = this.crypto.getHKDF(ss.ck, new Uint8Array(0));\n        const cs1 = this.initializeKey(tempk1);\n        const cs2 = this.initializeKey(tempk2);\n        return { cs1, cs2 };\n    }\n    writeMessageRegular(cs, payload) {\n        const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);\n        const ne = this.createEmptyKey();\n        const ns = new Uint8Array(0);\n        return { ne, ns, ciphertext };\n    }\n    readMessageRegular(cs, message) {\n        return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);\n    }\n}\n//# sourceMappingURL=abstract-handshake.js.map","import { isValidPublicKey } from '../utils.js';\nimport { AbstractHandshake } from './abstract-handshake.js';\nexport class XX extends AbstractHandshake {\n    initializeInitiator(prologue, s, rs, psk) {\n        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = new Uint8Array(32);\n        return { ss, s, rs, psk, re };\n    }\n    initializeResponder(prologue, s, rs, psk) {\n        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = new Uint8Array(32);\n        return { ss, s, rs, psk, re };\n    }\n    writeMessageA(hs, payload, e) {\n        const ns = new Uint8Array(0);\n        if (e !== undefined) {\n            hs.e = e;\n        }\n        else {\n            hs.e = this.crypto.generateX25519KeyPair();\n        }\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageB(hs, payload) {\n        hs.e = this.crypto.generateX25519KeyPair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageC(hs, payload) {\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        const ne = this.createEmptyKey();\n        const messageBuffer = { ne, ns, ciphertext };\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, messageBuffer, cs1, cs2 };\n    }\n    readMessageA(hs, message) {\n        if (isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        return this.decryptAndHash(hs.ss, message.ciphertext);\n    }\n    readMessageB(hs, message) {\n        if (isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        if (!hs.e) {\n            throw new Error('Handshake state `e` param is missing.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        return { plaintext, valid: (valid1 && valid2) };\n    }\n    readMessageC(hs, message) {\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        if (!hs.e) {\n            throw new Error('Handshake state `e` param is missing.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 };\n    }\n    initSession(initiator, prologue, s) {\n        const psk = this.createEmptyKey();\n        const rs = new Uint8Array(32); // no static key yet\n        let hs;\n        if (initiator) {\n            hs = this.initializeInitiator(prologue, s, rs, psk);\n        }\n        else {\n            hs = this.initializeResponder(prologue, s, rs, psk);\n        }\n        return {\n            hs,\n            i: initiator,\n            mc: 0\n        };\n    }\n    sendMessage(session, message, ephemeral) {\n        let messageBuffer;\n        if (session.mc === 0) {\n            messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n        }\n        else if (session.mc === 1) {\n            messageBuffer = this.writeMessageB(session.hs, message);\n        }\n        else if (session.mc === 2) {\n            const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message);\n            messageBuffer = resultingBuffer;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        else if (session.mc > 2) {\n            if (session.i) {\n                if (!session.cs1) {\n                    throw new Error('CS1 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs1, message);\n            }\n            else {\n                if (!session.cs2) {\n                    throw new Error('CS2 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs2, message);\n            }\n        }\n        else {\n            throw new Error('Session invalid.');\n        }\n        session.mc++;\n        return messageBuffer;\n    }\n    recvMessage(session, message) {\n        let plaintext = new Uint8Array(0);\n        let valid = false;\n        if (session.mc === 0) {\n            ({ plaintext, valid } = this.readMessageA(session.hs, message));\n        }\n        else if (session.mc === 1) {\n            ({ plaintext, valid } = this.readMessageB(session.hs, message));\n        }\n        else if (session.mc === 2) {\n            const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message);\n            plaintext = resultingPlaintext;\n            valid = resultingValid;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        session.mc++;\n        return { plaintext, valid };\n    }\n}\n//# sourceMappingURL=xx.js.map","import { InvalidCryptoExchangeError, UnexpectedPeerError } from '@libp2p/interface-connection-encrypter/errors';\nimport { decode0, decode1, decode2, encode0, encode1, encode2 } from './encoder.js';\nimport { XX } from './handshakes/xx.js';\nimport { logger, logLocalStaticKeys, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey, logCipherState } from './logger.js';\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from './utils.js';\nexport class XXHandshake {\n    constructor(isInitiator, payload, prologue, crypto, staticKeypair, connection, remotePeer, handshake) {\n        this.remoteExtensions = { webtransportCerthashes: [] };\n        this.isInitiator = isInitiator;\n        this.payload = payload;\n        this.prologue = prologue;\n        this.staticKeypair = staticKeypair;\n        this.connection = connection;\n        if (remotePeer) {\n            this.remotePeer = remotePeer;\n        }\n        this.xx = handshake ?? new XX(crypto);\n        this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    }\n    // stage 0\n    async propose() {\n        logLocalStaticKeys(this.session.hs.s);\n        if (this.isInitiator) {\n            logger('Stage 0 - Initiator starting to send first message.');\n            const messageBuffer = this.xx.sendMessage(this.session, new Uint8Array(0));\n            this.connection.writeLP(encode0(messageBuffer));\n            logger('Stage 0 - Initiator finished sending first message.');\n            logLocalEphemeralKeys(this.session.hs.e);\n        }\n        else {\n            logger('Stage 0 - Responder waiting to receive first message...');\n            const receivedMessageBuffer = decode0((await this.connection.readLP()).subarray());\n            const { valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 0 validation fail');\n            }\n            logger('Stage 0 - Responder received first message.');\n            logRemoteEphemeralKey(this.session.hs.re);\n        }\n    }\n    // stage 1\n    async exchange() {\n        if (this.isInitiator) {\n            logger('Stage 1 - Initiator waiting to receive first message from responder...');\n            const receivedMessageBuffer = decode1((await this.connection.readLP()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 1 validation fail');\n            }\n            logger('Stage 1 - Initiator received the message.');\n            logRemoteEphemeralKey(this.session.hs.re);\n            logRemoteStaticKey(this.session.hs.rs);\n            logger(\"Initiator going to check remote's signature...\");\n            try {\n                const decodedPayload = decodePayload(plaintext);\n                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n                await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            }\n            catch (e) {\n                const err = e;\n                throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n            logger('All good with the signature!');\n        }\n        else {\n            logger('Stage 1 - Responder sending out first message with signed payload and static key.');\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            this.connection.writeLP(encode1(messageBuffer));\n            logger('Stage 1 - Responder sent the second handshake message with signed payload.');\n            logLocalEphemeralKeys(this.session.hs.e);\n        }\n    }\n    // stage 2\n    async finish() {\n        if (this.isInitiator) {\n            logger('Stage 2 - Initiator sending third handshake message.');\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            this.connection.writeLP(encode2(messageBuffer));\n            logger('Stage 2 - Initiator sent message with signed payload.');\n        }\n        else {\n            logger('Stage 2 - Responder waiting for third handshake message...');\n            const receivedMessageBuffer = decode2((await this.connection.readLP()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 2 validation fail');\n            }\n            logger('Stage 2 - Responder received the message, finished handshake.');\n            try {\n                const decodedPayload = decodePayload(plaintext);\n                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n                await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            }\n            catch (e) {\n                const err = e;\n                throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n        }\n        logCipherState(this.session);\n    }\n    encrypt(plaintext, session) {\n        const cs = this.getCS(session);\n        return this.xx.encryptWithAd(cs, new Uint8Array(0), plaintext);\n    }\n    decrypt(ciphertext, session, dst) {\n        const cs = this.getCS(session, false);\n        return this.xx.decryptWithAd(cs, new Uint8Array(0), ciphertext, dst);\n    }\n    getRemoteStaticKey() {\n        return this.session.hs.rs;\n    }\n    getCS(session, encryption = true) {\n        if (!session.cs1 || !session.cs2) {\n            throw new InvalidCryptoExchangeError('Handshake not completed properly, cipher state does not exist.');\n        }\n        if (this.isInitiator) {\n            return encryption ? session.cs1 : session.cs2;\n        }\n        else {\n            return encryption ? session.cs2 : session.cs1;\n        }\n    }\n    setRemoteNoiseExtension(e) {\n        if (e) {\n            this.remoteExtensions = e;\n        }\n    }\n}\n//# sourceMappingURL=handshake-xx.js.map","import { pbStream } from 'it-pb-stream';\nimport { duplexPair } from 'it-pair/duplex';\nimport { pipe } from 'it-pipe';\nimport { decode } from 'it-length-prefixed';\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js';\nimport { stablelib } from './crypto/stablelib.js';\nimport { decryptStream, encryptStream } from './crypto/streaming.js';\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js';\nimport { XXHandshake } from './handshake-xx.js';\nimport { getPayload } from './utils.js';\nimport { registerMetrics } from './metrics.js';\nexport class Noise {\n    constructor(init = {}) {\n        this.protocol = '/noise';\n        const { staticNoiseKey, extensions, crypto, prologueBytes, metrics } = init;\n        this.crypto = crypto ?? stablelib;\n        this.extensions = extensions;\n        this.metrics = metrics ? registerMetrics(metrics) : undefined;\n        if (staticNoiseKey) {\n            // accepts x25519 private key of length 32\n            this.staticKeys = this.crypto.generateX25519KeyPairFromSeed(staticNoiseKey);\n        }\n        else {\n            this.staticKeys = this.crypto.generateX25519KeyPair();\n        }\n        this.prologue = prologueBytes ?? new Uint8Array(0);\n    }\n    /**\n     * Encrypt outgoing data to the remote party (handshake as initiator)\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer\n     * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encrypted\n     * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n     * @returns {Promise<SecuredConnection>}\n     */\n    async secureOutbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = pbStream(connection, {\n            lengthEncoder: uint16BEEncode,\n            lengthDecoder: uint16BEDecode,\n            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: true,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        return {\n            conn,\n            remoteExtensions: handshake.remoteExtensions,\n            remotePeer: handshake.remotePeer\n        };\n    }\n    /**\n     * Decrypt incoming data (handshake as responder).\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer.\n     * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encryption.\n     * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n     * @returns {Promise<SecuredConnection>}\n     */\n    async secureInbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = pbStream(connection, {\n            lengthEncoder: uint16BEEncode,\n            lengthDecoder: uint16BEDecode,\n            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: false,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        return {\n            conn,\n            remotePeer: handshake.remotePeer,\n            remoteExtensions: handshake.remoteExtensions\n        };\n    }\n    /**\n     * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.\n     * If noise pipes disabled or remote peer static key is unknown, use XX.\n     *\n     * @param {HandshakeParams} params\n     */\n    async performHandshake(params) {\n        const payload = await getPayload(params.localPeer, this.staticKeys.publicKey, this.extensions);\n        // run XX handshake\n        return await this.performXXHandshake(params, payload);\n    }\n    async performXXHandshake(params, payload) {\n        const { isInitiator, remotePeer, connection } = params;\n        const handshake = new XXHandshake(isInitiator, payload, this.prologue, this.crypto, this.staticKeys, connection, remotePeer);\n        try {\n            await handshake.propose();\n            await handshake.exchange();\n            await handshake.finish();\n            this.metrics?.xxHandshakeSuccesses.increment();\n        }\n        catch (e) {\n            this.metrics?.xxHandshakeErrors.increment();\n            if (e instanceof Error) {\n                e.message = `Error occurred during XX handshake: ${e.message}`;\n                throw e;\n            }\n        }\n        return handshake;\n    }\n    async createSecureConnection(connection, handshake) {\n        // Create encryption box/unbox wrapper\n        const [secure, user] = duplexPair();\n        const network = connection.unwrap();\n        await pipe(secure, // write to wrapper\n        encryptStream(handshake, this.metrics), // encrypt data + prefix with message length\n        network, // send to the remote peer\n        decode({ lengthDecoder: uint16BEDecode }), // read message length prefix\n        decryptStream(handshake, this.metrics), // decrypt the incoming data\n        secure // pipe to the wrapper\n        );\n        return user;\n    }\n}\n//# sourceMappingURL=noise.js.map","export function registerMetrics(metrics) {\n    return {\n        xxHandshakeSuccesses: metrics.registerCounter('libp2p_noise_xxhandshake_successes_total', {\n            help: 'Total count of noise xxHandshakes successes_'\n        }),\n        xxHandshakeErrors: metrics.registerCounter('libp2p_noise_xxhandshake_error_total', {\n            help: 'Total count of noise xxHandshakes errors'\n        }),\n        encryptedPackets: metrics.registerCounter('libp2p_noise_encrypted_packets_total', {\n            help: 'Total count of noise encrypted packets successfully'\n        }),\n        decryptedPackets: metrics.registerCounter('libp2p_noise_decrypted_packets_total', {\n            help: 'Total count of noise decrypted packets'\n        }),\n        decryptErrors: metrics.registerCounter('libp2p_noise_decrypt_errors_total', {\n            help: 'Total count of noise decrypt errors'\n        })\n    };\n}\n//# sourceMappingURL=metrics.js.map","import { pair } from './index.js';\n/**\n * Two duplex streams that are attached to each other\n */\nexport function duplexPair() {\n    const a = pair();\n    const b = pair();\n    return [\n        {\n            source: a.source,\n            sink: b.sink\n        },\n        {\n            source: b.source,\n            sink: a.sink\n        }\n    ];\n}\n//# sourceMappingURL=duplex.js.map","import { TAG_LENGTH } from '@stablelib/chacha20poly1305';\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from '../constants.js';\nimport { uint16BEEncode } from '../encoder.js';\n// Returns generator that encrypts payload from the user\nexport function encryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n                let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                const data = handshake.encrypt(chunk.subarray(i, end), handshake.session);\n                metrics?.encryptedPackets.increment();\n                yield uint16BEEncode(data.byteLength);\n                yield data;\n            }\n        }\n    };\n}\n// Decrypt received payload to the user\nexport function decryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n                let end = i + NOISE_MSG_MAX_LENGTH_BYTES;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                if (end - TAG_LENGTH < i) {\n                    throw new Error('Invalid chunk');\n                }\n                const encrypted = chunk.subarray(i, end);\n                // memory allocation is not cheap so reuse the encrypted Uint8Array\n                // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n                // this is ok because chacha20 reads bytes one by one and don't reread after that\n                // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n                const dst = chunk.subarray(i, end - TAG_LENGTH);\n                const { plaintext: decrypted, valid } = handshake.decrypt(encrypted, handshake.session, dst);\n                if (!valid) {\n                    metrics?.decryptErrors.increment();\n                    throw new Error('Failed to validate decrypted chunk');\n                }\n                metrics?.decryptedPackets.increment();\n                yield decrypted;\n            }\n        }\n    };\n}\n//# sourceMappingURL=streaming.js.map","import { Noise } from './noise.js';\nexport * from './crypto.js';\nexport * from './crypto/stablelib.js';\nexport function noise(init = {}) {\n    return () => new Noise(init);\n}\n//# sourceMappingURL=index.js.map","import get from 'dlv'\nimport mergeOpts from 'merge-options'\nimport errCode from 'err-code'\nimport { routers } from 'ipfs-core-config/libp2p-pubsub-routers'\nimport { delegatedPeerRouting } from '@libp2p/delegated-peer-routing'\nimport { delegatedContentRouting } from '@libp2p/delegated-content-routing'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { ipfsCore as pkgversion } from '../version.js'\nimport { libp2pConfig as getEnvLibp2pOptions } from 'ipfs-core-config/libp2p'\nimport { createLibp2p as createNode } from 'libp2p'\nimport { kadDHT } from '@libp2p/kad-dht'\nimport { bootstrap } from '@libp2p/bootstrap'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { webSockets } from '@libp2p/websockets'\nimport { mplex } from '@libp2p/mplex'\nimport { noise } from '@chainsafe/libp2p-noise'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true, concatArrays: true })\n\n/**\n * @typedef {object} DekOptions\n * @property {string} hash\n * @property {string} salt\n * @property {number} iterationCount\n * @property {number} keyLength\n *\n * @typedef {object} KeychainConfig\n * @property {string} [pass]\n * @property {DekOptions} [dek]\n *\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('libp2p').Libp2p} LibP2P\n * @typedef {import('libp2p').Libp2pOptions} Libp2pOptions\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {object} config\n * @param {Repo} config.repo\n * @param {IPFSOptions|undefined} config.options\n * @param {PeerId} config.peerId\n * @param {Multiaddr[]|undefined} config.multiaddrs\n * @param {KeychainConfig|undefined} config.keychainConfig\n * @param {Partial<IPFSConfig>|undefined} config.config\n */\nexport function createLibp2p ({\n  options = {},\n  peerId,\n  multiaddrs = [],\n  repo,\n  keychainConfig = {},\n  config = {}\n}) {\n  const { datastore } = repo\n\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  })\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({ libp2pOptions, options, config, datastore, peerId })\n  }\n\n  // do not start by default\n  libp2pOptions.start = false\n\n  return createNode(libp2pOptions)\n}\n\n/**\n * @param {object} input\n * @param {IPFSOptions} input.options\n * @param {Partial<IPFSConfig>} input.config\n * @param {Repo['datastore']} input.datastore\n * @param {KeychainConfig} input.keychainConfig\n * @param {PeerId} input.peerId\n * @param {Multiaddr[]} input.multiaddrs\n * @returns {Libp2pOptions}\n */\nfunction getLibp2pOptions ({ options, config, datastore, keychainConfig, peerId, multiaddrs }) {\n  const getPubsubRouter = () => {\n    const router = get(config, 'Pubsub.Router') || 'gossipsub'\n\n    const availableRouters = routers()\n\n    if (!availableRouters[router]) {\n      throw errCode(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${router} router.`), 'ERR_NOT_SUPPORTED')\n    }\n\n    return availableRouters[router]\n  }\n\n  /** @type {Libp2pOptions} */\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId\n  }\n\n  /** @type {Libp2pOptions} */\n  const libp2pOptions = {\n    addresses: {\n      listen: multiaddrs.map(ma => ma.toString()),\n      announce: get(options, 'addresses.announce', get(config, 'Addresses.Announce', [])),\n      noAnnounce: get(options, 'addresses.noAnnounce', get(config, 'Addresses.NoAnnounce', []))\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: keychainConfig,\n    identify: {\n      host: {\n        agentVersion: `js-ipfs/${pkgversion}`\n      }\n    },\n    contentRouters: [],\n    peerRouters: [],\n    peerDiscovery: [],\n    transports: [],\n    streamMuxers: [\n      mplex({\n        maxInboundStreams: 256,\n        maxOutboundStreams: 1024\n      })\n    ],\n    connectionEncryption: [\n      noise()\n    ],\n    relay: {\n      enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n      hop: {\n        enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n        active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n      }\n    },\n    nat: {\n      enabled: !get(config, 'Swarm.DisableNatPortMap', false)\n    }\n  }\n\n  if (get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))) {\n    libp2pOptions.pubsub = getPubsubRouter()\n  }\n\n  if (get(config, 'Routing.Type', 'dhtclient') !== 'none') {\n    libp2pOptions.dht = kadDHT({\n      clientMode: get(config, 'Routing.Type', 'dht') !== 'dhtserver',\n      kBucketSize: get(options, 'dht.kBucketSize', 20),\n      validators: {\n        ipns: ipnsValidator\n      },\n      selectors: {\n        ipns: ipnsSelector\n      }\n    })\n  }\n\n  const boostrapNodes = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []))\n\n  if (boostrapNodes.length > 0) {\n    libp2pOptions.peerDiscovery?.push(\n      bootstrap({\n        list: boostrapNodes\n      })\n    )\n  }\n\n  /** @type {import('libp2p').Libp2pOptions | undefined} */\n  let constructorOptions = get(options, 'libp2p', undefined)\n\n  if (typeof constructorOptions === 'function') {\n    constructorOptions = undefined\n  }\n\n  // Merge defaults with Node.js/browser/other environments options and configuration\n  /** @type {Libp2pOptions} */\n  const libp2pFinalConfig = mergeOptions(\n    libp2pDefaults,\n    getEnvLibp2pOptions(),\n    libp2pOptions,\n    constructorOptions\n  )\n\n  // Set up Delegate Routing based on the presence of Delegates in the config\n  const delegateHosts = get(options, 'config.Addresses.Delegates',\n    get(config, 'Addresses.Delegates', [])\n  )\n\n  if (delegateHosts.length > 0) {\n    // Pick a random delegate host\n    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)]\n    const delegateAddr = multiaddr(delegateString).toOptions()\n    const delegateApiOptions = {\n      host: delegateAddr.host,\n      // port is a string atm, so we need to convert for the check\n      // @ts-expect-error - parseInt(input:string) => number\n      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',\n      port: delegateAddr.port\n    }\n\n    const delegateHttpClient = ipfsHttpClient(delegateApiOptions)\n\n    libp2pFinalConfig.contentRouters?.push(delegatedContentRouting(delegateHttpClient))\n    libp2pFinalConfig.peerRouters?.push(delegatedPeerRouting(delegateHttpClient))\n  }\n\n  // TODO: fixme\n  if (!get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))) {\n    libp2pFinalConfig.peerDiscovery = libp2pFinalConfig.peerDiscovery?.filter(d => {\n      try {\n        if (typeof d === 'function') {\n          // @ts-expect-error not components\n          return d({})[Symbol.toStringTag] !== '@libp2p/mdns'\n        }\n      } catch {}\n      return true\n    })\n  }\n\n  if (libp2pFinalConfig.transports == null) {\n    libp2pFinalConfig.transports = []\n  }\n\n  // add WebSocket transport if not overridden by user config\n  if (libp2pFinalConfig.transports.find(t => {\n    try {\n      if (typeof t === 'function') {\n        return t({})[Symbol.toStringTag] === '@libp2p/websockets'\n      }\n    } catch {}\n    return false\n  }) == null) {\n    libp2pFinalConfig.transports.push(webSockets())\n  }\n\n  return libp2pFinalConfig\n}\n","import { webRTCStar } from '@libp2p/webrtc-star'\n\nexport function libp2pConfig () {\n  const webRtcStar = webRTCStar()\n\n  /** @type {import('libp2p').Libp2pOptions} */\n  const options = {\n    transports: [\n      webRtcStar.transport\n    ],\n    peerDiscovery: [\n      webRtcStar.discovery\n    ],\n    connectionManager: {\n      maxParallelDials: 150, // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4, // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3, // 10 second dial timeout per peer dial\n      autoDial: true\n    },\n    nat: {\n      enabled: false\n    }\n  }\n\n  return options\n}\n","/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n","/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\nimport { createLibp2pNode } from './libp2p.js';\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```js\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [mplex()],\n *   connectionEncryption: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nexport async function createLibp2p(options) {\n    const node = await createLibp2pNode(options);\n    if (options.start !== false) {\n        await node.start();\n    }\n    return node;\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger'\nimport { createRepo } from 'ipfs-core-config/repo'\nimport getDefaultConfig from 'ipfs-core-config/config'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport mergeOpts from 'merge-options'\nimport { profiles as configProfiles } from './config/profiles.js'\nimport { NotEnabledError, NotInitializedError } from '../errors.js'\nimport { createLibp2p } from './libp2p.js'\nimport { ERR_REPO_NOT_INITIALIZED } from 'ipfs-repo/errors'\nimport { createEd25519PeerId, createRSAPeerId } from '@libp2p/peer-id-factory'\nimport errCode from 'err-code'\nimport { unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport { Key } from 'interface-datastore/key'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:components:peer:storage')\n\n/**\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('../types').InitOptions} InitOptions\n * @typedef {import('../types').Print} Print\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('@libp2p/crypto/keys').KeyTypes} KeyType\n * @typedef {import('@libp2p/interface-keychain').KeyChain} Keychain\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nexport class Storage {\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {Keychain} keychain\n   * @param {IPFSRepo} repo\n   * @param {Print} print\n   * @param {boolean} isNew\n   */\n  constructor (peerId, keychain, repo, print, isNew) {\n    this.print = print\n    this.peerId = peerId\n    this.keychain = keychain\n    this.repo = repo\n    this.print = print\n    this.isNew = isNew\n  }\n\n  /**\n   * @param {Print} print\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n   * @param {IPFSOptions} options\n   */\n  static async start (print, codecs, options) {\n    const { repoAutoMigrate, repo: inputRepo, onMigrationProgress } = options\n\n    const repo = (typeof inputRepo === 'string' || inputRepo == null)\n      ? createRepo(print, codecs, {\n        path: inputRepo,\n        autoMigrate: repoAutoMigrate,\n        onMigrationProgress: onMigrationProgress\n      })\n      : inputRepo\n\n    const { peerId, keychain, isNew } = await loadRepo(print, repo, options)\n\n    // TODO: throw error?\n    // @ts-expect-error On start, keychain will always be available\n    return new Storage(peerId, keychain, repo, print, isNew)\n  }\n}\n\n/**\n * @param {Print} print\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n */\nconst loadRepo = async (print, repo, options) => {\n  if (!repo.closed) {\n    return { ...await configureRepo(repo, options), isNew: false }\n  }\n\n  try {\n    await repo.open()\n\n    return { ...await configureRepo(repo, options), isNew: false }\n  } catch (/** @type {any} */ err) {\n    if (err.code !== ERR_REPO_NOT_INITIALIZED) {\n      throw err\n    }\n\n    if (options.init && options.init.allowNew === false) {\n      throw new NotEnabledError('Initialization of new repos disabled by config, pass `config.init.isNew: true` to enable it')\n    }\n\n    return { ...await initRepo(print, repo, options), isNew: true }\n  }\n}\n\n/**\n * @param {Print} print\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n * @returns {Promise<{peerId: PeerId, keychain?: Keychain}>}\n */\nconst initRepo = async (print, repo, options) => {\n  const initOptions = options.init || {}\n\n  // 1. Verify that repo does not exist yet (if it does and we could not open it we give up)\n  const exists = await repo.exists()\n  log('repo exists?', exists)\n\n  if (exists === true) {\n    throw new Error('repo already exists')\n  }\n\n  // 2. Restore `peerId` from a given `.privateKey` or init new using provided options.\n  const peerId = initOptions.privateKey\n    ? await decodePeerId(initOptions.privateKey)\n    : await initPeerId(print, initOptions)\n\n  const identity = peerIdToIdentity(peerId)\n\n  log('peer identity: %s', identity.PeerID)\n\n  // 3. Init new repo with provided `.config` and restored / initialized `peerId`\n  const config = {\n    ...mergeOptions(applyProfiles(getDefaultConfig(), initOptions.profiles), options.config),\n    Identity: identity\n  }\n  await repo.init(config)\n\n  // 4. Open initialized repo.\n  await repo.open()\n\n  log('repo opened')\n\n  /** @type {import('./libp2p').KeychainConfig} */\n  const keychainConfig = {\n    pass: options.pass\n  }\n\n  try {\n    keychainConfig.dek = await repo.config.get('Keychain.DEK')\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  // Create libp2p for Keychain creation\n  const libp2p = await createLibp2p({\n    options: undefined,\n    multiaddrs: undefined,\n    peerId,\n    repo,\n    config,\n    keychainConfig\n  })\n\n  if (!(await repo.datastore.has(new Key('/info/self')))) {\n    await libp2p.keychain.importPeer('self', peerId)\n  }\n\n  await repo.config.set('Keychain', {\n    // @ts-expect-error private field\n    DEK: libp2p.keychain.init.dek\n  })\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\n/**\n * Takes `peerId` either represented as a string serialized string or\n * an instance and returns a `PeerId` instance.\n *\n * @param {PeerId|string} peerId\n * @returns {Promise<PeerId>}\n */\nconst decodePeerId = async (peerId) => {\n  log('using user-supplied private-key')\n  if (isPeerId(peerId)) {\n    return peerId\n  }\n\n  const rawPrivateKey = uint8ArrayFromString(peerId, 'base64pad')\n  const key = await unmarshalPrivateKey(rawPrivateKey)\n  return await peerIdFromKeys(key.public.bytes, key.bytes)\n}\n\n/**\n * Initializes new PeerId by generating an underlying keypair.\n *\n * @param {Print} print\n * @param {object} options\n * @param {KeyType} [options.algorithm='Ed25519']\n * @param {number} [options.bits=2048]\n * @returns {Promise<PeerId>}\n */\nconst initPeerId = (print, { algorithm = 'Ed25519', bits = 2048 }) => {\n  // Generate peer identity keypair + transform to desired format + add to config.\n  print('generating %s keypair...', algorithm)\n\n  if (algorithm === 'Ed25519') {\n    return createEd25519PeerId()\n  }\n\n  if (algorithm === 'RSA') {\n    return createRSAPeerId({ bits })\n  }\n\n  throw errCode(new Error('Unknown PeerId algorithm'), 'ERR_UNKNOWN_PEER_ID_ALGORITHM')\n}\n\n/**\n * @param {PeerId} peerId\n */\nconst peerIdToIdentity = (peerId) => {\n  if (peerId.privateKey == null) {\n    throw errCode(new Error('Private key missing'), 'ERR_MISSING_PRIVATE_KEY')\n  }\n\n  return {\n    PeerID: peerId.toString(),\n    /** @type {string} */\n    PrivKey: uint8ArrayToString(peerId.privateKey, 'base64pad')\n  }\n}\n\n/**\n * Applies passed `profiles` and a `config` to an open repo.\n *\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n * @returns {Promise<{peerId: PeerId, keychain?: Keychain}>}\n */\nconst configureRepo = async (repo, options) => {\n  const config = options.config\n  const profiles = (options.init && options.init.profiles) || []\n  const pass = options.pass\n  const original = await repo.config.getAll()\n  const changed = mergeConfigs(applyProfiles(original, profiles), config)\n\n  if (original !== changed) {\n    await repo.config.replace(changed)\n  }\n\n  if (!changed.Identity || !changed.Identity.PrivKey) {\n    throw new NotInitializedError('No private key was found in the config, please intialize the repo')\n  }\n\n  const buf = uint8ArrayFromString(changed.Identity.PrivKey, 'base64pad')\n  const key = await unmarshalPrivateKey(buf)\n  const peerId = await peerIdFromKeys(key.public.bytes, key.bytes)\n  const libp2p = await createLibp2p({\n    options: undefined,\n    multiaddrs: undefined,\n    peerId,\n    repo,\n    config: changed,\n    keychainConfig: {\n      pass,\n      ...changed.Keychain\n    }\n  })\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\n/**\n * @param {IPFSConfig} config\n * @param {Partial<IPFSConfig>} [changes]\n */\nconst mergeConfigs = (config, changes) =>\n  changes ? mergeOptions(config, changes) : config\n\n/**\n * Apply profiles (e.g. ['server', 'lowpower']) to config\n *\n * @param {IPFSConfig} config\n * @param {string[]} [profiles]\n */\nconst applyProfiles = (config, profiles) => {\n  return (profiles || []).reduce((config, name) => {\n    const profile = configProfiles[name]\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`)\n    }\n    log('applying profile %s', name)\n    return profile.transform(config)\n  }, config)\n}\n","import * as varint from 'varint'\n\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\nfunction varintEncoder (buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr)\n  }, 0))\n  let offset = 0\n\n  for (const num of buf) {\n    out = varint.encode(num, out, offset)\n\n    // @ts-expect-error types are wrong\n    offset += varint.default.encodingLength(num)\n  }\n\n  return out\n}\n\nexport default varintEncoder\n","\nimport { base58btc } from 'multiformats/bases/base58'\n\nexport class WantListEntry {\n  /**\n   * @param {import('multiformats').CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  constructor (cid, priority, wantType) {\n    // Keep track of how many requests we have for this key\n    this._refCounter = 1\n\n    this.cid = cid\n    this.priority = priority || 1\n    this.wantType = wantType\n  }\n\n  inc () {\n    this._refCounter += 1\n  }\n\n  dec () {\n    this._refCounter = Math.max(0, this._refCounter - 1)\n  }\n\n  hasRefs () {\n    return this._refCounter > 0\n  }\n\n  // So that console.log prints a nice description of this object\n  get [Symbol.toStringTag] () {\n    const cidStr = this.cid.toString(base58btc)\n    return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`\n  }\n\n  /**\n   * @param {any} other\n   */\n  equals (other) {\n    return (this._refCounter === other._refCounter) &&\n      this.cid.equals(other.cid) &&\n      this.priority === other.priority &&\n      this.wantType === other.wantType\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\n\nexport const Message = $root.Message = (() => {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {Message.IWantlist|null} [wantlist] Message wantlist\n     * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n     * @property {Array.<Message.IBlock>|null} [payload] Message payload\n     * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n     * @property {number|null} [pendingBytes] Message pendingBytes\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [p] Properties to set\n     */\n    function Message(p) {\n        this.blocks = [];\n        this.payload = [];\n        this.blockPresences = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Message wantlist.\n     * @member {Message.IWantlist|null|undefined} wantlist\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.wantlist = null;\n\n    /**\n     * Message blocks.\n     * @member {Array.<Uint8Array>} blocks\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Message payload.\n     * @member {Array.<Message.IBlock>} payload\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.payload = $util.emptyArray;\n\n    /**\n     * Message blockPresences.\n     * @member {Array.<Message.IBlockPresence>} blockPresences\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blockPresences = $util.emptyArray;\n\n    /**\n     * Message pendingBytes.\n     * @member {number} pendingBytes\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.pendingBytes = 0;\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} m Message message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\"))\n            $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n        if (m.blocks != null && m.blocks.length) {\n            for (var i = 0; i < m.blocks.length; ++i)\n                w.uint32(18).bytes(m.blocks[i]);\n        }\n        if (m.payload != null && m.payload.length) {\n            for (var i = 0; i < m.payload.length; ++i)\n                $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.blockPresences != null && m.blockPresences.length) {\n            for (var i = 0; i < m.blockPresences.length; ++i)\n                $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n        }\n        if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\"))\n            w.uint32(40).int32(m.pendingBytes);\n        return w;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1: {\n                    m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n                    break;\n                }\n            case 2: {\n                    if (!(m.blocks && m.blocks.length))\n                        m.blocks = [];\n                    m.blocks.push(r.bytes());\n                    break;\n                }\n            case 3: {\n                    if (!(m.payload && m.payload.length))\n                        m.payload = [];\n                    m.payload.push($root.Message.Block.decode(r, r.uint32()));\n                    break;\n                }\n            case 4: {\n                    if (!(m.blockPresences && m.blockPresences.length))\n                        m.blockPresences = [];\n                    m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n                    break;\n                }\n            case 5: {\n                    m.pendingBytes = r.int32();\n                    break;\n                }\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message} Message\n     */\n    Message.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message)\n            return d;\n        var m = new $root.Message();\n        if (d.wantlist != null) {\n            if (typeof d.wantlist !== \"object\")\n                throw TypeError(\".Message.wantlist: object expected\");\n            m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n        }\n        if (d.blocks) {\n            if (!Array.isArray(d.blocks))\n                throw TypeError(\".Message.blocks: array expected\");\n            m.blocks = [];\n            for (var i = 0; i < d.blocks.length; ++i) {\n                if (typeof d.blocks[i] === \"string\")\n                    $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);\n                else if (d.blocks[i].length >= 0)\n                    m.blocks[i] = d.blocks[i];\n            }\n        }\n        if (d.payload) {\n            if (!Array.isArray(d.payload))\n                throw TypeError(\".Message.payload: array expected\");\n            m.payload = [];\n            for (var i = 0; i < d.payload.length; ++i) {\n                if (typeof d.payload[i] !== \"object\")\n                    throw TypeError(\".Message.payload: object expected\");\n                m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n            }\n        }\n        if (d.blockPresences) {\n            if (!Array.isArray(d.blockPresences))\n                throw TypeError(\".Message.blockPresences: array expected\");\n            m.blockPresences = [];\n            for (var i = 0; i < d.blockPresences.length; ++i) {\n                if (typeof d.blockPresences[i] !== \"object\")\n                    throw TypeError(\".Message.blockPresences: object expected\");\n                m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n            }\n        }\n        if (d.pendingBytes != null) {\n            m.pendingBytes = d.pendingBytes | 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} m Message\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Message.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocks = [];\n            d.payload = [];\n            d.blockPresences = [];\n        }\n        if (o.defaults) {\n            d.wantlist = null;\n            d.pendingBytes = 0;\n        }\n        if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n            d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n        }\n        if (m.blocks && m.blocks.length) {\n            d.blocks = [];\n            for (var j = 0; j < m.blocks.length; ++j) {\n                d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n            }\n        }\n        if (m.payload && m.payload.length) {\n            d.payload = [];\n            for (var j = 0; j < m.payload.length; ++j) {\n                d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n            }\n        }\n        if (m.blockPresences && m.blockPresences.length) {\n            d.blockPresences = [];\n            for (var j = 0; j < m.blockPresences.length; ++j) {\n                d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n            }\n        }\n        if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n            d.pendingBytes = m.pendingBytes;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for Message\n     * @function getTypeUrl\n     * @memberof Message\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/Message\";\n    };\n\n    Message.Wantlist = (function() {\n\n        /**\n         * Properties of a Wantlist.\n         * @memberof Message\n         * @interface IWantlist\n         * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n         * @property {boolean|null} [full] Wantlist full\n         */\n\n        /**\n         * Constructs a new Wantlist.\n         * @memberof Message\n         * @classdesc Represents a Wantlist.\n         * @implements IWantlist\n         * @constructor\n         * @param {Message.IWantlist=} [p] Properties to set\n         */\n        function Wantlist(p) {\n            this.entries = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Wantlist entries.\n         * @member {Array.<Message.Wantlist.IEntry>} entries\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.entries = $util.emptyArray;\n\n        /**\n         * Wantlist full.\n         * @member {boolean} full\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.full = false;\n\n        /**\n         * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.IWantlist} m Wantlist message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wantlist.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.entries != null && m.entries.length) {\n                for (var i = 0; i < m.entries.length; ++i)\n                    $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.full != null && Object.hasOwnProperty.call(m, \"full\"))\n                w.uint32(16).bool(m.full);\n            return w;\n        };\n\n        /**\n         * Decodes a Wantlist message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Wantlist} Wantlist\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wantlist.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        if (!(m.entries && m.entries.length))\n                            m.entries = [];\n                        m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n                        break;\n                    }\n                case 2: {\n                        m.full = r.bool();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Wantlist} Wantlist\n         */\n        Wantlist.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Wantlist)\n                return d;\n            var m = new $root.Message.Wantlist();\n            if (d.entries) {\n                if (!Array.isArray(d.entries))\n                    throw TypeError(\".Message.Wantlist.entries: array expected\");\n                m.entries = [];\n                for (var i = 0; i < d.entries.length; ++i) {\n                    if (typeof d.entries[i] !== \"object\")\n                        throw TypeError(\".Message.Wantlist.entries: object expected\");\n                    m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n                }\n            }\n            if (d.full != null) {\n                m.full = Boolean(d.full);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.Wantlist} m Wantlist\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wantlist.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.entries = [];\n            }\n            if (o.defaults) {\n                d.full = false;\n            }\n            if (m.entries && m.entries.length) {\n                d.entries = [];\n                for (var j = 0; j < m.entries.length; ++j) {\n                    d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n                }\n            }\n            if (m.full != null && m.hasOwnProperty(\"full\")) {\n                d.full = m.full;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Wantlist to JSON.\n         * @function toJSON\n         * @memberof Message.Wantlist\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wantlist.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Wantlist\n         * @function getTypeUrl\n         * @memberof Message.Wantlist\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Wantlist.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Wantlist\";\n        };\n\n        /**\n         * WantType enum.\n         * @name Message.Wantlist.WantType\n         * @enum {number}\n         * @property {number} Block=0 Block value\n         * @property {number} Have=1 Have value\n         */\n        Wantlist.WantType = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"Block\"] = 0;\n            values[valuesById[1] = \"Have\"] = 1;\n            return values;\n        })();\n\n        Wantlist.Entry = (function() {\n\n            /**\n             * Properties of an Entry.\n             * @memberof Message.Wantlist\n             * @interface IEntry\n             * @property {Uint8Array|null} [block] Entry block\n             * @property {number|null} [priority] Entry priority\n             * @property {boolean|null} [cancel] Entry cancel\n             * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n             * @property {boolean|null} [sendDontHave] Entry sendDontHave\n             */\n\n            /**\n             * Constructs a new Entry.\n             * @memberof Message.Wantlist\n             * @classdesc Represents an Entry.\n             * @implements IEntry\n             * @constructor\n             * @param {Message.Wantlist.IEntry=} [p] Properties to set\n             */\n            function Entry(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Entry block.\n             * @member {Uint8Array} block\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.block = $util.newBuffer([]);\n\n            /**\n             * Entry priority.\n             * @member {number} priority\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.priority = 0;\n\n            /**\n             * Entry cancel.\n             * @member {boolean} cancel\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.cancel = false;\n\n            /**\n             * Entry wantType.\n             * @member {Message.Wantlist.WantType} wantType\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.wantType = 0;\n\n            /**\n             * Entry sendDontHave.\n             * @member {boolean} sendDontHave\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.sendDontHave = false;\n\n            /**\n             * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n             * @function encode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entry.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.block != null && Object.hasOwnProperty.call(m, \"block\"))\n                    w.uint32(10).bytes(m.block);\n                if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\"))\n                    w.uint32(16).int32(m.priority);\n                if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\"))\n                    w.uint32(24).bool(m.cancel);\n                if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\"))\n                    w.uint32(32).int32(m.wantType);\n                if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\"))\n                    w.uint32(40).bool(m.sendDontHave);\n                return w;\n            };\n\n            /**\n             * Decodes an Entry message from the specified reader or buffer.\n             * @function decode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {Message.Wantlist.Entry} Entry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entry.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist.Entry();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1: {\n                            m.block = r.bytes();\n                            break;\n                        }\n                    case 2: {\n                            m.priority = r.int32();\n                            break;\n                        }\n                    case 3: {\n                            m.cancel = r.bool();\n                            break;\n                        }\n                    case 4: {\n                            m.wantType = r.int32();\n                            break;\n                        }\n                    case 5: {\n                            m.sendDontHave = r.bool();\n                            break;\n                        }\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {Message.Wantlist.Entry} Entry\n             */\n            Entry.fromObject = function fromObject(d) {\n                if (d instanceof $root.Message.Wantlist.Entry)\n                    return d;\n                var m = new $root.Message.Wantlist.Entry();\n                if (d.block != null) {\n                    if (typeof d.block === \"string\")\n                        $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);\n                    else if (d.block.length >= 0)\n                        m.block = d.block;\n                }\n                if (d.priority != null) {\n                    m.priority = d.priority | 0;\n                }\n                if (d.cancel != null) {\n                    m.cancel = Boolean(d.cancel);\n                }\n                switch (d.wantType) {\n                case \"Block\":\n                case 0:\n                    m.wantType = 0;\n                    break;\n                case \"Have\":\n                case 1:\n                    m.wantType = 1;\n                    break;\n                }\n                if (d.sendDontHave != null) {\n                    m.sendDontHave = Boolean(d.sendDontHave);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from an Entry message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.Entry} m Entry\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entry.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    if (o.bytes === String)\n                        d.block = \"\";\n                    else {\n                        d.block = [];\n                        if (o.bytes !== Array)\n                            d.block = $util.newBuffer(d.block);\n                    }\n                    d.priority = 0;\n                    d.cancel = false;\n                    d.wantType = o.enums === String ? \"Block\" : 0;\n                    d.sendDontHave = false;\n                }\n                if (m.block != null && m.hasOwnProperty(\"block\")) {\n                    d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n                }\n                if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n                    d.priority = m.priority;\n                }\n                if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n                    d.cancel = m.cancel;\n                }\n                if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n                    d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n                }\n                if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n                    d.sendDontHave = m.sendDontHave;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Entry to JSON.\n             * @function toJSON\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entry.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Entry\n             * @function getTypeUrl\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/Message.Wantlist.Entry\";\n            };\n\n            return Entry;\n        })();\n\n        return Wantlist;\n    })();\n\n    Message.Block = (function() {\n\n        /**\n         * Properties of a Block.\n         * @memberof Message\n         * @interface IBlock\n         * @property {Uint8Array|null} [prefix] Block prefix\n         * @property {Uint8Array|null} [data] Block data\n         */\n\n        /**\n         * Constructs a new Block.\n         * @memberof Message\n         * @classdesc Represents a Block.\n         * @implements IBlock\n         * @constructor\n         * @param {Message.IBlock=} [p] Properties to set\n         */\n        function Block(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Block prefix.\n         * @member {Uint8Array} prefix\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Block data.\n         * @member {Uint8Array} data\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Block\n         * @static\n         * @param {Message.IBlock} m Block message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Block.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\"))\n                w.uint32(10).bytes(m.prefix);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(18).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a Block message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Block\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Block} Block\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Block.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Block();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.prefix = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.data = r.bytes();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Block message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Block\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Block} Block\n         */\n        Block.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Block)\n                return d;\n            var m = new $root.Message.Block();\n            if (d.prefix != null) {\n                if (typeof d.prefix === \"string\")\n                    $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);\n                else if (d.prefix.length >= 0)\n                    m.prefix = d.prefix;\n            }\n            if (d.data != null) {\n                if (typeof d.data === \"string\")\n                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                else if (d.data.length >= 0)\n                    m.data = d.data;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Block message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Block\n         * @static\n         * @param {Message.Block} m Block\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Block.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.prefix = \"\";\n                else {\n                    d.prefix = [];\n                    if (o.bytes !== Array)\n                        d.prefix = $util.newBuffer(d.prefix);\n                }\n                if (o.bytes === String)\n                    d.data = \"\";\n                else {\n                    d.data = [];\n                    if (o.bytes !== Array)\n                        d.data = $util.newBuffer(d.data);\n                }\n            }\n            if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n                d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n            }\n            if (m.data != null && m.hasOwnProperty(\"data\")) {\n                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Block to JSON.\n         * @function toJSON\n         * @memberof Message.Block\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Block.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Block\n         * @function getTypeUrl\n         * @memberof Message.Block\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Block.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Block\";\n        };\n\n        return Block;\n    })();\n\n    /**\n     * BlockPresenceType enum.\n     * @name Message.BlockPresenceType\n     * @enum {number}\n     * @property {number} Have=0 Have value\n     * @property {number} DontHave=1 DontHave value\n     */\n    Message.BlockPresenceType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Have\"] = 0;\n        values[valuesById[1] = \"DontHave\"] = 1;\n        return values;\n    })();\n\n    Message.BlockPresence = (function() {\n\n        /**\n         * Properties of a BlockPresence.\n         * @memberof Message\n         * @interface IBlockPresence\n         * @property {Uint8Array|null} [cid] BlockPresence cid\n         * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n         */\n\n        /**\n         * Constructs a new BlockPresence.\n         * @memberof Message\n         * @classdesc Represents a BlockPresence.\n         * @implements IBlockPresence\n         * @constructor\n         * @param {Message.IBlockPresence=} [p] Properties to set\n         */\n        function BlockPresence(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BlockPresence cid.\n         * @member {Uint8Array} cid\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.cid = $util.newBuffer([]);\n\n        /**\n         * BlockPresence type.\n         * @member {Message.BlockPresenceType} type\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.type = 0;\n\n        /**\n         * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n         * @function encode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockPresence.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\"))\n                w.uint32(10).bytes(m.cid);\n            if (m.type != null && Object.hasOwnProperty.call(m, \"type\"))\n                w.uint32(16).int32(m.type);\n            return w;\n        };\n\n        /**\n         * Decodes a BlockPresence message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.BlockPresence} BlockPresence\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockPresence.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.BlockPresence();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.cid = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.type = r.int32();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.BlockPresence} BlockPresence\n         */\n        BlockPresence.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.BlockPresence)\n                return d;\n            var m = new $root.Message.BlockPresence();\n            if (d.cid != null) {\n                if (typeof d.cid === \"string\")\n                    $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);\n                else if (d.cid.length >= 0)\n                    m.cid = d.cid;\n            }\n            switch (d.type) {\n            case \"Have\":\n            case 0:\n                m.type = 0;\n                break;\n            case \"DontHave\":\n            case 1:\n                m.type = 1;\n                break;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.BlockPresence} m BlockPresence\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockPresence.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.cid = \"\";\n                else {\n                    d.cid = [];\n                    if (o.bytes !== Array)\n                        d.cid = $util.newBuffer(d.cid);\n                }\n                d.type = o.enums === String ? \"Have\" : 0;\n            }\n            if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n                d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n            }\n            if (m.type != null && m.hasOwnProperty(\"type\")) {\n                d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this BlockPresence to JSON.\n         * @function toJSON\n         * @memberof Message.BlockPresence\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockPresence.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for BlockPresence\n         * @function getTypeUrl\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        BlockPresence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.BlockPresence\";\n        };\n\n        return BlockPresence;\n    })();\n\n    return Message;\n})();\n\nexport { $root as default };\n","\nimport { WantListEntry as Entry } from './entry.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { Message } from '../message/message.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\nconst WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Wantlist {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('@libp2p/interface-libp2p').Libp2p} [libp2p]\n   */\n  constructor (stats, libp2p) {\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p\n      ? trackedMap({\n        name: 'ipfs_bitswap_wantlist',\n        metrics: libp2p.metrics\n      })\n      : new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\n","\nimport { Wantlist } from '../wantlist/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\n\nconst WantlistEntry = Wantlist.Entry\n\nexport class BitswapMessageEntry {\n  /**\n   * @param {import('multiformats').CID} cid\n   * @param {number} priority\n   * @param {import('./message').Message.Wantlist.WantType} wantType\n   * @param {boolean} [cancel]\n   * @param {boolean} [sendDontHave]\n   */\n  constructor (cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType)\n    this.cancel = Boolean(cancel)\n    this.sendDontHave = Boolean(sendDontHave)\n  }\n\n  get cid () {\n    return this.entry.cid\n  }\n\n  set cid (cid) {\n    this.entry.cid = cid\n  }\n\n  get priority () {\n    return this.entry.priority\n  }\n\n  set priority (val) {\n    this.entry.priority = val\n  }\n\n  get wantType () {\n    return this.entry.wantType\n  }\n\n  set wantType (val) {\n    this.entry.wantType = val\n  }\n\n  get [Symbol.toStringTag] () {\n    const cidStr = this.cid.toString(base58btc)\n    return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`\n  }\n\n  /**\n   * @param {this} other\n   */\n  equals (other) {\n    return (this.cancel === other.cancel) &&\n           (this.sendDontHave === other.sendDontHave) &&\n           (this.wantType === other.wantType) &&\n           this.entry.equals(other.entry)\n  }\n}\n","import { logger as createLogger } from '@libp2p/logger'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { BitswapMessageEntry } from '../message/entry.js'\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`)\n  }\n\n  return createLogger(name.join(':'))\n}\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nexport const includesWith = (pred, x, list) => {\n  let idx = 0\n  const len = list.length\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true\n    }\n    idx += 1\n  }\n  return false\n}\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const uniqWith = (pred, list) => {\n  let idx = 0\n  const len = list.length\n  const result = []\n  let item\n\n  while (idx < len) {\n    item = list[idx]\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v)\n\n    if (acc[k]) {\n      acc[k].push(v)\n    } else {\n      acc[k] = [v]\n    }\n    return acc\n  }, /** @type {Record<K, V[]>} */({}))\n}\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values)\n  })\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key)\n\n    if (valueB === undefined) {\n      return false\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n","import { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\n// @ts-ignore\nimport vd from 'varint-decoder'\nimport ve from '../utils/varint-encoder.js'\nimport { isMapEqual } from '../utils/index.js'\nimport { Message } from './message.js'\nimport { BitswapMessageEntry as Entry } from './entry.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n/**\n * @typedef {import('../types').MultihashHasherLoader} MultihashHasherLoader\n */\n\nexport class BitswapMessage {\n  /**\n   * @param {boolean} full\n   */\n  constructor (full) {\n    this.full = full\n    /** @type {Map<string, Entry>} */\n    this.wantlist = new Map()\n\n    /** @type {Map<string, Uint8Array>} */\n    this.blocks = new Map()\n\n    /** @type {Map<string, import('./message').Message.BlockPresenceType>} */\n    this.blockPresences = new Map()\n    this.pendingBytes = 0\n  }\n\n  get empty () {\n    return this.blocks.size === 0 &&\n           this.wantlist.size === 0 &&\n           this.blockPresences.size === 0\n  }\n\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('./message').Message.Wantlist.WantType | null} [wantType]\n   * @param {boolean} [cancel]\n   * @param {boolean} [sendDontHave]\n   * @returns {void}\n   */\n  addEntry (cid, priority, wantType, cancel, sendDontHave) {\n    if (wantType == null) {\n      wantType = BitswapMessage.WantType.Block\n    }\n\n    const cidStr = cid.toString(base58btc)\n    const entry = this.wantlist.get(cidStr)\n    if (entry) {\n      // Only change priority if want is of the same type\n      if (entry.wantType === wantType) {\n        entry.priority = priority\n      }\n      // Only change from \"dont cancel\" to \"do cancel\"\n      if (cancel) {\n        entry.cancel = Boolean(cancel)\n      }\n      // Only change from \"dont send\" to \"do send\" DONT_HAVE\n      if (sendDontHave) {\n        entry.sendDontHave = Boolean(sendDontHave)\n      }\n      // want-block overrides existing want-have\n      if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.wantlist.set(cidStr, new Entry(cid, priority, wantType, cancel, sendDontHave))\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  addBlock (cid, block) {\n    const cidStr = cid.toString(base58btc)\n    this.blocks.set(cidStr, block)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  addHave (cid) {\n    const cidStr = cid.toString(base58btc)\n    if (!this.blockPresences.has(cidStr)) {\n      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  addDontHave (cid) {\n    const cidStr = cid.toString(base58btc)\n    if (!this.blockPresences.has(cidStr)) {\n      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  cancel (cid) {\n    const cidStr = cid.toString(base58btc)\n    this.wantlist.delete(cidStr)\n    this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false)\n  }\n\n  /**\n   * @param {number} size\n   */\n  setPendingBytes (size) {\n    this.pendingBytes = size\n  }\n\n  /**\n   * Serializes to Bitswap Message protobuf of\n   * version 1.0.0\n   *\n   * @returns {Uint8Array}\n   */\n  serializeToBitswap100 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.bytes, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        }),\n        full: this.full ? true : undefined\n      },\n      blocks: Array.from(this.blocks.values())\n    }\n\n    return Message.encode(msg).finish()\n  }\n\n  /**\n   * Serializes to Bitswap Message protobuf of\n   * version 1.1.0\n   *\n   * @returns {Uint8Array}\n   */\n  serializeToBitswap110 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.bytes, // cid\n            priority: Number(entry.priority),\n            wantType: entry.wantType,\n            cancel: Boolean(entry.cancel),\n            sendDontHave: Boolean(entry.sendDontHave)\n          }\n        }),\n        full: this.full ? true : undefined\n      },\n      /** @type {import('./message').Message.BlockPresence[]} */\n      blockPresences: [],\n\n      /** @type {{ prefix: Uint8Array, data: Uint8Array }[]} */\n      payload: [],\n      pendingBytes: this.pendingBytes\n    }\n\n    for (const [cidStr, data] of this.blocks.entries()) {\n      const cid = CID.parse(cidStr)\n      const version = cid.version\n      const codec = cid.code\n      const multihash = cid.multihash.code\n      const digestLength = cid.multihash.digest.length\n      const prefix = ve([\n        version, codec, multihash, digestLength\n      ])\n\n      msg.payload.push(\n        new Message.Block({\n          prefix,\n          data\n        })\n      )\n    }\n\n    for (const [cidStr, bpType] of this.blockPresences) {\n      msg.blockPresences.push(new Message.BlockPresence({\n        cid: CID.parse(cidStr).bytes,\n        type: bpType\n      }))\n    }\n\n    if (this.pendingBytes > 0) {\n      msg.pendingBytes = this.pendingBytes\n    }\n\n    return Message.encode(msg).finish()\n  }\n\n  /**\n   * @param {BitswapMessage} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    if (this.full !== other.full ||\n        this.pendingBytes !== other.pendingBytes ||\n        !isMapEqual(this.wantlist, other.wantlist) ||\n        !isMapEqual(this.blocks, other.blocks) ||\n        // @TODO - Is this a bug ?\n        // @ts-expect-error - isMap equals map values to be objects not numbers\n        !isMapEqual(this.blockPresences, other.blockPresences)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    const list = Array.from(this.wantlist.keys())\n    const blocks = Array.from(this.blocks.keys())\n    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`\n  }\n}\n\n/**\n * @param {Uint8Array} raw\n * @param {MultihashHasherLoader} [hashLoader]\n */\nBitswapMessage.deserialize = async (raw, hashLoader) => {\n  const decoded = Message.decode(raw)\n\n  const isFull = (decoded.wantlist && decoded.wantlist.full) || false\n  const msg = new BitswapMessage(isFull)\n\n  if (decoded.wantlist && decoded.wantlist.entries) {\n    decoded.wantlist.entries.forEach((entry) => {\n      if (!entry.block) {\n        return\n      }\n      // note: entry.block is the CID here\n      const cid = CID.decode(entry.block)\n      msg.addEntry(cid, entry.priority || 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave))\n    })\n  }\n\n  if (decoded.blockPresences) {\n    decoded.blockPresences.forEach((blockPresence) => {\n      if (!blockPresence.cid) {\n        return\n      }\n\n      const cid = CID.decode(blockPresence.cid)\n\n      if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {\n        msg.addHave(cid)\n      } else {\n        msg.addDontHave(cid)\n      }\n    })\n  }\n\n  // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n  if (decoded.blocks.length > 0) {\n    await Promise.all(decoded.blocks.map(async (b) => {\n      const hash = await sha256.digest(b)\n      const cid = CID.createV0(hash)\n      msg.addBlock(cid, b)\n    }))\n    return msg\n  }\n\n  // Bitswap 1.1.0\n  if (decoded.payload.length > 0) {\n    await Promise.all(decoded.payload.map(async (p) => {\n      if (!p.prefix || !p.data) {\n        return\n      }\n      const values = vd(p.prefix)\n      const cidVersion = values[0]\n      const multicodec = values[1]\n      const hashAlg = values[2]\n      const hasher = hashAlg === sha256.code ? sha256 : hashLoader && await hashLoader.getHasher(hashAlg)\n\n      if (!hasher) {\n        throw new CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG')\n      }\n\n      // const hashLen = values[3] // We haven't need to use this so far\n      const hash = await hasher.digest(p.data)\n      const cid = CID.create(cidVersion, multicodec, hash)\n      msg.addBlock(cid, p.data)\n    }))\n    msg.setPendingBytes(decoded.pendingBytes)\n    return msg\n  }\n\n  return msg\n}\n\n/**\n * @param {CID} cid\n */\nBitswapMessage.blockPresenceSize = (cid) => {\n  // It's ok if this is not exactly right: it's used to estimate the size of\n  // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave\n  // plenty of padding under the maximum message size.\n  // (It's more important for this to be fast).\n  return cid.bytes.length + 1\n}\n\nBitswapMessage.Entry = Entry\nBitswapMessage.WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\nBitswapMessage.BlockPresenceType = {\n  Have: Message.BlockPresenceType.Have,\n  DontHave: Message.BlockPresenceType.DontHave\n}\n","const SECOND = 1000\n\nexport const maxProvidersPerRequest = 3\nexport const providerRequestTimeout = 10 * SECOND\nexport const hasBlockTimeout = 15 * SECOND\nexport const provideTimeout = 15 * SECOND\nexport const kMaxPriority = Math.pow(2, 31) - 1\nexport const maxListeners = 1000\nexport const wantlistSendDebounceMs = 1\n","\n// @ts-ignore\nimport debounce from 'just-debounce-it'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { logger } from '../utils/index.js'\nimport { wantlistSendDebounceMs } from '../constants.js'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (/** @type {any} */ err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n","\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport * as CONSTANTS from '../constants.js'\nimport { MsgQueue } from './msg-queue.js'\nimport { logger } from '../utils/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor (peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    })\n    this.wantlist = new Wantlist(stats, libp2p)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toString())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toString(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toString())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toString())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n","import * as lp from 'it-length-prefixed'\nimport { pipe } from 'it-pipe'\nimport { createTopology } from '@libp2p/topology'\nimport { BitswapMessage as Message } from './message/index.js'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { abortableSource } from 'abortable-iterator'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n * @typedef {import('@libp2p/interface-connection').Connection} Connection\n * @typedef {import('@libp2p/interface-connection').Stream} Stream\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n *\n * @typedef {object} Provider\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n *\n * @typedef {import('it-stream-types').Duplex<Uint8Array>} Duplex\n */\n\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0'\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0'\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0'\n\nconst DEFAULT_MAX_INBOUND_STREAMS = 32\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 128\nconst DEFAULT_INCOMING_STREAM_TIMEOUT = 30000\n\nexport class Network {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {import('./bitswap').Bitswap} bitswap\n   * @param {import('./stats').Stats} stats\n   * @param {object} [options]\n   * @param {boolean} [options.b100Only]\n   * @param {MultihashHasherLoader} [options.hashLoader]\n   * @param {number} [options.maxInboundStreams=32]\n   * @param {number} [options.maxOutboundStreams=32]\n   * @param {number} [options.incomingStreamTimeout=30000]\n   */\n  constructor (libp2p, bitswap, stats, options = {}) {\n    this._log = logger(libp2p.peerId, 'network')\n    this._libp2p = libp2p\n    this._bitswap = bitswap\n    this._protocols = [BITSWAP100]\n\n    if (!options.b100Only) {\n      // Latest bitswap first\n      this._protocols.unshift(BITSWAP110)\n      this._protocols.unshift(BITSWAP120)\n    }\n\n    this._stats = stats\n    this._running = false\n\n    // bind event listeners\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n    this._onPeerDisconnect = this._onPeerDisconnect.bind(this)\n    this._onConnection = this._onConnection.bind(this)\n    this._hashLoader = options.hashLoader\n    this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS\n    this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n    this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT\n  }\n\n  async start () {\n    this._running = true\n    await this._libp2p.handle(this._protocols, this._onConnection, {\n      maxInboundStreams: this._maxInboundStreams,\n      maxOutboundStreams: this._maxOutboundStreams\n    })\n\n    // register protocol with topology\n    const topology = createTopology({\n      onConnect: this._onPeerConnect,\n      onDisconnect: this._onPeerDisconnect\n    })\n\n    /** @type {string[]} */\n    this._registrarIds = []\n\n    for (const protocol of this._protocols) {\n      this._registrarIds.push(await this._libp2p.register(protocol, topology))\n    }\n\n    // All existing connections are like new ones for us\n    this._libp2p.getConnections().forEach(conn => {\n      this._onPeerConnect(conn.remotePeer)\n    })\n  }\n\n  async stop () {\n    this._running = false\n\n    // Unhandle both, libp2p doesn't care if it's not already handled\n    await this._libp2p.unhandle(this._protocols)\n\n    // unregister protocol and handlers\n    if (this._registrarIds != null) {\n      for (const id of this._registrarIds) {\n        this._libp2p.unregister(id)\n      }\n\n      this._registrarIds = []\n    }\n  }\n\n  /**\n   * Handles both types of incoming bitswap messages\n   *\n   * @private\n   * @param {object} connection\n   * @param {Stream} connection.stream - A duplex iterable stream\n   * @param {Connection} connection.connection - A libp2p Connection\n   */\n  _onConnection ({ stream, connection }) {\n    if (!this._running) {\n      return\n    }\n\n    const controller = new TimeoutController(this._incomingStreamTimeout)\n\n    Promise.resolve().then(async () => {\n      this._log('incoming new bitswap %s connection from %p', stream.stat.protocol, connection.remotePeer)\n\n      await pipe(\n        abortableSource(stream.source, controller.signal),\n        lp.decode(),\n        async (source) => {\n          for await (const data of source) {\n            try {\n              const message = await Message.deserialize(data.subarray(), this._hashLoader)\n              await this._bitswap._receiveMessage(connection.remotePeer, message)\n            } catch (/** @type {any} */ err) {\n              this._bitswap._receiveError(err)\n              break\n            }\n\n            // we have received some data so reset the timeout controller\n            controller.reset()\n          }\n        }\n      )\n    })\n      .catch(err => {\n        this._log(err)\n        stream.abort(err)\n      })\n      .finally(() => {\n        controller.clear()\n        stream.close()\n      })\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _onPeerConnect (peerId) {\n    this._bitswap._onPeerConnected(peerId)\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _onPeerDisconnect (peerId) {\n    this._bitswap._onPeerDisconnected(peerId)\n  }\n\n  /**\n   * Find providers given a `cid`.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {AsyncIterable<Provider>}\n   */\n  findProviders (cid, options = {}) {\n    return this._libp2p.contentRouting.findProviders(cid, options)\n  }\n\n  /**\n   * Find the providers of a given `cid` and connect to them.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async findAndConnect (cid, options) {\n    const connectAttempts = []\n    let found = 0\n\n    for await (const provider of this.findProviders(cid, options)) {\n      this._log(`connecting to provider ${provider.id}`)\n      connectAttempts.push(\n        this.connectTo(provider.id, options)\n          .catch(err => {\n            // Prevent unhandled promise rejection\n            this._log.error(err)\n          })\n      )\n\n      found++\n\n      if (found === CONSTANTS.maxProvidersPerRequest) {\n        break\n      }\n    }\n\n    await Promise.all(connectAttempts)\n  }\n\n  /**\n   * Tell the network we can provide content for the passed CID\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async provide (cid, options) {\n    await this._libp2p.contentRouting.provide(cid, options)\n  }\n\n  /**\n   * Connect to the given peer\n   * Send the given msg (instance of Message) to the given peer\n   *\n   * @param {PeerId} peer\n   * @param {Message} msg\n   */\n  async sendMessage (peer, msg) {\n    if (!this._running) throw new Error('network isn\\'t running')\n\n    const stringId = peer.toString()\n    this._log('sendMessage to %s', stringId, msg)\n\n    const connection = await this._libp2p.dial(peer)\n    const stream = await connection.newStream([BITSWAP120, BITSWAP110, BITSWAP100])\n\n    await writeMessage(stream, msg, this._log)\n\n    this._updateSentStats(peer, msg.blocks)\n  }\n\n  /**\n   * Connects to another peer\n   *\n   * @param {PeerId|Multiaddr} peer\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Connection>}\n   */\n  async connectTo (peer, options) { // eslint-disable-line require-await\n    if (!this._running) {\n      throw new Error('network isn\\'t running')\n    }\n\n    return this._libp2p.dial(peer, options)\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peer\n   * @param {Map<string, Uint8Array>} blocks\n   */\n  _updateSentStats (peer, blocks) {\n    const peerId = peer.toString()\n\n    if (this._stats) {\n      for (const block of blocks.values()) {\n        this._stats.push(peerId, 'dataSent', block.length)\n      }\n\n      this._stats.push(peerId, 'blocksSent', blocks.size)\n    }\n  }\n}\n\n/**\n *\n * @param {Stream} stream\n * @param {Message} msg\n * @param {*} log\n */\nasync function writeMessage (stream, msg, log) {\n  try {\n    /** @type {Uint8Array} */\n    let serialized\n    switch (stream.stat.protocol) {\n      case BITSWAP100:\n        serialized = msg.serializeToBitswap100()\n        break\n      case BITSWAP110:\n      case BITSWAP120:\n        serialized = msg.serializeToBitswap110()\n        break\n      default:\n        throw new Error('Unknown protocol: ' + stream.stat.protocol)\n    }\n\n    await pipe(\n      [serialized],\n      lp.encode(),\n      stream\n    )\n  } catch (err) {\n    log(err)\n  } finally {\n    stream.close()\n  }\n}\n","import { Wantlist } from '../wantlist/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Ledger {\n  /**\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (peerId) {\n    this.partner = peerId\n    this.wantlist = new Wantlist()\n\n    this.exchangeCount = 0\n    this.sentToPeer = new Map()\n\n    this.accounting = {\n      bytesSent: 0,\n      bytesRecv: 0\n    }\n  }\n\n  /**\n   * @param {number} n\n   */\n  sentBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesSent += n\n  }\n\n  /**\n   * @param {number} n\n   */\n  receivedBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesRecv += n\n  }\n\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @returns {void}\n   */\n  wants (cid, priority, wantType) {\n    this.wantlist.add(cid, priority, wantType)\n  }\n\n  /**\n   * @param {CID} cid\n   * @returns {void}\n   */\n\n  cancelWant (cid) {\n    this.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  wantlistContains (cid) {\n    return this.wantlist.get(cid)\n  }\n\n  /**\n   * @returns {number}\n   */\n  debtRatio () {\n    return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)) // +1 is to prevent division by zero\n  }\n}\n","/**\n * @template Key, Value\n * SortedMap is a Map whose iterator order can be defined by the user\n * @extends {Map<Key, Value>}\n */\nexport class SortedMap extends Map {\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   * @param {(a:[Key, Value], b:[Key, Value]) => number} [cmp] - compares [k1, v1] to [k2, v2]\n   */\n  constructor (entries, cmp) {\n    super()\n    this._cmp = cmp || this._defaultSort\n    /** @type {Key[]} */\n    this._keys = []\n    for (const [k, v] of entries || []) {\n      this.set(k, v)\n    }\n  }\n\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {number} i - the index of entry whose position should be updated.\n   */\n  update (i) {\n    if (i < 0 || i >= this._keys.length) {\n      return\n    }\n\n    const k = this._keys[i]\n    this._keys.splice(i, 1)\n    const newIdx = this._find(k)\n    this._keys.splice(newIdx, 0, k)\n  }\n\n  /**\n   * @param {Key} k\n   * @param {Value} v\n   */\n  set (k, v) {\n    // If the key is already in the map, remove it from the ordering and\n    // re-insert it below\n    if (this.has(k)) {\n      const i = this.indexOf(k)\n      this._keys.splice(i, 1)\n    }\n\n    // Update / insert the k/v into the map\n    super.set(k, v)\n\n    // Find the correct position of the newly inserted k/v in the order\n    const i = this._find(k)\n    this._keys.splice(i, 0, k)\n\n    return this\n  }\n\n  clear () {\n    super.clear()\n    this._keys = []\n  }\n\n  /**\n   * @param {Key} k\n   */\n  delete (k) {\n    if (!this.has(k)) {\n      return false\n    }\n\n    const i = this.indexOf(k)\n    this._keys.splice(i, 1)\n    return super.delete(k)\n  }\n\n  /**\n   * @param {Key} k\n   */\n  indexOf (k) {\n    if (!this.has(k)) {\n      return -1\n    }\n\n    const i = this._find(k)\n    if (this._keys[i] === k) {\n      return i\n    }\n\n    // There may be more than one key with the same ordering\n    // eg { k1: <priority 5>, k2: <priority 5> }\n    // so scan outwards until the key matches\n    for (let j = 1; j < this._keys.length; j++) {\n      if (this._keys[i + j] === k) return i + j\n      if (this._keys[i - j] === k) return i - j\n    }\n\n    return -1 // should never happen for existing key\n  }\n\n  /**\n   * @private\n   * @param {Key} k\n   * @returns {number}\n   */\n\n  _find (k) {\n    let lower = 0\n    let upper = this._keys.length\n    while (lower < upper) {\n      const pivot = (lower + upper) >>> 1 // lower + (upper - lower) / 2\n      const cmp = this._kCmp(this._keys[pivot], k)\n      // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n      if (cmp < 0) { // pivot < k\n        lower = pivot + 1\n      } else if (cmp > 0) { // pivot > k\n        upper = pivot\n      } else { // pivot == k\n        return pivot\n      }\n    }\n    return lower\n  }\n\n  * keys () {\n    for (const k of this._keys) {\n      yield k\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<Value>}\n   */\n  * values () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield this.get(k)\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<[Key, Value]>}\n   */\n  * entries () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield [k, this.get(k)]\n    }\n\n    return undefined\n  }\n\n  * [Symbol.iterator] () {\n    yield * this.entries()\n  }\n\n  /**\n   * @template This\n   * @param {(entry:[Key, Value]) => void} cb\n   * @param {This} [thisArg]\n   */\n  // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n  forEach (cb, thisArg) {\n    if (!cb) {\n      return\n    }\n\n    for (const k of this._keys) {\n      cb.apply(thisArg, [[k, /** @type {Value} */(this.get(k))]])\n    }\n  }\n\n  /**\n   * @private\n   * @param {[Key, Value]} a\n   * @param {[Key, Value]} b\n   * @returns {0|1|-1}\n   */\n  _defaultSort (a, b) {\n    if (a[0] < b[0]) return -1\n    if (b[0] < a[0]) return 1\n    return 0\n  }\n\n  /**\n   * @private\n   * @param {Key} a\n   * @param {Key} b\n   */\n  _kCmp (a, b) {\n    return this._cmp(\n      // @ts-ignore - get may return undefined\n      [a, this.get(a)],\n      // @ts-ignore - get may return undefined\n      [b, this.get(b)]\n    )\n  }\n}\n","import { SortedMap } from '../utils/sorted-map.js'\n\n/**\n * @typedef {object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\nconst DefaultTaskMerger = {\n  hasNewInfo () {\n    return false\n  },\n\n  merge () {}\n}\n\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nexport class RequestQueue {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  constructor (taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger\n    /** @type {SortedMap<string, PeerTasks>} */\n    this._byPeer = new SortedMap([], PeerTasks.compare)\n  }\n\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toString())\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger)\n    }\n\n    peerTasks.pushTasks(tasks)\n    this._byPeer.set(peerId.toString(), peerTasks)\n  }\n\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   *\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n    const peerTasks = this._head()\n    if (peerTasks === undefined) {\n      return { tasks: [], pendingSize: 0 }\n    }\n\n    const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes)\n    if (tasks.length === 0) {\n      return { tasks, pendingSize }\n    }\n\n    const peerId = peerTasks.peerId\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toString())\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0)\n    }\n\n    return {\n      peerId, tasks, pendingSize\n    }\n  }\n\n  /**\n   * @private\n   * @returns {PeerTasks|undefined}\n   */\n  _head () {\n    // Shortcut\n    if (this._byPeer.size === 0) {\n      return undefined\n    }\n\n    // eslint-disable-next-line no-unreachable-loop\n    for (const [, v] of this._byPeer) {\n      return v\n    }\n\n    return undefined\n  }\n\n  /**\n   * Remove the task with the given topic for the given peer.\n   *\n   * @param {string} topic\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  remove (topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toString())\n    peerTasks && peerTasks.remove(topic)\n  }\n\n  /**\n   * Called when the tasks for the given peer complete.\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  tasksDone (peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toString())\n    if (!peerTasks) {\n      return\n    }\n\n    const i = this._byPeer.indexOf(peerId.toString())\n    for (const task of tasks) {\n      peerTasks.taskDone(task)\n    }\n\n    // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n    this._byPeer.update(i)\n  }\n}\n\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor (peerId, taskMerger) {\n    this.peerId = peerId\n    this._taskMerger = taskMerger\n    this._activeTotalSize = 0\n    this._pending = new PendingTasks()\n    this._active = new Set()\n  }\n\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (tasks) {\n    for (const t of tasks) {\n      this._pushTask(t)\n    }\n  }\n\n  /**\n   * @private\n   * @param {Task} task\n   * @returns {void}\n   */\n\n  _pushTask (task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return\n    }\n\n    // If there is already a non-active (pending) task with this topic\n    const existingTask = this._pending.get(task.topic)\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority)\n      }\n\n      // Merge the information from the new task into the existing task\n      this._taskMerger.merge(task, existingTask)\n\n      // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n      return\n    }\n\n    // Push the new task onto the queue\n    this._pending.add(task)\n  }\n\n  /**\n   * Indicates whether the new task adds any more information over tasks that are\n   * already in the active task queue\n   *\n   * @private\n   * @param {Task} task\n   * @returns {boolean}\n   */\n  _taskHasMoreInfoThanActiveTasks (task) {\n    const tasksWithTopic = []\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask)\n      }\n    }\n\n    // No tasks with that topic, so the new task adds information\n    if (tasksWithTopic.length === 0) {\n      return true\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic)\n  }\n\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   *\n   * @param {number} targetMinBytes\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    let size = 0\n    const tasks = []\n\n    // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n    const pendingTasks = this._pending.tasks()\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i]\n      tasks.push(task)\n      size += task.size\n\n      // Move tasks from pending to active\n      this._pending.delete(task.topic)\n      this._activeTotalSize += task.size\n      this._active.add(task)\n    }\n\n    return {\n      tasks, pendingSize: this._pending.totalSize\n    }\n  }\n\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   *\n   * @param {Task} task\n   * @returns {void}\n   */\n  taskDone (task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size\n      this._active.delete(task)\n    }\n  }\n\n  /**\n   * Remove pending tasks with the given topic\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n  remove (topic) {\n    this._pending.delete(topic)\n  }\n\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   *\n   * @returns {boolean}\n   */\n  isIdle () {\n    return this._pending.length === 0 && this._active.size === 0\n  }\n\n  /**\n   * Compare PeerTasks\n   *\n   * @template Key\n   * @param {[Key, PeerTasks]} a\n   * @param {[Key, PeerTasks]} b\n   * @returns {number}\n   */\n  static compare (a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1\n    }\n    if (b[1]._pending.length === 0) {\n      return -1\n    }\n\n    // If the amount of active work is the same\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length\n    }\n\n    // Choose the peer with the least amount of active work (\"keep peers busy\")\n    return a[1]._activeTotalSize - b[1]._activeTotalSize\n  }\n}\n\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n  constructor () {\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare)\n  }\n\n  get length () {\n    return this._tasks.size\n  }\n\n  /**\n   * Sum of the size of all pending tasks\n   *\n   * @type {number}\n   **/\n  get totalSize () {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0)\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {Task|void}\n   */\n  get (topic) {\n    return (this._tasks.get(topic) || {}).task\n  }\n\n  /**\n   * @param {Task} task\n   */\n  add (task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    })\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {void}\n   */\n  delete (topic) {\n    this._tasks.delete(topic)\n  }\n\n  // All pending tasks, in priority order\n  tasks () {\n    return [...this._tasks.values()].map(i => i.task)\n  }\n\n  /**\n   * Update the priority of the task with the given topic, and update the order\n   *\n   * @param {string} topic\n   * @param {number} priority\n   * @returns {void}\n   **/\n  updatePriority (topic, priority) {\n    const obj = this._tasks.get(topic)\n    if (!obj) {\n      return\n    }\n\n    const i = this._tasks.indexOf(topic)\n    obj.task.priority = priority\n    this._tasks.update(i)\n  }\n\n  /**\n   * Sort by priority desc then FIFO\n   *\n   * @param {[string, PendingTask]} a\n   * @param {[string, PendingTask]} b\n   * @returns {number}\n   * @private\n   */\n  _compare (a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created\n    }\n    // Priority high -> low\n    return b[1].task.priority - a[1].task.priority\n  }\n}\n","/**\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMergerAPI\n */\n\n/** @type {TaskMergerAPI} */\nexport const TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic.\n   *\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo (task, tasksWithTopic) {\n    let haveBlock = false\n    let isWantBlock = false\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true\n      }\n    }\n\n    // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true\n    }\n\n    // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n    if (!haveBlock && task.data.haveBlock) {\n      return true\n    }\n\n    return false\n  },\n\n  /**\n   * Merge the information from the given task into the existing task (with the\n   * same topic)\n   *\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge (newTask, existingTask) {\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    const taskData = newTask.data\n    const existingData = existingTask.data\n\n    // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock\n      existingData.blockSize = taskData.blockSize\n    }\n\n    // If replacing a want-have with a want-block\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true\n      // If the want-have was a DONT_HAVE, or the want-block has a size\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock\n        existingTask.size = newTask.size\n      }\n    }\n\n    // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize\n    }\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport { Ledger } from './ledger.js'\nimport { RequestQueue } from './req-queue.js'\nimport { TaskMerger } from './task-merger.js'\nimport { logger } from '../utils/index.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\n\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor (peerId, blockstore, network, stats, libp2p, opts = {}) {\n    this._log = logger(peerId, 'engine')\n    this.blockstore = blockstore\n    this.network = network\n    this._stats = stats\n    this._opts = this._processOpts(opts)\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    })\n    this._running = false\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger)\n  }\n\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts (opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    }\n  }\n\n  _scheduleProcessTasks () {\n    setTimeout(() => {\n      this._processTasks()\n    })\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks () {\n    if (!this._running) {\n      return\n    }\n\n    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)\n\n    if (tasks.length === 0) {\n      return\n    }\n\n    // Create a new message\n    const msg = new Message(false)\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize)\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = []\n    const blockTasks = new Map()\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic)\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid)\n          blockTasks.set(task.topic, task.data)\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid)\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid)\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids)\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic)\n      const blk = blocks.get(topic)\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk)\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid)\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks()\n\n      return\n    }\n\n    try {\n      // Send the message\n      peerId && await this.network.sendMessage(peerId, msg)\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block)\n      }\n    } catch (err) {\n      this._log.error(err)\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n  wantlistForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    return ledger ? ledger.wantlist.sortedEntries() : new Map()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n\n    const ledger = this.ledgerMap.get(peerIdStr)\n\n    if (!ledger) {\n      return null\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers () {\n    return Array.from(this.ledgerMap.values()).map((l) => l.partner)\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks (blocks) {\n    if (!blocks.length) {\n      return\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid)\n\n        if (!want) {\n          continue\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }])\n      }\n    }\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived (peerId, msg) {\n    const ledger = this._findOrCreate(peerId)\n\n    if (msg.empty) {\n      return\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist()\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger)\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks()\n      return\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = []\n    /** @type {BitswapMessageEntry[]} */\n    const wants = []\n    msg.wantlist.forEach((entry) => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid)\n        cancels.push(entry.cid)\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType)\n        wants.push(entry)\n      }\n    })\n\n    this._cancelWants(peerId, cancels)\n    await this._addWants(peerId, wants)\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants (peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants (peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))\n\n    const tasks = []\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc)\n      const blockSize = blockSizes.get(id)\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          })\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        })\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks)\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock (wantType, blockSize) {\n    return wantType === WantType.Block ||\n      blockSize <= this._opts.maxSizeReplaceHasWithBlock\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes (cids) {\n    const blocks = await this._getBlocks(cids)\n    return new Map([...blocks].map(([k, v]) => [k, v.length]))\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks (cids) {\n    const res = new Map()\n    await Promise.all(cids.map(async (cid) => {\n      try {\n        const block = await this.blockstore.get(cid)\n        res.set(cid.toString(base58btc), block)\n      } catch (/** @type {any} */ e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e)\n        }\n      }\n    }))\n    return res\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting (blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length)\n      ledger.receivedBytes(block.length)\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent (peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId)\n    ledger.sentBytes(block.length)\n    ledger.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv\n  }\n\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n  peerDisconnected (peerId) {\n    this.ledgerMap.delete(peerId.toString())\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    if (ledger) {\n      return ledger\n    }\n\n    const l = new Ledger(peerId)\n\n    this.ledgerMap.set(peerIdStr, l)\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1)\n    }\n\n    return l\n  }\n\n  start () {\n    this._running = true\n  }\n\n  stop () {\n    this._running = false\n  }\n}\n","import { EventEmitter } from 'events'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n","import { EventEmitter } from 'events'\nimport MovingAverage from '@vascosantos/moving-average'\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nexport class Stat extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    /** @type {Op[]} */\n    this._queue = []\n    /** @type {Record<string, bigint>} */\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    /** @type {Record<string, number>} */\n    this._frequencyAccumulators = {}\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = BigInt(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  /**\n   * @private\n   */\n  _update () {\n    this._timeout = null\n\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        op && this._applyOp(op)\n      }\n\n      last && this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach((key) => {\n        this._updateFrequencyFor(key, timeDiff, latestTime)\n      })\n    }\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  /**\n   * @private\n   * @param {Op} op\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`)\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0)\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n","import { EventEmitter } from 'events'\nimport { Stat } from './stat.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @typedef {[number, number, number]} AverageIntervals\n */\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals: /** @type {AverageIntervals} */ ([\n    60 * 1000, // 1 minute\n    5 * 60 * 1000, // 5 minutes\n    15 * 60 * 1000 // 15 minutes\n  ])\n}\n\nexport class Stats extends EventEmitter {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {string[]} [initialCounters]\n   * @param {object} _options\n   * @param {boolean} _options.enabled\n   * @param {number} _options.computeThrottleTimeout\n   * @param {number} _options.computeThrottleMaxQueueSize\n   */\n  constructor (libp2p, initialCounters = [], _options = defaultOptions) {\n    super()\n\n    const options = Object.assign({}, defaultOptions, _options)\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout')\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize')\n    }\n\n    this._initialCounters = initialCounters\n    this._options = options\n    this._enabled = this._options.enabled\n\n    this._global = new Stat(initialCounters, options)\n    this._global.on('update', (stats) => this.emit('update', stats))\n\n    /** @type {Map<string, Stat>} */\n    this._peers = trackedMap({\n      name: 'ipfs_bitswap_stats_peers',\n      metrics: libp2p.metrics\n    })\n  }\n\n  enable () {\n    this._enabled = true\n    this._options.enabled = true\n    this._global.enable()\n  }\n\n  disable () {\n    this._enabled = false\n    this._options.enabled = false\n    this._global.disable()\n  }\n\n  stop () {\n    this._enabled = false\n    this._global.stop()\n    for (const peerStat of this._peers) {\n      peerStat[1].stop()\n    }\n  }\n\n  get snapshot () {\n    return this._global.snapshot\n  }\n\n  get movingAverages () {\n    return this._global.movingAverages\n  }\n\n  /**\n   * @param {PeerId|string} peerId\n   * @returns {Stat|undefined}\n   */\n  forPeer (peerId) {\n    const peerIdStr = (typeof peerId !== 'string' && peerId.toString)\n      ? peerId.toString()\n      : `${peerId}`\n\n    return this._peers.get(peerIdStr)\n  }\n\n  /**\n   *\n   * @param {string|null} peer\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc)\n\n      if (peer) {\n        let peerStats = this._peers.get(peer)\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options)\n          this._peers.set(peer, peerStats)\n        }\n\n        peerStats.push(counter, inc)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peer\n   */\n  disconnected (peer) {\n    const peerId = peer.toString()\n    const peerStats = this._peers.get(peerId)\n    if (peerStats) {\n      peerStats.stop()\n      this._peers.delete(peerId)\n    }\n  }\n}\n","import drain from 'it-drain'\nimport filter from 'it-filter'\nimport take from 'it-take'\nimport all from 'it-all'\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\nexport class BaseBlockstore {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {CID[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {Pair} */ e) =>\n        e.key.toString().startsWith(q.prefix || '')\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= (q.offset || 0))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {CID} */ cid) => cid.toString().startsWith(q.prefix || ''))\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n","import { WantManager } from './want-manager/index.js'\nimport { Network } from './network.js'\nimport { DecisionEngine } from './decision-engine/index.js'\nimport { Notifications } from './notifications.js'\nimport { logger } from './utils/index.js'\nimport { Stats } from './stats/index.js'\nimport { anySignal } from 'any-signal'\nimport { BaseBlockstore } from 'blockstore-core/base'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n * @typedef {import('./message').BitswapMessage} BitswapMessage\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n */\n\nconst defaultOptions = {\n  statsEnabled: false,\n  statsComputeThrottleTimeout: 1000,\n  statsComputeThrottleMaxQueueSize: 1000\n}\nconst statsKeys = [\n  'blocksReceived',\n  'dataReceived',\n  'dupBlksReceived',\n  'dupDataReceived',\n  'blocksSent',\n  'dataSent',\n  'providesBufferLength',\n  'wantListLength',\n  'peerCount'\n]\n\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n *\n * @implements {IPFSBitswap}\n */\nexport class Bitswap extends BaseBlockstore {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {Blockstore} blockstore\n   * @param {object} [options]\n   * @param {boolean} [options.statsEnabled=false]\n   * @param {number} [options.statsComputeThrottleTimeout=1000]\n   * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n   * @param {number} [options.maxInboundStreams=32]\n   * @param {number} [options.maxOutboundStreams=32]\n   * @param {number} [options.incomingStreamTimeout=30000]\n   * @param {MultihashHasherLoader} [options.hashLoader]\n   */\n  constructor (libp2p, blockstore, options = {}) {\n    super()\n\n    this._libp2p = libp2p\n    this._log = logger(this.peerId)\n\n    this._options = Object.assign({}, defaultOptions, options)\n\n    // stats\n    this._stats = new Stats(libp2p, statsKeys, {\n      enabled: this._options.statsEnabled,\n      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,\n      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize\n    })\n\n    // the network delivers messages\n    this.network = new Network(libp2p, this, this._stats, {\n      hashLoader: options.hashLoader,\n      maxInboundStreams: options.maxInboundStreams,\n      maxOutboundStreams: options.maxOutboundStreams,\n      incomingStreamTimeout: options.incomingStreamTimeout\n    })\n\n    // local database\n    this.blockstore = blockstore\n\n    this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this._stats, libp2p)\n\n    // handle message sending\n    this.wm = new WantManager(this.peerId, this.network, this._stats, libp2p)\n\n    this.notifications = new Notifications(this.peerId)\n\n    this.started = false\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  /**\n   * @type {PeerId}\n   */\n  get peerId () {\n    return this._libp2p.peerId\n  }\n\n  /**\n   * handle messages received through the network\n   *\n   * @param {PeerId} peerId\n   * @param {BitswapMessage} incoming\n   */\n  async _receiveMessage (peerId, incoming) {\n    try {\n      // Note: this allows the engine to respond to any wants in the message.\n      // Processing of the blocks in the message happens below, after the\n      // blocks have been added to the blockstore.\n      await this.engine.messageReceived(peerId, incoming)\n    } catch (err) {\n      // Log instead of throwing an error so as to process as much as\n      // possible of the message. Currently `messageReceived` does not\n      // throw any errors, but this could change in the future.\n      this._log('failed to receive message', incoming)\n    }\n\n    if (incoming.blocks.size === 0) {\n      return\n    }\n\n    /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */\n    const received = []\n\n    for (const [cidStr, data] of incoming.blocks.entries()) {\n      const cid = CID.parse(cidStr)\n\n      received.push({\n        wasWanted: this.wm.wantlist.contains(cid),\n        cid,\n        data\n      })\n    }\n\n    // quickly send out cancels, reduces chances of duplicate block receives\n    this.wm.cancelWants(\n      received\n        .filter(({ wasWanted }) => wasWanted)\n        .map(({ cid }) => cid)\n    )\n\n    await Promise.all(\n      received.map(\n        ({ cid, wasWanted, data }) => this._handleReceivedBlock(peerId, cid, data, wasWanted)\n      )\n    )\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   * @param {boolean} wasWanted\n   */\n  async _handleReceivedBlock (peerId, cid, data, wasWanted) {\n    this._log('received block')\n\n    const has = await this.blockstore.has(cid)\n\n    this._updateReceiveCounters(peerId.toString(), cid, data, has)\n\n    if (!wasWanted) {\n      return\n    }\n\n    await this.put(cid, data)\n  }\n\n  /**\n   * @private\n   * @param {string} peerIdStr\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   * @param {boolean} exists\n   */\n  _updateReceiveCounters (peerIdStr, cid, data, exists) {\n    this._stats.push(peerIdStr, 'blocksReceived', 1)\n    this._stats.push(peerIdStr, 'dataReceived', data.length)\n\n    if (exists) {\n      this._stats.push(peerIdStr, 'dupBlksReceived', 1)\n      this._stats.push(peerIdStr, 'dupDataReceived', data.length)\n    }\n  }\n\n  /**\n   * handle errors on the receiving channel\n   *\n   * @param {Error} err\n   */\n  _receiveError (err) {\n    this._log.error('ReceiveError: %s', err.message)\n  }\n\n  /**\n   * handle new peers\n   *\n   * @param {PeerId} peerId\n   */\n  _onPeerConnected (peerId) {\n    this.wm.connected(peerId)\n  }\n\n  /**\n   * handle peers being disconnected\n   *\n   * @param {PeerId} peerId\n   */\n  _onPeerDisconnected (peerId) {\n    this.wm.disconnected(peerId)\n    this.engine.peerDisconnected(peerId)\n    this._stats.disconnected(peerId)\n  }\n\n  enableStats () {\n    this._stats.enable()\n  }\n\n  disableStats () {\n    this._stats.disable()\n  }\n\n  /**\n   * Return the current wantlist for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   * @param {any} [_options]\n   */\n  wantlistForPeer (peerId, _options) {\n    return this.engine.wantlistForPeer(peerId)\n  }\n\n  /**\n   * Return ledger information for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    return this.engine.ledgerForPeer(peerId)\n  }\n\n  /**\n   * Fetch a given block by cid. If the block is in the local\n   * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async get (cid, options = {}) {\n    /**\n     * @param {CID} cid\n     * @param {object} options\n     * @param {AbortSignal} options.signal\n     */\n    const fetchFromNetwork = (cid, options) => {\n      // add it to the want list - n.b. later we will abort the AbortSignal\n      // so no need to remove the blocks from the wantlist after we have it\n      this.wm.wantBlocks([cid], options)\n\n      return this.notifications.wantBlock(cid, options)\n    }\n\n    let promptedNetwork = false\n\n    /**\n     *\n     * @param {CID} cid\n     * @param {object} options\n     * @param {AbortSignal} options.signal\n     */\n    const loadOrFetchFromNetwork = async (cid, options) => {\n      try {\n        // have to await here as we want to handle ERR_NOT_FOUND\n        const block = await this.blockstore.get(cid, options)\n\n        return block\n      } catch (/** @type {any} */ err) {\n        if (err.code !== 'ERR_NOT_FOUND') {\n          throw err\n        }\n\n        if (!promptedNetwork) {\n          promptedNetwork = true\n\n          this.network.findAndConnect(cid, options)\n            .catch((err) => this._log.error(err))\n        }\n\n        // we don't have the block locally so fetch it from the network\n        return fetchFromNetwork(cid, options)\n      }\n    }\n\n    // depending on implementation it's possible for blocks to come in while\n    // we do the async operations to get them from the blockstore leading to\n    // a race condition, so register for incoming block notifications as well\n    // as trying to get it from the datastore\n    const controller = new AbortController()\n    const signal = options.signal\n      ? anySignal([options.signal, controller.signal])\n      : controller.signal\n\n    try {\n      const block = await Promise.race([\n        this.notifications.wantBlock(cid, {\n          signal\n        }),\n        loadOrFetchFromNetwork(cid, {\n          signal\n        })\n      ])\n\n      return block\n    } finally {\n      // since we have the block we can now remove our listener\n      controller.abort()\n    }\n  }\n\n  /**\n   * Fetch a a list of blocks by cid. If the blocks are in the local\n   * blockstore they are returned, otherwise the blocks are added to the wantlist and returned once another node sends them to us.\n   *\n   * @param {AsyncIterable<CID>|Iterable<CID>} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async * getMany (cids, options = {}) {\n    for await (const cid of cids) {\n      yield this.get(cid, options)\n    }\n  }\n\n  /**\n   * Removes the given CIDs from the wantlist independent of any ref counts.\n   *\n   * This will cause all outstanding promises for a given block to reject.\n   *\n   * If you want to cancel the want for a block without doing that, pass an\n   * AbortSignal in to `.get` or `.getMany` and abort it.\n   *\n   * @param {CID[]|CID} cids\n   */\n  unwant (cids) {\n    const cidsArray = Array.isArray(cids) ? cids : [cids]\n\n    this.wm.unwantBlocks(cidsArray)\n    cidsArray.forEach((cid) => this.notifications.unwantBlock(cid))\n  }\n\n  /**\n   * Removes the given keys from the want list. This may cause pending promises\n   * for blocks to never resolve.  If you wish these promises to abort instead\n   * call `unwant(cids)` instead.\n   *\n   * @param {CID[]|CID} cids\n   */\n  cancelWants (cids) {\n    this.wm.cancelWants(Array.isArray(cids) ? cids : [cids])\n  }\n\n  /**\n   * Put the given block to the underlying blockstore and\n   * send it to nodes that have it in their wantlist.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {any} [_options]\n   */\n  async put (cid, block, _options) {\n    await this.blockstore.put(cid, block)\n    this._sendHaveBlockNotifications(cid, block)\n  }\n\n  /**\n   * Put the given blocks to the underlying blockstore and\n   * send it to nodes that have it them their wantlist.\n   *\n   * @param {Iterable<Pair> | AsyncIterable<Pair>} source\n   * @param {Options} [options]\n   */\n  async * putMany (source, options) {\n    for await (const { key, value } of this.blockstore.putMany(source, options)) {\n      this._sendHaveBlockNotifications(key, value)\n\n      yield { key, value }\n    }\n  }\n\n  /**\n   * Sends notifications about the arrival of a block\n   *\n   * @private\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   */\n  _sendHaveBlockNotifications (cid, data) {\n    this.notifications.hasBlock(cid, data)\n    this.engine.receivedBlocks([{ cid, data }])\n    // Note: Don't wait for provide to finish before returning\n    this.network.provide(cid).catch((err) => {\n      this._log.error('Failed to provide: %s', err.message)\n    })\n  }\n\n  /**\n   * Get the current list of wants\n   */\n  getWantlist () {\n    return this.wm.wantlist.entries()\n  }\n\n  /**\n   * Get the current list of partners\n   */\n  peers () {\n    return this.engine.peers()\n  }\n\n  /**\n   * Get stats about the bitswap node\n   */\n  stat () {\n    return this._stats\n  }\n\n  /**\n   * Start the bitswap node\n   */\n  async start () {\n    this.wm.start()\n    await this.network.start()\n    this.engine.start()\n    this.started = true\n  }\n\n  /**\n   * Stop the bitswap node\n   */\n  async stop () {\n    this._stats.stop()\n    this.wm.stop()\n    await this.network.stop()\n    this.engine.stop()\n    this.started = false\n  }\n\n  unwrap () {\n    return this.blockstore\n  }\n\n  /**\n   * @param {CID} cid\n   * @returns {Promise<boolean>}\n   */\n  has (cid) {\n    return this.blockstore.has(cid)\n  }\n}\n","import errCode from 'err-code'\n\n/**\n * @param {Error} [err]\n */\nexport function notFoundError (err) {\n  err = err || new Error('Not Found')\n  return errCode(err, 'ERR_NOT_FOUND')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function abortedError (err) {\n  err = err || new Error('Aborted')\n  return errCode(err, 'ERR_ABORTED')\n}\n","import { BaseBlockstore } from 'blockstore-core'\nimport merge from 'it-merge'\nimport { pushable } from 'it-pushable'\nimport filter from 'it-filter'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport class BlockStorage extends BaseBlockstore {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable({ objectMode: true })\n    const getFromChild = pushable({ objectMode: true })\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n","import { createBitswap } from 'ipfs-bitswap'\nimport { createLibp2p } from './libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { BlockStorage } from '../block-storage.js'\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, hashers, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    await libp2p.start()\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await network.bitswap.stop()\n    await network.libp2p.stop()\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n","import { Bitswap } from './bitswap.js'\n\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('./message')} BitswapMessage\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n */\n\n/**\n * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n * @param {Blockstore} blockstore\n * @param {object} [options]\n * @param {boolean} [options.statsEnabled=false]\n * @param {number} [options.statsComputeThrottleTimeout=1000]\n * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n * @param {number} [options.maxInboundStreams=32]\n * @param {number} [options.maxOutboundStreams=128]\n * @param {number} [options.incomingStreamTimeout=30000]\n * @param {MultihashHasherLoader} [options.hashLoader]\n * @returns {IPFSBitswap}\n */\nexport const createBitswap = (libp2p, blockstore, options = {}) => {\n  return new Bitswap(libp2p, blockstore, options)\n}\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\nexport class SwarmAPI {\n  /**\n   * @param {object} config\n   * @param {import('../../types').NetworkService} config.network\n   */\n  constructor ({ network }) {\n    this.addrs = createAddrs({ network })\n    this.connect = createConnect({ network })\n    this.disconnect = createDisconnect({ network })\n    this.localAddrs = createLocalAddrs({ network })\n    this.peers = createPeers({ network })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').AddrsResult} AddrsResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"addrs\"]}\n   */\n  async function addrs (options = {}) { // eslint-disable-line require-await\n    /** @type {AddrsResult[]} */\n    const peers = []\n    const { libp2p } = await network.use(options)\n\n    await libp2p.peerStore.forEach(peer => {\n      peers.push({\n        id: peer.id,\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    })\n\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  async function connect (multiaddrOrPeerId, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(multiaddrOrPeerId, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createDisconnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.hangUp(addr)\n  }\n\n  return withTimeoutOption(disconnect)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createLocalAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.getMultiaddrs()\n  }\n\n  return withTimeoutOption(localAddrs)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (options.verbose) {\n      const peers = []\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n\n      return peers\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map()\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      }\n\n      peers.set(connection.remotePeer.toString(), peer)\n    }\n\n    return Array.from(peers.values())\n  }\n\n  return withTimeoutOption(peers)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = { success: true, time: 0, text: '' }\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createPing ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const { libp2p } = await network.use()\n    options.count = options.count || 10\n\n    const storedPeer = await libp2p.peerStore.get(peerId)\n    let id = storedPeer && storedPeer.id\n\n    if (!id) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      const remotePeer = await libp2p.peerRouting.findPeer(peerId)\n\n      id = remotePeer && remotePeer.id\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found')\n    }\n\n    yield { ...basePacket, text: `PING ${id.toString()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (/** @type {any} */ err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  }\n\n  return withTimeoutOption(ping)\n}\n","import errCode from 'err-code'\nimport { NotEnabledError } from '../errors.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base36 } from 'multiformats/bases/base36'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-dht').QueryEvent} QueryEvent\n * @typedef {import('./network').Network} Network\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst IPNS_PREFIX = '/ipns/'\n\n/**\n * @param {string} str\n */\nfunction toDHTKey (str) {\n  if (str.startsWith(IPNS_PREFIX)) {\n    str = str.substring(IPNS_PREFIX.length)\n  }\n\n  /** @type {Uint8Array|undefined} */\n  let buf\n\n  if (str[0] === '1' || str[0] === 'Q') {\n    // ed25519 key or hash of rsa key\n    str = `z${str}`\n  }\n\n  if (str[0] === 'z') {\n    buf = base58btc.decode(str)\n  }\n\n  if (str[0] === 'k') {\n    // base36 encoded string\n    buf = base36.decode(str)\n  }\n\n  if (!buf) {\n    throw new Error('Could not parse string')\n  }\n\n  if (buf[0] !== 0x01 && buf[1] !== 0x72) {\n    // prefix key with CIDv1 and libp2p-key codec\n    buf = uint8ArrayConcat([\n      [0x01, 0x72],\n      buf\n    ])\n  }\n\n  if (buf.length !== 40) {\n    throw new Error('Incorrect length ' + buf.length)\n  }\n\n  return uint8ArrayConcat([\n    uint8ArrayFromString(IPNS_PREFIX),\n    buf.subarray(2)\n  ])\n}\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {PeerId} config.peerId\n */\nexport function createDht ({ network, repo, peerId }) {\n  const { get, put, findProvs, findPeer, provide, query } = {\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"get\"]}\n     */\n    async * get (key, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.get(dhtKey, options)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"put\"]}\n     */\n    async * put (key, value, options) {\n      const { libp2p } = await use(network, peerId, options)\n\n      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.put(dhtKey, value, options)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"findProvs\"]}\n     */\n    async * findProvs (cid, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.findProviders(cid, {\n        signal: options.signal\n      })\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"findPeer\"]}\n     */\n    async * findPeer (peerIdToFind, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.findPeer(peerIdToFind, {\n        signal: options.signal\n      })\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"provide\"]}\n     */\n    async * provide (cid, options = { recursive: false }) {\n      const { libp2p } = await use(network, peerId, options)\n\n      // ensure blocks are actually local\n      const hasBlock = await repo.blocks.has(cid)\n\n      if (!hasBlock) {\n        throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND')\n      }\n\n      if (options.recursive) {\n        // TODO: Implement recursive providing\n        throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET')\n      }\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.provide(cid)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"query\"]}\n     */\n    async * query (peerIdToQuery, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n      let bytes\n      const asCid = CID.asCID(peerIdToQuery)\n\n      if (asCid != null) {\n        bytes = asCid.multihash.bytes\n      } else {\n        bytes = peerIdFromString(peerIdToQuery.toString()).toBytes()\n      }\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.getClosestPeers(bytes, options)\n    }\n  }\n\n  return {\n    get: withTimeoutOption(get),\n    put: withTimeoutOption(put),\n    findProvs: withTimeoutOption(findProvs),\n    findPeer: withTimeoutOption(findPeer),\n    provide: withTimeoutOption(provide),\n    query: withTimeoutOption(query)\n  }\n}\n\n/**\n * @param {import('../types').NetworkService} network\n * @param {PeerId} peerId\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n * @returns {Promise<Network>}\n */\nconst use = async (network, peerId, options) => {\n  const net = await network.use(options)\n  if (net.libp2p.dht != null) {\n    return net\n  } else {\n    const fn = async function * () {\n      yield {\n        from: peerId,\n        name: 'QUERY_ERROR',\n        type: 3,\n        error: new NotEnabledError('dht not enabled')\n      }\n    }\n\n    return {\n      libp2p: {\n        dht: {\n          // @ts-expect-error incomplete implementation\n          get: fn,\n          // @ts-expect-error incomplete implementation\n          put: fn,\n          // @ts-expect-error incomplete implementation\n          findProviders: fn,\n          // @ts-expect-error incomplete implementation\n          findPeer: fn,\n          // @ts-expect-error incomplete implementation\n          provide: fn,\n          // @ts-expect-error incomplete implementation\n          getClosestPeers: fn\n        }\n      }\n    }\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { NotEnabledError } from '../errors.js'\nimport get from 'dlv'\n\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<CustomEvent<Message>>} EventHandler\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageEventHandler\n */\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\nexport function createPubsub ({ network, config }) {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true)\n\n  /** @type {Record<string, MessageEventHandler[]>} */\n  const handlers = {}\n  /** @type {EventHandler | undefined} */\n  let onMessage\n\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"subscribe\"]}\n   */\n  async function subscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    libp2p.pubsub.subscribe(topic)\n\n    // listen for 'message' events if we aren't already\n    if (onMessage == null) {\n      onMessage = (evt) => {\n        const msg = evt.detail\n\n        if (handlers[msg.topic]) {\n          handlers[msg.topic].forEach(handler => {\n            if (typeof handler === 'function') {\n              handler(msg)\n              return\n            }\n\n            if (handler != null && handler.handleEvent != null) {\n              handler.handleEvent(msg)\n            }\n          })\n        }\n      }\n\n      libp2p.pubsub.addEventListener('message', onMessage)\n    }\n\n    // store handler for future invocation\n    if (handler != null) {\n      if (handlers[topic] == null) {\n        handlers[topic] = []\n      }\n\n      handlers[topic].push(handler)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    // remove handler from local map\n    if (handler != null && handlers[topic] != null) {\n      handlers[topic] = handlers[topic].filter(h => h !== handler)\n\n      if (handlers[topic].length === 0) {\n        delete handlers[topic]\n      }\n    }\n\n    // remove all handlers\n    if (typeof handler !== 'function') {\n      delete handlers[topic]\n    }\n\n    // no more handlers for this topic, unsubscribe\n    if (handlers[topic] == null) {\n      libp2p.pubsub.unsubscribe(topic)\n    }\n\n    // no more pubsub handlers, remove message listener\n    if (Object.keys(handlers).length === 0) {\n      libp2p.pubsub.removeEventListener('message', onMessage)\n      onMessage = undefined\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const { libp2p } = await network.use(options)\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n    }\n\n    await libp2p.pubsub.publish(topic, data)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    return libp2p.pubsub.getTopics()\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    return libp2p.pubsub.getSubscribers(topic)\n  }\n}\n\nconst notEnabled = async () => { // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled')\n}\n","import mergeOpts from 'merge-options'\nimport { isTest } from 'ipfs-utils/src/env.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { initAssets } from 'ipfs-core-config/init-assets'\nimport { AlreadyInitializedError } from '../errors.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { createStart } from './start.js'\n\nimport { createStop } from './stop.js'\nimport { createDns } from './dns.js'\nimport { createIsOnline } from './is-online.js'\nimport { createResolve } from './resolve.js'\nimport { PinAPI } from './pin/index.js'\nimport { IPNSAPI } from './ipns.js'\nimport { NameAPI } from './name/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createLocal } from './refs/local.js'\nimport { BitswapAPI } from './bitswap/index.js'\nimport { BootstrapAPI } from './bootstrap/index.js'\nimport { BlockAPI } from './block/index.js'\nimport { RootAPI } from './root.js'\nimport { createVersion } from './version.js'\nimport { createId } from './id.js'\nimport { createConfig } from './config/index.js'\nimport { DagAPI } from './dag/index.js'\nimport { createPreloader } from '../preload.js'\nimport { createMfsPreloader } from '../mfs-preload.js'\nimport { createFiles } from './files/index.js'\nimport { KeyAPI } from './key/index.js'\nimport { ObjectAPI } from './object/index.js'\nimport { RepoAPI } from './repo/index.js'\nimport { StatsAPI } from './stats/index.js'\nimport { Storage } from './storage.js'\nimport { Network } from './network.js'\nimport { Service } from '../utils/service.js'\nimport { SwarmAPI } from './swarm/index.js'\nimport { createPing } from './ping.js'\nimport { createDht } from './dht.js'\nimport { createPubsub } from './pubsub.js'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport { Multibases } from 'ipfs-core-utils/multibases'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs')\n\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloader(options.preload)\n\n    const dns = createDns()\n    const isOnline = createIsOnline({ network })\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolve({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefs({ repo, codecs, resolve, preload }), {\n      local: createLocal({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    })\n\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    })\n\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDht({ network, repo, peerId })\n    this.pubsub = createPubsub({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createId({ network, peerId })\n    this.version = createVersion({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfig({ repo })\n    this.ping = createPing({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\n/**\n * @param {Options} options\n */\nexport async function create (options = {}) {\n  options = mergeOptions(getDefaultOptions(), options)\n  const initOptions = options.init || {}\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  log('creating repo')\n  const storage = await Storage.start(print, multicodecs, options)\n\n  log('getting repo config')\n  const config = await storage.repo.config.getAll()\n\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options, config }\n  })\n\n  log('starting preload')\n  await ipfs.preload.start()\n\n  log('starting storage')\n  ipfs.ipns.startOffline(storage)\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs)\n\n    log('adding default assets')\n    await initAssets({ addAll: ipfs.addAll, print })\n\n    log('initializing IPNS keyspace')\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT)\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      })\n    } finally {\n      timeoutController.clear()\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node')\n    await ipfs.start()\n  }\n\n  return ipfs\n}\n","\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createIsOnline ({ network }) {\n  /**\n   * @returns {boolean}\n   */\n  return () => {\n    const net = network.try()\n    return net != null && Boolean(net.libp2p.isStarted())\n  }\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop ({ network, preload, ipns, repo, mfsPreload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop()\n    ])\n\n    await Service.stop(network)\n\n    // must be closed after stopping services as some of them\n    // will write into the datastore\n    await repo.close()\n  }\n\n  return stop\n}\n","import { ipfsCore, interfaceIpfsCore, commit } from '../version.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"version\"]}\n   */\n  async function version (_options = {}) {\n    const repoVersion = await repo.version.get()\n\n    return {\n      version: ipfsCore,\n      commit,\n      repo: `${repoVersion}`,\n      'ipfs-core': ipfsCore,\n      'interface-ipfs-core': interfaceIpfsCore\n    }\n  }\n\n  return withTimeoutOption(version)\n}\n","import { create as createImport } from './components/index.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\nimport urlSourceImport from 'ipfs-utils/src/files/url-source.js'\n\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn\n * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs\n * @typedef {import('./types').InitOptions} InitOptions\n * @typedef {import('./types').RelayOptions} RelayOptions\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions\n * @typedef {import('./types').Preload} Preload\n * @typedef {import('./types').MfsPreload} MfsPreload\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n */\n\nexport const create = createImport\nexport const globSource = globSourceImport\nexport const urlSource = urlSourceImport\n","/**\n * Check if a given ip address is a loopback address\n */\nexport function isLoopbackAddr(ip) {\n    return /^127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(ip) ||\n        /^::1$/.test(ip);\n}\n//# sourceMappingURL=index.js.map","const objectToString = Object.prototype.toString;\n\nconst isError = value => objectToString.call(value) === '[object Error]';\n\nconst errorMessages = new Set([\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari 16\n\t'Load failed', // Safari 17+\n\t'Network request failed', // `cross-fetch`\n\t'fetch failed', // Undici (Node.js)\n]);\n\nexport default function isNetworkError(error) {\n\tconst isValid = error\n\t\t&& isError(error)\n\t\t&& error.name === 'TypeError'\n\t\t&& typeof error.message === 'string';\n\n\tif (!isValid) {\n\t\treturn false;\n\t}\n\n\t// We do an extra check for Safari 17+ as it has a very generic error message.\n\t// Network errors in Safari have no stack.\n\tif (error.message === 'Load failed') {\n\t\treturn error.stack === undefined;\n\t}\n\n\treturn errorMessages.has(error.message);\n}\n","import { Uint8ArrayList } from 'uint8arraylist';\nimport defer from 'p-defer';\nconst DEFAULT_BATCH_SIZE = 1024 * 1024;\nconst DEFAULT_SERIALIZE = (buf, list) => { list.append(buf); };\nasync function* batchedBytes(source, options = {}) {\n    let buffer = new Uint8ArrayList();\n    let ended = false;\n    let deferred = defer();\n    let size = Number(options.size ?? DEFAULT_BATCH_SIZE);\n    if (isNaN(size) || size === 0 || size < 0) {\n        size = DEFAULT_BATCH_SIZE;\n    }\n    const yieldAfter = options.yieldAfter ?? 0;\n    const serialize = options.serialize ?? DEFAULT_SERIALIZE;\n    void Promise.resolve().then(async () => {\n        try {\n            let timeout;\n            for await (const buf of source) {\n                serialize(buf, buffer);\n                if (buffer.byteLength >= size) {\n                    clearTimeout(timeout);\n                    deferred.resolve();\n                    continue;\n                }\n                timeout = setTimeout(() => {\n                    deferred.resolve();\n                }, yieldAfter);\n            }\n            clearTimeout(timeout);\n            deferred.resolve();\n        }\n        catch (err) {\n            deferred.reject(err);\n        }\n        finally {\n            ended = true;\n        }\n    });\n    while (!ended) { // eslint-disable-line no-unmodified-loop-condition\n        await deferred.promise;\n        deferred = defer();\n        if (buffer.byteLength > 0) {\n            const b = buffer;\n            buffer = new Uint8ArrayList();\n            yield b.subarray();\n        }\n    }\n}\nexport default batchedBytes;\n//# sourceMappingURL=index.js.map","/**\n * Drains an (async) iterable discarding its' content and does not return\n * anything\n */\nexport default async function drain(source) {\n    for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n}\n//# sourceMappingURL=index.js.map","/**\n * Filters the passed (async) iterable by using the filter function\n */\nexport default async function* filter(source, fn) {\n    for await (const entry of source) {\n        if (await fn(entry)) {\n            yield entry;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`\n */\nexport default async function first(source) {\n    for await (const entry of source) { // eslint-disable-line no-unreachable-loop\n        return entry;\n    }\n    return undefined;\n}\n//# sourceMappingURL=index.js.map","/**\n * Returns the last item of an (async) iterable, unless empty, in which case\n * return `undefined`\n */\nexport default async function last(source) {\n    let res;\n    for await (const entry of source) {\n        res = entry;\n    }\n    return res;\n}\n//# sourceMappingURL=index.js.map","// ported from https://www.npmjs.com/package/fast-fifo\nclass FixedFIFO {\n    buffer;\n    mask;\n    top;\n    btm;\n    next;\n    constructor(hwm) {\n        if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) {\n            throw new Error('Max size for a FixedFIFO should be a power of two');\n        }\n        this.buffer = new Array(hwm);\n        this.mask = hwm - 1;\n        this.top = 0;\n        this.btm = 0;\n        this.next = null;\n    }\n    push(data) {\n        if (this.buffer[this.top] !== undefined) {\n            return false;\n        }\n        this.buffer[this.top] = data;\n        this.top = (this.top + 1) & this.mask;\n        return true;\n    }\n    shift() {\n        const last = this.buffer[this.btm];\n        if (last === undefined) {\n            return undefined;\n        }\n        this.buffer[this.btm] = undefined;\n        this.btm = (this.btm + 1) & this.mask;\n        return last;\n    }\n    isEmpty() {\n        return this.buffer[this.btm] === undefined;\n    }\n}\nexport class FIFO {\n    size;\n    hwm;\n    head;\n    tail;\n    constructor(options = {}) {\n        this.hwm = options.splitLimit ?? 16;\n        this.head = new FixedFIFO(this.hwm);\n        this.tail = this.head;\n        this.size = 0;\n    }\n    calculateSize(obj) {\n        if (obj?.byteLength != null) {\n            return obj.byteLength;\n        }\n        return 1;\n    }\n    push(val) {\n        if (val?.value != null) {\n            this.size += this.calculateSize(val.value);\n        }\n        if (!this.head.push(val)) {\n            const prev = this.head;\n            this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);\n            this.head.push(val);\n        }\n    }\n    shift() {\n        let val = this.tail.shift();\n        if (val === undefined && (this.tail.next != null)) {\n            const next = this.tail.next;\n            this.tail.next = null;\n            this.tail = next;\n            val = this.tail.shift();\n        }\n        if (val?.value != null) {\n            this.size -= this.calculateSize(val.value);\n        }\n        return val;\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n}\n//# sourceMappingURL=fifo.js.map","/**\n * @packageDocumentation\n *\n * An iterable that you can push values into.\n *\n * @example\n *\n * ```js\n * import { pushable } from 'it-pushable'\n *\n * const source = pushable()\n *\n * setTimeout(() => source.push('hello'), 100)\n * setTimeout(() => source.push('world'), 200)\n * setTimeout(() => source.end(), 300)\n *\n * const start = Date.now()\n *\n * for await (const value of source) {\n *   console.log(`got \"${value}\" after ${Date.now() - start}ms`)\n * }\n * console.log(`done after ${Date.now() - start}ms`)\n *\n * // Output:\n * // got \"hello\" after 105ms\n * // got \"world\" after 207ms\n * // done after 309ms\n * ```\n *\n * @example\n *\n * ```js\n * import { pushableV } from 'it-pushable'\n * import all from 'it-all'\n *\n * const source = pushableV()\n *\n * source.push(1)\n * source.push(2)\n * source.push(3)\n * source.end()\n *\n * console.info(await all(source))\n *\n * // Output:\n * // [ [1, 2, 3] ]\n * ```\n */\nimport deferred from 'p-defer';\nimport { FIFO } from './fifo.js';\nexport class AbortError extends Error {\n    type;\n    code;\n    constructor(message, code) {\n        super(message ?? 'The operation was aborted');\n        this.type = 'aborted';\n        this.code = code ?? 'ABORT_ERR';\n    }\n}\nexport function pushable(options = {}) {\n    const getNext = (buffer) => {\n        const next = buffer.shift();\n        if (next == null) {\n            return { done: true };\n        }\n        if (next.error != null) {\n            throw next.error;\n        }\n        return {\n            done: next.done === true,\n            // @ts-expect-error if done is false, value will be present\n            value: next.value\n        };\n    };\n    return _pushable(getNext, options);\n}\nexport function pushableV(options = {}) {\n    const getNext = (buffer) => {\n        let next;\n        const values = [];\n        while (!buffer.isEmpty()) {\n            next = buffer.shift();\n            if (next == null) {\n                break;\n            }\n            if (next.error != null) {\n                throw next.error;\n            }\n            if (next.done === false) {\n                // @ts-expect-error if done is false value should be pushed\n                values.push(next.value);\n            }\n        }\n        if (next == null) {\n            return { done: true };\n        }\n        return {\n            done: next.done === true,\n            value: values\n        };\n    };\n    return _pushable(getNext, options);\n}\nfunction _pushable(getNext, options) {\n    options = options ?? {};\n    let onEnd = options.onEnd;\n    let buffer = new FIFO();\n    let pushable;\n    let onNext;\n    let ended;\n    let drain = deferred();\n    const waitNext = async () => {\n        try {\n            if (!buffer.isEmpty()) {\n                return getNext(buffer);\n            }\n            if (ended) {\n                return { done: true };\n            }\n            return await new Promise((resolve, reject) => {\n                onNext = (next) => {\n                    onNext = null;\n                    buffer.push(next);\n                    try {\n                        resolve(getNext(buffer));\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                    return pushable;\n                };\n            });\n        }\n        finally {\n            if (buffer.isEmpty()) {\n                // settle promise in the microtask queue to give consumers a chance to\n                // await after calling .push\n                queueMicrotask(() => {\n                    drain.resolve();\n                    drain = deferred();\n                });\n            }\n        }\n    };\n    const bufferNext = (next) => {\n        if (onNext != null) {\n            return onNext(next);\n        }\n        buffer.push(next);\n        return pushable;\n    };\n    const bufferError = (err) => {\n        buffer = new FIFO();\n        if (onNext != null) {\n            return onNext({ error: err });\n        }\n        buffer.push({ error: err });\n        return pushable;\n    };\n    const push = (value) => {\n        if (ended) {\n            return pushable;\n        }\n        // @ts-expect-error `byteLength` is not declared on PushType\n        if (options?.objectMode !== true && value?.byteLength == null) {\n            throw new Error('objectMode was not true but tried to push non-Uint8Array value');\n        }\n        return bufferNext({ done: false, value });\n    };\n    const end = (err) => {\n        if (ended)\n            return pushable;\n        ended = true;\n        return (err != null) ? bufferError(err) : bufferNext({ done: true });\n    };\n    const _return = () => {\n        buffer = new FIFO();\n        end();\n        return { done: true };\n    };\n    const _throw = (err) => {\n        end(err);\n        return { done: true };\n    };\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next: waitNext,\n        return: _return,\n        throw: _throw,\n        push,\n        end,\n        get readableLength() {\n            return buffer.size;\n        },\n        onEmpty: async (options) => {\n            const signal = options?.signal;\n            signal?.throwIfAborted();\n            if (buffer.isEmpty()) {\n                return;\n            }\n            let cancel;\n            let listener;\n            if (signal != null) {\n                cancel = new Promise((resolve, reject) => {\n                    listener = () => {\n                        reject(new AbortError());\n                    };\n                    signal.addEventListener('abort', listener);\n                });\n            }\n            try {\n                await Promise.race([\n                    drain.promise,\n                    cancel\n                ]);\n            }\n            finally {\n                if (listener != null && signal != null) {\n                    signal?.removeEventListener('abort', listener);\n                }\n            }\n        }\n    };\n    if (onEnd == null) {\n        return pushable;\n    }\n    const _pushable = pushable;\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next() {\n            return _pushable.next();\n        },\n        throw(err) {\n            _pushable.throw(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        return() {\n            _pushable.return();\n            if (onEnd != null) {\n                onEnd();\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        push,\n        end(err) {\n            _pushable.end(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return pushable;\n        },\n        get readableLength() {\n            return _pushable.readableLength;\n        }\n    };\n    return pushable;\n}\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive bytes over streams.\n *\n * @example\n *\n * ```typescript\n * import { byteStream } from 'it-byte-stream'\n *\n * const stream = byteStream(duplex)\n *\n * // read the next chunk\n * const bytes = await stream.read()\n *\n * // read the next five bytes\n * const fiveBytes = await stream.read(5)\n *\n * // write bytes into the stream\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n * ```\n */\nimport { pushable } from 'it-pushable';\nimport { Uint8ArrayList } from 'uint8arraylist';\nexport class CodeError extends Error {\n    code;\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexport class AbortError extends CodeError {\n    type;\n    constructor(message) {\n        super(message, 'ABORT_ERR');\n        this.type = 'aborted';\n    }\n}\nexport function byteStream(duplex) {\n    const write = pushable();\n    duplex.sink(write).catch((err) => {\n        write.end(err);\n    });\n    duplex.sink = async (source) => {\n        for await (const buf of source) {\n            write.push(buf);\n        }\n        write.end();\n    };\n    let source = duplex.source;\n    if (duplex.source[Symbol.iterator] != null) {\n        source = duplex.source[Symbol.iterator]();\n    }\n    else if (duplex.source[Symbol.asyncIterator] != null) {\n        source = duplex.source[Symbol.asyncIterator]();\n    }\n    const readBuffer = new Uint8ArrayList();\n    const W = {\n        read: async (bytes, options) => {\n            options?.signal?.throwIfAborted();\n            let listener;\n            const abortPromise = new Promise((resolve, reject) => {\n                listener = () => {\n                    reject(new AbortError('Read aborted'));\n                };\n                options?.signal?.addEventListener('abort', listener);\n            });\n            try {\n                if (bytes == null) {\n                    // just read whatever arrives\n                    const { done, value } = await Promise.race([\n                        source.next(),\n                        abortPromise\n                    ]);\n                    if (done === true) {\n                        return new Uint8ArrayList();\n                    }\n                    return value;\n                }\n                while (readBuffer.byteLength < bytes) {\n                    const { value, done } = await Promise.race([\n                        source.next(),\n                        abortPromise\n                    ]);\n                    if (done === true) {\n                        throw new CodeError('unexpected end of input', 'ERR_UNEXPECTED_EOF');\n                    }\n                    readBuffer.append(value);\n                }\n                const buf = readBuffer.sublist(0, bytes);\n                readBuffer.consume(bytes);\n                return buf;\n            }\n            finally {\n                if (listener != null) {\n                    options?.signal?.removeEventListener('abort', listener);\n                }\n            }\n        },\n        write: async (data, options) => {\n            options?.signal?.throwIfAborted();\n            // just write\n            if (data instanceof Uint8Array) {\n                write.push(data);\n            }\n            else {\n                write.push(data.subarray());\n            }\n            await write.onEmpty(options);\n        },\n        unwrap: () => {\n            const originalStream = duplex.source;\n            duplex.source = (async function* () {\n                yield* readBuffer;\n                yield* originalStream;\n            }());\n            return duplex;\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed byte arrays over\n * streams.\n *\n * @example\n *\n * ```typescript\n * import { lpStream } from 'it-length-prefixed-stream'\n *\n * const stream = lpStream(duplex)\n *\n * // read the next length-prefixed chunk\n * const bytes = await stream.read()\n *\n * // write a length-prefixed chunk\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n * ```\n */\nimport { byteStream } from 'it-byte-stream';\nimport * as lp from 'it-length-prefixed';\nimport * as varint from 'uint8-varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nclass CodeError extends Error {\n    code;\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nconst defaultLengthDecoder = (buf) => {\n    return varint.decode(buf);\n};\ndefaultLengthDecoder.bytes = 0;\nexport function lpStream(duplex, opts) {\n    const bytes = byteStream(duplex);\n    const W = {\n        read: async (options) => {\n            let dataLength = -1;\n            const lengthBuffer = new Uint8ArrayList();\n            const decodeLength = opts?.lengthDecoder ?? defaultLengthDecoder;\n            while (true) {\n                // read one byte at a time until we can decode a varint\n                lengthBuffer.append(await bytes.read(1, options));\n                try {\n                    dataLength = decodeLength(lengthBuffer);\n                }\n                catch (err) {\n                    if (err instanceof RangeError) {\n                        continue;\n                    }\n                    throw err;\n                }\n                if (dataLength > -1) {\n                    break;\n                }\n                if (opts?.maxLengthLength != null && lengthBuffer.byteLength > opts.maxLengthLength) {\n                    throw new CodeError('message length length too long', 'ERR_MSG_LENGTH_TOO_LONG');\n                }\n            }\n            if (opts?.maxDataLength != null && dataLength > opts.maxDataLength) {\n                throw new CodeError('message length too long', 'ERR_MSG_DATA_TOO_LONG');\n            }\n            return bytes.read(dataLength, options);\n        },\n        write: async (data, options) => {\n            // encode, write\n            await bytes.write(lp.encode.single(data, opts), options);\n        },\n        unwrap: () => {\n            return bytes.unwrap();\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map","export function isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\n//# sourceMappingURL=utils.js.map","import * as varint from 'uint8-varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { allocUnsafe } from 'uint8arrays/alloc';\nimport { isAsyncIterable } from './utils.js';\nconst defaultEncoder = (length) => {\n    const lengthLength = varint.encodingLength(length);\n    const lengthBuf = allocUnsafe(lengthLength);\n    varint.encode(length, lengthBuf);\n    defaultEncoder.bytes = lengthLength;\n    return lengthBuf;\n};\ndefaultEncoder.bytes = 0;\nexport function encode(source, options) {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    function* maybeYield(chunk) {\n        // length + data\n        const length = encodeLength(chunk.byteLength);\n        // yield only Uint8Arrays\n        if (length instanceof Uint8Array) {\n            yield length;\n        }\n        else {\n            yield* length;\n        }\n        // yield only Uint8Arrays\n        if (chunk instanceof Uint8Array) {\n            yield chunk;\n        }\n        else {\n            yield* chunk;\n        }\n    }\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            for await (const chunk of source) {\n                yield* maybeYield(chunk);\n            }\n        })();\n    }\n    return (function* () {\n        for (const chunk of source) {\n            yield* maybeYield(chunk);\n        }\n    })();\n}\nencode.single = (chunk, options) => {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    return new Uint8ArrayList(encodeLength(chunk.byteLength), chunk);\n};\n//# sourceMappingURL=encode.js.map","/* eslint max-depth: [\"error\", 6] */\nimport errCode from 'err-code';\nimport * as varint from 'uint8-varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { isAsyncIterable } from './utils.js';\n// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"LENGTH\"] = 0] = \"LENGTH\";\n    ReadMode[ReadMode[\"DATA\"] = 1] = \"DATA\";\n})(ReadMode || (ReadMode = {}));\nconst defaultDecoder = (buf) => {\n    const length = varint.decode(buf);\n    defaultDecoder.bytes = varint.encodingLength(length);\n    return length;\n};\ndefaultDecoder.bytes = 0;\nexport function decode(source, options) {\n    const buffer = new Uint8ArrayList();\n    let mode = ReadMode.LENGTH;\n    let dataLength = -1;\n    const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;\n    const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;\n    const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;\n    function* maybeYield() {\n        while (buffer.byteLength > 0) {\n            if (mode === ReadMode.LENGTH) {\n                // read length, ignore errors for short reads\n                try {\n                    dataLength = lengthDecoder(buffer);\n                    if (dataLength < 0) {\n                        throw errCode(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');\n                    }\n                    if (dataLength > maxDataLength) {\n                        throw errCode(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');\n                    }\n                    const dataLengthLength = lengthDecoder.bytes;\n                    buffer.consume(dataLengthLength);\n                    if (options?.onLength != null) {\n                        options.onLength(dataLength);\n                    }\n                    mode = ReadMode.DATA;\n                }\n                catch (err) {\n                    if (err instanceof RangeError) {\n                        if (buffer.byteLength > maxLengthLength) {\n                            throw errCode(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');\n                        }\n                        break;\n                    }\n                    throw err;\n                }\n            }\n            if (mode === ReadMode.DATA) {\n                if (buffer.byteLength < dataLength) {\n                    // not enough data, wait for more\n                    break;\n                }\n                const data = buffer.sublist(0, dataLength);\n                buffer.consume(dataLength);\n                if (options?.onData != null) {\n                    options.onData(data);\n                }\n                yield data;\n                mode = ReadMode.LENGTH;\n            }\n        }\n    }\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            for await (const buf of source) {\n                buffer.append(buf);\n                yield* maybeYield();\n            }\n            if (buffer.byteLength > 0) {\n                throw errCode(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n            }\n        })();\n    }\n    return (function* () {\n        for (const buf of source) {\n            buffer.append(buf);\n            yield* maybeYield();\n        }\n        if (buffer.byteLength > 0) {\n            throw errCode(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n        }\n    })();\n}\ndecode.fromReader = (reader, options) => {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = (async function* () {\n        while (true) {\n            try {\n                const { done, value } = await reader.next(byteLength);\n                if (done === true) {\n                    return;\n                }\n                if (value != null) {\n                    yield value;\n                }\n            }\n            catch (err) {\n                if (err.code === 'ERR_UNDER_READ') {\n                    return { done: true, value: null };\n                }\n                throw err;\n            }\n            finally {\n                // Reset the byteLength so we continue to check for varints\n                byteLength = 1;\n            }\n        }\n    }());\n    /**\n     * Once the length has been parsed, read chunk for that length\n     */\n    const onLength = (l) => { byteLength = l; };\n    return decode(varByteSource, {\n        ...(options ?? {}),\n        onLength\n    });\n};\n//# sourceMappingURL=decode.js.map","/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function\n */\nexport default async function* map(source, func) {\n    for await (const val of source) {\n        yield func(val);\n    }\n}\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nexport default async function* merge(...sources) {\n    const output = pushable({\n        objectMode: true\n    });\n    void Promise.resolve().then(async () => {\n        try {\n            await Promise.all(sources.map(async (source) => {\n                for await (const item of source) {\n                    output.push(item);\n                }\n            }));\n            output.end();\n        }\n        catch (err) {\n            output.end(err);\n        }\n    });\n    yield* output;\n}\n//# sourceMappingURL=index.js.map","/* global EventTarget Event */\nimport defer from 'p-defer';\nconst CustomEvent = globalThis.CustomEvent ?? Event;\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function* parallel(source, options = {}) {\n    let concurrency = options.concurrency ?? Infinity;\n    if (concurrency < 1) {\n        concurrency = Infinity;\n    }\n    const ordered = options.ordered == null ? false : options.ordered;\n    const emitter = new EventTarget();\n    const ops = [];\n    let slotAvailable = defer();\n    let resultAvailable = defer();\n    let sourceFinished = false;\n    let sourceErr;\n    let opErred = false;\n    emitter.addEventListener('task-complete', () => {\n        resultAvailable.resolve();\n    });\n    void Promise.resolve().then(async () => {\n        try {\n            for await (const task of source) {\n                if (ops.length === concurrency) {\n                    slotAvailable = defer();\n                    await slotAvailable.promise;\n                }\n                if (opErred) {\n                    break;\n                }\n                const op = {\n                    done: false\n                };\n                ops.push(op);\n                task()\n                    .then(result => {\n                    op.done = true;\n                    op.ok = true;\n                    op.value = result;\n                    emitter.dispatchEvent(new CustomEvent('task-complete'));\n                }, err => {\n                    op.done = true;\n                    op.err = err;\n                    emitter.dispatchEvent(new CustomEvent('task-complete'));\n                });\n            }\n            sourceFinished = true;\n            emitter.dispatchEvent(new CustomEvent('task-complete'));\n        }\n        catch (err) {\n            sourceErr = err;\n            emitter.dispatchEvent(new CustomEvent('task-complete'));\n        }\n    });\n    function valuesAvailable() {\n        if (ordered) {\n            return ops[0]?.done;\n        }\n        return Boolean(ops.find(op => op.done));\n    }\n    function* yieldOrderedValues() {\n        while ((ops.length > 0) && ops[0].done) {\n            const op = ops[0];\n            ops.shift();\n            if (op.ok) {\n                yield op.value;\n            }\n            else {\n                // allow the source to exit\n                opErred = true;\n                slotAvailable.resolve();\n                throw op.err;\n            }\n            slotAvailable.resolve();\n        }\n    }\n    function* yieldUnOrderedValues() {\n        // more values can become available while we wait for `yield`\n        // to return control to this function\n        while (valuesAvailable()) {\n            for (let i = 0; i < ops.length; i++) {\n                if (ops[i].done) {\n                    const op = ops[i];\n                    ops.splice(i, 1);\n                    i--;\n                    if (op.ok) {\n                        yield op.value;\n                    }\n                    else {\n                        opErred = true;\n                        slotAvailable.resolve();\n                        throw op.err;\n                    }\n                    slotAvailable.resolve();\n                }\n            }\n        }\n    }\n    while (true) {\n        if (!valuesAvailable()) {\n            resultAvailable = defer();\n            await resultAvailable.promise;\n        }\n        if (sourceErr != null) {\n            // the source threw an error, propagate it\n            throw sourceErr;\n        }\n        if (ordered) {\n            yield* yieldOrderedValues();\n        }\n        else {\n            yield* yieldUnOrderedValues();\n        }\n        if (sourceFinished && ops.length === 0) {\n            // not waiting for any results and no more tasks so we are done\n            break;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","function peekable(iterable) {\n    // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n    const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n        // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n        ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n        // @ts-expect-error can't use Symbol.iterator to index iterable since it might be AsyncIterable\n        : [iterable[Symbol.iterator](), Symbol.iterator];\n    const queue = [];\n    // @ts-expect-error can't use symbol to index peekable\n    return {\n        peek: () => {\n            return iterator.next();\n        },\n        push: (value) => {\n            queue.push(value);\n        },\n        next: () => {\n            if (queue.length > 0) {\n                return {\n                    done: false,\n                    value: queue.shift()\n                };\n            }\n            return iterator.next();\n        },\n        [symbol]() {\n            return this;\n        }\n    };\n}\nexport default peekable;\n//# sourceMappingURL=index.js.map","// ported from https://www.npmjs.com/package/fast-fifo\nclass FixedFIFO {\n    buffer;\n    mask;\n    top;\n    btm;\n    next;\n    constructor(hwm) {\n        if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) {\n            throw new Error('Max size for a FixedFIFO should be a power of two');\n        }\n        this.buffer = new Array(hwm);\n        this.mask = hwm - 1;\n        this.top = 0;\n        this.btm = 0;\n        this.next = null;\n    }\n    push(data) {\n        if (this.buffer[this.top] !== undefined) {\n            return false;\n        }\n        this.buffer[this.top] = data;\n        this.top = (this.top + 1) & this.mask;\n        return true;\n    }\n    shift() {\n        const last = this.buffer[this.btm];\n        if (last === undefined) {\n            return undefined;\n        }\n        this.buffer[this.btm] = undefined;\n        this.btm = (this.btm + 1) & this.mask;\n        return last;\n    }\n    isEmpty() {\n        return this.buffer[this.btm] === undefined;\n    }\n}\nexport class FIFO {\n    size;\n    hwm;\n    head;\n    tail;\n    constructor(options = {}) {\n        this.hwm = options.splitLimit ?? 16;\n        this.head = new FixedFIFO(this.hwm);\n        this.tail = this.head;\n        this.size = 0;\n    }\n    calculateSize(obj) {\n        if (obj?.byteLength != null) {\n            return obj.byteLength;\n        }\n        return 1;\n    }\n    push(val) {\n        if (val?.value != null) {\n            this.size += this.calculateSize(val.value);\n        }\n        if (!this.head.push(val)) {\n            const prev = this.head;\n            this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);\n            this.head.push(val);\n        }\n    }\n    shift() {\n        let val = this.tail.shift();\n        if (val === undefined && (this.tail.next != null)) {\n            const next = this.tail.next;\n            this.tail.next = null;\n            this.tail = next;\n            val = this.tail.shift();\n        }\n        if (val?.value != null) {\n            this.size -= this.calculateSize(val.value);\n        }\n        return val;\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n}\n//# sourceMappingURL=fifo.js.map","/**\n * @packageDocumentation\n *\n * An iterable that you can push values into.\n *\n * @example\n *\n * ```js\n * import { pushable } from 'it-pushable'\n *\n * const source = pushable()\n *\n * setTimeout(() => source.push('hello'), 100)\n * setTimeout(() => source.push('world'), 200)\n * setTimeout(() => source.end(), 300)\n *\n * const start = Date.now()\n *\n * for await (const value of source) {\n *   console.log(`got \"${value}\" after ${Date.now() - start}ms`)\n * }\n * console.log(`done after ${Date.now() - start}ms`)\n *\n * // Output:\n * // got \"hello\" after 105ms\n * // got \"world\" after 207ms\n * // done after 309ms\n * ```\n *\n * @example\n *\n * ```js\n * import { pushableV } from 'it-pushable'\n * import all from 'it-all'\n *\n * const source = pushableV()\n *\n * source.push(1)\n * source.push(2)\n * source.push(3)\n * source.end()\n *\n * console.info(await all(source))\n *\n * // Output:\n * // [ [1, 2, 3] ]\n * ```\n */\nimport deferred from 'p-defer';\nimport { FIFO } from './fifo.js';\nexport class AbortError extends Error {\n    type;\n    code;\n    constructor(message, code) {\n        super(message ?? 'The operation was aborted');\n        this.type = 'aborted';\n        this.code = code ?? 'ABORT_ERR';\n    }\n}\nexport function pushable(options = {}) {\n    const getNext = (buffer) => {\n        const next = buffer.shift();\n        if (next == null) {\n            return { done: true };\n        }\n        if (next.error != null) {\n            throw next.error;\n        }\n        return {\n            done: next.done === true,\n            // @ts-expect-error if done is false, value will be present\n            value: next.value\n        };\n    };\n    return _pushable(getNext, options);\n}\nexport function pushableV(options = {}) {\n    const getNext = (buffer) => {\n        let next;\n        const values = [];\n        while (!buffer.isEmpty()) {\n            next = buffer.shift();\n            if (next == null) {\n                break;\n            }\n            if (next.error != null) {\n                throw next.error;\n            }\n            if (next.done === false) {\n                // @ts-expect-error if done is false value should be pushed\n                values.push(next.value);\n            }\n        }\n        if (next == null) {\n            return { done: true };\n        }\n        return {\n            done: next.done === true,\n            value: values\n        };\n    };\n    return _pushable(getNext, options);\n}\nfunction _pushable(getNext, options) {\n    options = options ?? {};\n    let onEnd = options.onEnd;\n    let buffer = new FIFO();\n    let pushable;\n    let onNext;\n    let ended;\n    let drain = deferred();\n    const waitNext = async () => {\n        try {\n            if (!buffer.isEmpty()) {\n                return getNext(buffer);\n            }\n            if (ended) {\n                return { done: true };\n            }\n            return await new Promise((resolve, reject) => {\n                onNext = (next) => {\n                    onNext = null;\n                    buffer.push(next);\n                    try {\n                        resolve(getNext(buffer));\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                    return pushable;\n                };\n            });\n        }\n        finally {\n            if (buffer.isEmpty()) {\n                // settle promise in the microtask queue to give consumers a chance to\n                // await after calling .push\n                queueMicrotask(() => {\n                    drain.resolve();\n                    drain = deferred();\n                });\n            }\n        }\n    };\n    const bufferNext = (next) => {\n        if (onNext != null) {\n            return onNext(next);\n        }\n        buffer.push(next);\n        return pushable;\n    };\n    const bufferError = (err) => {\n        buffer = new FIFO();\n        if (onNext != null) {\n            return onNext({ error: err });\n        }\n        buffer.push({ error: err });\n        return pushable;\n    };\n    const push = (value) => {\n        if (ended) {\n            return pushable;\n        }\n        // @ts-expect-error `byteLength` is not declared on PushType\n        if (options?.objectMode !== true && value?.byteLength == null) {\n            throw new Error('objectMode was not true but tried to push non-Uint8Array value');\n        }\n        return bufferNext({ done: false, value });\n    };\n    const end = (err) => {\n        if (ended)\n            return pushable;\n        ended = true;\n        return (err != null) ? bufferError(err) : bufferNext({ done: true });\n    };\n    const _return = () => {\n        buffer = new FIFO();\n        end();\n        return { done: true };\n    };\n    const _throw = (err) => {\n        end(err);\n        return { done: true };\n    };\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next: waitNext,\n        return: _return,\n        throw: _throw,\n        push,\n        end,\n        get readableLength() {\n            return buffer.size;\n        },\n        onEmpty: async (options) => {\n            const signal = options?.signal;\n            signal?.throwIfAborted();\n            if (buffer.isEmpty()) {\n                return;\n            }\n            let cancel;\n            let listener;\n            if (signal != null) {\n                cancel = new Promise((resolve, reject) => {\n                    listener = () => {\n                        reject(new AbortError());\n                    };\n                    signal.addEventListener('abort', listener);\n                });\n            }\n            try {\n                await Promise.race([\n                    drain.promise,\n                    cancel\n                ]);\n            }\n            finally {\n                if (listener != null && signal != null) {\n                    signal?.removeEventListener('abort', listener);\n                }\n            }\n        }\n    };\n    if (onEnd == null) {\n        return pushable;\n    }\n    const _pushable = pushable;\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next() {\n            return _pushable.next();\n        },\n        throw(err) {\n            _pushable.throw(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        return() {\n            _pushable.return();\n            if (onEnd != null) {\n                onEnd();\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        push,\n        end(err) {\n            _pushable.end(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return pushable;\n        },\n        get readableLength() {\n            return _pushable.readableLength;\n        }\n    };\n    return pushable;\n}\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction merge(...sources) {\n    const syncSources = [];\n    for (const source of sources) {\n        if (!isAsyncIterable(source)) {\n            syncSources.push(source);\n        }\n    }\n    if (syncSources.length === sources.length) {\n        // all sources are synchronous\n        return (function* () {\n            for (const source of syncSources) {\n                yield* source;\n            }\n        })();\n    }\n    return (async function* () {\n        const output = pushable({\n            objectMode: true\n        });\n        void Promise.resolve().then(async () => {\n            try {\n                await Promise.all(sources.map(async (source) => {\n                    for await (const item of source) {\n                        output.push(item);\n                    }\n                }));\n                output.end();\n            }\n            catch (err) {\n                output.end(err);\n            }\n        });\n        yield* output;\n    })();\n}\nexport default merge;\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport function pipe(first, ...rest) {\n    if (first == null) {\n        throw new Error('Empty pipeline');\n    }\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first) || isAsyncIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nconst isAsyncIterable = (obj) => {\n    return obj?.[Symbol.asyncIterator] != null;\n};\nconst isIterable = (obj) => {\n    return obj?.[Symbol.iterator] != null;\n};\nconst isDuplex = (obj) => {\n    if (obj == null) {\n        return false;\n    }\n    return obj.sink != null && obj.source != null;\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p?.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            let sourceWrap;\n            const source = duplex.source;\n            if (isAsyncIterable(source)) {\n                sourceWrap = async function* () {\n                    yield* source;\n                    stream.end();\n                };\n            }\n            else if (isIterable(source)) {\n                sourceWrap = function* () {\n                    yield* source;\n                    stream.end();\n                };\n            }\n            else {\n                throw new Error('Unknown duplex source type - must be Iterable or AsyncIterable');\n            }\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed Protobuf encoded\n * messages over streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-protobuf-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n *\n * // write a message to the stream\n * stream.write({\n *   foo: 'bar'\n * }, MessageType)\n *\n * // read a message from the stream\n * const res = await stream.read(MessageType)\n * ```\n */\nimport { lpStream } from 'it-length-prefixed-stream';\nexport function pbStream(duplex, opts) {\n    const lp = lpStream(duplex, opts);\n    const W = {\n        read: async (proto, options) => {\n            // readLP, decode\n            const value = await lp.read(options);\n            return proto.decode(value);\n        },\n        write: async (data, proto, options) => {\n            // encode, writeLP\n            await lp.write(proto.encode(data), options);\n        },\n        pb: (proto) => {\n            return {\n                read: async (options) => W.read(proto, options),\n                write: async (d, options) => W.write(d, proto, options),\n                unwrap: () => W\n            };\n        },\n        unwrap: () => {\n            return lp.unwrap();\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map","// ported from https://www.npmjs.com/package/fast-fifo\nclass FixedFIFO {\n    constructor(hwm) {\n        if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) {\n            throw new Error('Max size for a FixedFIFO should be a power of two');\n        }\n        this.buffer = new Array(hwm);\n        this.mask = hwm - 1;\n        this.top = 0;\n        this.btm = 0;\n        this.next = null;\n    }\n    push(data) {\n        if (this.buffer[this.top] !== undefined) {\n            return false;\n        }\n        this.buffer[this.top] = data;\n        this.top = (this.top + 1) & this.mask;\n        return true;\n    }\n    shift() {\n        const last = this.buffer[this.btm];\n        if (last === undefined) {\n            return undefined;\n        }\n        this.buffer[this.btm] = undefined;\n        this.btm = (this.btm + 1) & this.mask;\n        return last;\n    }\n    isEmpty() {\n        return this.buffer[this.btm] === undefined;\n    }\n}\nexport class FIFO {\n    constructor(options = {}) {\n        this.hwm = options.splitLimit ?? 16;\n        this.head = new FixedFIFO(this.hwm);\n        this.tail = this.head;\n        this.size = 0;\n    }\n    calculateSize(obj) {\n        if (obj?.byteLength != null) {\n            return obj.byteLength;\n        }\n        return 1;\n    }\n    push(val) {\n        if (val?.value != null) {\n            this.size += this.calculateSize(val.value);\n        }\n        if (!this.head.push(val)) {\n            const prev = this.head;\n            this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);\n            this.head.push(val);\n        }\n    }\n    shift() {\n        let val = this.tail.shift();\n        if (val === undefined && (this.tail.next != null)) {\n            const next = this.tail.next;\n            this.tail.next = null;\n            this.tail = next;\n            val = this.tail.shift();\n        }\n        if (val?.value != null) {\n            this.size -= this.calculateSize(val.value);\n        }\n        return val;\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n}\n//# sourceMappingURL=fifo.js.map","/**\n * @packageDocumentation\n *\n * An iterable that you can push values into.\n *\n * @example\n *\n * ```js\n * import { pushable } from 'it-pushable'\n *\n * const source = pushable()\n *\n * setTimeout(() => source.push('hello'), 100)\n * setTimeout(() => source.push('world'), 200)\n * setTimeout(() => source.end(), 300)\n *\n * const start = Date.now()\n *\n * for await (const value of source) {\n *   console.log(`got \"${value}\" after ${Date.now() - start}ms`)\n * }\n * console.log(`done after ${Date.now() - start}ms`)\n *\n * // Output:\n * // got \"hello\" after 105ms\n * // got \"world\" after 207ms\n * // done after 309ms\n * ```\n *\n * @example\n *\n * ```js\n * import { pushableV } from 'it-pushable'\n * import all from 'it-all'\n *\n * const source = pushableV()\n *\n * source.push(1)\n * source.push(2)\n * source.push(3)\n * source.end()\n *\n * console.info(await all(source))\n *\n * // Output:\n * // [ [1, 2, 3] ]\n * ```\n */\nimport { FIFO } from './fifo.js';\nexport function pushable(options = {}) {\n    const getNext = (buffer) => {\n        const next = buffer.shift();\n        if (next == null) {\n            return { done: true };\n        }\n        if (next.error != null) {\n            throw next.error;\n        }\n        return {\n            done: next.done === true,\n            // @ts-expect-error\n            value: next.value\n        };\n    };\n    return _pushable(getNext, options);\n}\nexport function pushableV(options = {}) {\n    const getNext = (buffer) => {\n        let next;\n        const values = [];\n        while (!buffer.isEmpty()) {\n            next = buffer.shift();\n            if (next == null) {\n                break;\n            }\n            if (next.error != null) {\n                throw next.error;\n            }\n            if (next.done === false) {\n                // @ts-expect-error\n                values.push(next.value);\n            }\n        }\n        if (next == null) {\n            return { done: true };\n        }\n        return {\n            done: next.done === true,\n            value: values\n        };\n    };\n    return _pushable(getNext, options);\n}\nfunction _pushable(getNext, options) {\n    options = options ?? {};\n    let onEnd = options.onEnd;\n    let buffer = new FIFO();\n    let pushable;\n    let onNext;\n    let ended;\n    const waitNext = async () => {\n        if (!buffer.isEmpty()) {\n            return getNext(buffer);\n        }\n        if (ended) {\n            return { done: true };\n        }\n        return await new Promise((resolve, reject) => {\n            onNext = (next) => {\n                onNext = null;\n                buffer.push(next);\n                try {\n                    resolve(getNext(buffer));\n                }\n                catch (err) {\n                    reject(err);\n                }\n                return pushable;\n            };\n        });\n    };\n    const bufferNext = (next) => {\n        if (onNext != null) {\n            return onNext(next);\n        }\n        buffer.push(next);\n        return pushable;\n    };\n    const bufferError = (err) => {\n        buffer = new FIFO();\n        if (onNext != null) {\n            return onNext({ error: err });\n        }\n        buffer.push({ error: err });\n        return pushable;\n    };\n    const push = (value) => {\n        if (ended) {\n            return pushable;\n        }\n        // @ts-expect-error `byteLength` is not declared on PushType\n        if (options?.objectMode !== true && value?.byteLength == null) {\n            throw new Error('objectMode was not true but tried to push non-Uint8Array value');\n        }\n        return bufferNext({ done: false, value });\n    };\n    const end = (err) => {\n        if (ended)\n            return pushable;\n        ended = true;\n        return (err != null) ? bufferError(err) : bufferNext({ done: true });\n    };\n    const _return = () => {\n        buffer = new FIFO();\n        end();\n        return { done: true };\n    };\n    const _throw = (err) => {\n        end(err);\n        return { done: true };\n    };\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next: waitNext,\n        return: _return,\n        throw: _throw,\n        push,\n        end,\n        get readableLength() {\n            return buffer.size;\n        }\n    };\n    if (onEnd == null) {\n        return pushable;\n    }\n    const _pushable = pushable;\n    pushable = {\n        [Symbol.asyncIterator]() { return this; },\n        next() {\n            return _pushable.next();\n        },\n        throw(err) {\n            _pushable.throw(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        return() {\n            _pushable.return();\n            if (onEnd != null) {\n                onEnd();\n                onEnd = undefined;\n            }\n            return { done: true };\n        },\n        push,\n        end(err) {\n            _pushable.end(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return pushable;\n        },\n        get readableLength() {\n            return _pushable.readableLength;\n        }\n    };\n    return pushable;\n}\n//# sourceMappingURL=index.js.map","import { Uint8ArrayList } from 'uint8arraylist';\n/**\n * Returns an `AsyncGenerator` that allows reading a set number of bytes from the passed source.\n *\n * @example\n *\n * ```javascript\n * import { reader } from 'it-reader'\n *\n * const stream = reader(source)\n *\n * // read 10 bytes from the stream\n * const { done, value } = await stream.next(10)\n *\n * if (done === true) {\n *   // stream finished\n * }\n *\n * if (value != null) {\n *   // do something with value\n * }\n * ```\n */\nexport function reader(source) {\n    const reader = (async function* () {\n        // @ts-expect-error first yield in stream is ignored\n        let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n        let bl = new Uint8ArrayList();\n        for await (const chunk of source) {\n            if (bytes == null) {\n                bl.append(chunk);\n                bytes = yield bl;\n                bl = new Uint8ArrayList();\n                continue;\n            }\n            bl.append(chunk);\n            while (bl.length >= bytes) {\n                const data = bl.sublist(0, bytes);\n                bl.consume(bytes);\n                bytes = yield data;\n                // If we no longer want a specific byte length, we yield the rest now\n                if (bytes == null) {\n                    if (bl.length > 0) {\n                        bytes = yield bl;\n                        bl = new Uint8ArrayList();\n                    }\n                    break; // bytes is null and/or no more buffer to yield\n                }\n            }\n        }\n        // Consumer wants more bytes but the source has ended and our buffer\n        // is not big enough to satisfy.\n        if (bytes != null) {\n            throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), { code: 'ERR_UNDER_READ', buffer: bl });\n        }\n    })();\n    void reader.next();\n    return reader;\n}\n//# sourceMappingURL=index.js.map","import all from 'it-all';\n/**\n * Collects all values from an async iterator, sorts them\n * using the passed function and yields them\n */\nexport default async function* sort(source, sorter) {\n    const arr = await all(source);\n    yield* arr.sort(sorter);\n}\n//# sourceMappingURL=index.js.map","/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all(source) {\n    const arr = [];\n    for await (const entry of source) {\n        arr.push(entry);\n    }\n    return arr;\n}\n//# sourceMappingURL=index.js.map","/**\n * Stop iteration after n items have been received\n */\nexport default async function* take(source, limit) {\n    let items = 0;\n    if (limit < 1) {\n        return;\n    }\n    for await (const entry of source) {\n        yield entry;\n        items++;\n        if (items === limit) {\n            return;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","export default async (socket) => {\n    // if the socket is closing or closed, return end\n    if (socket.readyState >= 2) {\n        throw new Error('socket closed');\n    }\n    // if open, return\n    if (socket.readyState === 1) {\n        return;\n    }\n    await new Promise((resolve, reject) => {\n        function cleanup() {\n            socket.removeEventListener('open', handleOpen);\n            socket.removeEventListener('error', handleErr);\n        }\n        function handleOpen() {\n            cleanup();\n            resolve();\n        }\n        function handleErr(event) {\n            cleanup();\n            reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`));\n        }\n        socket.addEventListener('open', handleOpen);\n        socket.addEventListener('error', handleErr);\n    });\n};\n//# sourceMappingURL=ready.js.map","import ready from './ready.js';\nexport default (socket, options) => {\n    options = options ?? {};\n    options.closeOnEnd = options.closeOnEnd !== false;\n    const sink = async (source) => {\n        for await (const data of source) {\n            try {\n                await ready(socket);\n            }\n            catch (err) {\n                if (err.message === 'socket closed')\n                    break;\n                throw err;\n            }\n            // the ready promise resolved without error but the socket was closing so\n            // exit the loop and don't send data\n            if (socket.readyState === socket.CLOSING || socket.readyState === socket.CLOSED) {\n                break;\n            }\n            socket.send(data);\n        }\n        if (options.closeOnEnd != null && socket.readyState <= 1) {\n            await new Promise((resolve, reject) => {\n                socket.addEventListener('close', event => {\n                    if (event.wasClean || event.code === 1006) {\n                        resolve();\n                    }\n                    else {\n                        const err = Object.assign(new Error('ws error'), { event });\n                        reject(err);\n                    }\n                });\n                setTimeout(() => { socket.close(); });\n            });\n        }\n    };\n    return sink;\n};\n//# sourceMappingURL=sink.js.map","import { EventIterator } from 'event-iterator';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer(obj) {\n    return (obj instanceof ArrayBuffer) ||\n        (obj?.constructor?.name === 'ArrayBuffer' && typeof obj?.byteLength === 'number');\n}\nexport default (socket) => {\n    socket.binaryType = 'arraybuffer';\n    const connected = async () => {\n        await new Promise((resolve, reject) => {\n            if (isConnected) {\n                resolve();\n                return;\n            }\n            if (connError != null) {\n                reject(connError);\n                return;\n            }\n            const cleanUp = (cont) => {\n                socket.removeEventListener('open', onOpen);\n                socket.removeEventListener('error', onError);\n                cont();\n            };\n            const onOpen = () => { cleanUp(resolve); };\n            const onError = (event) => {\n                cleanUp(() => { reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`)); });\n            };\n            socket.addEventListener('open', onOpen);\n            socket.addEventListener('error', onError);\n        });\n    };\n    const source = (async function* () {\n        const messages = new EventIterator(({ push, stop, fail }) => {\n            const onMessage = (event) => {\n                let data = null;\n                if (typeof event.data === 'string') {\n                    data = uint8ArrayFromString(event.data);\n                }\n                if (isArrayBuffer(event.data)) {\n                    data = new Uint8Array(event.data);\n                }\n                if (event.data instanceof Uint8Array) {\n                    data = event.data;\n                }\n                if (data == null) {\n                    return;\n                }\n                push(data);\n            };\n            const onError = (event) => { fail(event.error ?? new Error('Socket error')); };\n            socket.addEventListener('message', onMessage);\n            socket.addEventListener('error', onError);\n            socket.addEventListener('close', stop);\n            return () => {\n                socket.removeEventListener('message', onMessage);\n                socket.removeEventListener('error', onError);\n                socket.removeEventListener('close', stop);\n            };\n        }, { highWaterMark: Infinity });\n        await connected();\n        for await (const chunk of messages) {\n            yield isArrayBuffer(chunk) ? new Uint8Array(chunk) : chunk;\n        }\n    }());\n    let isConnected = socket.readyState === 1;\n    let connError;\n    socket.addEventListener('open', () => {\n        isConnected = true;\n        connError = null;\n    });\n    socket.addEventListener('close', () => {\n        isConnected = false;\n        connError = null;\n    });\n    socket.addEventListener('error', event => {\n        if (!isConnected) {\n            connError = event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`);\n        }\n    });\n    return Object.assign(source, {\n        connected\n    });\n};\n//# sourceMappingURL=source.js.map","import sink from './sink.js';\nimport source from './source.js';\nexport default (socket, options) => {\n    options = options ?? {};\n    const connectedSource = source(socket);\n    let remoteAddress = options.remoteAddress;\n    let remotePort = options.remotePort;\n    if (socket.url != null) {\n        // only client->server sockets have urls, server->client connections do not\n        try {\n            const url = new URL(socket.url);\n            remoteAddress = url.hostname;\n            remotePort = parseInt(url.port, 10);\n        }\n        catch { }\n    }\n    if (remoteAddress == null || remotePort == null) {\n        throw new Error('Remote connection did not have address and/or port');\n    }\n    const duplex = {\n        sink: sink(socket, options),\n        source: connectedSource,\n        connected: async () => { await connectedSource.connected(); },\n        close: async () => {\n            if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n                await new Promise((resolve) => {\n                    socket.addEventListener('close', () => {\n                        resolve();\n                    });\n                    socket.close();\n                });\n            }\n        },\n        destroy: () => {\n            if (socket.terminate != null) {\n                socket.terminate();\n            }\n            else {\n                socket.close();\n            }\n        },\n        remoteAddress,\n        remotePort,\n        socket\n    };\n    return duplex;\n};\n//# sourceMappingURL=duplex.js.map","/* eslint-env browser */\nexport default WebSocket;\n//# sourceMappingURL=web-socket.browser.js.map","import { relative } from 'iso-url';\nconst map = { http: 'ws', https: 'wss' };\nconst def = 'ws';\nexport default (url, location) => relative(url, location, map, def);\n//# sourceMappingURL=ws-url.js.map","// load websocket library if we are not in the browser\nimport duplex from './duplex.js';\nimport WebSocket from './web-socket.js';\nimport wsurl from './ws-url.js';\nexport function connect(addr, opts) {\n    const location = typeof window === 'undefined' ? '' : window.location;\n    opts = opts ?? {};\n    const url = wsurl(addr, location.toString());\n    const socket = new WebSocket(url, opts.websocket);\n    return duplex(socket, opts);\n}\n//# sourceMappingURL=client.js.map"],"names":["module","exports","read","buf","offset","b","res","shift","counter","l","length","bytes","RangeError","REST","Math","pow","MSB","encode","num","out","Number","MAX_SAFE_INTEGER","oldOffset","INT","MSBALL","decode","encodingLength","N1","N2","N3","N4","N5","N6","N7","N8","N9","value","root","ipv4Part","ipv4Regexes","fourOctet","RegExp","threeOctet","twoOctet","longValue","octalRegex","hexRegex","zoneIndex","ipv6Part","ipv6Regexes","deprecatedTransitional","transitional","expandIPv6","string","parts","indexOf","lastIndexOf","replacement","replacementCount","colonCount","lastColon","zoneId","match","substring","replace","substr","slice","ref","split","results","i","push","parseInt","matchCIDR","first","second","partSize","cidrBits","Error","part","parseIntAuto","test","isNaN","padPart","ipaddr","IPv4","octets","octet","this","prototype","SpecialRanges","unspecified","broadcast","multicast","linkLocal","loopback","carrierGradeNat","reserved","kind","other","cidrRange","undefined","prefixLengthFromSubnetMask","cidr","stop","zerotable","zeros","range","subnetMatch","toByteArray","toIPv4MappedAddress","IPv6","parse","toString","toNormalizedString","join","broadcastAddressFromCIDR","parseCIDR","ipInterfaceOctets","subnetMaskOctets","subnetMaskFromPrefixLength","e","isIPv4","parser","isValid","isValidFourPartDecimal","networkAddressFromCIDR","maskLength","parsed","Object","defineProperty","reverse","prefix","j","filledOctetCount","floor","uniqueLocal","ipv4Mapped","rfc6145","rfc6052","teredo","isIPv4MappedAddress","toFixedLengthString","addr","call","suffix","toIPv4Address","high","low","toRFC5952String","regex","bestMatchIndex","bestMatchLength","exec","index","isIPv6","native","fromByteArray","e2","process","address","rangeList","defaultName","rangeName","rangeSubnets","subnet","hasOwnProperty","Array","apply","Denque","array","options","_head","_tail","_capacity","capacity","_capacityMask","_list","isArray","_fromArray","peekAt","len","size","get","peek","peekFront","peekBack","unshift","item","_growArray","pop","head","_shrinkArray","tail","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","arguments","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","fullCopy","newArray","list","protobuf","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","rpc","roots","LongBits","utf8","indexOutOfRange","reader","writeLength","pos","buffer","create_array","Uint8Array","create","Buffer","isBuffer","readLongVarint","bits","lo","hi","readFixed32_end","end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","readFloatLE","double","readDoubleLE","start","constructor","skip","skipType","wireType","BufferReader_","fn","Long","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","EventEmitter","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","self","asPromise","finish","err","response","emit","setTimeout","endedByRPC","off","zero","toNumber","zzEncode","zeroHash","fromNumber","sign","from","isString","fromString","unsigned","toLong","charCodeAt","String","fromHash","hash","toHash","fromCharCode","mask","part0","part1","part2","dst","src","ifNotSet","keys","newError","name","CustomError","message","properties","captureStackTrace","stack","base64","inquire","pool","isNode","g","versions","node","global","window","emptyArray","freeze","emptyObject","isInteger","isFinite","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","charAt","toLowerCase","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","Op","val","next","noop","State","writer","states","writeByte","VarintOp","writeVarint64","writeFixed32","alloc","_push","writeFloatLE","writeDoubleLE","writeBytes","set","write","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","async","stream","getReader","result","done","preventCancel","cancel","releaseLock","source","arr","entry","isElectron","IS_ENV_WITH_DOM","document","nodeType","IS_ELECTRON","IS_BROWSER","IS_ELECTRON_MAIN","IS_ELECTRON_RENDERER","IS_NODE","release","IS_WEBWORKER","importScripts","WorkerGlobalScope","IS_TEST","env","IS_REACT_NATIVE","navigator","product","isTest","isElectronMain","isElectronRenderer","isBrowser","isWebWorker","isEnvWithDom","isReactNative","HTTP","readURLContent","url","http","iterator","path","decodeURIComponent","URL","pathname","content","fetch","Request","Headers","TimeoutError","HTTPError","ignoreUndefined","URLSearchParams","anySignal","browserReableStreamToIt","all","defaults","throwHttpErrors","credentials","opts","resource","headers","base","searchParams","transformSearchParams","search","body","JSON","stringify","abortController","AbortController","signal","globalThis","ReadableStream","Blob","promise","ms","Date","now","timedOut","Promise","resolve","reject","timeoutID","abort","after","clearTimeout","then","timeout","duplex","ok","handleError","fromStream","ndjson","chunk","transform","post","put","delete","decoder","TextDecoder","lines","trim","isAsyncIterable","isNodeReadableStream","iter","Symbol","asyncIterator","bind","return","destroy","isWebReadableStream","streamToAsyncIterator","super","AbortError","statusText","Response","default","fetchWithStreaming","parseHeaders","input","line","ResponseWithURL","onUploadProgress","XMLHttpRequest","open","Infinity","overrideMimeType","setRequestHeader","onabort","upload","onprogress","responseType","handleEvent","event","type","error","responseURL","status","getAllResponseHeaders","onerror","onload","ontimeout","send","fetchWithProgress","domainNameRegex","domainName","rootDot","lastChar","electron","userAgent","MAX_BYTES","generated","crypto","getRandomValues","URLWithLegacySupport","format","defaultBase","relative","location","protocolMap","defaultProtocol","urlParsed","protocol","assign","host","auth","username","password","query","startsWith","hostname","href","origin","port","static","o","createObjectURL","revokeObjectURL","toJSON","userPass","matcher","TextEncoder","functionDebounce","wait","callFirst","debouncedFn","debounceWrapper","context","args","callNow","flush","$protobuf","$Reader","$Writer","$util","$root","RPC","p","subscriptions","messages","ks","$oneOfFields","control","m","w","SubOpts","Message","ControlMessage","r","c","t","fromObject","d","toObject","arrays","oneofs","_control","subscribe","topic","_subscribe","_topic","data","seqno","signature","key","instance","_from","_data","_seqno","_signature","_key","ihave","iwant","graft","prune","ControlIHave","ControlIWant","ControlGraft","ControlPrune","messageIDs","topicID","_topicID","peers","backoff","PeerInfo","fromValue","_backoff","peerID","signedPeerRecord","_peerID","_signedPeerRecord","CID_CBOR_TAG","encodeOptions","float64","typeEncoders","asCID","cid","tag","number","decodeOptions","allowIndefinite","coerceUndefinedToNull","allowNaN","allowInfinity","allowBigInt","strict","useMaps","rejectDuplicateMapKeys","tags","code","bytesEncoder","bytesString","map","break","cidString","DagJsonTokenizer","tokenBuffer","_next","token","keyToken","valueToken","innerKeyToken","innerValueToken","allowUndefined","tokenizer","utf8Decoder","utf8Encoder","textDecoder","decodeVarint","v","decodeBytes","byteLen","postOffset","decodeKey","wire","decodeLink","link","fieldNum","Hash","Name","Tsize","byts","textEncoder","maxInt32","maxUInt32","encodeLink","isSafeInteger","encodeVarint","nameBytes","encodeNode","n","Data","sov","Links","sizeLink","sizeNode","x","len8tab","len64","pbNodeProperties","pbLinkProperties","linkComparator","a","abuf","bbuf","y","hasOnlyProperties","some","includes","asLink","pbl","prepare","pbn","sort","validate","createNode","links","createLink","linksBeforeData","decodeNode","word","boundry","includeBoundaries","v4","v6segment","v6","v46Exact","v4exact","v6exact","ipRegex","exact","thing","peekable","func","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","ArrayBuffer","isView","byteOffset","pbegin","pend","b58","it1","it2","repeat","coerce","Encoder","baseEncode","Decoder","baseDecode","codePointAt","prefixCodePoint","text","or","ComposedDecoder","decoders","left","right","Codec","encoder","baseX","alphabet","rfc4648","bitsPerChar","pad","codes","written","SyntaxError","base32","base58btc","encode_1","REST$1","MSB$1","encodeTo","int","target","digest","sizeOffset","digestOffset","Digest","version","toStringV0","baseCache","toStringV1","cache","WeakMap","Map","CID","multihash","toV0","DAG_PB_CODE","SHA_256_CODE","createV0","toV1","createV1","equals","unknown","aa","bb","ii","toStringTag","for","encodeCID","cidSymbol","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","codec","initialBytes","parseCIDtoBytes","codeOffset","hashOffset","Hasher","sha","subtle","sha256","WantListEntry","_refCounter","priority","wantType","inc","dec","max","hasRefs","BitswapMessageEntry","sendDontHave","id","subsystem","trace","namespace","logger","enabled","color","diff","extend","createDisabledLogger","find","isMapEqual","valueA","valueB","reduce","acc","curr","Wantlist","Block","BlockPresenceType","__BlockPresenceTypeValues","BlockPresence","_codec","WantType","__WantTypeValues","Entry","lengthDelimited","block","entries","full","Have","wantlist","blocks","payload","blockPresences","pendingBytes","BitswapMessage","DontHave","raw","hashLoader","decoded","isFull","msg","forEach","addEntry","blockPresence","addHave","addDontHave","addBlock","values","cidVersion","multicodec","hashAlg","hasher","getHasher","setPendingBytes","empty","cidStr","has","serializeToBitswap100","serializeToBitswap110","digestLength","bpType","_stats","stats","libp2p","metrics","add","removeForce","sortedEntries","contains","Ledger","partner","exchangeCount","accounting","lastExchange","peerId","bytesSent","bytesRecv","sentBytes","getTime","receivedBytes","wants","cancelWant","wantlistContains","debtRatio","SortedMap","_cmp","_keys","cmp","_defaultSort","update","newIdx","_find","lower","upper","pivot","_kCmp","cb","thisArg","DefaultTaskMerger","hasNewInfo","RequestQueue","_taskMerger","_byPeer","taskMerger","PeerTasks","compare","pushTasks","tasks","peerTasks","popTasks","targetMinBytes","pendingSize","isIdle","tasksDone","task","taskDone","_activeTotalSize","_pending","_active","PendingTasks","Set","_pushTask","_taskHasMoreInfoThanActiveTasks","existingTask","updatePriority","tasksWithTopic","activeTask","pendingTasks","totalSize","_tasks","_compare","created","haveBlock","isWantBlock","existing","newTask","taskData","existingData","blockSize","DecisionEngine","_log","blockstore","network","_opts","ledgerMap","_running","_requestQueue","_processOpts","maxSizeReplaceHasWithBlock","targetMessageSize","_scheduleProcessTasks","_processTasks","catch","blockCids","blockTasks","_getBlocks","blk","sendMessage","messageSent","wantlistForPeer","peerIdStr","ledger","ledgerForPeer","peer","sent","recv","exchanged","receivedBlocks","want","_sendAsBlock","entrySize","blockPresenceSize","_findOrCreate","_updateBlockAccounting","cancels","_cancelWants","_addWants","cids","blockSizes","_getBlockSizes","blocksMap","numBytesSentTo","numBytesReceivedFrom","peerDisconnected","limit","items","kMaxPriority","BITSWAP100","BITSWAP110","BITSWAP120","Network","_libp2p","_bitswap","_protocols","_hashLoader","_maxInboundStreams","_maxOutboundStreams","_incomingStreamTimeout","_registrarIds","bitswap","b100Only","_onPeerConnect","_onPeerDisconnect","_onConnection","maxInboundStreams","maxOutboundStreams","incomingStreamTimeout","handle","topology","onConnect","onDisconnect","register","getConnections","conn","remotePeer","unhandle","unregister","info","connection","controller","TimeoutController","abortListener","AbortSignal","addEventListener","deserialize","_receiveMessage","_receiveError","removeEventListener","close","finally","_onPeerConnected","_onPeerDisconnected","findProviders","onProgress","contentRouting","provider","connectTo","provide","stringId","_writeMessage","_updateSentStats","dial","dialProtocol","serialized","unwantEvent","blockEvent","Notifications","setMaxListeners","hasBlock","blockEvt","unwantEvt","onUnwant","removeListener","onBlock","once","unwantBlock","Stat","_options","_queue","_frequencyLastTime","_frequencyAccumulators","_movingAverages","_enabled","_timeout","initialCounters","_update","BigInt","movingAverageIntervals","interval","enable","disable","snapshot","movingAverages","_resetComputeTimeout","_nextTimeout","urgency","computeThrottleMaxQueueSize","computeThrottleTimeout","last","op","_applyOp","_updateFrequency","latestTime","timeDiff","_updateFrequencyFor","timeDiffMS","hz","movingAverageInterval","movingAverage","defaultOptions","Stats","_initialCounters","_global","_peers","on","peerStat","forPeer","peerStats","disconnected","MsgQueue","refcnt","_entries","selfPeerId","otherPeerId","sendEntries","addMessage","addEntries","concat","WantManager","_peerId","_addEntries","force","_startPeerHandler","mq","fullwantlist","_stopPeerHandler","wantBlocks","cancelWants","unwantBlocks","connectedPeers","connected","statsEnabled","statsComputeThrottleTimeout","statsComputeThrottleMaxQueueSize","statsKeys","DefaultBitswap","engine","wm","notifications","started","isStarted","incoming","messageReceived","received","wasWanted","filter","_handleReceivedBlock","_updateReceiveCounters","exists","enableStats","disableStats","fetchFromNetwork","wantBlock","promptedNetwork","loadOrFetchFromNetwork","findAndConnect","signals","onAbort","aborted","race","unwant","cidsArray","notify","putMany","getWantlist","createBitswap","blocksizes","Type","filesize","hashType","fanout","mode","mtime","UnixTime","c2","DataType","valuesById","Seconds","FractionalNanoseconds","Metadata","MimeType","parseMode","parseMtime","secs","nsecs","peekableIterator","iterable","symbol","queue","normaliseCandidateMultiple","normaliseContent","_readableState","toFileObject","file","toAsyncIterable","toBytes","normaliseInput","normaliseCandidateSingle","isBytes","isBlob","isFileObject","isReadableStream","LOAD_BASE","Multibases","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","addBase","removeBase","nameOrPrefix","listBases","LOAD_CODEC","codeOrName","Multicodecs","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codecs","addCodec","removeCodec","table","listCodecs","LOAD_HASHER","Multihashes","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hashers","addHasher","removeHasher","listHashers","itToBlob","modeToString","padStart","multipartRequest","formData","FormData","total","fileSuffix","fieldName","qs","encodeURIComponent","File","isCID","toPin","pin","recursive","metadata","toUrlString","PBData","types","dirTypes","DEFAULT_FILE_MODE","DEFAULT_DIRECTORY_MODE","UnixFS","marshaled","objects","_originalMode","_mode","isDirectory","parsedMode","addBlockSize","removeBlockSize","fileSize","sum","marshal","Raw","Directory","Symlink","HAMTShard","pbData","NotInitializedError","AlreadyInitializingError","AlreadyInitializedError","NotStartedError","AlreadyStartingError","AlreadyStartedError","NotEnabledError","isV4","isV6","ip","byte","sections","v4Buffer","argv","view","DataView","getUint16","V","names","getProtocol","proto","row","resolvable","createProtocol","convertToString","ipBuff","ipString","bytes2ip","bytes2str","bytes2port","varint","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh","base58","mh2bytes","portBuf","onion2bytes","onion32bytes","mbstr","mb","anybaseDecoder","mb2bytes","setUint16","addrBytes","portBytes","tuplesToStringTuples","tuples","tup","protoFromTuple","tuplesToBytes","fromBytes","sizeForAddr","bytesToTuples","ParseError","bytesToString","cleanPath","stringTuplesToString","stringToBytes","stringToStringTuples","validateBytes","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","__classPrivateFieldGet","receiver","state","f","__classPrivateFieldSet","inspect","DNS_CODES","resolvers","isMultiaddr","DefaultMultiaddr","toOptions","family","transport","zone","tcp","udp","ip4","ip6","dns6","ip6zone","stringTuples","protos","protoCodes","protoNames","encapsulate","decapsulate","addrString","s","decapsulateCode","getPeerId","tuple","ipfs","getPath","resolvableProto","resolver","nodeAddress","isThinWaistAddress","DNS4","DNS6","DNSADDR","DNS","IP","TCP","and","UDP","UTP","QUIC","WebSockets","WebSocketsSecure","HTTPS","_WebRTC","WebRTC","WebRTCStar","WebRTCDirect","Reliable","_P2P","_Circuit","CircuitRecursive","Circuit","makeMatchesFunction","partialMatch","ma","arg","matches","pnames","pathPattern","subdomainGatewayPattern","fqdnWithTld","isIpfs","pattern","protocolMatch","hashMatch","formatted","isIpns","ipnsId","ipnsPath","withTimeoutOption","optionsArgIndex","fnRes","timeoutPromise","_resolve","maybeThrowTimeoutError","it","IPFS_PREFIX","toCidAndPath","OFFLINE_ERROR","MFS_ROOT_KEY","normalizeCidPath","resolvePath","repo","ipfsPath","lastCid","lastRemainderPath","remainderPath","mapFile","output","unixfs","withTimeout","load","getCodec","service","activate","ready","panic","deactivate","_","use","try","maxSize","lru","hashlru","expire","ttl","httpQueue","concurrency","Path","createDns","domain","fqdn","nocache","resolveDnslink","endsWith","fqdnFixups","createResolve","resolvedPath","schema","rest","cidBase","getBase","parseBytes","PinTypes","direct","indirect","PinAPI","addAll","pinAdd","reason","pins","isPinnedWithType","pinRecursively","pinDirectly","lock","gcLock","readLock","createAddAll","createAdd","rmAll","pinned","unpin","createRmAll","rm","createRm","ls","paths","matched","parent","recursiveKeys","indirectKeys","directKeys","createLs","remote","notFoundError","ERR_UNRECOGNIZED_VALIDITY","ERR_SIGNATURE_VERIFICATION","ERR_UNDEFINED_PARAMETER","methods","original","patchReader","patchWriter","CODEC_TYPES","IpnsEntry","ValidityType","__ValidityTypeValues","findValue","VARINT","enumValue","enumeration","LENGTH_DELIMITED","validityType","validity","sequence","pubKey","signatureV2","encodeMessage","decodeMessage","IPNS_PREFIX","parseRFC3339","time","rfc3339Matcher","year","month","date","hour","minute","millisecond","UTC","ipnsEntryDataForV2Sig","entryData","unmarshal","EOL","peerIdToRoutingKey","ID_MULTIHASH_CODE","identity","namespaceLength","_create","seq","expirationDate","isoValidity","privateKey","unmarshalPrivateKey","signatureV1","signLegacyV1","Value","Validity","Sequence","TTL","cborg","createCborData","sigData","publicKey","getLocalKey","base32upper","rawStdEncoding","dataForSignature","validityTypeBuffer","ipnsEntryDataForV1Sig","ERR_NOT_FOUND","defaultRecordLifetime","IpnsPublisher","routing","datastore","_routing","_datastore","lifetime","record","_updateOrCreateRecord","_putRecordToRouting","publish","publishWithEOL","errMsg","routingKey","_publishEntry","checkRouting","dsVal","_unmarshalData","getPublishedOptions","_getPublished","seqNumber","ns","lifetimeNs","IpnsRepublisher","publisher","keychain","pass","_publisher","_keychain","_republishHandle","republishHandle","_task","_inflightTask","_timeoutId","runPeriodically","period","firstRun","timeoutController","_republishEntries","initialBroadcastInterval","broadcastInterval","_republishEntry","listKeys","pem","exportKey","privKey","importKey","peerIdKey","public","_getPreviousValue","notFound","validateCborDataMatchesPbData","parseCborData","ipnsValidator","marshalledData","peerIdFromRoutingKey","receivedEntry","unmarshalPublicKey","extractPublicKey","verify","validityDate","IpnsResolver","nameSegments","depth","_resolveName","_validateRecord","ipnsEntry","IPNS","republisher","ttEol","parseFloat","sortAll","sorter","BaseDatastore","batch","puts","dels","commit","deleteMany","q","_all","filters","orders","queryKeys","_allKeys","TieredDatastore","stores","store","pushables","objectMode","pair","batches","ipnsSelector","aSeq","bSeq","aValidty","bValidty","entryAValidityDate","entryBValidityDate","IpnsPubsubDatastore","pubsub","localDatastore","_subscriptions","_handleSubscriptionKey","_pubsubDs","stringifiedTopic","subscriber","getSubscriptions","sub","canceled","bufTopic","unsubscribe","OfflineDatastore","_routingKey","L","serialize","DHTDatastore","dht","_dht","IPNSAPI","offline","online","getIPNS","ipns","startOffline","ipnsStores","pubsubDs","offlineDatastore","createRouting","initializeKeyspace","createPublish","isOnline","lookupKey","keyName","pathStr","normalizePath","pubLifetime","toFixed","mergeOptions","appendRemainder","getPubsubRouting","ipnsPubsub","PubSubAPI","experimental","EXPERIMENTAL","createCancel","createState","subs","createSubs","NameAPI","dns","ipnsName","base36","Format","edges","createRefs","preload","maxDepth","getFullPath","refsStream","resPath","unique","rootCid","uniqueOnly","seen","traverseLevel","nextLevelDepth","isDagPb","getLinks","isDuplicate","objectStream","formatLink","srcCid","dstCid","linkName","element","elementPath","createLocal","createStat","stat","provideBufLen","providesBufferLength","blocksReceived","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent","BitswapAPI","createWantlist","createWantlistForPeer","createUnwant","isValidMultiaddr","Addresses","Swarm","Announce","NoAnnounce","API","Gateway","Delegates","Discovery","MDNS","Enabled","Interval","webRTCStar","Bootstrap","Pubsub","ConnMgr","LowWater","HighWater","DisableNatPortMap","Routing","BootstrapAPI","multiaddr","config","getAll","boostrappers","localeCompare","Peers","createList","createClear","createReset","rawPipe","fns","isIterable","isDuplex","sink","duplexPipelineFn","sourceWrap","pipe","cleanCid","BlockAPI","createGet","codecName","mhtype","createPut","writeLock","quiet","things","parallelBatch","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","leafType","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","hidden","hamtHashFn","hamtHashCode","hamtBucketBits","reduceToParents","chunked","Root","iteration","subTree","layer","addChild","SubTree","append","currentDepth","children","maxChildren","_addNextNodeToParent","distantRelative","_findParent","nextNode","_reduce","child","dagBuilders","flat","balanced","trickle","dagBuilder","previous","bufferImporter","single","buildFileBatch","leaves","leaf","avg","sizepow","log2","buffers","sizes","fingerprint","consume","currentLength","emitted","newBl","sublist","contentAsAsyncIterable","chunkValidator","rabin","dir","props","dirty","parentKey","_children","childCount","directChildrenCount","onlyChild","_bucket","hashFn","leafCount","childrenCount","eachLeafSeries","bucket","shardRoot","childrenSize","labelPrefix","toUpperCase","shard","subShard","flushedDir","label","bitField","tableSize","flatToShard","threshold","newDir","oldDir","eachChildSeries","convertToShard","addToTree","elem","tree","pathElems","lastIndex","currentPath","pathElem","flushAndYield","unwrapped","importer","treeBuilder","candidates","parseChunkerString","sizeStr","parseRabinString","parseChunkSize","isShardingEnabled","sharding","totals","prog","transformFile","maybePreloadFile","preloadFile","maybePinFile","isRootDir","pinFile","added","toPrefix","position","findShardCid","rootBucket","hamtDepth","lastBucket","_putObjectAt","addLinksToHamtBucket","_findNewBucketAndPos","bucketPath","_parent","toBucketPath","_posAtParent","entryPrefix","entryName","blockStart","requestedStart","requestedEnd","blockEnd","walkDAG","streamPosition","walkQueue","childOps","childLink","childStart","childEnd","ordered","listDirectory","contentExporters","directory","symlink","toResolve","linkCid","findLinkCid","nextName","object","subObject","subPath","subObjectCid","cidAndRest","walkPath","entryPath","startingDepth","exporter","recurse","toBuffer","USTAR_VER","MASK","toTypeflag","flag","encodeOct","addLength","digits","typeflag","linkname","uid","gid","uname","gname","devmajor","devminor","S_IFMT","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","DMODE","FMODE","END_OF_TAR","modeToType","header","pax","encoded","paxHeader","newHeader","pack","partialHeader","RootAPI","cat","pathComponents","createCat","compressionLevel","ipfsPathOrCid","compress","archive","level","legacyPath","ipfsCore","createId","net","addresses","agentVersion","protocolVersion","protocols","peerIdToId","peerStore","findPeer","findPeerOnDht","keyBook","getPublicKey","idStr","objectSafeSet","propsArg","lastProp","thisProp","prototypeCheck","server","description","defaultConfig","lowpower","listProfiles","createHeader","headerBytes","varintBytes","Kinds","Null","Int","Float","Bool","Bytes","Link","List","Types","every","CarHeader","CIDV0_BYTES","SHA2_256","LENGTH","DAG_PB","V2_HEADER_LENGTH","seeker","seek","readHeader","strictVersion","upTo","exactly","hasRoots","v2Header","dv","characteristics","getBigUint64","dataOffset","dataSize","indexOffset","decodeV2Header","v1Header","readCid","codeLength","getMultihashLength","readBlockHead","blockLength","readBlock","readBlockIndex","blockOffset","createDecoder","headerPromise","v1length","byteLimit","bytesRead","limitReader","bytesReader","asyncIterableReader","asyncIterable","readChunk","have","currentChunk","bufa","chunkReader","CarWriter","_encoder","_mutex","setRoots","_ended","writeBlock","_roots","_root","toRoots","encodeWriter","CarWriterOut","_iterator","_iterating","iw","chunkQueue","drainer","drainerResolver","ended","outWait","outWaitResolver","makeDrainer","createEncoder","NO_LINKS_CODECS","createExport","makeLoader","CarIteratorBase","_version","_iterable","_decoded","CarBlockIterator","fromIterable","CarCIDIterator","decodeIterator","createImport","sources","abortOptions","cars","car","importCar","pinRoots","pinErrorMsg","getRoots","DagAPI","export","localResolve","import","dagNode","storeCodec","inputCodec","createPreloader","api","stopped","requests","apiUris","fallbackApiUris","success","uri","createLock","repoOwner","mutex","singleProcess","loadMfsRoot","toMfsPath","entryType","mfsDirectory","mfsPath","cidPath","withLocal","exportPath","statters","cumulativeSize","local","sizeLocal","withLocality","toTrail","fsEntry","updateHamtDirectory","recreateHamtLevel","parentBucket","positionAtParent","recreateInitialHamtLevel","subBucket","addLink","parentCid","meta","addToShardedDirectory","convertToShardedDirectory","addToDirectory","contents","createShard","parentLinks","addFileToShardedDirectory","newLink","round","segment","nextSegment","positionInBucket","updateTree","trail","getMany","updateMfsRoot","parents","createMkdir","emptyDir","subPathComponents","addEmptyDir","newRootCid","childName","createCp","to","destination","missing","destinationIsDirectory","parentFolder","destinationPath","destinationName","copyToFile","copyToDirectory","destinationTrail","addSourceToParent","sourceBlock","removeFromDirectory","parentBlock","removeFromShardedDirectory","fileName","rootNode","currentBucket","generatePath","del","updateShard","positions","nodeLink","newName","updateShardParent","oldName","removePath","removeLink","parseSymbolicMode","originalMode","references","operator","modification","calculateModification","ugo","calculateUGO","calculateSpecial","calculateMode","strMode","truncate","updateOrImport","parentExists","updatedPath","parentNode","extra","asyncZeroes","limitAsyncStreamBytes","countBytesStreamed","catAsyncIterators","bytesWritten","chunkSize","_asyncZeroes","wrote","toOutput","readOperations","writeOperations","chmod","nodes","updatedBlock","updatedCid","cp","mkdir","mv","touch","settings","unwrappedOperations","toAsyncIterator","wrap","mfs","operations","createFiles","constructorOptions","operation","createMfs","withPreload","DEFAULT_KEY_TYPE","KeyAPI","gen","createKey","createGen","removeKey","rename","renameKey","was","overwrite","createRename","findKeyByName","createInfo","findLinks","createLinks","ObjectPatchAPI","createAddLink","appendData","newData","createAppendData","rmLink","createRmLink","setData","createSetData","ObjectAPI","createData","new","template","createNew","linkLength","NumLinks","BlockSize","LinksSize","DataSize","CumulativeSize","patch","numObjects","repoSize","repoPath","storageMax","repoVersion","RepoAPI","gc","mfsRootCid","createGc","_checkInitialized","setApiAddr","apiAddr","getBandwidthStats","totalIn","totalOut","rateIn","rateOut","StatsAPI","bw","poll","timeoutId","createBw","objectSafeGet","defaultValue","unwrap","keyToMultihash","multihashStr","keyToCid","backends","keyFunction","blockCount","newKey","migration","migrate","revert","seed","PIN_DS_KEY","DEFAULT_FANOUT","MAX_ITEMS","EMPTY_KEY","cidToKey","PinSet","walkItems","pbh","rootData","hdrLength","vBytes","hdrSlice","idx","linkHash","loadSet","storeItems","storePins","pbHeader","headerBuf","fanoutLinks","rootLinks","bins","setUint32","encodedKey","fnv1a","bin","storeChild","binIdx","storeSet","pinsToDatastore","pinstore","pinRootBuf","pinRoot","pinCount","pinsToDAG","recursivePins","directPins","CONFIG_KEY","VERSION_KEY","findLevelJs","db","wrapStore","originalGet","originalHas","levelJs","req","transaction","oncomplete","getWithFallback","hasWithFallback","wrapBackends","keysToBinary","withEach","keysToStrings","datastores","backend","migrated","_deserializeKey","_deserializeValue","handleNext","handleEnd","err2","loop","onsuccess","Protocols","addrs","certifiedRecord","Address","CertifiedRecord","isCertified","_isCertified","Peer","peerRecordEnvelope","_pubKey","_peerRecordEnvelope","Envelope","payloadType","PeerRecord","AddressInfo","keyStr","metadataKey","envelope","emptyMigration","NonReversibleMigrationError","NotInitializedRepoError","RequiredParameterError","InvalidValueError","MissingRepoOptionsError","getVersion","versionCheck","configCheck","isRepoInitialized","setVersion","repoOptions","toVersion","ignoreLock","isDryRun","migrations","errors","currentVersion","verifyAvailableMigrations","repoLock","progressCallback","percent","lastSuccessfullyMigratedVersion","getLatestMigrationVersion","fromVersion","checkReversibility","migrationCounter","LockExistsError","NotFoundError","InvalidRepoVersionError","ERR_REPO_NOT_INITIALIZED","versionKey","configKey","specKey","apiFile","extractContents","isIdentity","lockFile","LOCKS","MemoryLock","locked","autoMigrate","onMigrationProgress","Spec","mounts","mountpoint","sync","shardFunc","compression","walkDag","childCid","QuickLRU","maxAge","POSITIVE_INFINITY","onEviction","oldCache","_size","_emitEvictions","_deleteIfExpired","expiry","_getOrDeleteIfExpired","_getItemValue","_peek","_set","_moveToRecent","deleted","resize","newSize","_entriesAscending","removeCount","oldCacheSize","entriesAscending","callbackFunction","thisArgument","PinManager","fetchCompleteDag","findChild","cidCacheMaxSize","invalidPinTypeErr","ensureNotPinned","markedSet","mfsSource","pinsSource","createMarkedSet","blockKeys","blocksCount","removedBlocksCount","removeBlock","b32","deleteUnmarkedBlocks","noLimit","Repo","closed","pinnedBlockstore","pairs","extracted","nextTick","setImmediate","createIdStore","expected","setQueue","configStore","encodedValue","_maybeDoSet","_saveAll","spec","deep","_config","_openRoot","Datastore","mounting","buildDatastoreSpec","_lockfile","_openLock","check","_isAutoMigrationEnabled","_migrate","_closeLock","lockfile","_storageMaxStat","_blockStat","getSize","autoMigrateConfig","reversedMigrationArray","lastSuccessfullyRevertedVersion","uint8Array","print","MessageCache","gossip","historyCapacity","msgIdToStrFn","msgs","history","notValidatedCount","messageId","validated","msgIdStr","originatingPeers","iwantCounts","observeDuplicate","msgId","fromPeerIdStr","getWithIWantCount","getGossipIDs","topics","msgIdsByTopic","msgIds","cacheEntry","FloodsubID","GossipsubIDv10","GossipsubIDv11","GossipsubMaxIHaveLength","shuffle","random","tmp","messageIdToString","SignaturePolicy","PublishConfigType","RejectReason","ValidateError","MessageStatus","rejectReasonFromAcceptance","acceptance","Ignore","Reject","ERR_INVALID_PEER_SCORE_PARAMS","defaultPeerScoreParams","topicScoreCap","appSpecificScore","appSpecificWeight","IPColocationFactorWeight","IPColocationFactorThreshold","IPColocationFactorWhitelist","behaviourPenaltyWeight","behaviourPenaltyThreshold","behaviourPenaltyDecay","decayInterval","decayToZero","retainScore","defaultTopicScoreParams","topicWeight","timeInMeshWeight","timeInMeshQuantum","timeInMeshCap","firstMessageDeliveriesWeight","firstMessageDeliveriesDecay","firstMessageDeliveriesCap","meshMessageDeliveriesWeight","meshMessageDeliveriesDecay","meshMessageDeliveriesCap","meshMessageDeliveriesThreshold","meshMessageDeliveriesWindow","meshMessageDeliveriesActivation","meshFailurePenaltyWeight","meshFailurePenaltyDecay","invalidMessageDeliveriesWeight","invalidMessageDeliveriesDecay","createPeerScoreParams","topicScoreParams","createTopicScoreParams","validateTopicScoreParams","defaultPeerScoreThresholds","gossipThreshold","publishThreshold","graylistThreshold","acceptPXThreshold","opportunisticGraftThreshold","createPeerScoreThresholds","computeScore","pstats","params","peerIPs","score","tstats","topicParams","topicScore","inMesh","p1","meshTime","p2","firstMessageDeliveries","meshMessageDeliveriesActive","meshMessageDeliveries","deficit","meshFailurePenalty","invalidMessageDeliveries","p5","knownIPs","peersInIP","numPeersInIP","surplus","behaviourPenalty","excess","DeliveryRecordStatus","MessageDeliveries","records","ensureRecord","drec","firstSeen","removeItemsFromSet","superSet","ineed","cond","subset","MapDef","getDefault","getOrDefault","PeerScore","scoreCache","deliveryRecords","validatePeerScoreParams","scoreCacheValidityMs","_backgroundInterval","setInterval","background","clearInterval","refreshScores","dumpPeerScoreStats","fromEntries","tparams","graftTime","removeIPsForPeer","scoreFnCalls","cacheUntil","scoreFnRuns","scoreCachedDelta","observe","abs","addPenalty","penalty","penaltyLabel","onScorePenalty","addPeer","addIP","removeIP","peersWithIP","removePeer","getPtopicStats","validateMessage","deliverMessage","markFirstMessageDelivery","valid","markDuplicateMessageDelivery","rejectInvalidMessage","markInvalidMessageDelivery","rejectMessage","Blacklisted","ignored","invalid","duplicateMessage","cap","validatedTime","deliveryDelayMs","isLateDelivery","onDuplicateMsgDelivery","ipsToRemove","ipToRemove","peerSet","topicStats","IWantTracer","gossipsubIWantFollowupMs","promises","requestMsByMsg","requestMsByMsgExpire","requestMsByMsgSize","addPromise","expireByPeer","iwantPromiseStarted","getBrokenPromises","brokenPromises","iwantPromiseBroken","trackMessage","iwantPromiseResolved","iwantPromiseResolvedFromDuplicate","iwantPromiseResolvedPeers","maxMs","iwantMessagePruned","requestMs","iwantPromiseDeliveryTime","SimpleTimeCache","validityMs","validUntilMs","MessageSource","InclusionReason","ChurnReason","ScorePenalty","IHaveIgnoreReason","ScoreThreshold","SignPrefix","msgIdFnStrictSign","sequenceNumber","msgIdFnStrictNoSign","computeScoreWeights","topicStrToLabel","byTopic","topicLabel","topicScores","p1w","p2w","p3w","p3bw","p4w","capF","ws","p5w","p6w","p7w","defaultEncoder","lengthLength","lengthBuf","encodeLength","lengthEncoder","ReadMode","defaultDecoder","dataLength","lengthDecoder","maxLengthLength","maxDataLength","dataLengthLength","onLength","DATA","onData","fromReader","varByteSource","OutboundStream","rawStream","errCallback","pushable","closeController","maxBufferSize","returnOnAbort","readableLength","InboundStream","defaultDecodeRpcLimits","maxSubscriptions","maxMessages","maxIhaveMessageIDs","maxIwantMessageIDs","maxControlMessages","maxPeerInfos","decodeRpc","decodeSubOpts","decodeControlMessage","decodeControlIHave","decodeControlIWant","decodeControlGraft","decodeControlPrune","decodePeerInfo","Protocol","GossipStatusCode","GossipSub","components","multicodecs","streamsInbound","streamsOutbound","outboundInflightQueue","floodsubPeers","acceptFromWhitelist","mesh","fanoutLastpub","peerhave","iasked","outbound","topicValidators","heartbeatTicks","directPeerInitial","heartbeatTimer","runHeartbeat","timer","heartbeatDuration","startTimer","heartbeat","heartbeatTimeout","msToNextHeartbeat","heartbeatInterval","hearbeatStartMs","heartbeatSkipped","fallbackToFloodsub","floodPublish","doPX","directPeers","D","Dlo","Dhi","Dscore","Dout","Dlazy","fanoutTTL","mcacheLength","mcacheGossip","seenTTL","prunePeers","pruneBackoff","graftFloodThreshold","opportunisticGraftPeers","opportunisticGraftTicks","directConnectTicks","scoreParams","scoreThresholds","decodeRpcLimits","globalSignaturePolicy","debugName","seenCache","publishedMessageIds","msgIdFn","fastMsgIdFn","fastMsgIdCache","mcache","messageCache","dataTransform","metricsRegister","metricsTopicStrToLabel","maxMeshMessageDeliveriesWindowMs","topicParam","protocolsEnabled","gauge","help","labelNames","topicSubscriptionStatus","topicPeersCount","meshPeerCounts","meshPeerInclusionEvents","meshPeerChurnEvents","peersPerProtocol","histogram","buckets","asyncValidationResult","asyncValidationMcacheHit","rpcRecvBytes","rpcRecvCount","rpcRecvSubscription","rpcRecvMessage","rpcRecvControl","rpcRecvIHave","rpcRecvIWant","rpcRecvGraft","rpcRecvPrune","rpcRecvNotAccepted","rpcSentBytes","rpcSentCount","rpcSentSubscription","rpcSentMessage","rpcSentControl","rpcSentIHave","rpcSentIWant","rpcSentGraft","rpcSentPrune","msgPublishCount","msgPublishPeers","msgPublishPeersByGroup","msgPublishBytes","msgForwardCount","msgForwardPeers","msgReceivedPreValidation","msgReceivedStatus","msgReceivedInvalid","duplicateMsgDeliveryDelay","maxMeshMessageDeliveriesWindowSec","duplicateMsgLateDelivery","duplicateMsgIgnored","peersByScoreThreshold","avgMinMax","scoreWeights","scorePerMesh","scoringPenalties","ihaveRcvIgnored","ihaveRcvMsgids","ihaveRcvNotSeenMsgids","iwantRcvMsgids","iwantRcvDonthaveMsgids","gossipPromiseExpireSec","cacheSize","mcacheSize","mcacheNotValidatedCount","fastMsgIdCacheCollision","newConnectionCount","toTopic","topicStr","onJoin","onLeave","onAddToMesh","onRemoveFromMesh","onReportValidationMcacheHit","hit","onReportValidation","onIhaveRcv","idonthave","onIwantRcv","iwantByTopic","iwantDonthave","onForwardMsg","tosendCount","onPublishMsg","tosendGroupCount","dataLen","peerGroup","floodsub","onMsgRecvPreValidation","onMsgRecvResult","onMsgRecvInvalid","onPublishDuplicateMsg","onRpcRecv","rpcBytes","onRpcSent","registerScores","scores","graylist","registerScoreWeights","sw","wsTopic","registerScorePerMesh","scoreByPeer","peersPerTopicLabel","peersInMesh","meshScores","getMetrics","addCollect","onScrapeMetrics","gossipTracer","allowedTopics","getPeers","publishConfig","signaturePolicy","Signing","author","Anonymous","getPublishConfigFromPeerId","createOutboundStream","addressBook","registrar","onIncomingStream","onPeerConnected","onPeerDisconnected","registrarTopologyIds","connect","outboundStream","inboundStream","direction","remoteAddr","createInboundStream","newStream","maxOutboundBufferSize","sendSubscriptions","priorInboundStream","maxInboundDataLength","pipePeerReadStream","currentIP","multiaddrToIPStr","Dc","getMeshPeers","peersInTopic","getSubscribers","getTopics","awaitRpcHandler","handleReceivedRpc","handlePeerReadStreamError","acceptFrom","subOpt","handleReceivedSubscription","dispatchEvent","detail","handleReceivedMessagePromise","handleReceivedMessage","awaitRpcMessageHandler","handleControlMessage","topicSet","rpcMsg","validationResult","validateReceivedMessage","duplicate","asyncValidation","emitSelf","propagationSource","forwardMessage","fastMsgIdStr","msgIdCached","SignaturePresent","SeqnoPresent","FromPresent","InvalidSeqno","InvalidSignature","InvalidPeerId","fromPeerId","rpcMsgPreSign","marshalPublicKey","validateToRawMessage","inboundTransform","TransformFailed","topicValidator","errCode","Accept","getScore","toPeer","sendRpc","controlMsg","handleIHave","handleIWant","handleGraft","handlePrune","messagesAccepted","acceptUntil","LowScore","MaxIhave","MaxIasked","iask","iwantList","GraftBackoff","floodCutoff","addBackoff","Subscribed","makePrune","Unsub","doAddBackoff","pxConnect","applyIwantPenalties","BrokenPromise","clearBackoff","toconnect","pi","openAndCertify","eid","consumePeerRecord","connectionManager","openConnection","getTopologies","wasSubscribed","leave","toAdd","fanoutPeers","Fanout","fanoutCount","getRandomGossipPeers","Random","sendGraft","meshPeers","sendPrune","selectPeersToForward","excludePeers","tosend","selectPeersToPublish","newFanoutPeers","rawMsg","transformedData","outboundTransform","originalData","buildRawMessage","ignoreDuplicatePublishError","recipients","willSendToSelf","allowPublishToZeroPeers","reportMessageValidationResult","rejectReason","ctrl","piggybackControl","piggybackGossip","outRpc","tograft","toprune","noPX","pruning","emitGossip","peersToGossipByTopic","gossipIDsByTopic","peersToGossip","doEmitGossip","candidateToGossip","factor","peerMessageIDs","pushGossip","controlIHaveMsgs","xid","px","getRawEnvelope","directConnect","candidateMeshPeers","shuffledPeers","peerStreams","prunePeer","graftPeer","BadScore","newMeshPeers","removeFirstNItemsFromSet","NotEnough","peersArray","rotate","Excess","Outbound","peersList","medianIndex","medianScore","Opportunistic","lastpb","topicPeers","candidateFanoutPeers","sendGraftPrune","backoffSize","peerIdStrs","swPeer","swPeerTopic","swTopic","computeAllPeersScoreWeights","gossipsub","init","routers","DEFAULT_PROTOCOL","DEFAULT_HOST","DEFAULT_PORT","errorHandler","KEBAB_REGEX","kebabCase","Client","agent","apiPath","Agent","keepAlive","maxSockets","normalizeOptions","toUrlSearchParams","mtimeNsecs","urlSearchParams","Keys","ProvideBufLen","BlocksReceived","DataReceived","BlocksSent","DataSent","DupBlksReceived","DupDataReceived","toCoreInterface","arrayBuffer","abortSignal","Key","Size","createBlock","createBootstrap","createApply","profile","OldCfg","updated","NewCfg","objectToCamel","caps","camelObj","createProfiles","createGetAll","createReplace","createSet","encodeParam","profiles","getBlock","Cid","PinErrorMsg","RemPath","createDag","mapEvent","ID","messageType","messageName","closer","Responses","Addrs","multiaddrs","providers","Extra","createFindPeer","createFindProvs","createProvide","cidArr","createQuery","createDht","findProvs","createCmds","createNet","createSys","createDiag","cmds","sys","sourceArr","objectToCamelWithMetadata","long","Entries","WithLocality","streamChannels","createLevel","Strings","createTail","createLog","createPubsub","createName","dataEncoding","dagPut","dLink","createPatch","createObject","Pins","decodePin","Status","encodeService","encodeQuery","encodeAddParams","origins","client","encodeEndpoint","decodeRemoteService","endpoint","ApiEndpoint","decodeStat","Pinning","Pinned","Queued","Failed","PinCount","queued","pinning","failed","RemoteServices","createService","createRemote","createPin","rpcToText","rpcToBytes","base64url","rpcToBigInt","textToUrlSafeRpc","strings","createPeers","createSubscribe","subsTracker","handler","fail","ffWorkaround","onMessage","onEnd","onError","topicIDs","isAbortError","readMessages","createUnsubscribe","SubscriptionTracker","_subs","topicSubs","unsubs","subscriptionTracker","argsArr","NumObjects","RepoSize","RepoPath","Version","StorageMax","TotalIn","TotalOut","RateIn","RateOut","createStats","createAddrs","createConnect","createDisconnect","createLocalAddrs","Addr","muxer","Muxer","latency","Latency","streams","Streams","Direction","createSwarm","disconnect","localAddrs","progressFn","createProgressHandler","createOnUploadProgress","loaded","createCommands","createGetEndpointConfig","mapLink","typeOf","Mode","Mtime","MtimeNsecs","Objects","createMount","createPing","MemoryDatastore","storeAddresses","uniquePeers","requirePeers","DefaultPeerRouting","refreshManagerInit","refreshManager","_findClosestPeersTask","setDelayedInterval","bootDelay","getClosestPeers","clearDelayedInterval","ERR_NO_ROUTERS_AVAILABLE","ERR_FIND_SELF","router","NOT_FOUND","CompoundContentRouting","NOT_STARTED_YET","DHT_NOT_STARTED","nVals","gotValues","defaultAddressFilter","DefaultAddressManager","listen","announce","observed","announceFilter","getListenAddrs","getAnnounceAddrs","getObservedAddrs","confirmObservedAddr","removeObservedAddr","addObservedAddr","getAddresses","transportManager","getAddrs","addrSet","VisibilityChangeEmitter","visibilityChange","_initializeVisibilityVarNames","_addVisibilityChangeListener","mozHidden","msHidden","webkitHidden","_handleVisibilityChange","isVisible","visible","LatencyMonitor","latencyCheckIntervalMs","dataEmitIntervalMs","asyncTestFn","latencyRandomPercentage","latencyCheckMultiply","latencyCheckSubtract","hrtime","getDeltaMS","startTime","performance","latencyData","initLatencyData","visibilityChangeEmitter","evt","pageInFocus","_startTimers","_emitSummary","_stopTimers","checkLatencyID","checkLatency","emitIntervalID","unref","summary","getSummary","events","minMs","avgMs","totalMs","lengthMs","randomness","localData","deltaOffset","ceil","deltaMS","NEGATIVE_INFINITY","mapIterable","PeerMap","PeerSet","predicate","intersection","difference","union","PeerList","findIndex","peerIds","getPeerAddress","ERR_INVALID_MULTIADDR","maxConnections","minConnections","maxEventLoopDelay","pollInterval","autoDialInterval","inboundConnectionThreshold","maxIncomingPendingConnections","DefaultConnectionManager","ERR_INVALID_PARAMETERS","connections","latencyMonitor","startupReconnectTimeout","dialTimeout","allow","deny","inboundConnectionRateLimiter","RateLimiterMemory","points","duration","incomingPendingConnections","registerMetricGroup","calculate","metric","inbound","conns","allStreams","counts","_onLatencyMeasure","upgrader","keepAlivePeers","getTags","connectOnStartupController","_close","connectionList","_onConnect","storedConns","numConnections","toPrune","_checkMaxLimit","storedConn","peerIdOrMultiaddr","existingConnections","dialer","peerConnections","trackedConnection","_pruneConnections","peerValues","sortedConnections","peerAValue","peerBValue","connectionALifespan","timeline","connectionBLifespan","toClose","maConn","afterUpgradeInbound","AutoDialler","running","_autoDial","autoDialTimeout","retimer","allPeers","CircuitRelay","__StatusValues","__TypeValues","writeDefaults","srcPeer","dstPeer","RELAY_CODEC","writeResponse","streamHandler","STATUS","validateAddrs","HOP","HOP_DST_MULTIADDR_INVALID","STOP_DST_MULTIADDR_INVALID","HOP_SRC_MULTIADDR_INVALID","STOP_SRC_MULTIADDR_INVALID","handshake","sourcePromise","sinkErr","sinkPromise","StreamHandler","maxLength","shake","handleHop","hopRequest","circuit","hopEnabled","HOP_CANT_SPEAK_RELAY","destinationPeer","destinationConnections","hopActive","HOP_NO_CONN_TO_DST","stopRequest","STOP","destinationStream","SUCCESS","sourceStream","_init","_started","_onProtocol","hop","MALFORMED_MESSAGE","virtualConnection","CAN_HOP","canHop","handleCanHop","handleStop","localAddr","upgradeInbound","relayAddr","destinationAddr","relayId","destinationId","ERR_RELAYED_DIAL","relayPeer","disconnectOnFailure","relayConnection","ERR_HOP_REQUEST_FAILED","addressManager","upgradeOutbound","createListener","listeningAddrs","listener","relayPeerStr","relayPeerId","relayConn","relayedAddr","namespaceToCid","HOP_METADATA_KEY","HOP_METADATA_VALUE","RELAY_RENDEZVOUS_NS","AutoRelay","addressSorter","maxListeners","listenRelays","_onProtocolChange","supportsHop","metadataBook","setValue","_addListenRelay","_removeListenRelay","remoteAddrs","_listenOnAvailableHopRelays","peersToIgnore","knownHopsToDial","_tryToListenOnRelay","Relay","autoRelay","_advertiseService","advertise","pki","forge","privates","CMS","dek","ERR_KEYCHAIN_REQUIRED","plain","getPrivateKey","cached","decryptRsaPrivateKey","certificate","rsa","setPublicKey","cert","createCertificate","serialNumber","notBefore","notAfter","setFullYear","getFullYear","attrs","shortName","setSubject","setIssuer","setExtensions","cA","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","email","objsign","sslCA","emailCA","objCA","certificateForKey","p7","pkcs7","createEnvelopedData","addRecipient","createBuffer","encrypt","der","asn1","toDer","toAsn1","getBytes","cmsData","cms","fromDer","messageFromAsn1","ERR_INVALID_CMS","issuer","recipient","keyId","asyncCompare","findAsync","findKeyById","missingKeys","ERR_MISSING_KEYS","ERR_NO_KEY","decrypt","infoPrefix","NIST","keyLength","iterationCount","salt","validateKeyName","randomDelay","delay","DsName","DsInfoName","KeyChain","dsname","importPeer","saltLength","ERR_INVALID_KEY_NAME","ERR_INVALID_KEY_TYPE","ERR_KEY_ALREADY_EXISTS","ERR_INVALID_KEY_SIZE","keyInfo","keypair","generateKeyPair","kid","ERR_KEY_NOT_FOUND","ERR_OLD_KEY_NAME_INVALID","ERR_NEW_KEY_NAME_INVALID","oldDsname","newDsname","oldInfoName","newInfoName","ERR_PASSWORD_REQUIRED","ERR_PEM_REQUIRED","ERR_CANNOT_READ_KEY","ERR_MISSING_PRIVATE_KEY","oldPass","newPass","ERR_INVALID_OLD_PASS_TYPE","ERR_INVALID_NEW_PASS_TYPE","ERR_INVALID_PASS_LENGTH","oldDek","newDek","keyAsPEM","DefaultTransportManager","transports","listeners","faultTolerance","FATAL_ALL","ERR_INVALID_KEY","ERR_DUPLICATE_TRANSPORT","transportForMultiaddr","ERR_TRANSPORT_UNAVAILABLE","ERR_TRANSPORT_DIAL_FAILED","getTransports","of","couldNotListen","supportedAddrs","isFulfilled","NO_FATAL","ERR_NO_VALID_ADDRESSES","MAX_PROTOCOL_LENGTH","NewLine","readString","shakeStream","ConnectionImpl","getStreams","_newStream","_getStreams","_closing","addStream","removeStream","DefaultRegistrar","topologies","handlers","_onDisconnect","getProtocols","getHandler","ERR_NO_HANDLER_FOR_PROTOCOL","ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED","protoBook","protocolList","setRegistrar","peerProtocols","oldProtocols","countStreams","streamCount","DefaultUpgrader","connectionEncryption","encrypter","muxers","inboundUpgradeTimeout","acceptIncomingConnection","ERR_CONNECTION_DENIED","encryptedConn","upgradedConn","muxerFactory","cryptoProtocol","abortableStream","connectionGater","denyInboundConnection","ERR_CONNECTION_INTERCEPTED","trackMultiaddrConnection","protectedConn","skipProtection","protector","connectionProtector","protect","skipEncryption","_encryptInbound","denyInboundEncryptedConnection","remotePeerId","multiplexed","_multiplexInbound","denyInboundUpgradedConnection","_createConnection","denyOutboundConnection","_encryptOutbound","denyOutboundEncryptedConnection","ERR_INVALID_PEER","_multiplexOutbound","denyOutboundUpgradedConnection","createStreamMuxer","muxedStream","incomingLimit","findIncomingStreamLimit","trackProtocolStream","_onStream","ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS","onStreamEnd","ERR_MUXER_UNAVAILABLE","outgoingLimit","findOutgoingStreamLimit","ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS","ERR_UNSUPPORTED_PROTOCOL","_timeline","Proxy","Reflect","upgraded","errConnectionNotMultiplexed","ERR_CONNECTION_NOT_MULTIPLEXED","multiplexer","encryption","secureInbound","ERR_ENCRYPTION_FAILED","secureOutbound","Identify","listenAddrs","observedAddr","AGENT_VERSION","IdentifyService","identifyProtocolStr","protocolPrefix","identifyPushProtocolStr","identify","pushToPeerStore","_handleIdentify","_handlePush","maxPushIncomingStreams","maxPushOutgoingStreams","pushes","maxIdentifyMessageSize","ERR_CONNECTION_ENDED","ERR_INVALID_MESSAGE","_identify","ERR_MISSING_PUBLIC_KEY","cleanObservedAddr","getCleanMultiaddr","DOMAIN","peerData","peerRecord","seal","msgWithLenPrefix","FetchRequest","FetchResponse","identifier","StatusCode","__StatusCodeValues","OK","FetchService","lookupFunctions","handleMessage","errmsg","lookup","_getLookupFunction","ERROR","registerLookupFunction","unregisterLookupFunction","PingService","ERR_WRONG_PING_ACK","DEFAULT_TTL","highPort","NatManager","externalAddress","localAddress","gateway","afterStart","_start","_getClient","publicIp","externalIp","isPrivate","publicPort","localPort","upnpNat","PeerRecordUpdater","DHTPeerRouting","EVENT_NAME","allowAll","PeerStoreAddressBook","addressFilter","updatedPeer","createFromProtobuf","storedEnvelope","storedRecord","filterMultiaddrs","patchOrCreate","oldMultiaddrs","hasPeer","mergeOrCreate","PeerStoreKeyBook","updatedKey","oldPublicKey","PeerStoreMetadataBook","oldMetadata","existingValue","PeerStoreProtoBook","protocolSet","NAMESPACE_COMMON","PersistentStore","_peerIdToDatastoreKey","b32key","toCID","addressSet","_patch","save","_merge","addrStr","base32Str","Tags","Tag","PersistentPeerStore","providedValue","getValue","unexpiredTags","DHTContentRouting","DefaultComponents","_addressManager","_peerStore","_upgrader","_metrics","_registrar","_connectionManager","_transportManager","_connectionGater","_contentRouting","_peerRouting","peerRouting","_connectionProtector","_pubsub","_dialer","startable","beforeStart","beforeStop","afterStop","DefaultConfig","noAnnounce","autoDial","maxParallelDials","maxDialsPerPeer","dnsaddr","nat","relay","active","ping","DummyDHT","wan","DHT_DISABLED","lan","DummyPubSub","PUBSUB_DISABLED","ERR_PUBSUB_DISABLED","DialRequest","dialAction","tokens","getTokens","ERR_NO_DIAL_TOKENS","tokenHolder","dialAbortControllers","completedDials","any","releaseToken","ERR_ALREADY_SUCCEEDED","DefaultDialer","maxAddrsToDial","pendingDials","pendingDialTargets","pendingTarget","ERR_DIALED_SELF","denyDialPeer","ERR_PEER_DIAL_INTERCEPTED","controllerId","randomId","dialTarget","_createDialTarget","pendingDial","_createPendingDial","ERR_TIMEOUT","_loadAddresses","ERR_TOO_MANY_ADDRESSES","peerIdMultiaddr","addressPeerId","denyDialMultiaddr","isTruthy","dialRequest","ERR_ALREADY_ABORTED","run","resolvedMultiaddrs","_resolveRecord","nm","newM","Libp2pNode","filterMultiaddrForPeer","services","configureComponent","streamMuxers","keychainOpts","generateOptions","identifyService","peerRouters","onDiscoveryPeer","contentRouters","fetchService","pingService","peerDiscovery","component","ERR_INVALID_PROTOCOLS_FOR_STREAM","getMultiaddrs","closeConnections","peerInfo","peerKey","ERR_INVALID_RECORD","ERR_DISCOVERED_SELF","createLibp2pNode","keyChain","exportPeerId","resultingOptions","ERR_TRANSPORTS_REQUIRED","CONN_ENCRYPTION_REQUIRED","LIBP2P_FORCE_PNET","ERR_PROTECTOR_REQUIRED","validateConfig","PROVIDER_KEY_PREFIX","K","ALPHA","QUERY_SELF_INTERVAL","QUERY_SELF_TIMEOUT","TABLE_REFRESH_INTERVAL","TABLE_REFRESH_QUERY_TIMEOUT","DEFAULT_QUERY_TIMEOUT","PK_PREFIX","removePrivateAddresses","removePublicAddresses","convertBuffer","convertPeerId","bufferToRecordKey","createPutRecord","timeReceived","RoutingTable","kBucketSize","pingTimeout","pingConcurrency","tagName","tagValue","updatePingQueueSizeMetric","pingQueueSize","pingQueue","pingRunning","pending","addListener","_onPing","routingTableSize","registerMetric","kBuck","localNodeId","numberOfNodesPerKBucket","numberOfNodesToPing","kb","_tagPeers","kClosest","updatePeerTags","newClosest","closest","contact","addedPeers","removedPeers","tagPeer","unTagPeer","oldContacts","newContact","responded","oldContact","closestPeer","closestPeers","RoutingTableRefresh","routingTable","refreshInterval","refreshQueryTimeout","commonPrefixLengthRefreshedAt","refreshTable","refreshTimeoutId","prefixLength","_maxCommonPrefix","refreshCpls","_getTrackedCommonPrefixLengthsForRefresh","toISOString","lastRefresh","_refreshCommonPrefixLength","_numPeersForCpl","lastCpl","cpl","_generateRandomPeerId","maxCommonPrefix","dates","targetCommonPrefixLength","randomData","randomUint16","_makePeerId","localKadId","randomPrefix","localPrefix","keyPrefix","keyBuffer","keyView","setUint8","_prefixLengths","toIterable","distance","leadingZeros","Record","MessageType","__MessageTypeValues","ConnectionType","__ConnectionTypeValues","clusterLevelRaw","closerPeers","providerPeers","MESSAGE_TYPE","CONNECTION_TYPE","MESSAGE_TYPE_LOOKUP","clusterLevel","toPbPeer","PUT_VALUE","fromPbPeer","CONNECTED","sendingQueryEvent","fields","peerResponseEvent","finalPeerEvent","queryErrorEvent","providerEvent","valueEvent","dialingPeerEvent","_writeReadMessage","ContentFetching","validators","selectors","queryManager","rec","dsKey","vals","best","fixupRec","sentCorrection","sendRequest","putEvent","sendCorrectionRecord","localRec","getLocal","rtp","getValueOrPeers","ContentRouting","addProvider","ADD_PROVIDER","maybeNotifyPeer","sendEvent","toFind","provs","getProviders","GET_PROVIDERS","findProvidersQuery","newProviders","PeerDistanceList","originDhtKey","peerDistances","pd","dhtKey","el","dhtKeys","furthestDistance","keyDistance","PeerRouting","GET_VALUE","pkKey","_getValueSingle","recPeer","findPeerLocal","findPeerQuery","FIND_NODE","foundPeer","tablePeers","getCloserPeersQuery","_verifyRecordOnline","closerThan","ids","Providers","cleanupInterval","provideValidity","syncQueue","cleaner","_cleanup","deleteCount","parseProviderKey","readTime","delta","expired","makeProviderKey","cacheKey","loadProviders","_getProvidersMap","writeProviderEntry","throwOnTimeout","MAX_XOR","queryPath","startingPeer","ourPeerId","alpha","pathIndex","numPaths","cleanUp","queryFuncTimeout","peersSeen","kadId","queryPeer","peerKadId","peerXor","xor","compoundSignal","closerPeer","closerPeerKadId","deferred","cleanup","wasRunning","toGenerator","QueryManager","disjointPaths","controllers","queries","runningQueries","queryTime","queryFunc","stopQueryTimer","peersToQuery","AddProviderHandler","FindNodeHandler","getCloserPeersOffline","GetProvidersHandler","_getPeers","addrFilter","_getAddresses","GetValueHandler","isPublicKeyKey","idFromKey","fromPublicKeyKey","_checkLocalDatastore","rawRecord","PingHandler","PutValueHandler","recordKey","PING","desMessage","TopologyListener","registrarId","QuerySelf","queryTimeout","_querySelf","found","clientMode","querySelfInterval","providersInit","contentFetching","routingTableRefresh","topologyListener","querySelf","onPeerConnect","setMode","DualKadDHT","getMode","queriedPeers","foundValue","dhts","refreshRoutingTable","KadDHT","_WebRTCDirect","P2PWebRTCStar","P2PWebRTCDirect","candidate","_discoverBootstrapPeers","tagTTL","isArrayBuffer","socket","readyState","handleOpen","handleErr","closeOnEnd","wasClean","connectedSource","binaryType","isConnected","connError","cont","onOpen","highWaterMark","remoteAddress","remotePort","CONNECTING","OPEN","terminate","https","websocket","getDOMException","errorMessage","DOMException","getAbortedReason","socketToMaConn","milliseconds","fallback","customTimers","cancelablePromise","timeoutError","pTimeout","_connect","cOpts","errorPromise","errfn","rawSocket","testMa","pbStream","lpReader","W","readLP","readPB","writeLP","writePB","pb","piped","NOISE_MSG_MAX_LENGTH_BYTES","DUMP_SESSION_KEYS","stablelib","hashSHA256","getHKDF","ck","ikm","okm","expand","generateX25519KeyPair","x25519","secretKey","generateX25519KeyPairFromSeed","generateX25519SharedKey","chaCha20Poly1305Encrypt","plaintext","nonce","ad","chaCha20Poly1305Decrypt","ciphertext","uint16BEEncode","uint16BEDecode","NoiseExtensions","NoiseHandshakePayload","getPayload","localPeer","staticPublicKey","extensions","signedPayload","signPayload","getHandshakePayload","libp2pPublicKey","identityKey","identitySig","webtransportCerthashes","createHandshakePayload","getPeerIdFromPayload","decodePayload","verifySignedPayload","noiseStaticKey","payloadPeerId","generatedPayload","isValidPublicKey","pk","keyLogger","logLocalEphemeralKeys","logRemoteEphemeralKey","re","Nonce","increment","getUint64","assertValue","AbstractHandshake","encryptWithAd","cs","decryptWithAd","hasKey","isEmptyKey","createEmptyKey","emptyKey","encryptAndHash","ss","h","mixHash","encryptedMessage","decryptAndHash","dh","derivedU8","getHash","mixKey","tempK","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","tempk1","tempk2","cs1","cs2","writeMessageRegular","ne","readMessageRegular","XX","initializeInitiator","prologue","rs","psk","initializeResponder","writeMessageA","hs","writeMessageB","spk","writeMessageC","messageBuffer","readMessageA","readMessageB","valid1","valid2","readMessageC","initSession","initiator","mc","session","ephemeral","resultingBuffer","recvMessage","resultingPlaintext","resultingValid","XXHandshake","isInitiator","staticKeypair","remoteExtensions","xx","encode0","receivedMessageBuffer","decode0","decode1","decodedPayload","setRemoteNoiseExtension","encode1","encode2","decode2","getCS","getRemoteStaticKey","Noise","staticNoiseKey","prologueBytes","xxHandshakeSuccesses","registerCounter","xxHandshakeErrors","encryptedPackets","decryptedPackets","decryptErrors","registerMetrics","staticKeys","wrappedConnection","performHandshake","createSecureConnection","performXXHandshake","propose","exchange","secure","user","duplexPair","encryptStream","encrypted","decrypted","decryptStream","noise","concatArrays","keychainConfig","libp2pOptions","getPubsubRouter","availableRouters","libp2pDefaults","boostrapNodes","bootstrap","libp2pFinalConfig","webRtcStar","discovery","delegateHosts","delegateString","delegateAddr","delegateHttpClient","multibaseCodecs","ipld","multibases","blockCodecs","multihashHashers","multihashes","commands","dag","diag","files","getEndpointConfig","mount","refs","swarm","webSockets","getLibp2pOptions","Storage","isNew","repoAutoMigrate","inputRepo","loadRepo","configureRepo","allowNew","initRepo","initOptions","decodePeerId","initPeerId","peerIdToIdentity","PeerID","applyProfiles","Identity","DEK","rawPrivateKey","algorithm","PrivKey","changed","mergeConfigs","Keychain","changes","getTypeUrl","typeUrlPrefix","WantlistEntry","_sendEntries","connectAttempts","writeMessage","sentToPeer","TaskMerger","_disabled","BaseBlockstore","Bitswap","_sendHaveBlockNotifications","BlockStorage","missingBlocks","getFromBitswap","getFromChild","readAddrs","WEBSOCKET_STAR_PROTO_CODE","maId","SwarmAPI","mi","multiaddrOrPeerId","hangUp","verbose","basePacket","toDHTKey","notEnabled","storage","createIsOnline","mfsPreload","preloadMfs","nextRootCid","createMfsPreloader","startOnline","createStart","createStop","peerIdToFind","peerIdToQuery","asCid","isEnabled","createVersion","profileName","dryRun","oldCfg","newCfg","createConfig","storedPeer","packetCount","totalTime","average","notImplemented","silent","console","emptyRepo","isLoopbackAddr","objectToString","isError","errorMessages","isNetworkError","DEFAULT_BATCH_SIZE","DEFAULT_SERIALIZE","yieldAfter","drain","FixedFIFO","top","btm","hwm","FIFO","splitLimit","calculateSize","prev","_pushable","getNext","onNext","bufferNext","bufferError","queueMicrotask","throw","onEmpty","throwIfAborted","CodeError","byteStream","readBuffer","abortPromise","originalStream","defaultLengthDecoder","lpStream","lengthBuffer","decodeLength","maybeYield","MAX_LENGTH_LENGTH","MAX_DATA_LENGTH","CustomEvent","Event","parallel","emitter","EventTarget","ops","sourceErr","slotAvailable","resultAvailable","sourceFinished","opErred","valuesAvailable","yieldOrderedValues","yieldUnOrderedValues","syncSources","lp","pushableV","bl","take","CLOSING","CLOSED"],"sourceRoot":""}