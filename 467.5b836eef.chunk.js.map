{"version":3,"file":"467.5b836eef.chunk.js","mappings":"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","sources":["webpack://cyb/webpack/runtime/chunk loaded","webpack://cyb/webpack/runtime/create fake namespace object","webpack://cyb/webpack/runtime/startup chunk dependencies","webpack://cyb/./src/services/ipfs/utils/cid.ts","webpack://cyb/./src/services/ipfs/config.ts","webpack://cyb/./src/services/ipfs/node/impl/kubo.ts","webpack://cyb/./src/services/ipfs/node/impl/helia.ts","webpack://cyb/./src/services/ipfs/node/impl/configs/jsIpfsConfig.ts","webpack://cyb/./src/services/ipfs/node/impl/js-ipfs.ts","webpack://cyb/./src/services/ipfs/utils/stream.ts","webpack://cyb/./src/services/ipfs/utils/content.ts","webpack://cyb/./src/db.js","webpack://cyb/./src/services/ipfs/utils/ipfsCacheDb.ts","webpack://cyb/./src/services/ipfs/utils/cluster.ts","webpack://cyb/./src/services/ipfs/utils/utils-ipfs.ts","webpack://cyb/./src/services/ipfs/node/factory.ts","webpack://cyb/./src/services/ipfs/node/mixins/withCybFeatures.ts","webpack://cyb/./src/services/QueueManager/QueueStrategy.ts","webpack://cyb/./src/services/QueueManager/QueueItemTimeoutError.ts","webpack://cyb/./src/services/QueueManager/QueueManager.ts","webpack://cyb/./src/utils/helpers.ts","webpack://cyb/./src/services/CozoDb/types.ts","webpack://cyb/./src/services/backend/channels/BroadcastChannel.ts","webpack://cyb/./src/utils/async/iterable.ts","webpack://cyb/./src/services/CozoDb/mapping.ts","webpack://cyb/./src/services/backend/workers/background/importers/ipfs.ts","webpack://cyb/./src/services/backend/workers/background/importers/transactions.ts","webpack://cyb/./src/services/backend/workers/serializers.ts","webpack://cyb/./src/services/backend/workers/factoryMethods.ts","webpack://cyb/./src/services/backend/workers/background/worker.ts","webpack://cyb/./src/services/backend/workers/background/importers/links.ts","webpack://cyb/webpack/bootstrap","webpack://cyb/webpack/runtime/compat get default export","webpack://cyb/webpack/runtime/define property getters","webpack://cyb/webpack/runtime/ensure chunk","webpack://cyb/webpack/runtime/get javascript chunk filename","webpack://cyb/webpack/runtime/get mini-css chunk filename","webpack://cyb/webpack/runtime/global","webpack://cyb/webpack/runtime/hasOwnProperty shorthand","webpack://cyb/webpack/runtime/make namespace object","webpack://cyb/webpack/runtime/publicPath","webpack://cyb/webpack/runtime/importScripts chunk loading","webpack://cyb/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([164,393,937,972].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import { CID } from 'multiformats/cid';\n\nexport const stringToCid = (s: string) => CID.parse(s);\nexport const stringToIpfsPath = (s: string) => `/ipfs/${s}`;\n","import { IPFSNodes, IpfsOptsType } from './ipfs.d';\n\nexport const CYBER_NODE_SWARM_PEER_ID =\n  'QmUgmRxoLtGERot7Y6G7UyF6fwvnusQZfGR15PuE6pY3aB';\n\nexport const CYBERNODE_SWARM_ADDR_WSS = `/dns4/swarm.io.cybernode.ai/tcp/443/wss/p2p/${CYBER_NODE_SWARM_PEER_ID}`;\nexport const CYBERNODE_SWARM_ADDR_TCP = `/ip4/88.99.105.146/tcp/4001/p2p/${CYBER_NODE_SWARM_PEER_ID}`;\n\nexport const IPFS_CLUSTER_URL = 'https://io.cybernode.ai';\n\nexport const CYBER_GATEWAY_URL = 'https://gateway.ipfs.cybernode.ai';\n\nexport const FILE_SIZE_DOWNLOAD = 20 * 10 ** 6;\n\nexport const getIpfsOpts = () => {\n  let ipfsOpts: IpfsOptsType = {\n    ipfsNodeType: IPFSNodes.HELIA,\n    urlOpts: '/ip4/127.0.0.1/tcp/5001', // default url\n    userGateway: 'http://127.0.0.1:8080',\n  };\n\n  // get type ipfs\n  const lsTypeIpfs = localStorage.getItem('ipfsState');\n  if (lsTypeIpfs !== null) {\n    const lsTypeIpfsData = JSON.parse(lsTypeIpfs);\n    ipfsOpts = { ...ipfsOpts, ...lsTypeIpfsData };\n  }\n\n  localStorage.setItem('ipfsState', JSON.stringify(ipfsOpts));\n\n  return ipfsOpts as IpfsOptsType;\n};\n","import { IPFSHTTPClient, create as createKuboClient } from 'kubo-rpc-client';\nimport { multiaddr } from '@multiformats/multiaddr';\n\nimport { stringToCid, stringToIpfsPath } from '../../utils/cid';\nimport {\n  AbortOptions,\n  CatOptions,\n  IpfsNodeType,\n  InitOptions,\n  IpfsFileStats,\n  IpfsNode,\n  IpfsNodePrperties,\n} from '../../ipfs';\nimport { CYBER_GATEWAY_URL } from '../../config';\n\nclass KuboNode implements IpfsNode {\n  readonly nodeType: IpfsNodeType = 'external';\n\n  private node?: IPFSHTTPClient;\n\n  private _config: IpfsNodePrperties = {};\n\n  get config() {\n    return this._config;\n  }\n\n  private _isStarted: boolean = false;\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  private async initConfig() {\n    const response = await this.node!.config.get('Addresses.Gateway');\n    if (!response) {\n      return { gatewayUrl: CYBER_GATEWAY_URL };\n    }\n    const address = multiaddr(response as string).nodeAddress();\n\n    return { gatewayUrl: `http://${address.address}:${address.port}` };\n  }\n\n  async init(options?: InitOptions) {\n    this.node = createKuboClient(options);\n    this._config = await this.initConfig();\n\n    if (typeof window !== 'undefined') {\n      window.node = this.node;\n      window.toCid = stringToCid;\n    }\n    console.log(\n      'IPFS - Kubo addrs',\n      (await this.node.swarm.localAddrs()).map((a) => a.toString())\n    );\n    this._isStarted = true;\n  }\n\n  async stat(cid: string, options: AbortOptions = {}): Promise<IpfsFileStats> {\n    return this.node!.files.stat(stringToIpfsPath(cid), {\n      ...options,\n      withLocal: true,\n      size: true,\n    }).then((result) => {\n      const { type, size, sizeLocal, local, blocks } = result;\n      return {\n        type,\n        size: size || -1,\n        sizeLocal: sizeLocal || -1,\n        blocks,\n      };\n    });\n  }\n\n  cat(cid: string, options: CatOptions = {}) {\n    return this.node!.cat(stringToCid(cid), options);\n  }\n\n  async add(content: File | string, options: AbortOptions = {}) {\n    return (await this.node!.add(content, options)).cid.toString();\n  }\n\n  async pin(cid: string, options: AbortOptions = {}) {\n    return (await this.node!.pin.add(stringToCid(cid), options)).toString();\n  }\n\n  async getPeers() {\n    return (await this.node!.swarm.peers()).map((c) => c.peer.toString());\n  }\n\n  async stop() {}\n  async start() {}\n\n  async connectPeer(address: string) {\n    const addr = multiaddr(address);\n    await this.node!.bootstrap.add(addr);\n\n    await this.node!.swarm.connect(addr);\n    return true;\n  }\n\n  ls() {\n    return this.node!.pin.ls();\n  }\n\n  async info() {\n    const { repoSize } = await this.node!.stats.repo();\n\n    const responseId = await this.node!.id();\n    const { agentVersion, id } = responseId;\n    return { id: id.toString(), agentVersion, repoSize };\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport default KuboNode;\n","import { Helia, Pin, createHelia } from 'helia';\nimport { IDBBlockstore } from 'blockstore-idb';\nimport { IDBDatastore } from 'datastore-idb';\nimport { Libp2p, createLibp2p } from 'libp2p';\nimport { noise } from '@chainsafe/libp2p-noise';\nimport { yamux } from '@chainsafe/libp2p-yamux';\n// import { mplex } from '@libp2p/mplex';\n\nimport { circuitRelayTransport } from 'libp2p/circuit-relay';\nimport { UnixFS, unixfs, AddOptions } from '@helia/unixfs';\nimport { bootstrap } from '@libp2p/bootstrap';\nimport { webRTC, webRTCDirect } from '@libp2p/webrtc';\nimport { webSockets } from '@libp2p/websockets';\nimport { webTransport } from '@libp2p/webtransport';\nimport { identifyService } from 'libp2p/identify';\nimport { multiaddr, protocols } from '@multiformats/multiaddr';\n\nimport {\n  AbortOptions,\n  CatOptions,\n  IpfsNodeType,\n  IpfsFileStats,\n  IpfsNode,\n  IpfsNodePrperties,\n} from '../../ipfs';\n// import { all } from '@libp2p/websockets/filters';\nimport { stringToCid } from '../../utils/cid';\nimport { LsResult } from 'ipfs-core-types/src/pin';\nimport { CYBER_GATEWAY_URL } from '../../config';\n\nconst libp2pFactory = async (\n  datastore: IDBDatastore,\n  bootstrapList: string[] = []\n) => {\n  const libp2p = await createLibp2p({\n    datastore,\n    // addresses: {\n    //   listen: [\n    //     '/ip4/127.0.0.1/tcp/0',\n    //     '/dns4/swarm.io.cybernode.ai/tcp/443/wss/p2p/QmUgmRxoLtGERot7Y6G7UyF6fwvnusQZfGR15PuE6pY3aB',\n    //   ],\n    // },\n    transports: [\n      webSockets(),\n      webTransport(),\n      webRTC({\n        rtcConfiguration: {\n          iceServers: [\n            {\n              urls: [\n                'stun:stun.l.google.com:19302',\n                'stun:global.stun.twilio.com:3478',\n                'STUN:freestun.net:3479',\n                'STUN:stun.bernardoprovenzano.net:3478',\n                'STUN:stun.aa.net.uk:3478',\n              ],\n            },\n            {\n              credential: 'free',\n              username: 'free',\n              urls: ['TURN:freestun.net:3479', 'TURNS:freestun.net:5350'],\n            },\n          ],\n        },\n      }),\n      webRTCDirect(),\n      circuitRelayTransport({\n        discoverRelays: 1,\n      }),\n    ],\n    connectionEncryption: [noise()],\n    streamMuxers: [yamux()],\n    connectionGater: {\n      denyDialMultiaddr: () => {\n        return false;\n        // by default we refuse to dial local addresses from the browser since they\n        // are usually sent by remote peers broadcasting undialable multiaddrs but\n        // here we are explicitly connecting to a local node so do not deny dialing\n        // any discovered address\n      },\n    },\n    peerDiscovery: [\n      bootstrap({\n        list: bootstrapList,\n      }),\n    ],\n    services: {\n      identify: identifyService(),\n    },\n  });\n  return libp2p;\n};\n\nconst addOptionsV0: Partial<AddOptions> = {\n  cidVersion: 0,\n  rawLeaves: false,\n};\n\nclass HeliaNode implements IpfsNode {\n  readonly nodeType: IpfsNodeType = 'helia';\n\n  get config() {\n    return { gatewayUrl: CYBER_GATEWAY_URL };\n  }\n\n  private _isStarted: boolean = false;\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  private node?: Helia;\n\n  private fs?: UnixFS;\n\n  async init() {\n    const blockstore = new IDBBlockstore('helia-bs');\n    await blockstore.open();\n\n    const datastore = new IDBDatastore('helia-ds');\n    await datastore.open();\n\n    const bootstrapList = [\n      '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n      '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n      '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n      '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n      '/dns4/swarm.io.cybernode.ai/tcp/443/wss/p2p/QmUgmRxoLtGERot7Y6G7UyF6fwvnusQZfGR15PuE6pY3aB',\n    ];\n    const libp2p = await libp2pFactory(datastore, bootstrapList);\n\n    this.node = await createHelia({ blockstore, datastore, libp2p });\n\n    this.fs = unixfs(this.node);\n\n    if (typeof window !== 'undefined') {\n      window.libp2p = libp2p;\n      window.node = this.node;\n      window.fs = this.fs;\n      window.toCid = stringToCid;\n    }\n\n    // DEBUG\n    libp2p.addEventListener('peer:connect', (evt) => {\n      const peerId = evt.detail.toString();\n      const conn = libp2p.getConnections(peerId) || [];\n      const transportsByAddr = Object.fromEntries(\n        conn.map((c) => [\n          c.remoteAddr.toString(),\n          c.remoteAddr.protoCodes().map((v) => protocols(v)?.name),\n        ])\n      );\n      console.debug(`Connected to ${peerId}`, transportsByAddr);\n\n      // console.log(\n      //   '---------ppppp',\n      //   peerId,\n      //   conn,\n      //   conn?.remoteAddr.protoCodes().map((v) => protocols(v)?.name)\n      // ); //.includes(WEBRTC_CODE)\n      // if (conn && conn.stat) {\n      //   const transport = conn.stat.transport; // This might vary based on libp2p version\n      //   console.log(`Connected to ${peerId} using transport ${transport}`);\n      // } else {\n      //   console.log(`Connected to ${peerId}`);\n      // }\n    });\n    libp2p.addEventListener('peer:disconnect', (evt) => {\n      console.debug(`Disconnected from ${evt.detail.toString()}`);\n    });\n    console.log(\n      'IPFS - Helia addrs',\n      libp2p.getMultiaddrs().map((a) => a.toString())\n    );\n    // const webrtcConn = await libp2p.dial(\n    //   multiaddr(\n    //     '/ip4/127.0.0.1/udp/4001/quic-v1/webtransport/certhash/uEiDHumbyZRFV1Av7qH9-2l5HGgU2a2UqM6eloqO0vYz5pQ/certhash/uEiDD_TuVgih5_ua31Z4MVbNq7WSw095UAQmZqdUFMDTVRA/p2p/12D3KooWEYGfgK4dEY3spfuDKVq6Jpiyj4KxP1r6HS5RFp5WHebz'\n    //   )\n    // );\n    // console.log('----webrtcConn', webrtcConn);\n\n    this._isStarted = true;\n  }\n\n  async stat(cid: string, options: AbortOptions = {}): Promise<IpfsFileStats> {\n    return this.fs!.stat(stringToCid(cid), options).then((result) => {\n      const { type, fileSize, localFileSize, blocks, dagSize, mtime } = result;\n      return {\n        type,\n        size: fileSize || -1,\n        sizeLocal: localFileSize || -1,\n        blocks,\n      };\n    });\n  }\n\n  cat(cid: string, options: CatOptions = {}) {\n    return this.fs!.cat(stringToCid(cid), options);\n  }\n\n  async add(content: File | string, options: AbortOptions = {}) {\n    // Options to keep CID in V0 format 'Qm....';\n    const optionsV0 = {\n      ...options,\n      ...addOptionsV0,\n    } as Partial<AddOptions>;\n\n    let cid;\n\n    if (content instanceof File) {\n      const fileName = content.name;\n      const arrayBuffer = await content.arrayBuffer();\n      const data = new Uint8Array(arrayBuffer);\n      cid = await this.fs!.addFile(\n        { path: fileName, content: data },\n        optionsV0\n      );\n    } else {\n      const data = new TextEncoder().encode(content);\n      cid = await this.fs!.addBytes(data, optionsV0);\n    }\n    console.log('----added to helia', cid.toString());\n    this.pin(cid.toString(), options);\n    return cid.toString();\n  }\n\n  async pin(cid: string, options: AbortOptions = {}) {\n    const cid_ = stringToCid(cid);\n    const isPinned = await this.node?.pins.isPinned(cid_, options);\n    if (!isPinned) {\n      const pinResult = (\n        await this.node?.pins.add(cid_, options)\n      )?.cid.toString();\n      // console.log('------pin', pinResult);\n    }\n    // console.log('------pinned', cid, isPinned);\n    return undefined;\n  }\n\n  async getPeers() {\n    return this.node!.libp2p!.getConnections().map((c) =>\n      c.remotePeer.toString()\n    );\n  }\n\n  async stop() {\n    await this.node?.stop();\n  }\n\n  async start() {\n    await this.node?.start();\n  }\n\n  async connectPeer(address: string) {\n    const conn = await this.node!.libp2p!.dial(multiaddr(address));\n    return true;\n  }\n\n  private async *mapToLsResult(\n    iterable: AsyncIterable<Pin>\n  ): AsyncIterable<LsResult> {\n    for await (const item of iterable) {\n      const { cid, metadata } = item;\n      yield { cid: cid.toV0(), metadata, type: 'recursive' };\n    }\n  }\n  ls() {\n    const result = this.mapToLsResult(this.node!.pins.ls());\n    return result;\n  }\n\n  async info() {\n    const id = this.node!.libp2p.peerId.toString();\n    const agentVersion = this.node!.libp2p!.services!.identify!.host!\n      .agentVersion as string;\n    return { id, agentVersion, repoSize: -1 };\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport default HeliaNode;\n","// eslint-disable-next-line import/no-unresolved\nimport { webSockets } from '@libp2p/websockets';\nimport * as filters from '@libp2p/websockets/filters';\nimport { Options } from 'ipfs-core/dist/src/types';\n\nconst configIpfs = (): Options => ({\n  start: true,\n  repo: 'ipfs-repo-cyber-v2',\n  relay: {\n    enabled: false,\n    hop: {\n      enabled: false,\n    },\n  },\n  preload: {\n    enabled: false,\n  },\n  config: {\n    API: {\n      HTTPHeaders: {\n        'Access-Control-Allow-Methods': ['PUT', 'POST'],\n        'Access-Control-Allow-Origin': [\n          'http://localhost:3000',\n          'http://127.0.0.1:5001',\n          'http://127.0.0.1:8888',\n          'http://localhost:8888',\n        ],\n      },\n    },\n    Addresses: {\n      Gateway: '/ip4/127.0.0.1/tcp/8080',\n      Swarm: [\n        // '/dns4/ws-star.discovery.cybernode.ai/tcp/443/wss/p2p-webrtc-star',\n        // '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n        // '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n      ],\n      Delegates: [\n        // '/dns4/node0.delegate.ipfs.io/tcp/443/https',\n        // '/dns4/node1.delegate.ipfs.io/tcp/443/https',\n        // '/dns4/node2.delegate.ipfs.io/tcp/443/https',\n      ],\n    },\n    Discovery: {\n      MDNS: {\n        Enabled: true,\n        Interval: 10,\n      },\n      webRTCStar: {\n        Enabled: false,\n      },\n    },\n    Bootstrap: [\n      // '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n      // '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n      // '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n      // '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n      // '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n      // '/dns4/ws-star.discovery.cybernode.ai/tcp/4430/wss/p2p/QmUgmRxoLtGERot7Y6G7UyF6fwvnusQZfGR15PuE6pY3aB',\n    ],\n    Pubsub: {\n      Enabled: false,\n    },\n    Swarm: {\n      ConnMgr: {\n        HighWater: 300,\n        LowWater: 50,\n      },\n      DisableNatPortMap: false,\n    },\n    Routing: {\n      Type: 'dhtclient',\n    },\n  },\n  libp2p: {\n    transports: [\n      // This is added for local demo!\n      // In a production environment the default filter should be used\n      // where only DNS + WSS addresses will be dialed by websockets in the browser.\n      webSockets({\n        filter: filters.dnsWss,\n      }),\n    ],\n    nat: {\n      enabled: false,\n    },\n  },\n  EXPERIMENTAL: {\n    ipnsPubsub: false,\n  },\n});\n\nexport default configIpfs;\n","import {\n  AbortOptions,\n  CatOptions,\n  IpfsNodeType,\n  IpfsFileStats,\n  IpfsNode,\n  IpfsNodePrperties,\n} from '../../ipfs';\nimport { create as createJsIpfsClient, IPFS } from 'ipfs-core';\nimport { stringToCid, stringToIpfsPath } from '../../utils/cid';\nimport { multiaddr } from '@multiformats/multiaddr';\n\nimport configIpfs from './configs/jsIpfsConfig';\nimport { CYBER_GATEWAY_URL } from '../../config';\n\nclass JsIpfsNode implements IpfsNode {\n  readonly nodeType: IpfsNodeType = 'embedded';\n\n  get config() {\n    return { gatewayUrl: CYBER_GATEWAY_URL };\n  }\n\n  private _isStarted: boolean = false;\n\n  get isStarted() {\n    return this._isStarted;\n  }\n\n  private node?: IPFS;\n\n  async init() {\n    this.node = await createJsIpfsClient(configIpfs());\n    if (typeof window !== 'undefined') {\n      window.node = this.node;\n      window.toCid = stringToCid;\n    }\n\n    this._isStarted = true;\n  }\n\n  async stat(cid: string, options: AbortOptions = {}): Promise<IpfsFileStats> {\n    return this.node!.files.stat(stringToIpfsPath(cid), {\n      ...options,\n      withLocal: true,\n      size: true,\n    }).then((result) => {\n      const { type, size, sizeLocal, local, blocks } = result;\n      return {\n        type,\n        size: size || -1,\n        sizeLocal: sizeLocal || -1,\n        blocks,\n      };\n    });\n  }\n\n  cat(cid: string, options: CatOptions = {}) {\n    return this.node!.cat(stringToCid(cid), options);\n  }\n\n  async add(content: File | string, options: AbortOptions = {}) {\n    return (await this.node!.add(content, options)).cid.toString();\n  }\n\n  async pin(cid: string, options: AbortOptions = {}) {\n    return (await this.node!.pin.add(stringToCid(cid), options)).toString();\n  }\n\n  async getPeers() {\n    return (await this.node!.swarm.peers()).map((c) => c.peer.toString());\n  }\n\n  async stop() {}\n  async start() {}\n\n  async connectPeer(address: string) {\n    const addr = multiaddr(address);\n    await this.node!.bootstrap.add(addr);\n\n    await this.node!.swarm.connect(addr);\n    return true;\n  }\n\n  ls() {\n    return this.node!.pin.ls();\n  }\n\n  async info() {\n    const response = await this.node!.stats.repo();\n    const repoSize = Number(response.repoSize);\n\n    const responseId = await this.node!.id();\n    const { agentVersion, id } = responseId;\n    return { id: id.toString(), agentVersion, repoSize };\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport default JsIpfsNode;\n","/* eslint-disable valid-jsdoc */\n/* eslint-disable import/no-unused-modules */\nimport { fileTypeFromBuffer } from 'file-type';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { Uint8ArrayLike } from '../ipfs';\n\ntype ResultWithMime = {\n  result: Uint8ArrayLike;\n  mime: string | undefined;\n  firstChunk: Uint8Array | undefined;\n};\n\ntype StreamDoneCallback = (\n  chunks: Array<Uint8Array>,\n  mime: string | undefined\n) => Promise<void> | void;\n\n// interface AsyncIterableWithReturn<T> extends AsyncIterable<T> {\n//   return?: (value?: unknown) => Promise<IteratorResult<T>>;\n// }\n\nexport const getMimeFromUint8Array = async (\n  raw: Uint8Array | undefined\n): Promise<string | undefined> => {\n  if (!raw) {\n    return 'unknown';\n  }\n  // TODO: try to pass only first N-bytes\n  const fileType = await fileTypeFromBuffer(raw);\n\n  return fileType?.mime || 'text/plain';\n};\n\nexport async function toAsyncIterableWithMime(\n  stream: ReadableStream<Uint8Array>,\n  flush?: StreamDoneCallback\n): Promise<ResultWithMime> {\n  const [firstChunkStream, fullStream] = stream.tee();\n  const chunks: Array<Uint8Array> = []; // accumulate all the data to pim/save\n\n  // Read the first chunk from the stream\n  const firstReader = firstChunkStream.getReader();\n  const { value } = await firstReader.read();\n  const mime = value ? await getMimeFromUint8Array(value) : undefined;\n\n  const restReader = fullStream.getReader();\n\n  const asyncIterable: AsyncIterable<Uint8Array> = {\n    async *[Symbol.asyncIterator]() {\n      while (true) {\n        const { done, value } = await restReader.read();\n        if (done) {\n          flush && flush(chunks, mime);\n          return; // Exit the loop when done\n        }\n        flush && chunks.push(value);\n        yield value; // Yield the value to the consumer\n      }\n    },\n  };\n\n  return { mime, result: asyncIterable, firstChunk: value };\n}\n\nexport async function toReadableStreamWithMime(\n  stream: ReadableStream<Uint8Array>,\n  flush?: StreamDoneCallback\n): Promise<ResultWithMime> {\n  const [firstChunkStream, fullStream] = stream.tee();\n  const chunks: Array<Uint8Array> = []; // accumulate all the data to pim/save\n\n  // Read the first chunk from the stream\n  const firstReader = firstChunkStream.getReader();\n  const { value } = await firstReader.read();\n  const mime = value ? await getMimeFromUint8Array(value) : undefined;\n\n  const modifiedStream = new ReadableStream<Uint8Array>({\n    async pull(controller) {\n      const restReader = fullStream.getReader();\n      const { done, value } = await restReader.read();\n      if (done) {\n        controller.close();\n        flush && flush(chunks, mime);\n      } else {\n        controller.enqueue(value);\n        flush && chunks.push(value);\n      }\n      restReader.releaseLock();\n    },\n    cancel() {\n      firstChunkStream.cancel();\n      fullStream.cancel();\n    },\n  });\n\n  return { mime, result: modifiedStream, firstChunk: value };\n}\n\nexport type onProgressCallback = (progress: number) => void;\n\nexport const getResponseResult = async (\n  response: Uint8ArrayLike,\n  onProgress?: onProgressCallback\n) => {\n  let bytesDownloaded = 0;\n  try {\n    if (response instanceof Uint8Array) {\n      onProgress && onProgress(response.byteLength);\n      return response;\n    }\n    const chunks: Array<Uint8Array> = [];\n\n    if (response instanceof ReadableStream) {\n      const reader = response.getReader();\n\n      const readStream = async ({\n        done,\n        value,\n      }: ReadableStreamReadResult<Uint8Array>): Promise<Uint8Array> => {\n        if (done) {\n          return uint8ArrayConcat(chunks);\n        }\n\n        chunks.push(value!);\n        bytesDownloaded += value!.byteLength;\n        onProgress && onProgress(bytesDownloaded);\n        return reader.read().then(readStream);\n      };\n\n      const readArray: Uint8Array = await reader.read().then(readStream);\n\n      return readArray;\n    }\n\n    const reader = response[Symbol.asyncIterator]();\n\n    // if (cid === 'QmRqms6Utkk6L4mtyLQXY2spcQ8Pk7fBBTNjvxa9jTNrXp') {\n    //   debugger;\n    // }\n    // eslint-disable-next-line no-restricted-syntax\n    for await (const chunk of reader) {\n      if (chunk instanceof Uint8Array) {\n        chunks.push(chunk);\n        bytesDownloaded += chunk.byteLength;\n        onProgress && onProgress(bytesDownloaded);\n      }\n    }\n    const result = uint8ArrayConcat(chunks);\n    return result;\n  } catch (error) {\n    console.error(\n      `Error reading stream/iterable.\\r\\n Probably Hot reload error!`,\n      error\n    );\n\n    return undefined;\n  }\n};\n","import { toString as uint8ArrayToAsciiString } from 'uint8arrays/to-string';\nimport isSvg from 'is-svg';\nimport { IPFSContentDetails, IPFSContentMaybe, IpfsContentType } from '../ipfs';\nimport { getResponseResult, onProgressCallback } from './stream';\n\n// TODO: fix to get working inside web worker, REFACTOR\n// import { PATTERN_HTTP, PATTERN_IPFS_HASH } from '../config';\nconst PATTERN_IPFS_HASH = /^Qm[a-zA-Z0-9]{44}$/g;\nconst PATTERN_HTTP = /^https:\\/\\/|^http:\\/\\//g;\n\nfunction createObjectURL(rawData: Uint8Array, type: string) {\n  const blob = new Blob([rawData], { type });\n  return URL.createObjectURL(blob);\n}\n\nfunction createImgData(rawData: Uint8Array, type: string) {\n  const imgBase64 = uint8ArrayToAsciiString(rawData, 'base64');\n  const file = `data:${type};base64,${imgBase64}`;\n  return file;\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport const detectContentType = (\n  mime: string | undefined\n): IpfsContentType => {\n  if (mime) {\n    if (mime.includes('video')) {\n      return 'video';\n    }\n\n    if (mime.includes('audio')) {\n      return 'audio';\n    }\n  }\n  return 'other';\n};\n\nconst basic = /\\s?<!doctype html>|(<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>)+/i;\n\nfunction isHtml(string) {\n  const newString = string.trim().slice(0, 1000);\n  return basic.test(newString);\n}\n\nfunction shortenString(string: string, length = 300) {\n  return string.length > length ? `${string.slice(0, length)}...` : string;\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport const chunksToBlob = (\n  chunks: Array<Uint8Array>,\n  mime: string | undefined\n) => new Blob(chunks, mime ? { type: mime } : {});\n\n// eslint-disable-next-line import/no-unused-modules, import/prefer-default-export\nexport const parseArrayLikeToDetails = async (\n  content: IPFSContentMaybe,\n  // rawDataResponse: Uint8ArrayLike | undefined,\n  // mime: string | undefined,\n  cid: string,\n  onProgress?: onProgressCallback\n): Promise<IPFSContentDetails> => {\n  try {\n    // console.log('------parseArrayLikeToDetails', cid, content);\n    const mime = content?.meta?.mime;\n    const response: IPFSContentDetails = {\n      link: `/ipfs/${cid}`,\n      gateway: false,\n      cid,\n    };\n    const initialType = detectContentType(mime);\n    if (['video', 'audio'].indexOf(initialType) > -1) {\n      return { ...response, type: initialType };\n    }\n\n    const rawData = content?.result\n      ? await getResponseResult(content.result, onProgress)\n      : undefined;\n\n    // console.log(rawData);\n\n    if (!mime) {\n      response.text = `Can't detect MIME for ${cid.toString()}`;\n      response.gateway = true; // ???\n    } else if (\n      mime.indexOf('text/plain') !== -1 ||\n      mime.indexOf('application/xml') !== -1\n    ) {\n      if (isSvg(Buffer.from(rawData))) {\n        response.type = 'image';\n        response.content = createImgData(rawData, 'image/svg+xml'); // file\n      } else {\n        const dataBase64 = uint8ArrayToAsciiString(rawData);\n        // TODO: search can bel longer for 42???!\n        // also cover ipns links\n        response.link =\n          dataBase64.length > 42 ? `/ipfs/${cid}` : `/search/${dataBase64}`;\n\n        if (dataBase64.match(PATTERN_IPFS_HASH)) {\n          response.gateway = true;\n          response.type = 'other';\n          response.content = dataBase64;\n          response.link = `/ipfs/${cid}`;\n        } else if (dataBase64.match(PATTERN_HTTP)) {\n          response.type = 'link';\n          response.gateway = false;\n          response.content = dataBase64;\n          response.link = `/ipfs/${cid}`;\n        } else if (isHtml(dataBase64)) {\n          response.type = 'other';\n          response.gateway = true;\n          response.content = cid.toString();\n        } else {\n          response.type = 'text';\n          response.content = dataBase64;\n          response.text = shortenString(dataBase64);\n        }\n      }\n    } else if (mime.indexOf('image') !== -1) {\n      response.content = createImgData(rawData, mime); // file\n      response.type = 'image';\n      response.gateway = false;\n    } else if (mime.indexOf('application/pdf') !== -1) {\n      response.type = 'pdf';\n      response.content = createObjectURL(rawData, mime); // file\n      response.gateway = true; // ???\n    }\n\n    return response;\n  } catch (e) {\n    console.log('----parseRawIpfsData', e, cid);\n    return undefined;\n  }\n};\n\nexport const contentToUint8Array = async (\n  content: File | string\n): Promise<Uint8Array> => {\n  return new Uint8Array(\n    typeof content === 'string'\n      ? Buffer.from(content)\n      : await content.arrayBuffer()\n  );\n};\n\nexport const createTextPreview = (\n  array: Uint8Array | undefined,\n  mime?: string,\n  previewLength = 150\n) => {\n  return array && mime && mime === 'text/plain'\n    ? uint8ArrayToAsciiString(array).slice(0, previewLength)\n    : undefined;\n};\n","import Dexie from 'dexie';\n\nconst db = new Dexie('cyber-page-cash');\ndb.version(3).stores({\n  cid: 'cid',\n  following: 'cid',\n});\n\nexport default db;\n","import db from 'src/db';\n\nconst ipfsCacheDb = () => {\n  const add = async (cid: string, raw: Uint8Array): Promise<void> => {\n    const dbValue = await db.table('cid').get({ cid });\n\n    if (!dbValue) {\n      const ipfsContentAddtToInddexdDB = {\n        cid,\n        data: raw,\n      };\n      db.table('cid').add(ipfsContentAddtToInddexdDB);\n    }\n  };\n\n  const get = async (cid: string): Promise<Uint8Array | undefined> => {\n    // TODO: use cursor\n    const dbValue = await db.table('cid').get({ cid });\n\n    // backward compatibility\n    return dbValue?.data || dbValue?.content;\n  };\n\n  return { add, get };\n};\n\nexport default ipfsCacheDb();\n","import {\n  AddResponse,\n  PinResponse,\n} from '@nftstorage/ipfs-cluster/dist/src/interface';\n\nimport { Cluster } from '@nftstorage/ipfs-cluster';\nimport { IPFS_CLUSTER_URL } from '../config';\n\nconst cyberCluster = () => {\n  const cluster = new Cluster(IPFS_CLUSTER_URL);\n\n  const add = async (\n    file: File | string\n  ): Promise<AddResponse | PinResponse | undefined> => {\n    const dataFile =\n      typeof file === 'string' ? new File([file], 'file.txt') : file;\n    return cluster.add(dataFile, { cidVersion: 0, rawLeaves: false });\n  };\n\n  const status = async (cid: string) => cluster.status(cid);\n  return { add, status };\n};\n\nexport default cyberCluster();\n","/* eslint-disable import/no-unused-modules */\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\n\nimport { Option } from 'src/types';\nimport {\n  // getIpfsUserGatewanAndNodeType,\n  IPFSContentMaybe,\n  IPFSContentMeta,\n  CallBackFuncStatus,\n  IpfsContentSource,\n  IpfsNode,\n} from '../ipfs';\n\nimport { getMimeFromUint8Array, toAsyncIterableWithMime } from './stream';\n\nimport ipfsCacheDb from './ipfsCacheDb';\nimport cyberCluster from './cluster';\n\nimport { contentToUint8Array, createTextPreview } from './content';\n\nimport {\n  // CYBERNODE_SWARM_ADDR_WSS,\n  // CYBERNODE_SWARM_ADDR_TCP,\n  // CYBER_NODE_SWARM_PEER_ID,\n  CYBER_GATEWAY_URL,\n  FILE_SIZE_DOWNLOAD,\n} from '../config';\n\n// import { convertTimeToMilliseconds } from '../helpers';\n// import { CYBER } from '../config';\n\n// TODO: fix to get working inside web worker, REFACTOR\n\n// Get IPFS node from local storage\n// TODO: refactor\n// const getIpfsUserGatewanAndNode = (): getIpfsUserGatewanAndNodeType => {\n//   const LS_IPFS_STATE = localStorage.getItem('ipfsState');\n\n//   if (LS_IPFS_STATE !== null) {\n//     const lsTypeIpfsData = JSON.parse(LS_IPFS_STATE);\n//     if (lsTypeIpfsData?.userGateway) {\n//       const { userGateway, ipfsNodeType } = lsTypeIpfsData;\n//       return { userGateway, ipfsNodeType };\n//     }\n//   }\n\n//   return { ipfsNodeType: undefined, userGateway: undefined };\n// };\n\n// Get data by CID from local storage\nconst loadIPFSContentFromDb = async (\n  cid: string\n): Promise<IPFSContentMaybe> => {\n  // TODO: enable, disabled for tests\n\n  // TODO: use cursor\n  const data = await ipfsCacheDb.get(cid);\n  if (data && data.length) {\n    // TODO: use cursor\n    const mime = await getMimeFromUint8Array(data);\n    const textPreview = createTextPreview(data, mime);\n\n    const meta: IPFSContentMeta = {\n      type: 'file', // `TODO: ipfs refactor dir support ?\n      size: data.length,\n      sizeLocal: data.length,\n      mime,\n    };\n    return { result: data, cid, meta, source: 'db', textPreview };\n  }\n\n  return undefined;\n};\n\nconst emptyMeta: IPFSContentMeta = {\n  type: 'file',\n  size: undefined,\n  local: undefined,\n  sizeLocal: undefined,\n};\n\nconst fetchIPFSContentMeta = async (\n  cid: string,\n  node?: IpfsNode,\n  signal?: AbortSignal\n): Promise<IPFSContentMeta> => {\n  if (node) {\n    const meta = await node.stat(cid, { signal });\n    return meta;\n  }\n  return emptyMeta;\n};\n\nconst fetchIPFSContentFromNode = async (\n  cid: string,\n  node?: IpfsNode,\n  controller?: AbortController\n): Promise<IPFSContentMaybe> => {\n  const controllerLegacy = controller || new AbortController();\n  const { signal } = controllerLegacy;\n  let timer: NodeJS.Timeout | undefined;\n\n  if (!node) {\n    console.log('--------fetchIPFSContentFromNode NO NODE INTIALIZED--------');\n    return undefined;\n  }\n\n  if (!controller) {\n    timer = setTimeout(() => {\n      controllerLegacy.abort();\n    }, 1000 * 60 * 1);\n  } // 1 min\n\n  // TODO: cover ipns case\n  try {\n    // const stat = await node.files.stat(path, { signal });\n    const startTime = Date.now();\n    const meta = await fetchIPFSContentMeta(cid, node, signal);\n    const statsDoneTime = Date.now();\n    meta.statsTime = statsDoneTime - startTime;\n    const allowedSize = meta.size < FILE_SIZE_DOWNLOAD;\n    timer && clearTimeout(timer);\n\n    switch (meta.type) {\n      case 'directory': {\n        // TODO: return directory structure\n        return { cid, availableDownload: true, source: 'node', meta };\n      }\n      default: {\n        // Get sample of content\n        const { value: firstChunk, done } = await node\n          .cat(cid, { signal, length: 2048, offset: 0 })\n          [Symbol.asyncIterator]()\n          .next();\n\n        const mime = await getMimeFromUint8Array(firstChunk);\n        const fullyDownloaded =\n          meta.size > -1 && firstChunk.length >= meta.size;\n\n        const textPreview = createTextPreview(firstChunk, mime);\n\n        // If all content fits in first chunk return byte-array instead iterable\n        const stream = fullyDownloaded\n          ? firstChunk\n          : allowedSize\n          ? node.cat(cid, { signal })\n          : undefined;\n\n        meta.catTime = Date.now() - statsDoneTime;\n\n        // TODO: add to db flag that content is pinned TO local node\n        // if already pinned skip pin\n        if (!meta.local && allowedSize) {\n          node.pin(cid);\n\n          meta.pinTime = Date.now() - meta.catTime;\n        } else {\n          meta.pinTime = -1;\n        }\n\n        return {\n          result: stream,\n          textPreview,\n          cid,\n          meta: { ...meta, mime },\n          source: 'node',\n        };\n        // }\n      }\n    }\n  } catch (error) {\n    console.log('error fetchIPFSContentFromNode', error);\n    return { cid, availableDownload: true, source: 'node', meta: emptyMeta };\n  }\n};\n\nconst fetchIPFSContentFromGateway = async (\n  cid: string,\n  node?: IpfsNode,\n  controller?: AbortController\n): Promise<IPFSContentMaybe> => {\n  // TODO: Should we use Cyber Gateway?\n  // const { userGateway } = getIpfsUserGatewanAndNode();\n\n  // fetch META only from external node(toooo slow), TODO: fetch meta from cybernode\n  const isExternalNode = node?.nodeType === 'external';\n  const meta = isExternalNode\n    ? await fetchIPFSContentMeta(cid, node, controller?.signal)\n    : emptyMeta;\n\n  const contentUrl = `${CYBER_GATEWAY_URL}/ipfs/${cid}`;\n  const response = await fetch(contentUrl, {\n    method: 'GET',\n    signal: controller?.signal,\n  });\n\n  if (response && response.body) {\n    // fetch doesn't provide any headers in our case :(\n\n    // const contentLength = parseInt(\n    //   response.headers['content-length'] || '-1',\n    //   10\n    // );\n    // const contentType = response.headers['content-type'];\n\n    // Extract meta if ipfs prob/node not started yet\n    // if (!meta.mime) {\n    //   meta = { ...meta, mime: contentType };\n    // }\n\n    // TODO: fix\n    const flushResults = (chunks: Uint8Array[]) =>\n      !isExternalNode\n        ? ipfsCacheDb.add(cid, uint8ArrayConcat(chunks))\n        : Promise.resolve();\n\n    const { mime, result, firstChunk } = await toAsyncIterableWithMime(\n      response.body,\n      flushResults\n    );\n\n    const textPreview = createTextPreview(firstChunk, mime);\n    return {\n      cid,\n      textPreview,\n      meta: { ...meta, mime },\n      result,\n      source: 'gateway',\n      contentUrl,\n    };\n  }\n\n  return undefined;\n};\n\ntype fetchContentOptions = {\n  controller?: AbortController;\n  node?: IpfsNode;\n};\n\nasync function fetchIpfsContent<T>(\n  cid: string,\n  source: IpfsContentSource,\n  options: fetchContentOptions\n): Promise<T | undefined> {\n  const { node, controller } = options;\n\n  try {\n    switch (source) {\n      case 'db':\n        return loadIPFSContentFromDb(cid) as T;\n      case 'node':\n        return fetchIPFSContentFromNode(cid, node, controller) as T;\n      case 'gateway':\n        return fetchIPFSContentFromGateway(cid, node, controller) as T;\n      default:\n        return undefined;\n    }\n  } catch (e) {\n    console.log('----fetchIpfsContent error', e);\n    return undefined;\n  }\n}\n\nconst getIPFSContent = async (\n  cid: string,\n  node?: IpfsNode,\n  controller?: AbortController,\n  callBackFuncStatus?: CallBackFuncStatus\n): Promise<IPFSContentMaybe> => {\n  const dataRsponseDb = await loadIPFSContentFromDb(cid);\n  if (dataRsponseDb !== undefined) {\n    return dataRsponseDb;\n  }\n\n  if (node) {\n    callBackFuncStatus && callBackFuncStatus('trying to get with a node');\n    // console.log('----Fetch from node', cid);\n    const ipfsContent = await fetchIPFSContentFromNode(cid, node, controller);\n\n    return ipfsContent;\n  }\n\n  callBackFuncStatus && callBackFuncStatus('trying to get with a gatway');\n  // console.log('----Fetch from gateway', cid);\n  const respnseGateway = await fetchIPFSContentFromGateway(\n    cid,\n    node,\n    controller\n  );\n\n  return respnseGateway;\n};\n\nconst catIPFSContentFromNode = (\n  cid: string,\n  node?: IpfsNode,\n  offset?: number,\n  controller?: AbortController\n): AsyncIterable<Uint8Array> | undefined => {\n  if (!node) {\n    console.log(\n      '--------fetchIPFSContentFromNode NO NODE INTIALIZED TODO: cover case--------'\n    );\n    return undefined;\n  }\n\n  // TODO: cover ipns case\n\n  return node.cat(cid, { offset, signal: controller?.signal });\n};\n\n// const nodeContentFindProvs = async (\n//   node: AppIPFS,\n//   cid: string,\n//   offset: number,\n//   controller?: AbortController\n// ): AsyncIterable<number> | undefined => {\n//   if (!node) {\n//     console.log(\n//       '--------fetchIPFSContentFromNode NO NODE INTIALIZED TODO: cover case--------'\n//     );\n//     return undefined;\n//   }\n\n//   // TODO: cover ipns case\n//   const path = `/ipfs/${cid}`;\n\n//   const providers = node.dht.findProvs(path, {\n//     signal: controller?.signal,\n//   });\n\n//   let count = 0;\n//   for await (const provider of providers) {\n//     //  console.log(provider.id.toString())\n//     //  id: PeerId\n//     // multiaddrs: Multiaddr[]\n//     // protocols: string[]\n//     count++;\n//   }\n\n//   return count;\n// };\n\nconst addContenToIpfs = async (\n  node: IpfsNode,\n  content: File | string\n): Promise<Option<string>> => {\n  let cid;\n  if (node) {\n    cid = await node.add(content);\n  }\n  // TODO: TMP solution make cluster call non-awaitable\n  cyberCluster.add(content);\n  // const pinResponse = await cyberCluster.add(content);\n  // cid = cid || pinResponse?.cid;\n\n  cid && (await ipfsCacheDb.add(cid, await contentToUint8Array(content)));\n  return cid;\n};\n\n// '/dns4/swarm.io.cybernode.ai/tcp/4001/p2p/QmUgmRxoLtGERot7Y6G7UyF6fwvnusQZfGR15PuE6pY3aB';\n\n// const connectToSwarm = async (node, address) => {\n//   const multiaddrSwarm = multiaddr(address);\n//   // console.log(`Connecting to swarm ${address}`, node);\n//   if (node.nodeType === 'helia') {\n//     // node.libp2p.bootstrap.add(multiaddrSwarm);\n//     node.libp2p.dial(multiaddrSwarm);\n//     return;\n//   }\n\n//   await node.bootstrap.add(multiaddrSwarm);\n\n//   node?.swarm\n//     .connect(multiaddrSwarm)\n//     .then((resp) => {\n//       console.log(`Welcome to swarm ${address} 🐝🐝🐝`);\n//       // node.swarm.peers().then((peers) => console.log('---peeers', peers));\n//     })\n//     .catch((err) => {\n//       console.log(\n//         'Error object properties:',\n//         Object.getOwnPropertyNames(err),\n//         err.stack,\n//         err.errors,\n//         err.message\n//       );\n//       console.log(`Can't connect to swarm ${address}: ${err.message}`);\n//     });\n// };\n\n// const connectToCyberSwarm = async (node: AppIPFS) => {\n//   const cyberNodeAddr =\n//     node.nodeType === 'embedded'\n//       ? CYBERNODE_SWARM_ADDR_WSS\n//       : CYBERNODE_SWARM_ADDR_TCP;\n//   await connectToSwarm(node, cyberNodeAddr);\n// };\n\n// const reconnectToCyberSwarm = async (node?: IpfsNode, lastCallTime: 0) => {\n//   if (!node) {\n//     return;\n//   }\n//   const isHelia = node.nodeType === 'helia';\n//   const cyberNodeAddr =\n//     node.nodeType !== 'external'\n//       ? CYBERNODE_SWARM_ADDR_WSS\n//       : CYBERNODE_SWARM_ADDR_TCP;\n\n//   const isSwarmConnected = isHelia\n//     ? node!.libp2p\n//         .getConnections()\n//         .find((c) => c.remotePeer.toString() === CYBER_NODE_SWARM_PEER_ID)\n//     : (await node!.swarm.peers()).find(\n//         (p) => p.peer.toString() === CYBER_NODE_SWARM_PEER_ID\n//       );\n\n//   // console.log('autoDialTime', await getNodeAutoDialInterval(node));\n//   // console.log('lastCallTime', lastCallTime, Date.now() - lastCallTime);\n\n//   // console.log('---isConnected', true, peers.length);\n\n//   if (!isSwarmConnected) {\n//     // TODO: refactor using timeout for node\n//     const needToReconnect =\n//       Date.now() - lastCallTime < (node.connMgrGracePeriod || 20);\n//     if (needToReconnect) {\n//       await connectToSwarm(node, cyberNodeAddr);\n//     }\n//   }\n// };\n\n// const DEFAULT_AUTO_DIAL_INTERVAL = 10000;\n// const GET_CONFIG_TIMEOUT = 3000;\n// TODO: REFACTOR\n// const getNodeAutoDialInterval = async (node: IpfsNode) => {\n//   try {\n//     const autoDialTime = convertTimeToMilliseconds(\n//       ((await node.config.get('Swarm.ConnMgr.GracePeriod', {\n//         timeout: GET_CONFIG_TIMEOUT,\n//       })) as string) || DEFAULT_AUTO_DIAL_INTERVAL\n//     );\n\n//     return autoDialTime;\n//   } catch {\n//     return DEFAULT_AUTO_DIAL_INTERVAL;\n//   }\n// };\n\n// const getIpfsGatewayUrl = async (node: IpfsNode, cid: string) => {\n//   if (node.nodeType !== 'external') {\n//     return `${CYBER_GATEWAY_URL}/ipfs/${cid}`;\n//   }\n\n//   const response = await node.config.get('Addresses.Gateway');\n//   const address = multiaddr(response).nodeAddress();\n\n//   try {\n//     return `http://${address.address}:${address.port}/ipfs/${cid}`;\n//   } catch (error) {\n//     return `${CYBER_GATEWAY_URL}/ipfs/${cid}`;\n//   }\n// };\n\nexport {\n  getIPFSContent,\n  catIPFSContentFromNode,\n  fetchIpfsContent,\n  addContenToIpfs,\n  // reconnectToCyberSwarm,\n  // getIpfsGatewayUrl,\n  // getNodeAutoDialInterval,\n};\n","// import { getNodeAutoDialInterval } from './utils-ipfs';\nimport { IpfsNodeType, IpfsNode, CybIpfsNode, IpfsOptsType } from '../ipfs';\nimport KuboNode from './impl/kubo';\nimport HeliaNode from './impl/helia';\nimport JsIpfsNode from './impl/js-ipfs';\n// import EnhancedIpfsNode from './node/enhancedNode';\nimport {\n  CYBERNODE_SWARM_ADDR_TCP,\n  CYBERNODE_SWARM_ADDR_WSS,\n  CYBER_NODE_SWARM_PEER_ID,\n} from '../config';\nimport { withCybFeatures } from './mixins/withCybFeatures';\n\nconst nodeClassMap: Record<IpfsNodeType, new () => IpfsNode> = {\n  helia: HeliaNode,\n  embedded: JsIpfsNode,\n  external: KuboNode,\n};\n\n// eslint-disable-next-line import/no-unused-modules, import/prefer-default-export\nexport async function initIpfsNode(\n  options: IpfsOptsType\n): Promise<CybIpfsNode> {\n  const { ipfsNodeType, ...restOptions } = options;\n\n  const swarmPeerId = CYBER_NODE_SWARM_PEER_ID;\n\n  const swarmPeerAddress =\n    ipfsNodeType === 'external'\n      ? CYBERNODE_SWARM_ADDR_TCP\n      : CYBERNODE_SWARM_ADDR_WSS;\n\n  const EnhancedClass = withCybFeatures(nodeClassMap[ipfsNodeType], {\n    swarmPeerId,\n    swarmPeerAddress,\n  });\n\n  const instance = new EnhancedClass();\n\n  await instance.init({ url: restOptions.urlOpts });\n  // TODO: REFACT\n  //   instance.connMgrGracePeriod = await getNodeAutoDialInterval(instance);\n  // window.ipfs = instance;\n\n  console.log('----init', ipfsNodeType);\n\n  await instance.reconnectToSwarm();\n  return instance;\n}\n","import { IpfsNode, CybIpfsNode, IpfsContentType } from '../../ipfs';\nimport { parseArrayLikeToDetails } from '../../utils/content';\nimport { addContenToIpfs, getIPFSContent } from '../../utils/utils-ipfs';\n\ntype WithCybFeaturesOptions = {\n  swarmPeerId: string;\n  swarmPeerAddress: string;\n};\n\nfunction withCybFeatures<TBase extends new (...args: any[]) => IpfsNode>(\n  Base: TBase,\n  options: WithCybFeaturesOptions\n) {\n  return class CybIpfsNodeMixin extends Base implements CybIpfsNode {\n    async fetchWithDetails(cid: string, parseAs?: IpfsContentType) {\n      const response = await getIPFSContent(cid, this);\n      const details = response?.result\n        ? await parseArrayLikeToDetails(response, cid)\n        : undefined;\n\n      return !parseAs\n        ? details\n        : details?.type === parseAs\n        ? details\n        : undefined;\n    }\n\n    async addContent(content: File | string) {\n      return addContenToIpfs(this, content);\n    }\n\n    async isConnectedToSwarm() {\n      return !!(await super.getPeers()).find(\n        (peerId) => peerId === options.swarmPeerId\n      );\n    }\n\n    async reconnectToSwarm(lastConnectedTimestamp?: number) {\n      if (!(await this.isConnectedToSwarm())) {\n        // TODO: refactor using timeout for node config\n\n        //   const needToReconnect =\n        //     Date.now() - lastConnectedTimestamp <\n        //     DEFAULT_CONNECTION_LIFETIME_SECONDS;\n        super\n          .connectPeer(options.swarmPeerAddress)\n          .then(() => {\n            console.log(`🐝 connected to swarm - ${options.swarmPeerAddress}`);\n            return true;\n          })\n          .catch((err) => {\n            console.log(\n              `Can't connect to swarm ${options.swarmPeerAddress}: ${err.message}`\n            );\n            return false;\n          });\n      }\n    }\n  };\n}\n\nexport { withCybFeatures };\n","import { IQueueStrategy, QueueSettings, QueueSource } from './QueueManager.d';\n\nexport class QueueStrategy implements IQueueStrategy {\n  settings: QueueSettings;\n\n  order: QueueSource[];\n\n  constructor(settings: QueueSettings, order: QueueSource[]) {\n    this.settings = settings;\n    this.order = order;\n  }\n\n  getNextSource(source: QueueSource): QueueSource | undefined {\n    const index = this.order.indexOf(source);\n    return index < this.order.length ? this.order[index + 1] : undefined;\n  }\n}\n","export class QueueItemTimeoutError extends Error {\n  constructor(timeoutMs: number) {\n    super(`Timeout after ${timeoutMs}`);\n    Object.setPrototypeOf(this, QueueItemTimeoutError.prototype);\n  }\n}\n","import {\n  BehaviorSubject,\n  map,\n  timeout,\n  throwError,\n  of,\n  catchError,\n  EMPTY,\n  Observable,\n  mergeMap,\n  debounceTime,\n  merge,\n  tap,\n  interval,\n  filter,\n} from 'rxjs';\n\nimport * as R from 'ramda';\n\nimport { fetchIpfsContent } from 'src/services/ipfs/utils/utils-ipfs';\nimport {\n  CybIpfsNode,\n  IPFSContentMaybe,\n  IpfsContentSource,\n} from 'src/services/ipfs/ipfs';\n\nimport { promiseToObservable } from '../../utils/helpers';\n\nimport type {\n  QueueItem,\n  QueueItemResult,\n  QueueItemCallback,\n  QueueItemOptions,\n  QueueStats,\n  QueueSource,\n  QueueItemAsyncResult,\n  QueueItemPostProcessor,\n} from './QueueManager.d';\n\nimport { QueueStrategy } from './QueueStrategy';\n\nimport { QueueItemTimeoutError } from './QueueItemTimeoutError';\nimport { BackendWorkerApi } from '../backend/workers/background/worker';\n// import { postProcessIpfContent } from './utils';\n\nconst QUEUE_DEBOUNCE_MS = 33;\nconst CONNECTION_KEEPER_RETRY_MS = 5000;\n\nfunction getQueueItemTotalPriority<T>(item: QueueItem<T>): number {\n  return (item.priority || 0) + (item.viewPortPriority || 0);\n}\n\nconst debugCid = (cid: string, prefix: string, ...args) => {\n  // if (cid === 'QmYNQJoKGNHTpPxCBPh9KkDpaExgd2duMa3aF6ytMpHdao') {\n  console.log(`>>> ${prefix}: ${cid}`, ...args);\n  // }\n};\n\nconst strategies = {\n  external: new QueueStrategy(\n    {\n      db: { timeout: 5000, maxConcurrentExecutions: 999 },\n      node: { timeout: 60 * 1000, maxConcurrentExecutions: 21 },\n      gateway: { timeout: 21000, maxConcurrentExecutions: 11 },\n    },\n    ['db', 'node', 'gateway']\n  ),\n  embedded: new QueueStrategy(\n    {\n      db: { timeout: 5000, maxConcurrentExecutions: 999 },\n      node: { timeout: 60 * 1000, maxConcurrentExecutions: 21 },\n      gateway: { timeout: 21000, maxConcurrentExecutions: 11 },\n    },\n    ['db', 'gateway', 'node']\n  ),\n  helia: new QueueStrategy(\n    {\n      db: { timeout: 5000, maxConcurrentExecutions: 999 },\n      node: { timeout: 60 * 1000, maxConcurrentExecutions: 21 },\n      gateway: { timeout: 21000, maxConcurrentExecutions: 11 },\n    },\n    ['db', 'node', 'gateway']\n  ),\n};\n\ntype QueueMap<T> = Map<string, QueueItem<T>>;\n\nclass QueueManager<T extends IPFSContentMaybe> {\n  private queue$ = new BehaviorSubject<QueueMap<T>>(new Map());\n\n  private node: CybIpfsNode | undefined = undefined;\n\n  private postProcessItem: QueueItemPostProcessor | undefined = undefined;\n\n  private strategy: QueueStrategy;\n\n  private queueDebounceMs: number;\n\n  private lastNodeCallTime: number = Date.now();\n\n  private executing: Record<QueueSource, Set<string>> = {\n    db: new Set(),\n    node: new Set(),\n    gateway: new Set(),\n  };\n\n  private switchStrategy(strategy: QueueStrategy): void {\n    this.strategy = strategy;\n  }\n\n  public setPostProcessor(func: QueueItemPostProcessor) {\n    this.postProcessItem = func;\n  }\n\n  public async setNode(node: CybIpfsNode, customStrategy?: QueueStrategy) {\n    // console.log(`switch node from ${this.node?.nodeType} to ${node.nodeType}`);\n\n    this.node = node;\n    this.switchStrategy(customStrategy || strategies[node.nodeType]);\n  }\n\n  private getItemBySourceAndPriority(queue: QueueMap<T>) {\n    const pendingItems = [...queue.values()].filter(\n      (i) => i.status === 'pending'\n    );\n\n    const pendingBySource = R.groupBy((i) => i.source, pendingItems);\n\n    const itemsToExecute: QueueItem<T>[] = [];\n    // eslint-disable-next-line no-loop-func, no-restricted-syntax\n    for (const [queueSource, items] of Object.entries(pendingBySource)) {\n      const settings = this.strategy.settings[queueSource as IpfsContentSource];\n\n      const executeCount =\n        settings.maxConcurrentExecutions -\n        this.executing[queueSource as IpfsContentSource].size;\n\n      const itemsByPriority = items\n        .sort(\n          (a, b) => getQueueItemTotalPriority(b) - getQueueItemTotalPriority(a)\n        )\n        .slice(0, executeCount);\n\n      itemsToExecute.push(...itemsByPriority);\n    }\n\n    return itemsToExecute;\n  }\n\n  private fetchData$(item: QueueItem<T>) {\n    const { cid, source, controller, callbacks } = item;\n    const settings = this.strategy.settings[source];\n    this.executing[source].add(cid);\n\n    const queueItem = this.queue$.value.get(cid);\n    // Mutate item without next\n    this.queue$.value.set(cid, {\n      ...queueItem,\n      status: 'executing',\n      executionTime: Date.now(),\n      controller: new AbortController(),\n    } as QueueItem<T>);\n    // debugCid(cid, 'fetchData', cid, source);\n    callbacks.map((callback) => callback(cid, 'executing', source));\n\n    return promiseToObservable(async () =>\n      fetchIpfsContent<T>(cid, source, {\n        controller,\n        node: this.node,\n      }).then((content: T) => {\n        // debugCid(cid, 'fetchData - fetchIpfsContent', cid, source, content);\n        return this.postProcessItem ? this?.postProcessItem(content) : content;\n      })\n    ).pipe(\n      timeout({\n        each: settings.timeout,\n        with: () =>\n          throwError(() => {\n            controller?.abort('timeout');\n            return new QueueItemTimeoutError(settings.timeout);\n          }),\n      }),\n      map(\n        (result): QueueItemResult<T> => ({\n          item,\n          status: result ? 'completed' : 'error',\n          source,\n          result,\n        })\n      ),\n      catchError((error): Observable<QueueItemResult<T>> => {\n        // debugCid(cid, 'fetchData - fetchIpfsContent catchErr', error);\n        if (error instanceof QueueItemTimeoutError) {\n          return of({\n            item,\n            status: 'timeout',\n            source,\n          });\n        }\n\n        if (error?.name === 'AbortError') {\n          return of({ item, status: 'cancelled', source });\n        }\n        return of({ item, status: 'error', source });\n      })\n    );\n  }\n\n  /**\n   * Mutate queue item, and return new queue\n   * @param cid\n   * @param changes\n   * @returns\n   */\n  private mutateQueueItem(cid: string, changes: Partial<QueueItem<T>>) {\n    const queue = this.queue$.value;\n    const item = queue.get(cid);\n    if (item) {\n      queue.set(cid, { ...item, ...changes });\n    }\n\n    return this.queue$.next(queue);\n  }\n\n  private removeAndNext(cid: string): void {\n    const queue = this.queue$.value;\n    queue.delete(cid);\n    this.queue$.next(queue);\n  }\n\n  // reset status and switch to next source\n  private switchSourceAndNext(\n    item: QueueItem<T>,\n    nextSource: QueueSource\n  ): void {\n    item.callbacks.map((callback) => callback(item.cid, 'pending', nextSource));\n\n    this.mutateQueueItem(item.cid, { status: 'pending', source: nextSource });\n  }\n\n  private cancelDeprioritizedItems(queue: QueueMap<T>): QueueMap<T> {\n    (['node', 'gateway'] as IpfsContentSource[]).forEach((source) => {\n      Array.from(this.executing[source]).forEach((cid) => {\n        const item = queue.get(cid);\n\n        if (item && getQueueItemTotalPriority(item) < 0 && item.controller) {\n          // abort request and move to pending\n          item.controller.abort('cancelled');\n          item.callbacks.map((callback) =>\n            callback(item.cid, 'pending', item.source)\n          );\n\n          queue.set(cid, { ...item, status: 'pending' });\n\n          this.executing[source].delete(cid);\n        }\n      });\n    });\n\n    return queue;\n  }\n\n  private releaseExecution(cid: string) {\n    // eslint-disable-next-line no-restricted-syntax\n    Object.keys(this.executing).forEach((key) =>\n      this.executing[key as IpfsContentSource].delete(cid)\n    );\n  }\n\n  constructor(\n    strategy: QueueStrategy = strategies.embedded,\n    queueDebounceMs = QUEUE_DEBOUNCE_MS\n  ) {\n    this.strategy = strategy;\n    this.queueDebounceMs = queueDebounceMs;\n\n    // Little hack to handle keep-alive connection to swarm cyber node\n    // Fix some lag with node peers(when it shown swarm node in peers but not  connected anymore)\n    interval(CONNECTION_KEEPER_RETRY_MS)\n      .pipe(filter(() => this.queue$.value.size > 0 && !!this.node))\n      .subscribe(() => this.node!.reconnectToSwarm(this.lastNodeCallTime));\n\n    this.queue$\n      .pipe(\n        // tap((queue) => console.log('---tap', queue)),\n        debounceTime(this.queueDebounceMs),\n        map((queue) => this.cancelDeprioritizedItems(queue)),\n        mergeMap((queue) => {\n          const workItems = this.getItemBySourceAndPriority(queue);\n          // console.log('---workItems', workItems);\n          if (workItems.length > 0) {\n            // wake up connnection to swarm cyber node\n            this.node?.reconnectToSwarm(this.lastNodeCallTime);\n\n            return merge(...workItems.map((item) => this.fetchData$(item)));\n          }\n          return EMPTY;\n        })\n      )\n      .subscribe(({ item, status, source, result }) => {\n        const { cid } = item;\n        const callbacks = this.queue$.value.get(cid)?.callbacks || [];\n        // fix to process dublicated items\n        // debugCid(cid, 'subscribe', cid, source, status, result, callbacks);\n\n        callbacks.map((callback) => callback(cid, status, source, result));\n\n        // HACK to use with GracePeriod for reconnection\n        if (source === 'node') {\n          this.lastNodeCallTime = Date.now();\n        }\n\n        this.executing[source].delete(cid);\n\n        // success execution -> next\n        if (status === 'completed' || status === 'cancelled') {\n          // debugCid(cid, '------done', item, status, source, result);\n          this.removeAndNext(cid);\n        } else {\n          // debugCid(cid, '------error', item, status, source, result);\n          // Retry -> (next sources) or -> next\n          const nextSource = this.strategy.getNextSource(source);\n\n          if (nextSource) {\n            this.switchSourceAndNext(item, nextSource);\n          } else {\n            this.removeAndNext(cid);\n            // notify thatn nothing found from all sources\n            callbacks.map((callback) =>\n              callback(cid, 'not_found', source, result)\n            );\n          }\n        }\n      });\n  }\n\n  public enqueue(\n    cid: string,\n    callback: QueueItemCallback<T>,\n    options: QueueItemOptions = {}\n  ): void {\n    const queue = this.queue$.value;\n\n    const existingItem = queue.get(cid);\n\n    // In case if item already in queue,\n    // just attach one more callback to quieued item\n    if (existingItem) {\n      this.mutateQueueItem(cid, {\n        callbacks: [...existingItem.callbacks, callback],\n      });\n    } else {\n      const source = options.initialSource || this.strategy.order[0];\n      const item: QueueItem<T> = {\n        cid,\n        callbacks: [callback],\n        source, // initial method to fetch\n        status: 'pending',\n        postProcessing: true, // by default rune-post-processing enabled\n        ...options,\n      };\n\n      callback(cid, 'pending', source);\n\n      queue.set(cid, item);\n      this.queue$.next(queue);\n    }\n  }\n\n  public enqueueAndWait(\n    cid: string,\n    options: QueueItemOptions = {}\n  ): Promise<QueueItemAsyncResult<T> | undefined> {\n    return new Promise((resolve) => {\n      const callback = ((cid, status, source, result) => {\n        if (status === 'completed' || status === 'not_found') {\n          resolve({ status, source, result });\n        }\n      }) as QueueItemCallback<T>;\n\n      this.enqueue(cid, callback, options);\n    });\n  }\n\n  public updateViewPortPriority(cid: string, viewPortPriority: number) {\n    this.mutateQueueItem(cid, { viewPortPriority });\n  }\n\n  public cancel(cid: string): void {\n    const queue = this.queue$.value;\n    const item = queue.get(cid);\n    if (item) {\n      // If item has no abortController we can just remove it,\n      // otherwise abort&keep-to-finalize\n      if (!item.controller) {\n        this.removeAndNext(cid);\n      } else {\n        item.controller.abort('cancelled');\n      }\n    }\n  }\n\n  public cancelByParent(parent: string): void {\n    const queue = this.queue$.value;\n\n    queue.forEach((item, cid) => {\n      if (item.parent === parent) {\n        this.releaseExecution(cid);\n        item.controller?.abort('cancelled');\n        queue.delete(cid);\n      }\n    });\n\n    this.queue$.next(queue);\n  }\n\n  public clear(): void {\n    const queue = this.queue$.value;\n\n    queue.forEach((item, cid) => {\n      this.releaseExecution(cid);\n      item.controller?.abort('cancelled');\n      queue.delete(cid);\n    });\n\n    this.queue$.next(new Map());\n  }\n\n  public getQueueMap(): QueueMap<T> {\n    return this.queue$.value;\n  }\n\n  public getQueueList(): QueueItem<T>[] {\n    return Array.from(this.queue$.value.values());\n  }\n\n  public getStats(): QueueStats[] {\n    const fn = R.pipe(\n      R.countBy<QueueItem<T>>(R.prop('status')),\n      R.toPairs,\n      R.map(R.zipObj(['status', 'count']))\n    );\n\n    return fn(this.getQueueList()) as QueueStats[];\n  }\n}\n\n// TODO: MOVE TO SEPARATE FILE AS GLOBAL VARIABLE\n// const queueManager = new QueueManager<IPFSContentMaybe>();\n\n// if (typeof window !== 'undefined') {\n//   window.qm = queueManager;\n// }\n\n// export { queueManager };\nexport default QueueManager;\n","import { Observable } from 'rxjs';\n\n/**\n * Promise will be rejected after timeout.\n *\n * @param promise\n * @param timeout ms\n * @param abortController trigger abort\n * @returns\n */\nexport async function withTimeout<T>(\n  promise: Promise<T>,\n  timeout: number,\n  abortController?: AbortController\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) => {\n      const timer = setTimeout(() => {\n        abortController?.abort('timeout');\n        clearTimeout(timer);\n        reject(new DOMException('timeout', 'AbortError'));\n      }, timeout);\n    }),\n  ]);\n}\n\n/**\n * Convert promise to observable\n * @param promiseFactory\n * @returns\n */\nexport function promiseToObservable<T>(promiseFactory: () => Promise<T>) {\n  return new Observable<T>((observer) => {\n    promiseFactory()\n      .then((response) => {\n        observer.next(response);\n        observer.complete();\n      })\n      .catch((error) => {\n        console.log('----promiseToObservable error', error); //, error\n        observer.error(error);\n      });\n  });\n}\n\nexport function convertTimeToMilliseconds(timeValue: string | number): number {\n  if (typeof timeValue === 'number') {\n    return timeValue;\n  }\n  const numericValue = parseFloat(timeValue);\n\n  const unit = timeValue\n    .replace(numericValue.toString(), '')\n    .trim()\n    .toLowerCase();\n\n  switch (unit) {\n    case 'ms':\n    case '':\n      return numericValue;\n    case 's':\n      return numericValue * 1000;\n    case 'm':\n      return numericValue * 60 * 1000;\n    case 'h':\n      return numericValue * 60 * 60 * 1000;\n    case 'd':\n      return numericValue * 24 * 60 * 60 * 1000;\n    default:\n      throw new Error(`Invalid time unit: ${unit}`);\n  }\n}\n\nexport function debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n","import { PinType } from 'ipfs-core-types/src/pin';\n\nexport interface Column {\n  column: string;\n  type: 'String' | 'Int' | 'Bool' | 'Float';\n  is_key?: boolean;\n  index: number;\n  is_default: boolean;\n}\nexport interface TableSchema {\n  keys: string[];\n  values: string[];\n  columns: Record<string, Column>;\n}\nexport type DBValue = string | number | boolean;\nexport interface IDBResult {\n  headers: string[];\n  rows: Array<Array<DBValue>>;\n  ok: true;\n}\nexport interface IDBResultError {\n  code: string;\n  display: string;\n  message: string;\n  severity: string;\n  ok: false;\n}\n\n// example of db optimization for classifiers\nexport const PinTypeMap: Record<Exclude<PinType, 'all'>, number> = {\n  indirect: -1,\n  direct: 0,\n  recursive: 1,\n};\n\nexport type DBSchema = Record<string, TableSchema>;\nexport interface DBResultWithColIndex extends IDBResult {\n  index: Record<string, number>;\n}\n\nexport type IndexedDbWriteMessage = {\n  type: 'indexeddb_write';\n  value: number;\n};\n","import { IndexedDbWriteMessage } from '../../CozoDb/types';\nimport {\n  SyncEntryMessage,\n  WorkerStatusMessage,\n  ServiceStatusMessage,\n} from '../types';\n\nconst CYB_BROADCAST_CHANNEL = 'cyb-broadcast-channel';\n\nexport type BroadcastChannelMessage =\n  | WorkerStatusMessage\n  | SyncEntryMessage\n  | IndexedDbWriteMessage\n  | ServiceStatusMessage;\n\nclass BcChannel {\n  private channel: BroadcastChannel;\n\n  constructor(\n    onMessage?: (msg: MessageEvent<BroadcastChannelMessage>) => void\n  ) {\n    this.channel = new BroadcastChannel(CYB_BROADCAST_CHANNEL);\n\n    if (onMessage) {\n      this.channel.onmessage = (event) => onMessage(event);\n    }\n  }\n\n  post(msg: BroadcastChannelMessage) {\n    this.channel.postMessage(msg);\n  }\n}\n\nexport default BcChannel;\n","async function* arrayToAsyncIterable<T>(array: T[]): AsyncIterable<T> {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const item of array) {\n    yield item;\n  }\n}\n\nasync function asyncIterableBatchProcessor<T, K>(\n  items: AsyncIterable<T>,\n  batchProcess: (arg: T[]) => Promise<K>,\n  batchSize = 10\n): Promise<void> {\n  let batch = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const item of items) {\n    batch.push(item);\n    if (batch.length === batchSize) {\n      await batchProcess(batch);\n      batch = [];\n    }\n  }\n  // process the rest\n  if (batch.length > 0) {\n    await batchProcess(batch);\n  }\n}\n\nexport { arrayToAsyncIterable, asyncIterableBatchProcessor };\n","import { LsResult } from 'ipfs-core-types/src/pin';\nimport { IPFSContent } from 'src/utils/ipfs/ipfs';\nimport { Transaction } from 'src/types/transaction';\nimport { PinTypeMap } from './types';\n\nexport const mapParticleToEntity = (particle: IPFSContent): any => {\n  const { cid, result, meta, textPreview } = particle;\n  const { size, mime, type, blocks, sizeLocal } = meta;\n\n  // hack to fix string command\n  const text = textPreview?.replace(/\"/g, \"'\") || '';\n  return {\n    cid,\n    size,\n    mime: mime || 'unknown',\n    type,\n    text,\n    sizeLocal: sizeLocal || -1,\n    blocks: blocks || 0,\n  };\n};\n\n//TODO: REFACTOR\nexport const mapPinToEntity = (pin: LsResult) => ({\n  cid: pin.cid.toString(),\n  type: PinTypeMap[pin.type],\n});\n\nexport const mapTransactionToEntity = (tx: Transaction) => {\n  const { transaction_hash, transaction, type, value } = tx;\n  return {\n    hash: transaction_hash,\n    type,\n    timestamp: new Date(transaction.block.timestamp).getTime(),\n    value: JSON.stringify(value),\n    success: transaction.success,\n  };\n};\n","import { getIPFSContent } from 'src/services/ipfs/utils/utils-ipfs';\nimport { IpfsNode, IPFSContent } from 'src/services/ipfs/ipfs';\nimport {\n  asyncIterableBatchProcessor,\n  arrayToAsyncIterable,\n} from 'src/utils/async/iterable';\n\nimport {\n  mapParticleToEntity,\n  mapPinToEntity,\n} from 'src/services/CozoDb/mapping';\n\nimport { DbWorkerApi } from 'src/services/backend/workers/db/worker';\n\nimport { onProgressCallback, onCompleteCallback } from './types';\n\nconst importPins = async (\n  node: IpfsNode,\n  dbApi: DbWorkerApi,\n  onProgress?: onProgressCallback,\n  onComplete?: onCompleteCallback\n) => {\n  let conter = 0;\n  await asyncIterableBatchProcessor(\n    node.ls(),\n    async (pinsBatch) => {\n      // console.log('----importPins ', pinsBatch);\n\n      const pinsEntities = pinsBatch.map(mapPinToEntity);\n      conter += pinsBatch.length;\n      await dbApi.executeBatchPutCommand(\n        'pin',\n        pinsEntities,\n        pinsBatch.length\n        //   (counter) => onProgress(`⏳ Imported ${counter}/${pins.length} pins.`)\n      );\n      onProgress && onProgress(conter);\n    },\n    10\n  );\n  onComplete && onComplete(conter);\n};\n\nconst importParticles = async (\n  node: IpfsNode,\n  cids: string[],\n  dbApi: DbWorkerApi,\n  onProgress?: onProgressCallback,\n  onComplete?: onCompleteCallback\n) => {\n  let conter = 0;\n  await asyncIterableBatchProcessor(\n    arrayToAsyncIterable(cids),\n    async (cidsBatch) => {\n      const contents = await Promise.all(\n        cidsBatch.map((cid) => getIPFSContent(cid, node))\n      );\n      const pinsEntities = contents\n        .filter((c) => !!c)\n        .map((content) => mapParticleToEntity(content as IPFSContent));\n      conter += pinsEntities.length;\n      await dbApi.executeBatchPutCommand(\n        'particle',\n        pinsEntities,\n        pinsEntities.length\n        //   (counter) => onProgress(`⏳ Imported ${counter}/${pins.length} pins.`)\n      );\n      onProgress && onProgress(conter);\n    },\n    10\n  );\n  onComplete && onComplete(conter);\n};\n\nconst importParticle = async (\n  cid: string,\n  node: IpfsNode,\n  dbApi: DbWorkerApi\n) => {\n  return getIPFSContent(cid, node).then((content) =>\n    content ? importParicleContent(content, dbApi) : false\n  );\n};\n\nconst importParicleContent = async (\n  particle: IPFSContent,\n  dbApi: DbWorkerApi\n) => {\n  try {\n    const entity = mapParticleToEntity(particle);\n    const result = (await dbApi!.executePutCommand('particle', [entity])).ok;\n    return result;\n  } catch (e) {\n    console.error('importParicleContent', e.toString(), !!dbApi);\n    return false;\n  }\n};\n\nexport { importPins, importParticles, importParicleContent, importParticle };\n","import { request } from 'graphql-request';\nimport gql from 'graphql-tag';\nimport { DbWorkerApi } from 'src/services/backend/workers/db/worker';\nimport { mapTransactionToEntity } from 'src/services/CozoDb/mapping';\nimport { Transaction } from 'src/types/transaction';\nimport { onCompleteCallback, onProgressCallback } from './types';\n\nconst messagesByAddress = gql(`\n  query MyQuery($address: _text, $limit: bigint, $offset: bigint) {\n  messages_by_address(args: {addresses: $address, limit: $limit, offset: $offset, types: \"{}\"},\n    order_by: {transaction: {block: {height: desc}}}) {\n    transaction_hash\n    value\n    transaction {\n      success\n      block {\n        timestamp\n      }\n    }\n    type\n  }\n}\n`);\n\nconst BATCH_LIMIT = '100';\n\ntype TransactionsByAddressResponse = {\n  messages_by_address: Transaction[];\n};\n\nconst fetchTransactions = async (\n  address: string,\n  cyberIndexUrl: string,\n  offset = 0\n) => {\n  const res = await request<TransactionsByAddressResponse>(\n    cyberIndexUrl,\n    messagesByAddress,\n    {\n      address: `{${address}}`,\n      limit: BATCH_LIMIT,\n      offset,\n    }\n  );\n  return res.messages_by_address;\n};\n\nasync function* fetchTransactionsAsyncIterable(\n  address: string,\n  cyberIndexUrl: string\n): AsyncIterable<ReturnType<typeof mapTransactionToEntity>[]> {\n  let offset = 0;\n  while (true) {\n    // eslint-disable-next-line no-await-in-loop\n    const items = await fetchTransactions(address, cyberIndexUrl, offset);\n    if (items.length === 0) {\n      break;\n    }\n    const txEntries = items.map((t) => mapTransactionToEntity(t));\n    yield txEntries;\n    offset += txEntries.length;\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nconst importTransactions = async (\n  dbApi: DbWorkerApi,\n  address: string,\n  cyberIndexUrl: string,\n  onProgress?: onProgressCallback,\n  onComplete?: onCompleteCallback\n) => {\n  console.log('---importTransactions');\n  let conter = 0;\n  const transactionsAsyncIterable = fetchTransactionsAsyncIterable(\n    address,\n    cyberIndexUrl\n  );\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const entries of transactionsAsyncIterable) {\n    conter += entries.length;\n    await dbApi.executeBatchPutCommand('transaction', entries, entries.length);\n    onProgress && onProgress(conter);\n  }\n  onComplete && onComplete(conter);\n};\n\nexport { importTransactions };\n","import type { TransferHandler } from 'comlink';\nimport { IPFSContent } from 'src/services/ipfs/ipfs';\n\ntype IPFSContentTransferable = Omit<IPFSContent, 'result'> & {\n  port: MessagePort;\n};\n\nfunction createAsyncIterable(port: MessagePort): AsyncIterable<Uint8Array> {\n  return {\n    async *[Symbol.asyncIterator](): AsyncGenerator<\n      Uint8Array,\n      void,\n      undefined\n    > {\n      let done = false;\n      while (!done) {\n        // eslint-disable-next-line no-loop-func\n        const promise = new Promise<Uint8Array | null>((resolve) => {\n          // resolve = res;\n          port.onmessage = (event: MessageEvent) => {\n            if (event.data === null) {\n              done = true;\n              resolve(null);\n            } else {\n              resolve(event.data);\n            }\n          };\n        });\n        // eslint-disable-next-line no-await-in-loop\n        const value = await promise;\n        // eslint-disable-next-line no-await-in-loop\n        if (value !== null) {\n          yield value;\n        }\n      }\n    },\n  };\n}\n\nconst IPFSContentTransferHandler: TransferHandler<\n  IPFSContent | undefined,\n  IPFSContentTransferable | null\n> = {\n  canHandle: (obj: IPFSContent | undefined) =>\n    obj && obj.result && typeof obj.result[Symbol.asyncIterator] === 'function',\n  serialize(obj: IPFSContent) {\n    if (obj === undefined) {\n      return [null, []];\n    }\n    const { result, ...rest } = obj;\n    const { port1, port2 } = new MessageChannel();\n    if (result) {\n      (async () => {\n        // eslint-disable-next-line no-restricted-syntax\n        for await (const value of result) {\n          port1.postMessage(value);\n        }\n        port1.postMessage(null); // Send  \"end\" message\n\n        port1.close();\n      })();\n    }\n    return [{ ...rest, port: port2 }, [port2]];\n  },\n  deserialize(serializedObj: IPFSContentTransferable | null) {\n    if (!serializedObj) {\n      return undefined;\n    }\n    const { port, ...rest } = serializedObj;\n\n    return {\n      ...rest,\n      result: createAsyncIterable(port),\n    };\n  },\n};\n\nexport { IPFSContentTransferHandler };\n","import { wrap, Remote, expose, transferHandlers } from 'comlink';\nimport { IPFSContentTransferHandler } from './serializers';\n\ntype WorkerType = SharedWorker | Worker;\n\nconst isSharedWorkersSupported = typeof SharedWorker !== 'undefined';\n\nconst isSharedWorkerUsed = isSharedWorkersSupported && !process.env.IS_DEV;\n\n// apply serializers for custom types\nfunction installTransferHandlers() {\n  transferHandlers.set('IPFSContent', IPFSContentTransferHandler);\n}\n\nfunction safeStringify(obj: any): string {\n  try {\n    return JSON.stringify(obj);\n  } catch (error) {\n    return String(obj);\n  }\n}\n\n// Override console.log to send logs to main thread\nfunction overrideLogging(worker: Worker | MessagePort) {\n  const consoleLogMap = {\n    log: { original: console.log },\n    error: { original: console.error },\n    warn: { original: console.warn },\n  };\n  const replaceConsoleLog = (method: keyof typeof consoleLogMap) => {\n    const { original } = consoleLogMap[method];\n\n    consoleLogMap[method].original = console[method];\n\n    console[method] = (...args) => {\n      original.apply(console, args);\n      const serializableArgs = args.map((arg) => safeStringify(arg));\n\n      worker.postMessage({ type: 'console', method, args: serializableArgs });\n    };\n  };\n\n  Object.keys(consoleLogMap).forEach((method) =>\n    replaceConsoleLog(method as keyof typeof consoleLogMap)\n  );\n}\n\n// Install handlers for logging from worker\nfunction installLoggingHandler(worker: Worker | MessagePort, name: string) {\n  // Add event listener\n  worker.addEventListener('message', (event) => {\n    if (event.data.type === 'console') {\n      const { method, args } = event.data;\n\n      console[method](name, ...args);\n    }\n  });\n}\n\n// Create Shared Worker with fallback to usual Worker(in case of DEV too)\nexport function createWorkerApi<T>(\n  workerUrl: URL,\n  workerName: string\n): { worker: WorkerType; apiProxy: Remote<T> } {\n  installTransferHandlers();\n  //&& !process.env.IS_DEV\n  if (isSharedWorkerUsed) {\n    const worker = new SharedWorker(workerUrl, { name: workerName });\n    installLoggingHandler(worker.port, workerName);\n    return { worker, apiProxy: wrap<T>(worker.port) };\n  }\n\n  const worker = new Worker(workerUrl);\n  // installLoggingHandler(worker, workerName);\n  return { worker, apiProxy: wrap<T>(worker) };\n}\n\nexport function exposeWorkerApi<T>(worker: WorkerType, api: T) {\n  installTransferHandlers();\n  if (typeof worker.onconnect !== 'undefined') {\n    worker.onconnect = (e) => {\n      const port = e.ports[0];\n      overrideLogging(port);\n\n      expose(api, port);\n    };\n  } else {\n    // overrideLogging(worker);\n    expose(api);\n  }\n}\n","import { proxy } from 'comlink';\n\nimport { initIpfsNode } from 'src/services/ipfs/node/factory';\n\nimport {\n  CybIpfsNode,\n  IPFSContent,\n  IPFSContentMaybe,\n  IpfsContentType,\n  IpfsOptsType,\n} from 'src/services/ipfs/ipfs';\n\nimport QueueManager from 'src/services/QueueManager/QueueManager';\n\nimport { DbWorkerApi } from 'src/services/backend/workers/db/worker';\n\nimport { PinTypeMap } from 'src/services/CozoDb/types';\n\nimport BcChannel from 'src/services/backend/channels/BroadcastChannel';\n\nimport {\n  ServiceStatus,\n  SyncEntry,\n  SyncProgress,\n  WorkerStatus,\n} from 'src/services/backend/types';\nimport {\n  QueueItemCallback,\n  QueueItemOptions,\n} from 'src/services/QueueManager/QueueManager.d';\nimport {\n  importParticles,\n  importPins,\n  importParicleContent,\n  importParticle,\n} from './importers/ipfs';\nimport { importTransactions } from './importers/transactions';\nimport {\n  PlainCyberLink,\n  importCyberlinks as importCyberlinks_,\n} from './importers/links';\nimport { exposeWorkerApi } from '../factoryMethods';\n\nconst backendApiFactory = () => {\n  let ipfsNode: CybIpfsNode | undefined;\n  let dbApi: DbWorkerApi | undefined;\n  const ipfsQueue = new QueueManager<IPFSContentMaybe>();\n  const channel = new BcChannel();\n\n  const postServiceStatus = (status: ServiceStatus, error?: string) =>\n    channel.post({\n      type: 'service_status',\n      value: { name: 'ipfs', status, error },\n    });\n\n  console.log('----backendApi worker constructor!');\n\n  const postWorkerStatus = (status: WorkerStatus, lastError?: string) =>\n    channel.post({ type: 'worker_status', value: { status, lastError } });\n\n  const postEntrySyncStatus = (entry: SyncEntry, state: SyncProgress) =>\n    channel.post({ type: 'sync_entry', value: { entry, state } });\n\n  const installDbApi = async (dbApiProxy: DbWorkerApi) => {\n    // proxy to worker with db\n    dbApi = dbApiProxy;\n\n    // add post processor to queue manager\n    ipfsQueue.setPostProcessor(async (content) => {\n      content &&\n        importApi.importParicleContent({ ...content, result: undefined });\n      return content;\n    });\n\n    postWorkerStatus('idle');\n  };\n\n  // TODO: refact, params need to be synced with main thread\n  const syncDrive = async (\n    address: string | null,\n    cyberIndexUrl: string\n  ): Promise<void> => {\n    try {\n      if (!address) {\n        postWorkerStatus('error', 'Wallet is not connected');\n        return;\n      }\n      if (!ipfsNode) {\n        postWorkerStatus('error', 'IPFS node is not initialized');\n        return;\n      }\n\n      if (!dbApi) {\n        postWorkerStatus('error', 'CozoDb is not initialized');\n        return;\n      }\n\n      postWorkerStatus('syncing');\n\n      ['transaction', 'pin', 'particle'].forEach((entry) =>\n        postEntrySyncStatus(entry as SyncEntry, {\n          progress: 0,\n          done: false,\n          error: undefined,\n        })\n      );\n\n      const importIpfs = async () => {\n        console.log('-----import ipfs');\n        await importPins(\n          ipfsNode!,\n          dbApi!,\n          async (progress) => postEntrySyncStatus('pin', { progress }),\n          async () => postEntrySyncStatus('pin', { done: true })\n        );\n        const pinsData = await dbApi!.executeGetCommand(\n          'pin',\n          [`type = ${PinTypeMap.recursive}`],\n          ['cid']\n        );\n        if (pinsData.ok === false) {\n          postWorkerStatus('error', pinsData.message);\n          return;\n        }\n\n        const cids = pinsData.rows.map((row) => row[0]) as string[];\n\n        await importParticles(\n          ipfsNode!,\n          cids,\n          dbApi!,\n          async (progress) => postEntrySyncStatus('particle', { progress }),\n          async () => postEntrySyncStatus('particle', { done: true })\n        );\n        console.log('-----import ipfs done');\n      };\n\n      const transactionPromise = importTransactions(\n        dbApi,\n        address,\n        cyberIndexUrl,\n        async (progress) => postEntrySyncStatus('transaction', { progress }),\n        async (total) => postEntrySyncStatus('transaction', { done: true })\n      );\n      // const transactionPromise = Promise.resolve();\n      const ipfsPromise = importIpfs();\n      //\n      await Promise.all([transactionPromise, ipfsPromise]);\n\n      postWorkerStatus('idle');\n    } catch (e) {\n      console.error('syncDrive', e);\n      postWorkerStatus('error', e.toString());\n    }\n  };\n\n  const importApi = {\n    importParicleContent: async (particle: IPFSContent) =>\n      importParicleContent(particle, dbApi!),\n    importCyberlinks: async (links: PlainCyberLink[]) =>\n      importCyberlinks_(links, dbApi!),\n    importParticle: async (cid: string) =>\n      importParticle(cid, ipfsNode!, dbApi!),\n  };\n\n  const stopIpfs = async () => {\n    if (ipfsNode) {\n      await ipfsNode.stop();\n    }\n    postServiceStatus('inactive');\n  };\n\n  const startIpfs = async (ipfsOpts: IpfsOptsType) => {\n    try {\n      if (ipfsNode) {\n        console.log('Ipfs node already started!');\n        await ipfsNode.stop();\n      }\n      postServiceStatus('starting');\n      ipfsNode = await initIpfsNode(ipfsOpts);\n      ipfsQueue.setNode(ipfsNode);\n      postServiceStatus('started');\n      return proxy(ipfsNode);\n    } catch (err) {\n      console.log('----ipfs node init error ', err);\n      const msg = err instanceof Error ? err.message : (err as string);\n      postServiceStatus('error', msg);\n      throw Error(msg);\n    }\n  };\n\n  const ipfsApi = {\n    start: startIpfs,\n    stop: stopIpfs,\n    config: async () => ipfsNode?.config,\n    info: async () => ipfsNode?.info(),\n    fetchWithDetails: async (cid: string, parseAs?: IpfsContentType) =>\n      ipfsNode?.fetchWithDetails(cid, parseAs),\n    enqueue: async (\n      cid: string,\n      callback: QueueItemCallback<IPFSContentMaybe>,\n      options: QueueItemOptions\n    ) => ipfsQueue!.enqueue(cid, callback, options),\n    enqueueAndWait: async (cid: string, options?: QueueItemOptions) =>\n      ipfsQueue!.enqueueAndWait(cid, options),\n    dequeue: async (cid: string) => ipfsQueue.cancel(cid),\n    dequeueByParent: async (parent: string) => ipfsQueue.cancelByParent(parent),\n    clearQueue: async () => ipfsQueue.clear(),\n  };\n\n  return {\n    installDbApi,\n    syncDrive,\n    ipfsApi: proxy(ipfsApi),\n    importApi: proxy(importApi),\n  };\n};\n\nconst backendApi = backendApiFactory();\n\nexport type BackendWorkerApi = typeof backendApi;\n\n// Expose the API to the main thread as shared/regular worker\nexposeWorkerApi(self, backendApi);\n","import { DbWorkerApi } from 'src/services/backend/workers/db/worker';\n\nexport type PlainCyberLink = {\n  from: string;\n  to: string;\n  neuronAddress?: string;\n};\n\nconst importCyberlink = async ({\n  dbApi,\n  link,\n}: {\n  dbApi: DbWorkerApi;\n  link: PlainCyberLink;\n}) => {\n  try {\n    const { from, to, neuronAddress } = link;\n    const entity = { from, to, neuron_address: neuronAddress };\n    const result = (await dbApi!.executePutCommand('link', [entity])).ok;\n    return result;\n  } catch (e) {\n    console.error('importCyberlink', e);\n    return false;\n  }\n};\n\nconst importCyberlinks = async (\n  links: PlainCyberLink[],\n  dbApi: DbWorkerApi\n) => {\n  try {\n    await dbApi.executeBatchPutCommand(\n      'link',\n      links.map((l) => ({ ...l, neuron_address: '' })),\n      100\n    );\n  } catch (e) {\n    console.error('importCyberlinks', e);\n  }\n};\n\nexport { importCyberlink, importCyberlinks };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [164,393,937,972], function() { return __webpack_require__(81538); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames not based on template\n\tif (chunkId === 164) return \"164.118b6e0f.js\";\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"393\":\"c32e50dc\",\"827\":\"89ce62da\",\"937\":\"c378c2ab\",\"972\":\"934bcf22\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t467: 1,\n\t33: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkcyb\"] = self[\"webpackChunkcyb\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","leafPrototypes","getProto","next","stringToCid","s","stringToIpfsPath","CYBER_NODE_SWARM_PEER_ID","CYBERNODE_SWARM_ADDR_WSS","CYBERNODE_SWARM_ADDR_TCP","CYBER_GATEWAY_URL","nodeType","_config","_isStarted","config","this","isStarted","response","node","get","gatewayUrl","address","nodeAddress","port","async","options","initConfig","window","toCid","console","log","swarm","localAddrs","map","a","toString","cid","files","stat","withLocal","size","then","result","type","sizeLocal","local","blocks","cat","content","add","pin","peers","c","peer","addr","bootstrap","connect","ls","repoSize","stats","repo","responseId","id","agentVersion","addOptionsV0","cidVersion","rawLeaves","blockstore","open","datastore","libp2p","bootstrapList","transports","rtcConfiguration","iceServers","urls","credential","username","discoverRelays","connectionEncryption","streamMuxers","connectionGater","denyDialMultiaddr","peerDiscovery","list","services","identify","libp2pFactory","fs","addEventListener","evt","peerId","detail","conn","getConnections","transportsByAddr","Object","fromEntries","remoteAddr","protoCodes","v","name","debug","getMultiaddrs","fileSize","localFileSize","dagSize","mtime","optionsV0","File","fileName","arrayBuffer","data","Uint8Array","addFile","path","TextEncoder","encode","addBytes","cid_","pins","isPinned","remotePeer","stop","start","dial","iterable","item","metadata","toV0","mapToLsResult","host","relay","enabled","hop","preload","API","HTTPHeaders","Addresses","Gateway","Swarm","Delegates","Discovery","MDNS","Enabled","Interval","webRTCStar","Bootstrap","Pubsub","ConnMgr","HighWater","LowWater","DisableNatPortMap","Routing","Type","filter","filters","nat","EXPERIMENTAL","ipnsPubsub","Number","getMimeFromUint8Array","raw","fileType","mime","PATTERN_IPFS_HASH","PATTERN_HTTP","createImgData","rawData","basic","parseArrayLikeToDetails","onProgress","meta","link","gateway","initialType","includes","detectContentType","indexOf","bytesDownloaded","byteLength","chunks","ReadableStream","reader","getReader","readStream","done","value","push","read","Symbol","asyncIterator","chunk","error","getResponseResult","Buffer","from","dataBase64","length","match","string","newString","trim","slice","test","isHtml","text","shortenString","blob","Blob","URL","createObjectURL","e","createTextPreview","array","previewLength","db","version","stores","following","ipfsContentAddtToInddexdDB","dbValue","cluster","file","dataFile","status","loadIPFSContentFromDb","textPreview","source","emptyMeta","fetchIPFSContentMeta","signal","fetchIPFSContentFromNode","controller","controllerLegacy","AbortController","timer","setTimeout","abort","startTime","Date","now","statsDoneTime","statsTime","allowedSize","clearTimeout","availableDownload","firstChunk","offset","fullyDownloaded","stream","catTime","pinTime","fetchIPFSContentFromGateway","isExternalNode","contentUrl","fetch","method","body","flushResults","Promise","resolve","flush","firstChunkStream","fullStream","tee","firstReader","restReader","asyncIterable","toAsyncIterableWithMime","getIPFSContent","callBackFuncStatus","dataRsponseDb","addContenToIpfs","contentToUint8Array","nodeClassMap","helia","embedded","external","initIpfsNode","ipfsNodeType","restOptions","EnhancedClass","Base","parseAs","details","super","getPeers","find","swarmPeerId","lastConnectedTimestamp","isConnectedToSwarm","connectPeer","swarmPeerAddress","catch","err","message","withCybFeatures","instance","init","url","urlOpts","reconnectToSwarm","QueueStrategy","constructor","settings","order","getNextSource","index","QueueItemTimeoutError","Error","timeoutMs","setPrototypeOf","prototype","getQueueItemTotalPriority","priority","viewPortPriority","strategies","timeout","maxConcurrentExecutions","strategy","queueDebounceMs","queue$","BehaviorSubject","Map","postProcessItem","lastNodeCallTime","executing","Set","interval","pipe","subscribe","debounceTime","queue","cancelDeprioritizedItems","mergeMap","workItems","getItemBySourceAndPriority","merge","fetchData$","E","callbacks","callback","delete","removeAndNext","nextSource","switchSourceAndNext","switchStrategy","setPostProcessor","func","customStrategy","pendingItems","values","i","pendingBySource","itemsToExecute","queueSource","items","entries","executeCount","itemsByPriority","sort","b","queueItem","set","executionTime","promiseFactory","fetchIpfsContent","Observable","observer","complete","each","with","throwError","catchError","of","mutateQueueItem","changes","forEach","Array","releaseExecution","keys","key","enqueue","existingItem","initialSource","postProcessing","enqueueAndWait","updateViewPortPriority","cancel","cancelByParent","parent","clear","getQueueMap","getQueueList","getStats","fn","PinTypeMap","indirect","direct","recursive","onMessage","channel","BroadcastChannel","onmessage","event","post","msg","postMessage","asyncIterableBatchProcessor","batchProcess","batchSize","batch","mapParticleToEntity","particle","replace","mapPinToEntity","mapTransactionToEntity","tx","transaction_hash","transaction","hash","timestamp","block","getTime","JSON","stringify","success","importParicleContent","dbApi","entity","executePutCommand","ok","messagesByAddress","fetchTransactions","cyberIndexUrl","limit","messages_by_address","importTransactions","onComplete","conter","transactionsAsyncIterable","txEntries","t","fetchTransactionsAsyncIterable","executeBatchPutCommand","createAsyncIterable","promise","IPFSContentTransferHandler","canHandle","obj","serialize","rest","port1","port2","MessageChannel","close","deserialize","serializedObj","SharedWorker","process","env","IS_DEV","installTransferHandlers","overrideLogging","worker","consoleLogMap","original","warn","replaceConsoleLog","args","apply","serializableArgs","arg","String","safeStringify","backendApi","ipfsNode","ipfsQueue","postServiceStatus","postWorkerStatus","lastError","postEntrySyncStatus","entry","state","importApi","importCyberlinks","links","l","neuron_address","importParticle","ipfsApi","ipfsOpts","setNode","info","fetchWithDetails","dequeue","dequeueByParent","clearQueue","installDbApi","dbApiProxy","syncDrive","progress","importIpfs","pinsBatch","pinsEntities","importPins","pinsData","executeGetCommand","cids","rows","row","arrayToAsyncIterable","cidsBatch","contents","all","importParticles","transactionPromise","total","ipfsPromise","backendApiFactory","api","self","onconnect","ports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","x","__webpack_exports__","O","chunkIds","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","getPrototypeOf","__proto__","mode","ns","create","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","globalThis","Function","prop","hasOwnProperty","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}